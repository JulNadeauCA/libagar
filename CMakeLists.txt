#
# CMake Buildsystem for Agar
#
if(${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${CMAKE_CURRENT_BINARY_DIR})
	message(FATAL_ERROR "Prevented in-tree build. Please create a build directory outside of the Agar source code and run \"cmake -S ${CMAKE_SOURCE_DIR} -B .\" from there")
endif()
cmake_minimum_required(VERSION 3.12.0)

project(AGAR
	VERSION 1.7.1
	DESCRIPTION "Agar GUI System"
	HOMEPAGE_URL "https://libagar.org"
	LANGUAGES C CXX)

set(AGAR_RELEASE_NAME "Ancient Egypt")

#
# Global build options (pseudo-package).
#
add_library(agar-build-options INTERFACE)

target_compile_definitions(agar-build-options INTERFACE "-D_AGAR_INTERNAL")
target_compile_definitions(agar-build-options INTERFACE "-D_DEFAULT_SOURCE")
target_compile_definitions(agar-build-options INTERFACE "-D_BSD_SOURCE")

if(WINDOWS_STORE)
	target_compile_definitions(agar-build-options INTERFACE "-DAGAR_BUILDING_WINRT=1")
	target_compile_options(agar-build-options INTERFACE "-ZW")
endif()
if(MSVC)
	target_compile_definitions(agar-build-options INTERFACE "-D_CRT_SECURE_NO_WARNINGS")
	target_compile_definitions(agar-build-options INTERFACE "-D_CRT_SECURE_NO_DEPRECATE")
	target_compile_options(agar-build-options INTERFACE "/MP")
endif(MSVC)

#
# Standard CMake libraries
#
include(CheckLibraryExists)
include(CheckIncludeFiles)
include(CheckIncludeFile)
include(CheckSymbolExists)
include(CheckCSourceCompiles)
include(CheckCSourceRuns)
include(CheckCCompilerFlag)
include(CheckCXXCompilerFlag)
include(CheckTypeSize)
include(CheckStructHasMember)
include(CMakeDependentOption)
include(FindPkgConfig)
include(GNUInstallDirs)

#
# Import the BSDBuild tests (generated by "make configure").
# (See: https://bsdbuild.hypertriton.com/)
#
set(CMAKE_MODULE_PATH "${AGAR_SOURCE_DIR}")
set(CONFIG_DIR "${AGAR_BINARY_DIR}/include/agar/config")
include("${CMAKE_CURRENT_SOURCE_DIR}/CMakeChecks.cmake")

message("    _       _       _     ___")
message("  / _ \\   / _ \\   / _ \\  |  _ \\")
message(" | |_| | | (_| | | |_| | | |_) |")
message(" |_| |_|  \\__, | |_| |_| |_| |_|")
message("          |___/                 ")
message("")
message("Agar version ${AGAR_VERSION} (\"${AGAR_RELEASE_NAME}\") in ${AGAR_SOURCE_DIR}")

#
# Agar build option defaults
#
set(SIZEOF_VOIDP ${CMAKE_SIZEOF_VOID_P})
if(CMAKE_SIZEOF_VOID_P EQUAL 8)
	set(ARCH_64 TRUE)
	#
	# Default to the Large memory model on 64-bit. It is still possible for
	# 64-bit platforms to use the Medium model (e.g., for lower memory utilization).
	#
	set(AGAR_DEFAULT_MEMORY_MODEL "L")
else()
	set(ARCH_64 FALSE)
	#
	# Default to the Medium memory model on 32-bit. It is still possible for
	# 32-bit platforms to use the Large model (e.g., for Deep Color support).
	#
	set(AGAR_DEFAULT_MEMORY_MODEL "M")
endif()

set(AGAR_SHARED_ENABLED_BY_DEFAULT ON)
set(AGAR_STATIC_ENABLED_BY_DEFAULT ON)
set(AGAR_THREADS_ENABLED_BY_DEFAULT ON)
set(AGAR_AU_ENABLED_BY_DEFAULT OFF)
set(AGAR_GUI_ENABLED_BY_DEFAULT ON)
set(AGAR_MAP_ENABLED_BY_DEFAULT ON)
set(AGAR_MATH_ENABLED_BY_DEFAULT ON)
set(AGAR_NET_ENABLED_BY_DEFAULT ON)
set(AGAR_SG_ENABLED_BY_DEFAULT ON)
set(AGAR_SK_ENABLED_BY_DEFAULT ON)
set(AGAR_VG_ENABLED_BY_DEFAULT ON)

if(EMSCRIPTEN)
	set(AGAR_SHARED_ENABLED_BY_DEFAULT OFF)
	#
	# Emscripten threads are not yet supported on all browsers.
	# Default to OFF for and expect the user to set it if needed.
	#
	set(AGAR_THREADS_ENABLED_BY_DEFAULT OFF)
endif()

if(VITA OR PSP)
	set(AGAR_SHARED_ENABLED_BY_DEFAULT OFF)
endif()

if(NOT DEFINED AGAR_SHARED_ENABLED_BY_DEFAULT)
	set(AGAR_SHARED_ENABLED_BY_DEFAULT OFF)
	if(NOT DEFINED BUILD_SHARED_LIBS)
		set(AGAR_SHARED_ENABLED_BY_DEFAULT ON)
	elseif(BUILD_SHARED_LIBS)
		set(AGAR_SHARED_ENABLED_BY_DEFAULT ON)
		set(AGAR_STATIC_ENABLED_BY_DEFAULT OFF)
	endif()
endif()

set(AGAR_GLOBAL_CFLAGS "")

#
# Which Agar libraries to build?
#
option(AGAR_AU "Build the Agar-AU library (audio extensions)" ${AGAR_AU_ENABLED_BY_DEFAULT})
option(AGAR_GUI "Build the Agar-GUI library (the Agar GUI system)" ${AGAR_GUI_ENABLED_BY_DEFAULT})
option(AGAR_MAP "Build the Agar-MAP library (2D/3D tile engine)" ${AGAR_MAP_ENABLED_BY_DEFAULT})
option(AGAR_MATH "Build the Agar-Math library (math extensions)" ${AGAR_MATH_ENABLED_BY_DEFAULT})
option(AGAR_NET "Build the Agar-Net library (network access methods)" ${AGAR_NET_ENABLED_BY_DEFAULT})
option(AGAR_SG "Build the Agar-SG library (3D scene-graph engine)" ${AGAR_SG_ENABLED_BY_DEFAULT})
option(AGAR_SK "Build the Agar-SK library (sketching engine)" ${AGAR_SK_ENABLED_BY_DEFAULT})
option(AGAR_VG "Build the Agar-VG library (vector graphics extensions)" ${AGAR_VG_ENABLED_BY_DEFAULT})
#
# Global Agar build options.
#
set(AGAR_MEMORY_MODEL ${AGAR_DEFAULT_MEMORY_MODEL} CACHE STRING "Agar memory model (S|M|L)")
option(AGAR_FLOAT "Floating-point support" ON)
option(AGAR_SHARED "Build a shared version of the library" ${AGAR_SHARED_ENABLED_BY_DEFAULT})
option(AGAR_STATIC "Build a static version of the library" ${AGAR_STATIC_ENABLED_BY_DEFAULT})
option(AGAR_STATIC_PIC "Build the static library as Position Independent Code" OFF)
option(AGAR_WARNINGS "Use recommended compiler warnings" OFF)
option(AGAR_TYPE_SAFETY "Run-time type safety checks (implied by Debug)" OFF)
option(AGAR_DEBUG_SURFACES "Trace AG_Surface operations (expensive)" OFF)
option(AGAR_ENABLE_LEGACY "Enable obsolete and deprecated interfaces" ON)
option(AGAR_THREADS "Thread safety and multithreading support" ${AGAR_THREADS_ENABLED_BY_DEFAULT})
option(AGAR_ATTRIBUTES "Enable compiler attributes and annotations" ON)
option(AGAR_INLINE_FUNCTIONS "Enable inline functions as appropriate" ON)
option(AGAR_NLS "Enable internationalization and localization" OFF)
#
# Options specific to Agar-Core.
#
option(AGAR_ENABLE_ANSI_COLOR "Support for ANSI color output" ON)
option(AGAR_ENABLE_DSO "Dynamically-loaded modules and object classes" ON)
option(AGAR_ENABLE_EXEC "The AG_Execute(3) interface" ON)
option(AGAR_ENABLE_EVENT_LOOP "The standard AG_EventLoop(3) routine" ON)
option(AGAR_ENABLE_NAMESPACES "Support for AG_Object namespaces" ON)
option(AGAR_ENABLE_NAMED_ARGS "Support for named AG_Event arguments" ON)
option(AGAR_ENABLE_SERIALIZATION "Support for file and I/O serialization" ON)
option(AGAR_ENABLE_STRING "The AG_Printf(3) formatting engine" ON)
option(AGAR_ENABLE_TIMERS "The AG_Timer(3) interface" ON)
option(AGAR_ENABLE_UNICODE "Support for Unicode" ON)
option(AGAR_ENABLE_USER "The AG_User(3) interface" ON)
option(AGAR_ENABLE_VERBOSITY "Verbose error messages" ON)

#
# Options specific to Agar-GUI (but defined globally).
#
option(AGAR_ENABLE_WIDGETS "Build the set of standard Agar GUI widgets" ON)
option(AGAR_ENABLE_WM_HINTS "Enable interaction with Window Managers" ON)

option(AGAR_TESTS "Build the Agar Test Suite (agartest)" OFF)

BB_Save_Define_Value(VERSION ${AGAR_VERSION})
BB_Save_Define_Value(RELEASE ${AGAR_RELEASE_NAME})

#
# Select the Agar memory model.
#
if("${AGAR_MEMORY_MODEL}" STREQUAL "S")
	BB_Save_Define_Value_Bare(AG_MODEL "AG_SMALL")
	BB_Save_MakeVar(MEMORY_MODEL "SMALL")
elseif("${AGAR_MEMORY_MODEL}" STREQUAL "M")
	BB_Save_Define_Value_Bare(AG_MODEL "AG_MEDIUM")
	BB_Save_MakeVar(MEMORY_MODEL "MEDIUM")
else()
	BB_Save_Define_Value_Bare(AG_MODEL "AG_LARGE")
	BB_Save_MakeVar(MEMORY_MODEL "LARGE")
endif()

#
# Set recommended compiler warnings.
#
if(AGAR_WARNINGS)
	set(AGAR_GLOBAL_CFLAGS "${AGAR_GLOBAL_CFLAGS} -Wall -Werror")
	set(AGAR_GLOBAL_CFLAGS "${AGAR_GLOBAL_CFLAGS} -Wmissing-prototypes -Wno-switch")
	if(DARWIN)
		set(AGAR_GLOBAL_CFLAGS "${AGAR_GLOBAL_CFLAGS} -Wno-deprecated-declarations")
	endif()
endif()

#
# Set build definitions from the requested options.
#
if("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
	BB_Save_Define(AG_DEBUG)
	BB_Save_Define(AG_TYPE_SAFETY)
else()
	BB_Save_Undef(AG_DEBUG)
	if(AGAR_TYPE_SAFETY)
		BB_Save_Define(AG_TYPE_SAFETY)
	else()
		BB_Save_Undef(AG_TYPE_SAFETY)
	endif()
endif()
if(AGAR_DEBUG_SURFACES)
	set(AGAR_GUI_CFLAGS "${AGAR_GUI_CFLAGS} -DDEBUG_SURFACES")
endif()

if(AGAR_ENABLE_ANSI_COLOR)
	BB_Save_Define(AG_ANSI_COLOR)
else()
	BB_Save_Undef(AG_ANSI_COLOR)
endif()

if(AGAR_ENABLE_DSO)
	BB_Save_Define(AG_ENABLE_DSO)
else()
	BB_Save_Undef(AG_ENABLE_DSO)
endif()

if(AGAR_ENABLE_EXEC)
	BB_Save_Define(AG_ENABLE_EXEC)
else()
	BB_Save_Undef(AG_ENABLE_EXEC)
endif()

if(AGAR_ENABLE_EVENT_LOOP)
	BB_Save_Define(AG_EVENT_LOOP)
else()
	BB_Save_Undef(AG_EVENT_LOOP)
endif()

if(AGAR_ENABLE_NAMESPACES)
	BB_Save_Define(AG_NAMESPACES)
else()
	BB_Save_Undef(AG_NAMESPACES)
endif()

if(AGAR_ENABLE_NAMED_ARGS)
	BB_Save_Define(AG_NAMED_ARGS)
else()
	BB_Save_Undef(AG_NAMED_ARGS)
endif()

if(AGAR_ENABLE_SERIALIZATION)
	BB_Save_Define(AG_SERIALIZATION)
else()
	BB_Save_Undef(AG_SERIALIZATION)
endif()

if(AGAR_ENABLE_STRING)
	BB_Save_Define(AG_ENABLE_STRING)
else()
	BB_Save_Undef(AG_ENABLE_STRING)
endif()

if(AGAR_ENABLE_TIMERS)
	BB_Save_Define(AG_TIMERS)
else()
	BB_Save_Undef(AG_TIMERS)
endif()

if(AGAR_ENABLE_UNICODE)
	BB_Save_Define(AG_UNICODE)
else()
	BB_Save_Undef(AG_UNICODE)
endif()

if(AGAR_ENABLE_USER)
	BB_Save_Define(AG_USER)
else()
	BB_Save_Undef(AG_USER)
endif()

if(AGAR_ENABLE_VERBOSITY)
	BB_Save_Define(AG_VERBOSITY)
else()
	BB_Save_Undef(AG_VERBOSITY)
endif()

if(AGAR_ENABLE_WIDGETS)
	BB_Save_Define(AG_WIDGETS)
else()
	BB_Save_Undef(AG_WIDGETS)
endif()

if(AGAR_ENABLE_WM_HINTS)
	BB_Save_Define(AG_WM_HINTS)
else()
	BB_Save_Undef(AG_WM_HINTS)
endif()

if(AGAR_LEGACY)
	BB_Save_Define(AG_LEGACY)
else()
	BB_Save_Undef(AG_LEGACY)
endif()

set(AGAR_CORE_CFLAGS "${AGAR_GLOBAL_CFLAGS}")
set(AGAR_CORE_LIBS "-lag_core")

set(AGAR_GUI_CFLAGS "${AGAR_GLOBAL_CFLAGS}")
set(AGAR_GUI_LIBS "-lag_gui")

message("Preprocessing C includes files...")
file(MAKE_DIRECTORY "${AGAR_BINARY_DIR}/include")
file(MAKE_DIRECTORY "${AGAR_BINARY_DIR}/include/agar")
file(MAKE_DIRECTORY "${AGAR_BINARY_DIR}/include/agar/config")
execute_process(COMMAND "perl" "${AGAR_SOURCE_DIR}/mk/gen-includes.pl" "${AGAR_BINARY_DIR}/include/agar"
	WORKING_DIRECTORY ${AGAR_SOURCE_DIR}
	COMMAND_ERROR_IS_FATAL ANY)
message("Include files generated successfully")

# Set defaults preventing destination file conflicts
set(AGAR_CMAKE_DEBUG_POSTFIX "d"
    CACHE STRING "Name suffix for debug builds")

mark_as_advanced(CMAKE_IMPORT_LIBRARY_SUFFIX AGAR_CMAKE_DEBUG_POSTFIX)

set(LIBRARY_OUTPUT_DIRECTORY "build")

set(LIBNAME agar)

if(NOT LIBTYPE)
	set(LIBTYPE SHARED)
endif()

#
# Platform detection.
#
if(WIN32)
	if(NOT WINDOWS)
		set(WINDOWS TRUE)
	endif()
elseif(UNIX AND NOT APPLE)
	if(CMAKE_SYSTEM_NAME MATCHES ".*Linux")
		set(LINUX TRUE)
	elseif(CMAKE_SYSTEM_NAME MATCHES "kFreeBSD.*")
		set(FREEBSD TRUE)
	elseif(CMAKE_SYSTEM_NAME MATCHES "kNetBSD.*|NetBSD.*")
		set(NETBSD TRUE)
	elseif(CMAKE_SYSTEM_NAME MATCHES "kOpenBSD.*|OpenBSD.*")
		set(OPENBSD TRUE)
	elseif(CMAKE_SYSTEM_NAME MATCHES ".*GNU.*")
		set(GNU TRUE)
	elseif(CMAKE_SYSTEM_NAME MATCHES ".*BSDI.*")
		set(BSDI TRUE)
	elseif(CMAKE_SYSTEM_NAME MATCHES "DragonFly.*|FreeBSD")
		set(FREEBSD TRUE)
	elseif(CMAKE_SYSTEM_NAME MATCHES "SYSV5.*")
		set(SYSV5 TRUE)
	elseif(CMAKE_SYSTEM_NAME MATCHES "Solaris.*")
		set(SOLARIS TRUE)
	elseif(CMAKE_SYSTEM_NAME MATCHES "HP-UX.*")
		set(HPUX TRUE)
	elseif(CMAKE_SYSTEM_NAME MATCHES "AIX.*")
		set(AIX TRUE)
	elseif(CMAKE_SYSTEM_NAME MATCHES "Minix.*")
		set(MINIX TRUE)
	endif()
elseif(APPLE)
	if(CMAKE_SYSTEM_NAME MATCHES ".*Darwin.*")
		set(DARWIN TRUE)
	elseif(CMAKE_SYSTEM_NAME MATCHES ".*MacOS.*")
		set(MACOSX TRUE)
	elseif(CMAKE_SYSTEM_NAME MATCHES ".*tvOS.*")
		set(TVOS TRUE)
	elseif(CMAKE_SYSTEM_NAME MATCHES ".*iOS.*")
		set(IOS TRUE)
	endif()
elseif(CMAKE_SYSTEM_NAME MATCHES "BeOS.*")
	set(BEOS TRUE)
elseif(CMAKE_SYSTEM_NAME MATCHES "Haiku.*")
	set(HAIKU TRUE)
endif()

if(UNIX AND NOT APPLE AND NOT RISCOS)
	set(UNIX_SYS ON)
else()
	set(UNIX_SYS OFF)
endif()
if(UNIX OR APPLE)
	set(UNIX_OR_MAC_SYS ON)
else()
	set(UNIX_OR_MAC_SYS OFF)
endif()

if(WINDOWS)
	set(CMAKE_SHARED_LIBRARY_PREFIX "")
endif()

set(ORIG_CMAKE_REQUIRED_FLAGS ${CMAKE_REQUIRED_FLAGS})

if(CYGWIN)
	target_include_directories(agar-build-options INTERFACE "/usr/include/mingw")

	set(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} -mno-cygwin")

	check_c_source_compiles("int main(int argc, char **argv) {}"
	    HAVE_GCC_NO_CYGWIN)

	set(CMAKE_REQUIRED_FLAGS ${ORIG_CMAKE_REQUIRED_FLAGS})

	if(HAVE_GCC_NO_CYGWIN)
		list(APPEND EXTRA_LDFLAGS "-mno-cygwin")
		list(APPEND AGAR_CORE_LIBS "-mno-cygwin")
	endif()

	set(AGAR_CORE_CFLAGS "${AGAR_CORE_CFLAGS} -I/usr/include/mingw")
endif()

# Use our generated C includes.
target_include_directories(agar-build-options BEFORE INTERFACE "${AGAR_BINARY_DIR}/include")

#
# Agar-Core source files.
#
set(SOURCE_FILES_CORE
    ${AGAR_SOURCE_DIR}/core/byteswap.c
    ${AGAR_SOURCE_DIR}/core/config.c
    ${AGAR_SOURCE_DIR}/core/core.c
    ${AGAR_SOURCE_DIR}/core/cpuinfo.c
    ${AGAR_SOURCE_DIR}/core/crc32.c
    ${AGAR_SOURCE_DIR}/core/data_source.c
    ${AGAR_SOURCE_DIR}/core/db.c
    ${AGAR_SOURCE_DIR}/core/dir.c
    ${AGAR_SOURCE_DIR}/core/dso.c
    ${AGAR_SOURCE_DIR}/core/error.c
    ${AGAR_SOURCE_DIR}/core/event.c
    ${AGAR_SOURCE_DIR}/core/exec.c
    ${AGAR_SOURCE_DIR}/core/file.c
    ${AGAR_SOURCE_DIR}/core/getopt.c
    ${AGAR_SOURCE_DIR}/core/load_integral.c
    ${AGAR_SOURCE_DIR}/core/load_real.c
    ${AGAR_SOURCE_DIR}/core/load_string.c
    ${AGAR_SOURCE_DIR}/core/load_version.c
    ${AGAR_SOURCE_DIR}/core/object.c
    ${AGAR_SOURCE_DIR}/core/string.c
    ${AGAR_SOURCE_DIR}/core/tbl.c
    ${AGAR_SOURCE_DIR}/core/text.c
    ${AGAR_SOURCE_DIR}/core/time.c
    ${AGAR_SOURCE_DIR}/core/time_dummy.c
    ${AGAR_SOURCE_DIR}/core/timeout.c
    ${AGAR_SOURCE_DIR}/core/threads.c
    ${AGAR_SOURCE_DIR}/core/vasprintf.c
    ${AGAR_SOURCE_DIR}/core/vsnprintf.c
    ${AGAR_SOURCE_DIR}/core/user.c
    ${AGAR_SOURCE_DIR}/core/user_dummy.c
    ${AGAR_SOURCE_DIR}/core/user_getenv.c
    ${AGAR_SOURCE_DIR}/core/variable.c
    ${AGAR_SOURCE_DIR}/core/vec.c)

#
# Specify the installation directories.
#
set(AGAR_PREFIX ${CMAKE_INSTALL_PREFIX})
set(AGAR_DATADIR "${AGAR_PREFIX}/share/agar")
set(AGAR_LOCALEDIR "${AGAR_DATADIR}/locale")
set(AGAR_TTFDIR "${AGAR_DATADIR}/fonts")
set(AGAR_INCLDIR "${AGAR_PREFIX}/include/agar")

BB_Save_Define_Value(PREFIX ${AGAR_PREFIX})
BB_Save_Define_Value(DATADIR ${AGAR_DATADIR})
BB_Save_Define_Value(LOCALEDIR ${AGAR_LOCALEDIR})
BB_Save_Define_Value(TTFDIR ${AGAR_TTFDIR})
BB_Save_Define_Value(INCLDIR ${AGAR_INCLDIR})

# Check for a C compiler (and extended compiler attributes).
Check_Cc()
if(AGAR_ATTRIBUTES)
	Check_Cc_Attributes()
	BB_Save_Define(AG_USE_ATTRIBUTES)
else()
	Disable_Cc_Attributes()
	BB_Save_Undef(AG_USE_ATTRIBUTES)
endif()

# Check for the host byte order.
Check_ByteOrder()

# Enable or disable inlining of specific families of Agar functions.
if(AGAR_INLINE_FUNCTIONS)
	foreach(flag_var
	    AG_INLINE_BYTESWAP AG_INLINE_ERROR AG_INLINE_IO AG_INLINE_OBJECT AG_INLINE_STRING
	    AG_INLINE_TBL AG_INLINE_THREADS AG_INLINE_VARIABLE AG_INLINE_SURFACE AG_INLINE_WIDGET)
		BB_Save_Define(${flag_var})
	endforeach()
else()
	foreach(flag_var
	    AG_INLINE_BYTESWAP AG_INLINE_ERROR AG_INLINE_IO AG_INLINE_OBJECT AG_INLINE_STRING
	    AG_INLINE_TBL AG_INLINE_THREADS AG_INLINE_VARIABLE AG_INLINE_SURFACE AG_INLINE_WIDGET)
		BB_Save_Undef(${flag_var})
	endforeach()
endif()

# Check for system headers, calls and APIs that we can use.
Check_Sys_Types_h()
Check_Sys_Stat_h()
Check_Stdlib_h()
Check_Unistd_h()
Check_Limits_h()
Check_Float_h()
Check_Math()
Check_Math_C99()
Check_Fdclose()
Check_Getpwuid()
Check_Getpwnam_r()
Check_Getenv()
Check_Getuid()
Check_Strsep()
Check_Asprintf()
Check_Snprintf()
Check_Vsnprintf()
Check_Vasprintf()
Check_Signal()
Check_Strtoll()
Check_Strtold()
Check_Dlopen()
Check_Dyld()
Check_Shl_load()
Check_Gettimeofday()
Check_Select()
Check_Glob()
Check_Getopt()
Check_Execvp()
Check_Clock_gettime()
Check_Clock_win32()
Check_Nanosleep()
Check_Kqueue()
Check_Timerfd()
Check_Csidl()
Check_Xbox()
Check_Mprotect()

# Disable floating-point support if an integer-only build is requested.
if(NOT AGAR_FLOAT)
	BB_Save_Undef(HAVE_FLOAT)
	BB_Save_Undef(HAVE_LONG_DOUBLE)
endif()

# Disable AG_Db modules (TODO?)
Disable_Db4()
Disable_Db5()
Disable_Mysql()

#
# Check for threads support.
#
if(AGAR_THREADS)
	Check_Pthreads()
	if(HAVE_PTHREADS)
		BB_Save_Define(AG_THREADS)
	else()
		BB_Save_Undef(AG_THREADS)

		if (AGAR_WARNINGS)
			#
			# Lock macros expand to no-ops and cause unused variables
			# to appear in unthreaded builds.
			#
			set(AGAR_GLOBAL_CFLAGS "${AGAR_GLOBAL_CFLAGS} -Wno-unused")
		endif()
	endif()
else()
	Disable_Pthreads()
	BB_Save_Undef(AG_THREADS)
endif()

#
# Check for libintl / gettext
#
if(AGAR_NLS)
	Check_Iconv()
	Check_Gettext()
	if(HAVE_GETTEXT)
		BB_Save_Define(ENABLE_NLS)
	else()
		BB_Save_Undef(ENABLE_NLS)
	endif()
else()
	Disable_Iconv()
	Disable_Gettext()
	BB_Save_Undef(ENABLE_NLS)
endif()

#
# Agar-Core conditionally compiled sources
#
if(NOT HAVE_SNPRINTF)
	set(SOURCE_FILES_CORE ${SOURCE_FILES_CORE} ${AGAR_SOURCE_DIR}/core/snprintf.c)
endif()
if(HAVE_CLOCK_WIN32)
	set(SOURCE_FILES_CORE ${SOURCE_FILES_CORE} ${AGAR_SOURCE_DIR}/core/time_win32.c)
endif()
if(HAVE_CLOCK_GETTIME)
	if(HAVE_NANOSLEEP)
		set(SOURCE_FILES_CORE ${SOURCE_FILES_CORE} ${AGAR_SOURCE_DIR}/core/time_posix.c)
	endif()
	if(HAVE_PTHREADS)
		set(SOURCE_FILES_CORE ${SOURCE_FILES_CORE} ${AGAR_SOURCE_DIR}/core/time_renderer.c)
	endif()
endif()

if(HAVE_GETTIMEOFDAY AND HAVE_SELECT)
	set(SOURCE_FILES_CORE ${SOURCE_FILES_CORE} ${AGAR_SOURCE_DIR}/core/time_gettimeofday.c)
endif()

if(HAVE_DB4)
	message(STATUS "HAVE DB4")
endif()
if(HAVE_DB5)
	message(STATUS "HAVE DB5")
endif()

# TODO
#if(HAVE_DB4 OR HAVE_DB5)
#	set(SOURCE_FILES_CORE ${SOURCE_FILES_CORE} ${AGAR_SOURCE_DIR}/core/db_bdb.c)
#endif()
#if(HAVE_MYSQL)
#	set(SOURCE_FILES_CORE ${SOURCE_FILES_CORE} ${AGAR_SOURCE_DIR}/core/db_mysql.c)
#endif()

if(HAVE_GETPWUID)
	set(SOURCE_FILES_CORE ${SOURCE_FILES_CORE} ${AGAR_SOURCE_DIR}/core/user_posix.c)
endif()
if(HAVE_XBOX)
	set(SOURCE_FILES_CORE ${SOURCE_FILES_CORE} ${AGAR_SOURCE_DIR}/core/user_xbox.c)
	set(SOURCE_FILES_CORE ${SOURCE_FILES_CORE} ${AGAR_SOURCE_DIR}/core/xbox.c)
endif()
if(HAVE_CSIDL)
	set(SOURCE_FILES_CORE ${SOURCE_FILES_CORE} ${AGAR_SOURCE_DIR}/core/user_win32.c)
endif()

#
# Display information
#
message(STATUS "")
message(STATUS "Agar build successfully configured with the following options:")
message(STATUS "")
message(STATUS "Platform:     ${CMAKE_SYSTEM}")
message(STATUS "64-bit:       ${ARCH_64}")
message(STATUS "Compiler:     ${CMAKE_C_COMPILER}")
message(STATUS "Agar Version: ${AGAR_VERSION}")
message(STATUS "Memory Model: ${AGAR_MEMORY_MODEL}")

set(AGAR_LIBS_ENABLED " CORE")
set(AGAR_LIBS_DISABLED "")
if(AGAR_AU)
	set(AGAR_LIBS_ENABLED "${AGAR_LIBS_ENABLED} AU")
else()
	set(AGAR_LIBS_DISABLED "${AGAR_LIBS_DISABLED} AU")
endif()
if(AGAR_GUI)
	set(AGAR_LIBS_ENABLED "${AGAR_LIBS_ENABLED} GUI")
else()
	set(AGAR_LIBS_DISABLED "${AGAR_LIBS_DISABLED} GUI")
endif()
if(AGAR_MAP)
	set(AGAR_LIBS_ENABLED "${AGAR_LIBS_ENABLED} MAP")
else()
	set(AGAR_LIBS_DISABLED "${AGAR_LIBS_DISABLED} MAP")
endif()
if(AGAR_MATH)
	set(AGAR_LIBS_ENABLED "${AGAR_LIBS_ENABLED} MATH")
else()
	set(AGAR_LIBS_DISABLED "${AGAR_LIBS_DISABLED} MATH")
endif()
if(AGAR_NET)
	set(AGAR_LIBS_ENABLED "${AGAR_LIBS_ENABLED} NET")
else()
	set(AGAR_LIBS_DISABLED "${AGAR_LIBS_DISABLED} NET")
endif()
if(AGAR_SG)
	set(AGAR_LIBS_ENABLED "${AGAR_LIBS_ENABLED} SG")
else()
	set(AGAR_LIBS_DISABLED "${AGAR_LIBS_DISABLED} SG")
endif()
if(AGAR_SK)
	set(AGAR_LIBS_ENABLED "${AGAR_LIBS_ENABLED} SK")
else()
	set(AGAR_LIBS_DISABLED "${AGAR_LIBS_DISABLED} SK")
endif()
if(AGAR_VG)
	set(AGAR_LIBS_ENABLED "${AGAR_LIBS_ENABLED} VG")
else()
	set(AGAR_LIBS_DISABLED "${AGAR_LIBS_DISABLED} VG")
endif()

message(STATUS "Enable Libs: ${AGAR_LIBS_ENABLED}")
message(STATUS "Disable Libs:${AGAR_LIBS_DISABLED}")

if("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
	message(STATUS "Build Type:   DEBUG")
	message(STATUS "")
	message(STATUS "CMAKE_C_FLAGS_DEBUG:   ${CMAKE_C_FLAGS_DEBUG}")
	message(STATUS "CMAKE_CXX_FLAGS_DEBUG: ${CMAKE_CXX_FLAGS_DEBUG}")
else()
	message(STATUS "Build Type:   RELEASE")
	message(STATUS "")
endif()
message(STATUS "CFLAGS:        ${CMAKE_C_FLAGS}")
message(STATUS "EXTRA_CFLAGS:  ${EXTRA_CFLAGS}")
message(STATUS "EXTRA_LDFLAGS: ${EXTRA_LDFLAGS}")
message(STATUS "EXTRA_LIBS:    ${EXTRA_LIBS}")
message(STATUS "")
message(STATUS "Shared Library: ${AGAR_SHARED}")
message(STATUS "Static Library: ${AGAR_STATIC} (Static PIC: ${AGAR_STATIC_PIC})")

# Ensure that the extra cflags are used at compile time
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${EXTRA_CFLAGS}")

if(AGAR_SHARED)
	BB_Save_MakeVar(LIB_SHARED "Yes")

	add_library(ag_core SHARED ${SOURCE_FILES_CORE})
	target_compile_definitions(ag_core PUBLIC _AGAR_CORE_INTERNAL)

	if(APPLE)
		set_target_properties(ag_core PROPERTIES
		    MACOSX_RPATH 1
		    OUTPUT_NAME "ag_core-${AGAR_VERSION_MAJOR}.${AGAR_VERSION_MINOR}")
	elseif(UNIX AND NOT ANDROID)
		set_target_properties(ag_core PROPERTIES
		    VERSION ${AGAR_VERSION} SOVERSION ${AGAR_VERSION_MAJOR}
		    OUTPUT_NAME "ag_core-${AGAR_VERSION}")
	else()
		if(WINDOWS OR CYGWIN)
			set_target_properties(ag_core PROPERTIES DEFINE_SYMBOL DLL_EXPORT)
		endif()
		set_target_properties(ag_core PROPERTIES
		    VERSION ${AGAR_VERSION} SOVERSION ${AGAR_VERSION_MAJOR}
		    OUTPUT_NAME "ag_core")
	endif()
	if(MSVC AND NOT MSVC_CLANG)
		if(NOT WINDOWS_STORE)
			set_target_properties(ag_core PROPERTIES LINK_FLAGS_RELEASE "/NODEFAULTLIB")
			set_target_properties(ag_core PROPERTIES LINK_FLAGS_DEBUG "/NODEFAULTLIB")
		endif()
		set_target_properties(ag_core PROPERTIES STATIC_LIBRARY_FLAGS "/NODEFAULTLIB")
	endif()

	target_link_libraries(ag_core PRIVATE ${EXTRA_LIBS} ${EXTRA_LDFLAGS})

	target_include_directories(ag_core BEFORE PRIVATE "${AGAR_BINARY_DIR}/include")
	target_include_directories(ag_core PUBLIC
		"$<BUILD_INTERFACE:${AGAR_BINARY_DIR}/include>;$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>;$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/agar>")

	# Import global Agar build options
	target_link_libraries(ag_core PRIVATE $<BUILD_INTERFACE:agar-build-options>)

	if(NOT ANDROID)
		set_target_properties(ag_core PROPERTIES DEBUG_POSTFIX "${AGAR_CMAKE_DEBUG_POSTFIX}")
	endif()
else()
	BB_Save_MakeVar(LIB_SHARED "No")
endif()

if(AGAR_STATIC)
	set(BUILD_SHARED_LIBS FALSE)

	add_library(ag_core-static STATIC ${SOURCE_FILES_CORE})
	target_compile_definitions(ag_core-static PUBLIC _AGAR_CORE_INTERNAL)

	if(NOT AGAR_SHARED OR NOT WIN32 OR MINGW)
		set_target_properties(ag_core-static PROPERTIES OUTPUT_NAME "ag_core")
		# Note: Apparently, OUTPUT_NAME must really be unique; even when
		# CMAKE_IMPORT_LIBRARY_SUFFIX or the like are given. Otherwise
		# the static build may race with the import lib and one will get
		# clobbered, when the suffix is realized via subsequent rename.
	endif()

	set_target_properties(ag_core-static PROPERTIES POSITION_INDEPENDENT_CODE ${AGAR_STATIC_PIC})

	# Note: The clang toolset for Visual Studio does not support /NODEFAULTLIB.
	if(MSVC AND NOT MSVC_CLANG)
		set_target_properties(ag_core-static PROPERTIES LINK_FLAGS_RELEASE "/NODEFAULTLIB")
		set_target_properties(ag_core-static PROPERTIES LINK_FLAGS_DEBUG "/NODEFAULTLIB")
		set_target_properties(ag_core-static PROPERTIES STATIC_LIBRARY_FLAGS "/NODEFAULTLIB")
	endif()

	# TODO: Win32 platforms keep the same suffix .lib for import and static
	# libraries - do we need to consider this?
	target_link_libraries(ag_core-static PRIVATE ${EXTRA_LIBS} ${EXTRA_LDFLAGS})
	target_include_directories(ag_core-static BEFORE PRIVATE "${AGAR_BINARY_DIR}/include")
	target_include_directories(ag_core-static PUBLIC
		"$<BUILD_INTERFACE:${AGAR_BINARY_DIR}/include>" $<INSTALL_INTERFACE:include> $<INSTALL_INTERFACE:include/agar>)

	# Import global Agar build options
	target_link_libraries(ag_core-static PRIVATE $<BUILD_INTERFACE:agar-build-options>)
	if(NOT ANDROID)
		set_target_properties(ag_core-static PROPERTIES DEBUG_POSTFIX "${AGAR_CMAKE_DEBUG_POSTFIX}")
	endif()
endif()

##### Tests #####

#if(AGAR_TESTS)
#  include_directories(BEFORE "${AGAR_SOURCE_DIR}/include")
#  include_directories(AFTER "${AGAR_SOURCE_DIR}/include")
#  file(GLOB TEST_SOURCES ${AGAR_SOURCE_DIR}/tests/*.c)
#  add_subdirectory(tests)
#endif()

##### Installation targets #####
if(AGAR_SHARED)
	install(TARGETS ag_core EXPORT ag_coreTargets
		LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}"
		ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}"
		RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}")
endif()

if(AGAR_STATIC)
	install(TARGETS ag_core-static EXPORT ag_coreStaticTargets
		LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}"
		ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}"
		RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}")
endif()

##### Export files #####
if(WINDOWS AND NOT MINGW)
	set(PKG_PREFIX "cmake")
else()
	set(PKG_PREFIX "${CMAKE_INSTALL_LIBDIR}/cmake/agar")
endif()

include(CMakePackageConfigHelpers)
write_basic_package_version_file("${AGAR_BINARY_DIR}/agarConfigVersion.cmake"
	VERSION ${AGAR_VERSION}
	COMPATIBILITY AnyNewerVersion
)

if(AGAR_SHARED)
	install(EXPORT ag_coreTargets FILE ag_coreTargets.cmake NAMESPACE ag_core:: DESTINATION ${PKG_PREFIX})
#	install(EXPORT ag_guiTargets FILE ag_guiTargets.cmake NAMESPACE ag_gui:: DESTINATION ${PKG_PREFIX})
endif()

if(AGAR_STATIC)
	install(EXPORT ag_coreStaticTargets FILE ag_coreStaticTargets.cmake NAMESPACE ag_core:: DESTINATION ${PKG_PREFIX})
#	install(EXPORT ag_guiStaticTargets FILE ag_guiStaticTargets.cmake NAMESPACE ag_gui:: DESTINATION ${PKG_PREFIX})
endif()

install(FILES ${AGAR_BINARY_DIR}/agarConfig.cmake ${AGAR_BINARY_DIR}/agarConfigVersion.cmake
    DESTINATION ${PKG_PREFIX}
    COMPONENT Devel)

file(GLOB INCLUDE_FILES ${AGAR_BINARY_DIR}/*/*.h)
install(FILES ${INCLUDE_FILES} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/agar)

string(TOUPPER "${CMAKE_BUILD_TYPE}" UPPER_BUILD_TYPE)
if(UPPER_BUILD_TYPE MATCHES DEBUG)
	set(SOPOSTFIX "${AGAR_CMAKE_DEBUG_POSTFIX}")
else()
	set(SOPOSTFIX "")
endif()

if(NOT (WINDOWS OR CYGWIN) OR MINGW)
	if(AGAR_SHARED)
		set(SOEXT ${CMAKE_SHARED_LIBRARY_SUFFIX})
		get_target_property(SONAME ag_core OUTPUT_NAME)
		if(NOT ANDROID AND NOT MINGW)
			install(CODE "
execute_process(COMMAND ${CMAKE_COMMAND} -E create_symlink
 \"lib${SONAME}${SOPOSTFIX}${SOEXT}\" \"libag_core${SOPOSTFIX}${SOEXT}\"
 WORKING_DIRECTORY \"${AGAR_BINARY_DIR}\")"
)
			install(FILES ${AGAR_BINARY_DIR}/libag_core${SOPOSTFIX}${SOEXT}
			    DESTINATION "${CMAKE_INSTALL_LIBDIR}")
		endif()
	endif()

	if(FREEBSD)
		install(FILES ${AGAR_BINARY_DIR}/agar.pc
		    DESTINATION "libdata/pkgconfig")
	else()
		install(FILES ${AGAR_BINARY_DIR}/agar.pc
		    DESTINATION "${CMAKE_INSTALL_LIBDIR}/pkgconfig")
	endif()

	install(PROGRAMS ${AGAR_BINARY_DIR}/agar-config DESTINATION "${CMAKE_INSTALL_BINDIR}")
	install(FILES "${AGAR_BINARY_DIR}/agar.m4" DESTINATION "${CMAKE_INSTALL_DATAROOTDIR}/aclocal")
endif()

##### Uninstall target #####

if(NOT TARGET uninstall)
	configure_file(
		"${AGAR_SOURCE_DIR}/cmake_uninstall.cmake.in"
		"${AGAR_BINARY_DIR}/cmake_uninstall.cmake"
		IMMEDIATE @ONLY)

	add_custom_target(uninstall
		COMMAND ${CMAKE_COMMAND} -P ${AGAR_BINARY_DIR}/cmake_uninstall.cmake)
endif()
