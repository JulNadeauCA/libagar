
Release Notes for Agar 1.6.0 (Nullability Complete)
---------------------------------------------------

Here are some notable changes since Agar 1.5.0, in no particular order:

- CORE: Since the AG_User(3) module "posix" uses getpwent() it can incur some
        startup overhead on some systems. Introduce a trivial module "getenv"
	which looks only for $USER, $[E]UID, $HOME and $TMPDIR and make it the
	default unless AG_POSIX_USERS is passed to AG_InitCore(3).

- Always provide dlsym()mable versions of inline functions in lowercase form
  (e.g., AG_LengthUTF8() -> ag_length_utf8()). Avoid the need for glue code
  in language bindings. Thanks Brian for the feedback! Move inlinable code
  to inline_NAME.h. Add --without-inline-* to de-inline given families of
  functions (or use --without-inline to disable inlining across the board).

- Take advantage of compiler attributes Const, Pure, Noreturn, Malloc_Like and
  Warn_Unused_Result. Also define _Pure_Attribute_If_Unthreaded.

- Nullability support. Annotate pointers with _Nullable or _Nonnull to make
  prototypes more expressive and to help prevent programming mistakes. Programs
  that wish to use Agar's nullability annotations (which are not exported by
  default) can set _USE_AGAR_NULLABILITY at compile-time.

- Provide special nullability annotations for thread types, which may or may
  not be pointer types depending on the system (as determined by configure
  tests). Define _{Nullable,Nonnull,Null_unspecified}_{Mutex,Cond,Thread}.

- CORE: Compile cleanly under small C compilers such as cc65.

- GUI: Pass AG_Color's and AG_Rect's by reference. Avoiding passing by value
       in general makes things easier with language bindings.

- Many fixes and improvements in the build system (maintained separately as the
  BSDBuild project). Fix endianness test under mingw and darwin. It is no longer
  necessary to pass --byte-order when cross-compiling to mingw. The build system
  now handles Windows DLL files as regular binaries. We no longer use libtool.
  pc(5) modules for pkg-config are now auto-generated.

- CORE: Remove support for typed virtual functions under AG_Object. This saves
        space and allows AG_Get*() functions to be declared pure in unthreaded
        builds. Remove AG_ObjectAttachToNamed(). AG_Object{Get,Set}ArchivePath()
	was made redundant by the "archive-path" property. Remove legacy shims
        used to support the ancient (pre-1.4) AG_Prop interface.

- CORE: Many size optimizations. Added options EXEC, NAMESPACES, SERIALIZATION,
        STRING, TIMERS, UNICODE, USER and VERBOSITY (disabled in SMALL builds).

- AG_Graph: Add support for directed graph rendering. Thanks Chuck!

- AG_Pixmap: Added AG_PixmapGetSurface(): return a copy of surface at index.

- AG_DriverSDL{FB,GL}: Handle "width" and "height" parameters in "%" (relative
                       to available desktop space). Added "!bgPopup" option.
                       Handle "R/G/B" format in "bgColor" option.

- Introduce type-safe accessors for event handlers. Instead of using AG_SELF(),
  AG_PTR() or AG_PTR_NAMED() to retrieve an AG_Object pointer from inside an
  event handler, it is now recommended to use AG_OBJECT_SELF(), AG_OBJECT_PTR()
  and AG_OBJECT_PTR_NAMED(). In a Debug build, these macros will perform a
  run-time validity and a class-membership test. In a Release build, no tests
  are done. Accessors are also provided for standard Agar classes. For example
  AG_Button defines AG_BUTTON_SELF(), AG_BUTTON_PTR(), AG_BUTTON_PTR_NAMED().
 
- GUI: Optimize the case where a window contains no widgets that make use
       of text rendering. Cache whether a window contains font-engine-dependent
       widgets with the AG_WINDOW_USE_TEXT flag.

- AG_Config: Introduce AG_ConfigFind() and AG_Config{Add,Del,Set}Path().
             Replaces the former colon-separated "load-path", "save-path",
             "font-path", and "tmp-path" strings by ConfigPathGroups of type
             PATH_DATA, PATH_FONTS and PATH_TEMP. For designated groups such
             as PATH_FONTS we reorder entries based on last successful access.

- AG_DriverDUMMY: Introduce new "dummy" driver, a no-op driver which prints out
                  calls and arugments to the console (if running under agartest,
                  try "agartest -C -d dummy" to see the console output).

- GUI: Back AG_{Push,Pop}BlendingMode() with a proper stack of blending states.
       Allow use of alternate blending modes MODULATE, DECAL, BLEND and REPLACE.

- AG_Driver: Added new driver operations putPixel64(), putPixelRGB16(),
             drawTriangle(), drawPolygon(), drawPolygonSti32(), drawLineW(),
             drawLineW_Sti16(), getClipboardText() and setClipboardText().

- AG_Stylesheet: Improvements to the stylesheet parser. Handle C-style comments.
                 Validate and print out parsing errors.

- AG_Scrollbar: Enhance contrast when control bar is squished below a constant
                threshold. Adjust the size requisition based on the zoom level
                (as opposed to the font size). Added SMOOTH option to produce
                a progressive motion towards the target for clicks outside of
                the control bar (as opposed to jumping which is the default).

- AG_DriverGLX: If the initial glXChooseVisual() attempt fails, fallback to
                8-bit depth. Added "xsync" driver option to conveniently enable
		synchronous X events when debugging ("-d glx(xsync)").

- AG_DriverGLX: Obtain initial keyboard repeat delay and interval settings
                from XKB (falling back to XF86MISC if XKB is not available).

- AG_DriverGLX: Use XGrabPointer() to handle windows with MODAL flag.
                Thanks Chuck!

- AG_FileDlg: Refresh automatically when directory contents change on platforms
              with support for filesystem notifications (which we abstract
              behind AG_EventSink(3) of type FSEVENT).

- AG_FileDlg: Add convenience routine AG_FileDlgAddImageTypes().

- AG_FileDlg: Introduce AG_FILEDLG_COMPACT option. In this mode, FileDlg becomes
              a single-line Textbox + Button. When the Button is clicked the
              FileDlg instantiates a clone of itself in a new window. Added
              AG_FileDlgNewCompact() and AG_FileDlgNewCompactMRU().

- AG_FileDlg: Recognize some special syntaxes under AG_FileType.
              "<-x>" tests whether a file is executable by the effective user.
	      "<=FILENAME>" can be used to match a filename exactly (or
              "<=FILENAME/i>" for case-insensitive matching).

- AG_FileDlg: Added AG_FileDlg{Get,Copy}{Directory,Filename}() and
              AG_FileDlgCopyTypes().
                          
- Added --disable-widgets option to produce an Agar build without the
  standard widget library.

- CORE: Introduce AG_CreateClass() and AG_DestroyClass() as an auto-allocated
        alternative to passing an initialized structure to AG_RegisterClass().
        Add AG_ClassSet{Init,Reset,Destroy,Load,Save,Edit}(), for setting
	individual operations (and returning the previous operation pointer).

- AG_Object: Make AG_Variables of type P_FLAG* mutable to INT and UINT*.
             In AG_CompareVariables(), compare discrete STRINGs as strings.
             Renamed AG_GetVariableLocked() -> AG_AccessVariable().

- AG_Object: Represent dependencies more compactly using AG_Variables of
             type P_OBJECT and P_VARIABLE. Remove AG_ObjectDep structure.
             Replace archivePath by "archive-path" property. Remove save_pfx.

- CORE: Performance improvements in AG_Event passing. Remove "sender" as a
        mandatory first argument of AG_PostEvent(). Pass sender objects as
        regular arguments instead. Removed ASYNC and PROPAGATE event flags
        (both behaviors can be implemented more easily and more powerfully
        in the event handler routine itself without need for magic).

- CORE: It is now safe for an EventSink function (see AG_AddEventSink(3))
        to call AG_DelEventSink() on itself.

- CORE: It is now safe for an EventEpilogue function (AG_AddEventEpilogue(3))
        to call AG_DelEventEpilogue() on itself. Thanks Walter Zambotti!

- CORE: Import rxi's type-safe dynamic arrays (https://github.com/rxi/vec).
        Thanks Chuck for the suggestion!

- CORE: Colorize debugging output. Added --disable-ansi-color build option.

- GUI: Added support for CSS color keywords ("AliceBlue", "AntiqueWhite", etc)
       in color attributes and stylesheets. Handle shortened "#RGB" and "#RGBA"
       notations properly.

- AG_Separator: Add AG_SeparatorSetLength(), useful to set a requisition
                when placing separators in containers of indeterminate size.

- AG_Widget: Store GL state data in a separate structure (AG_WidgetGL), which
             is allocated only in the USE_OPENGL case.

- AG_Widget: Add AG_SetStyleF() format-string variant of AG_SetStyle().

- AG_Widget: Introduce events "font-changed" and "palette-changed" (generated
             by the style compiler to signal when a widget's font or palette
             entries have been changed).

- GUI: Add support for fractional (floating-point) font sizes. This affords the
       style engine greater precision when handling "font-size" expressed in %.

- AG_Notebook: Add AG_NotebookGetByID() and AG_NotebookSelectByID() for
               referencing tabs by integer. Cosmetic fixes. Render a stripe
               in "selected-color" over the selected tab. Handle multi-line
               text correctly in NotebookTab labels.

- GUI: Fix multiple pixel off-by-ones in primitive routines (there are still
       some issues with ati vs. nvidia drivers rendering features differently).

- GUI: Introduce AG_ColorDarken(), AG_ColorLighten() and AG_ColorInterpolate().

- GUI: Produce smoother transitions between edges and corners of 3D-style
       AG_WidgetPrimitives(3) such as AG_DrawBox() and AG_DrawBoxRounded().

- CORE: Make AG_GetVariable() not a variadic function for optimization reasons.
        This may cause some new compiler warnings that can be avoided by using
	(void *) cast.

- GUI: Introduce new color scheme. Widgets now include a local palette of
       32 colors (8 primaries x 4 states).  The primaries are named "color",
       "background-color", "text-color", "line-color", "high-color", "low-color",
       and "selection-color". States are unfocused, #disabled, #focused, #hover.

- AG_Checkbox: Added INVERT flag. Render check mark (U+2713). Thanks Federico!

- Add "style" parameter to Box, Fixed and Scrollview (currently "none", "box",
  "well" and "plain").

- AG_HSVPal: Fix numerous cosmetic issues. Scale the different features better
             under different sizes. Avoid overdraw in the transparency preview.
             If displaying an RGB or HSV text label, select a sensible font
             color based on HSV parameters. Add AG_HSVPalUpdate{Hue,SV}().
             Short-circuit the cases where s or v are close to 0 (according
	     to AG_{SATURATION,VALUE}_EPSILON).

- AG_Button: Add AG_Button{Get,Set}State() and atomic AG_ButtonToggle().
             Renamed AG_ButtonInvertState() -> AG_ButtonSetInverted().
             Add AG_BUTTON_SET constructor flag (force "state" => 1).

- AG_Textbox: Introduce AG_TEXTBOX_RETURN_BUTTON option (automatically embed
              a "Return" button connected to "textbox-return").

- GUI: Introduce "Style Editor" tool, AG_StyleEditor(). It allows developers
       to look at a live VFS of widgets (potentially unsafe), to pick widgets
       and to add/edit style attributes while looking at results in real-time.

- GUI: Introduce "GUI Debugger" tool, AG_GuiDebugger() for inspecting live VFS
       of widgets. It is potentially unsafe and available only in Debug builds.

- GUI: Add AG_About(): Generate an "About Agar" dialog with license text.

- AG_Console: Added multi-line support. AG_ConsoleMsg() now splits multiline
              strings into multiple, grouped lines that are displayed in an
              indented style. Thanks Chuck!

- AG_Console: Introduce efficient (AG_EventSink(3) based) file monitoring. Add
              AG_ConsoleOpen{File,FD,Stream}() and AG_ConsoleClose().

- AG_Console: Add AG_ConsoleBinary(): produce data in canonical (hex + ASCII)
              format. Added AG_ConsoleMsgCatS() for appending text more easily
              to an existing entry.

- AG_Console: Add AG_ConsoleExportBuffer() for exporting entire buffer contents.
              Add "Selected Lines Only" option in "Export to file". Add menu
              function "Clear All". Fix memory leaks. Handle empty lines more
	      efficiently. Avoid redundant blending in draw() by pre-caching
              lines rendered against BG as opaque surfaces. Added image types
              under "Export to file" for exporting screenshots.

- AG_Checkbox, AG_Button, AG_Textbox: Render labels internally to avoid the
                                      overhead of embedding AG_Label widgets.

- AG_Menu: Improve responsiveness of Menu expansions. Draw a rectangular
           outline to avoid blending into the background. Fix bad collapse
           behavior when closing hierarchies of opened menus. Fix incorrect
           alignment of submenus in some circumstances. Fix modal behavior
           of menu expansions in multi-window drivers.

- AG_Tlist: Implement per-item alternate colors and font flags. Introduce
            AG_TlistSet{Color,Font}(). Make AG_TlistSort() thread-safe. When
            right-clicking, select the target item before popping any menus.

- GUI: Fix a rendering problem with certain fonts where glyphs would blend
       incorrectly with the previously rendered glyphs. Optimize the inner
       loops of the text renderer.

- GUI: Add AG_TextFontPctFlags().

- AG_Text: Inner-loop optimizations in the AG_Text{Render,Size}() backends.
           Reorganized code to use jump tables. Allow new font engine types
           to be integrated more easily. Safety improvements in the mechanism
	   behind AG_{Push,Pop}TextState(). Added validity tests in Debug mode.
           Introduced AG_CopyTextState().

- AG_Radio: Implement key repeat. Handle multiline items. Implement horizontal
            layout and introduce AG_RadioSetDisposition() -- thanks Federico
	    for the suggestion!

- AG_FontSelector: Include Agar core fonts and local fonts in the listing
                   (scanning "font-path" for files with supported extensions).
                   Add "pixel64" binding in Large mode. Embed a color picker
                   to preview fonts in different colors. Add Upright Italic
                   and Width Variants. Add an alternate sample phrase.

- Typography updates. The distribution now includes a set of "Core fonts",
  all SIL 1.1 licensed and intended to be made available cross-platform:

   #0) (no RFN) Latin (plus graphical icons). Small and baked into ag_gui.
   #1) (no RFN) Latin Extended, Greek Extended, Cyrillic, Armenian, Hebrew,
       Arabic, Nko, Devanagari, Gurmukhi, Gujarati, Tamil, Thai, Lao, Tibetan,
       Georgian, Canadian Aboriginal, Ogham, Tifinagh, Lisu.
   #2) (unused slot)
   #3) Computer Modern Unicode Sans (Latin Extended, Greek, Cyrillic).
   #4) Computer Modern Unicode Serif (Latin Extended, Greek, Cyrillic).
   #5) Computer Modern Unicode Typewriter (Latin Extended, Greek, Cyrillic).
   #6) Charter (Latin).
   #7) Courier Prime (Latin).
   #8) Source Han Sans (Chinese, Japanese, Korean).
   #9) League Spartan (Latin).
  #10) League Gothic (Latin).
  #11) Unifraktur Maguntia (Latin).

- AG_Label: In polled mode, obtain better size requisitions by processing
            the format string earlier in size_request(). This prevents the
	    need for size hinting in many cases.

- AG_Combo, AG_UCombo: Cache generated windows to improve response time with
                       multi-window drivers.

- GUI: Add support for ANSI SGR attributes in AG_TextSize() and AG_TextRender().

- GUI: Many fixes and optimizations in the sizing routines (size_request() and
       size_allocate()) of standard widgets.

- GUI: In single-window (sdlfb, sdlgl) mode, allow Windows (and minimized
       window icons) to exceed view boundaries.

- GUI: Implement clipboard integration (currently only in "glx"). Introduce
       AG_Driver(3) ops getClipboardText() and setClipboardText().

- GUI: Make AG_WindowFocus(NULL) or AG_WindowFocus(agWindowFocused) a proper
       no-op (it used to clear agWindowToFocus pointer as a side-effect).

- AG_Window: Introduce AG_WindowMove() for moving windows more efficiently
             when not resizing.

- AG_Editable: Add "placeholder" string binding, to specify a label to
               display if the buffer is empty.

- AG_Editable: Use 4 independent keyrepeat timers for the direction keys.

- AG_Editable: Many improvements and fixes to the word-selection behavior
               (triggered by ALT, or double-click followed by mouse motion).

- AG_Editable: Add basic support for ANSI SGR attributes.

- AG_Editable: Implement autocomplete feature. Add AG_EditableAutocomplete()
               and AG_EditableCloseAutocomplete().

- AG_Editable: New options AG_EDITABLE_UPPERCASE, AG_EDITABLE_LOWERCASE for
               rendering in all-uppercase or all-lowercase.

- 

- GUI: Added AG_PixmapSizeHint(), AG_BoxSizeHint(), AG_RadioSizeHint(),
       AG_FixedSizeHint() for specifying explicit size requisitions in pixels.

- GUI: Introduce style attributes "font-family", "font-size", "font-weight",
       "font-style" and "font-stretch".

- GUI: Introduce unified "padding" style attribute. Allowed syntaxes are
       "padding: X" (set all paddings) or "padding: T R B L" (set Top, Right,
       Bottom & Left separately). The padding of an AG_Button(3) sets the space
       in pixels between the text label and the button's outer edges. The padding
       of an AG_Box(3) sets the padding around all attached child widgets.

- GUI: Introduce unified "spacing" style attribute. Allowed syntaxes are
       "spacing: X" (set both spacings) or "spacing: H V" (set horizontal and
       vertical spacings separately).  In a vertical AG_Radio(3) for example,
       H sets the space between the radio button and its label and V sets the
       space in pixels between radio items.  The spacing of an AG_Box(3) sets
       the spacing between attached child widgets.

- GUI: Added persistent settings: "Tab Width", "Cursor Blink Rate" and
       "Mouse Scroll Interval".

- Run-time object validity and class-membership tests (expensive but enabled
  in Debug build only). Passing an invalid object pointer to any Agar call
  should now trigger "Illegal access" assertions. Additional tests are done
  when traversing linked lists, to detect corruption or attempts to access a
  previously freed object.

- Thread-safety improvements. Removed many unnecessary lock operations.

- Introduce memory models (--with-memory-model option). SMALL targets 8-bit
  machines with up to 4096 colors. MEDIUM and LARGE modes target both 32-
  and 64-bit machines. MEDIUM uses less memory and can handle up to 24-bit
  "True Color" surfaces.  LARGE mode adds support for 48-bit "Deep Color"
  surfaces (and is the default on 64-bit hosts). Introduce AG_Size and
  AG_Offset types.

- GUI: Add support for 16-bit per component "deep color" in LARGE mode
       (48-bit display is currently supported under glx, wgl and cocoa).

- AG_Surface: Set the MAPPED bit on surfaces that have been mapped with
              AG_WidgetMapSurface(3) so we can detect attempts at freeing
              surfaces without unmapping them.

- AG_Surface: Add support for 48- and 64-bit surfaces (in LARGE mode).

- AG_Surface: Add support for 1-bit (monochrome), 2-bit (4-color), and 4-bit
              (16 color) palettized modes. Store PixelsPerByte in format.

- AG_Surface: Fixes to the PNG loader & exporter. PNG files with 16-bit per
              channel are now supported. Handle indexed-mode images correctly.

- AG_Surface: Introduce 32- and 64-bit Grayscale + Alpha modes.

- AG_Surface: Pack AG_PixelFormat in AG_Surface. The `format' field is no
              longer a pointer but the AG_PixelFormat itself).

- Updated Ada bindings (ada/ directory). New bindings are variable-thickness
  and offer the ability to implement new Agar object classes in pure Ada.

- Updated Mat's Perl bindings (p5-Agar).

- CORE: In OSX Lion (10.7) and later, prefer dlopen() over dyld() in AG_DSO(3).

- CORE: Added --enable-type-safety option (implied by --enable-debug).

- CORE: Introduce AG_{Copy,Write,Skip}StringPadded() for fixed-length records.

- CORE: Introduce AG_ExecTimer(), AG_DelTimers().

- CORE: Add AG_SetErrorS() variant; avoid printf use by AG_FatalError().

- CORE: Document AG_Db(3) API.

- Add missing include for 32-bit MSYS build. Thanks varialus!

- Manual page improvements (clarity, wording, added more examples).

- GUI: add AG_ClipLine() for clipping lines to rectangular bounding boxes.

- GUI: add AG_ClipLineCircle() for clipping lines to circular regions.

- GUI: add AG_DrawArrowhead() for drawing arrowheads of arbitrary size and angle
       aligned to arbitrary vectors.

- GUI: add AG_GetLineIntersection() for computing the intersection of two line
       segments.

- GUI: add new gui_math functions: AG_Square, AG_HaveQuadraticSolution,
       AG_QuadraticPositive, AG_QuadraticNegative, AG_Distance.

- GUI: Add AG_DrawArrowLine for drawing lines with arrowheads.

- AG_Graph: Now supports directed graphs.

- MATH: Implemented M_Bezier module for computing Bézier curves.

- Move AG_Net(3) interface from ag_core to a separate library called ag_net.
  This prevents network-call-related security warnings on some platforms and
  packaging systems from affecting agar applications which do not use it.

- NET: Introduce AG_Web(3), a multiprocess HTTP/1.1 application server. It
       handles authentication, session/process management, push events and
       templates. Not enabled by default (must compile with --enable-web).

- VG: Introduce vgedit(1), a basic editor for VG(3) object files. It is
      also a good demonstration of VG_View(3) widget usage.

- VG: Make VG(3) an AG_Object class since we may wish to subclass it or
      set variables/events on it.

