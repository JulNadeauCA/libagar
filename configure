#!/bin/sh
#
# Do not edit!
# 
# This file was generated from configure.in. To regenerate it properly, get
# BSDBuild 3.2 or later from https://bsdbuild.hypertriton.com/ and use:
#
#     $ mkconfigure < configure.in > configure
#
echo 'BSDBuild 3.2 <https://bsdbuild.hypertriton.com/>'
echo '# BSDBuild 3.2 <https://bsdbuild.hypertriton.com/>' > config.log
echo '# ex:syn=sh' >> config.log
echo '#!/bin/sh' >config.status
echo >>config.status

PACKAGE='Untitled'
VERSION=
RELEASE=
PROG_PREFIX=
PROG_SUFFIX=
PROG_TRANSFORM=s,x,x,

case "test" in
*)
	bb_sed_test=`echo foo-.bar |sed 's/[-.]/_/g'`
	if [ "$bb_sed_test" != "foo__bar" ]; then
		echo "sed or $SHELL is not working correctly."
		exit 1
	fi
esac


bb_cr_letters='abcdefghijklmnopqrstuvwxyz'
bb_cr_LETTERS='ABCDEFGHIJKLMNOPQRSTUVWXYZ'
bb_cr_Letters=$bb_cr_letters$bb_cr_LETTERS
bb_cr_digits='0123456789'
bb_cr_alnum=$bb_cr_Letters$bb_cr_digits
optarg=
for arg
do
	case "$arg" in
	*=*)
	    optarg=`expr "X$arg" : '[^=]*=\(.*\)'`
	    ;;
	*)
	    optarg=
	    ;;
	esac

	case "$arg" in
	--build=*)
	    build_arg=$optarg
	    ;;
	--host=*)
	    host_arg=$optarg
	    ;;
	--target=*)
	    target=$optarg
	    ;;
	--emul-os=*)
	    PROJ_TARGET=$optarg
	    ;;
	--byte-order=*)
	    byte_order=$optarg
	    ;;
	--prefix=*)
	    prefix=$optarg
	    ;;
	--exec-prefix=*)
	    exec_prefix=$optarg
	    ;;
	--sysconfdir=*)
	    sysconfdir=$optarg
	    ;;
	--bindir=*)
	    bindir=$optarg
	    ;;
	--libdir=*)
	    libdir=$optarg
	    ;;
	--moduledir=*)
	    moduledir=$optarg
	    ;;
	--libexecdir=*)
	    libexecdir=$optarg
	    ;;
	--datadir=*)
	    datadir=$optarg
	    ;;
	--statedir=* | --localstatedir=*)
	    statedir=$optarg
	    ;;
	--localedir=*)
	    localedir=$optarg
	    ;;
	--mandir=*)
	    mandir=$optarg
	    ;;
	--infodir=* | --datarootdir=* | --docdir=* | --htmldir=* | --dvidir=* | --pdfdir=* | --psdir=* | --sharedstatedir=* | --sbindir=*)
	    ;;
	--enable-*)
	    option=`expr "x$arg" : 'x-*enable-\([^=]*\)'`
	    expr "x$option" : ".*[^-._$bb_cr_alnum]" >/dev/null &&
	        { echo "Invalid option name: $option" >&2
	        { (exit 1); exit 1; }; }
	    option=`echo $option | sed 's/[-.]/_/g'`
	    case "$arg" in
	        *=*)
	            eval "enable_${option}='$optarg'"
	            eval "prefix_${option}='$optarg'"
		    ;;
		*)
	            eval "enable_${option}=yes"
		    ;;
	    esac
	    ;;
	--disable-*)
	    option=`expr "x$arg" : 'x-*disable-\([^=]*\)'`
	    expr "x$option" : ".*[^-._$bb_cr_alnum]" >/dev/null &&
	        { echo "Invalid option name: $option" >&2
	        { (exit 1); exit 1; }; }
	    option=`echo $option | sed 's/[-.]/_/g'`
	    eval "enable_${option}=no"
	    ;;
	--with-*)
    	    option=`expr "x$arg" : 'x-*with-\([^=]*\)'`
	    expr "x$option" : ".*[^-._$bb_cr_alnum]" >/dev/null &&
	        { echo "Invalid option name: $option" >&2
	        { (exit 1); exit 1; }; }
    	    option=`echo $option | sed 's/[-.]/_/g'`
	    case "$arg" in
	        *=*)
	            eval "with_${option}='$optarg'"
	            eval "prefix_${option}='$optarg'"
		    ;;
		*)
	            eval "with_${option}=yes"
		    ;;
	    esac
	    ;;
	--without-*)
    	    option=`expr "x$arg" : 'x-*without-\([^=]*\)'`
	    expr "x$option" : ".*[^-._$bb_cr_alnum]" >/dev/null &&
	        { echo "Invalid option name: $option" >&2
	        { (exit 1); exit 1; }; }
	    option=`echo $option | sed 's/-/_/g'`
	    eval "with_${option}=no"
	    ;;
	--x-includes=*)
	    with_x_includes=$optarg
	    ;;
	--x-libraries=*)
	    with_x_libraries=$optarg
	    ;;
	--program-prefix=*)
	    PROG_PREFIX=$optarg
	    ;;
	--program-suffix=*)
	    PROG_SUFFIX=$optarg
	    ;;
	--program-transform-name=*)
	    PROG_TRANSFORM=$optarg
	    ;;
	--help)
	    show_help=yes
	    ;;
	--version)
	    show_version=yes
	    ;;
	--srcdir=*)
	    srcdir=$optarg
	    ;;
	--testdir=*)
	    testdir=$optarg
	    ;;
	--cache=*)
	    cache=$optarg
	    ;;
	--includes=*)
	    includes=$optarg
	    ;;
	--keep-conftest)
	    keep_conftest=yes
	    ;;
	--cache-file=*)
	    ;;
	--config-cache | -C)
	    ;;
	*)
	    echo "Invalid argument: $arg, see ./configure --help"
	    exit 1
	    ;;
	esac
done
if [ -e "/bin/echo" ]; then
    /bin/echo -n ""
    if [ $? = 0 ]; then
    	ECHO_N='/bin/echo -n'
    else
    	ECHO_N='echo -n'
    fi
else
    ECHO_N='echo -n'
fi

if [ "${PATH_SEPARATOR+set}" != set ]; then
	echo '#!/bin/sh' > conftest$$.sh
	echo 'exit 0' >> conftest$$.sh
	chmod +x conftest$$.sh
	if (PATH="/nonexistent;."; conftest$$.sh) >/dev/null 2>&1; then
		PATH_SEPARATOR=';'
	else
		PATH_SEPARATOR=:
	fi
	rm -f conftest$$.sh
fi

bb_save_IFS=$IFS
IFS=$PATH_SEPARATOR

SH='sh'
for path in $PATH; do
	if [ -x "${path}/sh" ]; then
		SH="${path}/sh"
		break
	elif [ -e "${path}/sh.exe" ]; then
		SH="${path}/sh.exe"
		break
	fi
done

PERL=''
for path in $PATH; do
	if [ -x "${path}/perl" ]; then
		PERL="${path}/perl"
		break
	elif [ -e "${path}/perl.exe" ]; then
		PERL="${path}/perl.exe"
		break
	fi
done

PKGCONFIG=''
for path in $PATH; do
	if [ -x "${path}/pkg-config" ]; then
		PKGCONFIG="${path}/pkg-config"
		break
	elif [ -e "${path}/pkg-config.exe" ]; then
		PKGCONFIG="${path}/pkg-config.exe"
		break
	fi
done
IFS=$bb_save_IFS
if [ "${prefix}" != '' ]; then
    PREFIX="$prefix"
else
    PREFIX='/usr/local'
fi
if [ "${exec_prefix}" != '' ]; then
    EXEC_PREFIX="$exec_prefix"
else
    EXEC_PREFIX="${PREFIX}"
fi
if [ "${srcdir}" != '' ]; then
	if [ "${PERL}" = '' ]; then
		echo '*'
		echo '* Separate build --srcdir requires perl, but there is'
		echo '* no perl interpreter to be found in your PATH.'
		echo '*'
		exit 1
	fi
	SRC=${srcdir}
else
	SRC=`pwd`
fi
BLD=`pwd`
SRCDIR="${SRC}"
BLDDIR="${BLD}"

if [ "${testdir}" != '' ]; then
	echo "Configure tests will be executed in ${testdir}"
	if [ ! -e "${testdir}" ]; then
		echo "Creating ${testdir}"
		mkdir ${testdir}
	fi
else
	testdir='.'
fi
if [ "${includes}" = '' ]; then
	includes='yes'
fi
case "${includes}" in
yes|no)
	;;
link)
	if [ "${with_proj_generation}" ]; then
		echo 'Cannot use --includes=link with --with-proj-generation'
		exit 1
	fi
	;;
*)
	echo 'Usage: --includes (yes|no|link)'
	exit 1
	;;
esac
if [ "${srcdir}" = '' ]; then
	cat << EOT > configure.dep.pl
#!/usr/bin/env perl
# Public domain.
# Scan Makefiles for "include .depend" and generate empty ".depend" files,
# such that make can be run prior to an initial "make depend".
#

my %V = ();

sub MakefileIncludesDepend (\$\$)
{
	my \$path = shift;
	my \$cwd = shift;

	if (!open(MF, \$path)) {
		return (0);
	}
	my @lines = ();
	foreach \$_ (<MF>) {
		chop;

		if (/^(.+)\\\\\$/) {			# Expansion
			\$line .= \$1;
		} else {				# New line
			if (\$line) {
				push @lines, \$line . \$_;
				\$line = '';
			} else {
				push @lines, \$_;
			}
		}
	}
	foreach \$_ (@lines) {
		if (/^\\s*#/) { next; }
		if (/^\\t/) { next; }
		s/\\\$\\{(\\w+)\\}/\$V{\$1}/g;
		if (/^\\s*(\\w+)\\s*=\\s*"(.+)"\$/ ||
		    /^\\s*(\\w+)\\s*=\\s*(.+)\$/) {
			\$V{\$1} = \$2;
		} elsif (/^\\s*(\\w+)\\s*\\+=\\s*"(.+)"\$/ ||
		         /^\\s*(\\w+)\\s*\\+=\\s*(.+)\$/) {
			if (exists(\$V{\$1}) && \$V{\$1} ne '') {
				\$V{\$1} .= ' '.\$2;
			} else {
				\$V{\$1} = \$2;
			}
		}
		if (/^\\s*include\\s+(.+)\$/) {
			if (\$1 eq '.depend' ||
			    MakefileIncludesDepend(\$cwd.'/'.\$1, \$cwd)) {
				return (1);
			}
		}
	}
	close(MF);
	return (0);
}

sub Scan (\$)
{
	my \$dir = shift;

	unless (opendir(CWD, \$dir)) {
		print STDERR "\$dir: opendir: \$!; ignoring\\n";
		return;
	}
	%V = ();
	if (-e \$dir.'/Makefile' &&
	    MakefileIncludesDepend("\$dir/Makefile", \$dir)) {
		if (open(OUT, ">\$dir/.depend")) {
			close(OUT);
		} else {
			print STDERR "\$dir/.depend: \$!; ignoring\\n";
		}
	}
	foreach my \$ent (readdir(CWD)) {
		my \$file = \$dir.'/'.\$ent;

		if (\$ent =~ /^\\./) {
			next;
		}
		if (-d \$file) {
			Scan(\$file);
			next;
		}
	}
	closedir(CWD);
}
if (@ARGV < 1) {
	print STDERR "Usage: gen-dotdepend.pl [directory]\\n";
	exit(1);
}
Scan(\$ARGV[0]);
EOT
	if [ "${PERL}" != '' ]; then
		${PERL} configure.dep.pl .
		rm -f configure.dep.pl
	else
		echo '*'
		echo '* Warning: No perl was found. Perl is required for automatic'
		echo '* generation of .depend files. You may need to create empty'
		echo '* .depend files where it is required.'
		echo '*'
	fi
fi
bb_incdir="$BLD/include/agar/config"
if [ "${show_help}" = "yes" ]; then
echo ''
echo 'Usage: ./configure [options]'
echo ''
echo 'Standard build options:'
echo '    --bindir=DIR               Executables for common users [PREFIX/bin]'
echo '    --build=STRING             Host environment for build [auto-detect]'
echo '    --byte-order=STRING        Byte order for build [LE|BE] [auto-detect]'
echo '    --datadir=DIR|NONE         Data files for program use [PREFIX/share]'
echo '    --enable-nls               Multi-language support [no]'
echo '    --exec-prefix=DIR          Machine-dependent installation base [PREFIX]'
echo '    --host=STRING              Cross-compile for target environment [BUILD]'
echo '    --includes=STRING          Preprocess C headers [yes|no|link] [yes]'
echo '    --keep-conftest            Preserve output files from last test'
echo '    --libdir=DIR               System libraries [PREFIX/lib]'
echo '    --libexecdir=DIR           Executables for program use [PREFIX/libexec]'
echo '    --localedir=DIR            Multi-language support locales [DATADIR/locale]'
echo '    --mandir=DIR               Manual page documentation [PREFIX/man]'
echo '    --moduledir=DIR|NONE       Dynamically loaded modules [PREFIX/lib]'
echo '    --prefix=DIR               Installation base [/usr/local]'
echo '    --program-prefix=STRING    Prepend string to program name []'
echo '    --program-suffix=STRING    Append string to program name []'
echo '    --program-transform-name=S Transform program name by expression [s,x,x,]'
echo '    --srcdir=DIR               Source directory for concurrent build [.]'
echo '    --statedir=DIR|NONE        Modifiable single-machine data [PREFIX/var]'
echo '    --sysconfdir=DIR|NONE      System configuration files [PREFIX/etc]'
echo '    --testdir=DIR              Execute all tests in this directory [.]'
echo '    --with-bundles             Generate application/library bundles [yes]'
echo '    --with-ctags               Generate ctags tag files [no]'
echo '    --with-docs                Generate printable documentation [no]'
echo '    --with-gettext             Use gettext for multi-language [auto-detect]'
echo '    --with-libtool=STRING      Use GNU libtool [path or "bundled"]'
echo '    --with-manlinks            Manual page entries for all functions [no]'
echo '    --with-manpages            Generate manual pages [yes]'
echo ''
echo 'Libraries to build:'
echo '    --enable-au                 AU: Audio and sound toolkit [no]'
echo '    --enable-gui                GUI: The Agar GUI library [yes]'
echo '    --enable-map                MAP: 2D tile engine [no]'
echo '    --enable-math               MATH: Math library and advanced rendering [yes]'
echo '    --enable-micro              MA: Micro-Agar GUI library [no]'
echo '    --enable-net                NET: Network interface library [yes]'
echo '    --enable-sg                 SG: Scene graph and 3D engine [yes]'
echo '    --enable-sk                 SK: Sketch and constraint solver [yes]'
echo '    --enable-vg                 VG: Simple 2D vector graphics [yes]'
echo ''
echo 'Global Agar options:'
echo '    --with-memory-model=(S|M|L) Select Agar memory model [auto]'
echo '    --with-float                Floating-point support [auto]'
echo '    --enable-shared             Build shared libraries [check]'
echo '    --enable-type-safety        Run-time type safety checks [no]'
echo '    --enable-debug              Debug build (implies type-safety) [no]'
echo '    --enable-legacy             Deprecated interfaces [yes]'
echo '    --enable-threads            Thread safety [check]'
echo '    --enable-warnings           Suggested compiler warnings [no]'
echo '    --with-pthreads[=PREFIX]    POSIX Threads support [check]'
echo '    --with-attributes           Compiler attributes and annotations [yes]'
echo '    --with-inline               Inline functions [yes]'
echo ''
echo 'Options specific to CORE library:'
echo '    --enable-ansi-color         Produce colorized output [yes]'
echo '    --enable-dso                Dynamically loaded modules [yes]'
echo '    --enable-exec               The AG_Execute(3) interface [yes]'
echo '    --enable-event-loop         The standard AG_EventLoop(3) [yes]'
echo '    --enable-namespaces         Namespaces for object classes [yes]'
echo '    --enable-named-args         Named AG_Event arguments [yes]'
echo '    --enable-serialization      File I/O and serialization [yes]'
echo '    --enable-string             AG_Printf(3) formatting engine [yes]'
echo '    --enable-timers             The AG_Timer(3) interface [yes]'
echo '    --enable-unicode            Support for Unicode [yes]'
echo '    --enable-user               The AG_User(3) interface [yes]'
echo '    --enable-verbosity          Verbose error messages [yes]'
echo '    --with-db[45][=PREFIX]      AG_Db: Berkeley DB backend [no]'
echo '    --with-mysql[=PREFIX]       AG_Db: MySQL backend [no]'
echo '    --with-iconv[=PREFIX]       Character set conversion [check]'
echo '    --with-inline-byteswap      Inline endianness swaps [yes]'
echo '    --with-inline-error         Inline malloc() wrappers [yes]'
echo '    --with-inline-event         Inline event argument accessors [yes]'
echo '    --with-inline-io            Inline serialization frontends [yes]'
echo '    --with-inline-object        Inline some AG_Object calls [yes]'
echo '    --with-inline-string        Inline some string functions [yes]'
echo '    --with-inline-tbl           Inline some AG_Tbl functions [yes]'
echo '    --with-inline-threads       Inline AG_Threads functions [yes]'
echo '    --with-inline-variable      Inline some AG_Variable calls [yes]'
echo ''
echo 'Options specific to MATH library:'
echo '    --with-<mode>-fp            Precision (single|double|quad) [double]'
echo '    --with-altivec[=inline]     AltiVec-optimized routines [check]'
echo '    --with-sse[=inline]         SSE-optimized routines [check]'
echo '    --with-sse[234]             SSE2 SSE3 SSE4 routines [check]'
echo ''
echo 'Options specific to NET library:'
echo '    --enable-web                HTTP/1.1 application server [no]'
echo '    --with-z[=PREFIX]           zlib compression library [check]'
echo ''
echo 'Options specific to GUI library:'
echo '    --enable-widgets            The standard widget library [yes]'
echo '    --enable-wm-hints           Interface with window managers [yes]'
echo '    --with-freetype[=PREFIX]    Enable FreeType support [check]'
echo '    --with-fontconfig[=PREFIX]  Enable Fontconfig support [check]'
echo '    --with-gl[=PREFIX]          OpenGL rendering support [check]'
echo '    --with-jpeg[=PREFIX]        Built-in JPEG image support [check]'
echo '    --with-png[=PREFIX]         Built-in PNG image support [check]'
echo '    --with-x[=PREFIX]           Build with X windows support [check]'
echo '    --with-xinerama[=PREFIX]    Build with Xinerama support [check]'
echo '    --with-glx[=PREFIX]         Enable accelerated X driver [check]'
echo '    --with-sdl[=PREFIX]         Enable SDL 1.2 driver [check]'
echo '    --with-wgl                  Enable MS Windows driver [check]'
echo '    --with-cocoa                Enable MacOS X Cocoa driver [check]'
echo '    --with-inline-surface       Inline pixel access routines [yes]'
echo '    --with-inline-widget        Inline some AG_Widget functions [yes]'
echo ''
echo 'Options specific to AU library:'
echo '    --with-sndfile[=PREFIX]     Enable sndfile support [check]'
echo '    --with-portaudio[=PREFIX]   Enable portaudio driver [check]'
echo ''
echo 'Options specific to SG library:'
echo '    --with-glu[=PREFIX]         OpenGL Utility Library (GLU) [check]'
echo ''
echo 'Some influential environment variables:'
echo '    CC           C compiler command'
echo '    CFLAGS       C compiler flags'
echo '    CPP          C preprocessor'
echo '    CPPFLAGS     C preprocessor flags'
echo '    LDFLAGS      C linker flags'
echo '    LIBS         Libraries to link against'
exit 1
fi
if [ "${show_version}" = "yes" ]; then
echo 'BSDBuild 3.2'
exit 0
fi
if [ "${build_arg}" != '' ]; then
	build="${build_arg}"
else
	if [ "${srcdir}" != '' ]; then
		build_guessed=`sh ${srcdir}/mk/config.guess`
	else
		build_guessed=`sh mk/config.guess`
	fi
	if [ $? != 0 ]; then
		echo 'mk/config.guess failed, please specify --build'
		exit 1
	fi
	build="${build_guessed}"
fi
if [ "${host_arg}" != '' ]; then
	host="${host_arg}"
else
	host="${build}"
fi
if [ "${host}" != "${build}" ]; then
	CROSS_COMPILING='yes'
else
	CROSS_COMPILING='no'
fi
if [ "${with_bundles}" != "no" ]; then
	case "${host}" in
	arm-apple-darwin*)
		PROG_BUNDLE='iOS'
		;;
	*-*-darwin*)
		PROG_BUNDLE='OSX'
		;;
	esac
fi
host_machine=`echo ${host} | cut -d- -f 1`
if [ -e "Makefile.config" ]; then
	echo '* Overwriting existing Makefile.config'
fi
echo '# Generated by BSDBuild 3.2 configure script.' >Makefile.config
echo '' >> Makefile.config
echo "BUILD=${build}" >> Makefile.config
echo "HOST=${host}" >> Makefile.config
echo "CROSS_COMPILING=${CROSS_COMPILING}" >> Makefile.config
echo "SRCDIR=${SRC}" >> Makefile.config
echo "BLDDIR=${BLD}" >> Makefile.config
echo "ECHO_N=${ECHO_N}" >> Makefile.config

if [ "${SUDO}" != "" ]; then
	if [ -e "${PREFIX}" ]; then
		bb_test_file="${PREFIX}/bsdbuild_test_file$$"
		$ECHO_N "# checking the writeability of ${PREFIX}..." >>config.log
		echo "echo 'Test' > '${bb_test_file}'" > conftest$$.sh
		${SH} conftest$$.sh 2>/dev/null
		if [ -e "${bb_test_file}" ]; then
			rm -f "${bb_test_file}"
			echo "yes (ignoring SUDO)" >>config.log
			echo "SUDO=" >> Makefile.config
		else
			echo "no (honoring ${SUDO})" >>config.log
		fi
		rm -f conftest$$.sh
	fi
fi

$ECHO_N 'env ' >>config.log
$ECHO_N 'env ' >>config.status
if [ "$CC" != "" ]; then
$ECHO_N 'CC="' >> config.log
$ECHO_N 'CC="' >> config.status
$ECHO_N "${CC}" >> config.log
$ECHO_N "${CC}" >> config.status
$ECHO_N '" ' >> config.log
$ECHO_N '" ' >> config.status
fi
if [ "$CFLAGS" != "" ]; then
$ECHO_N 'CFLAGS="' >> config.log
$ECHO_N 'CFLAGS="' >> config.status
$ECHO_N "${CFLAGS}" >> config.log
$ECHO_N "${CFLAGS}" >> config.status
$ECHO_N '" ' >> config.log
$ECHO_N '" ' >> config.status
fi
if [ "$CPP" != "" ]; then
$ECHO_N 'CPP="' >> config.log
$ECHO_N 'CPP="' >> config.status
$ECHO_N "${CPP}" >> config.log
$ECHO_N "${CPP}" >> config.status
$ECHO_N '" ' >> config.log
$ECHO_N '" ' >> config.status
fi
if [ "$CPPFLAGS" != "" ]; then
$ECHO_N 'CPPFLAGS="' >> config.log
$ECHO_N 'CPPFLAGS="' >> config.status
$ECHO_N "${CPPFLAGS}" >> config.log
$ECHO_N "${CPPFLAGS}" >> config.status
$ECHO_N '" ' >> config.log
$ECHO_N '" ' >> config.status
fi
if [ "$LDFLAGS" != "" ]; then
$ECHO_N 'LDFLAGS="' >> config.log
$ECHO_N 'LDFLAGS="' >> config.status
$ECHO_N "${LDFLAGS}" >> config.log
$ECHO_N "${LDFLAGS}" >> config.status
$ECHO_N '" ' >> config.log
$ECHO_N '" ' >> config.status
fi
if [ "$LIBS" != "" ]; then
$ECHO_N 'LIBS="' >> config.log
$ECHO_N 'LIBS="' >> config.status
$ECHO_N "${LIBS}" >> config.log
$ECHO_N "${LIBS}" >> config.status
$ECHO_N '" ' >> config.log
$ECHO_N '" ' >> config.status
fi
$ECHO_N './configure' >>config.log
$ECHO_N './configure' >>config.status
for arg
do
	$ECHO_N " $arg" >>config.log
	$ECHO_N " $arg" >>config.status
done
echo '' >>config.log
echo '' >>config.status
if [ -e "$BLD/include/agar/config" ]; then
	echo '* Overwriting $BLD/include/agar/config directory'
	rm -fR "$BLD/include/agar/config"
fi
mkdir -p "$BLD/include/agar/config"
if [ $? != 0 ]; then
	echo 'Could not create $BLD/include/agar/config directory.'
	exit 1
fi
cat << EOT > conftest.1
.\" COMMENT
.Dd 
.Dd NOVEMBER 23, 2009
.Dt TEST 1
.Os
.ds vT Test
.ds oS Test 1.0
.Sh NAME
.Nm test
.Nd Test document
.Sh DESCRIPTION
EOT

HAVE_MANDOC='no'
MANDOC=''
bb_save_IFS=$IFS
IFS=$PATH_SEPARATOR
for path in $PATH; do
	if [ -x "${path}/mandoc" ]; then
		cat conftest.1 | ${path}/mandoc -Tascii >/dev/null
		if [ "$?" = '0' ]; then
			HAVE_MANDOC='yes'
			MANDOC="${path}/mandoc"
			break;
		fi
	elif [ -e "${path}/mandoc.exe" ]; then
		cat conftest.1 | ${path}/mandoc.exe -Tascii >/dev/null
		if [ "$?" = '0' ]; then
			HAVE_MANDOC='yes'
			MANDOC="${path}/mandoc.exe"
			break;
		fi
	elif [ -x "${path}/nroff" ]; then
		cat conftest.1 | ${path}/nroff -Tmandoc >/dev/null
		if [ "$?" = '0' ]; then
			HAVE_MANDOC='yes'
			MANDOC="${path}/nroff -Tmandoc"
			break;
		fi
	elif [ -e "${path}/nroff.exe" ]; then
		cat conftest.1 | ${path}/nroff.exe -Tmandoc >/dev/null
		if [ "$?" = '0' ]; then
			HAVE_MANDOC='yes'
			MANDOC="${path}/nroff.exe -Tmandoc"
			break;
		fi
	fi
done
IFS=$bb_save_IFS

rm -f conftest.1

if [ "${HAVE_MANDOC}" = 'no' ]; then
	if [ "${with_manpages}" = 'yes' ]; then
		echo '*'
		echo '* --with-manpages was requested, but either the'
		echo '* nroff/mandoc utility or the mdoc macro'
		echo '* package were not found.'
		echo '*'
		exit 1
	fi
	echo 'HAVE_MANDOC=no' >> Makefile.config
	echo 'NOMAN=yes' >> Makefile.config
	echo 'NOMANLINKS=yes' >> Makefile.config
else
	echo 'HAVE_MANDOC=yes' >> Makefile.config
	echo "MANDOC=${MANDOC}" >> Makefile.config
	if [ "${with_manpages}" = 'no' ]; then
		echo 'NOMAN=yes' >> Makefile.config
		echo 'NOMANLINKS=yes' >> Makefile.config
	else
		if [ "${with_manlinks}" != 'yes' ]; then
			echo 'NOMANLINKS=yes' >> Makefile.config
		fi
	fi
fi
if [ "${with_docs}" = 'no' ]; then
	echo 'NODOC=yes' >> Makefile.config
fi
if [ "${enable_nls}" = "yes" ]; then
ENABLE_NLS="yes"
bb_o=$bb_incdir/enable_nls.h
echo '#ifndef ENABLE_NLS' >$bb_o
echo "#define ENABLE_NLS \"$ENABLE_NLS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"ENABLE_NLS\"] = \"$ENABLE_NLS\"" >>configure.lua
msgfmt=''
bb_save_IFS=$IFS
IFS=$PATH_SEPARATOR
for path in $PATH; do
	if [ -x "${path}/msgfmt" ]; then
		msgfmt=${path}/msgfmt
		break
	elif [ -e "${path}/msgfmt.exe" ]; then
		msgfmt=${path}/msgfmt.exe
		break
	fi
done
IFS=$bb_save_IFS

if [ "${msgfmt}" != '' ]; then
	HAVE_GETTEXT='yes'
else
	HAVE_GETTEXT='no'
fi
bb_o=$bb_incdir/enable_nls.h
echo '#ifndef ENABLE_NLS' >$bb_o
echo "#define ENABLE_NLS \"$ENABLE_NLS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"ENABLE_NLS\"] = \"$ENABLE_NLS\"" >>configure.lua
else
ENABLE_NLS="no"
HAVE_GETTEXT="no"
echo '#undef ENABLE_NLS' >$bb_incdir/enable_nls.h
echo 'hdefs["ENABLE_NLS"] = nil' >>configure.lua
fi
CTAGS=''
bb_save_IFS=$IFS
IFS=$PATH_SEPARATOR
if [ "${with_ctags}" = 'yes' ]; then
	for path in $PATH; do
		if [ -x "${path}/ectags" ]; then
			CTAGS="${path}/ectags"
			break
		elif [ -e "${path}/ectags.exe" ]; then
			CTAGS="${path}/ectags.exe"
			break
		fi
	done
	if [ "${CTAGS}" = '' ]; then
		for path in $PATH; do
			if [ -x "${path}/ctags" ]; then
				CTAGS="${path}/ctags"
				break
			elif [ -e "${path}/ctags.exe" ]; then
				CTAGS="${path}/ctags.exe"
				break
			fi
		done
	fi
fi
IFS=$bb_save_IFS
echo "CTAGS=${CTAGS}" >> Makefile.config
if [ "${with_libtool}" = "yes" ]; then
	if [ "${prefix_libtool}" != '' -a "${prefix_libtool}" != 'bundled' ]; then
		LIBTOOL_BUNDLED='no'
		LIBTOOL="${prefix_libtool}"
	else
		LIBTOOL_BUNDLED='yes'
		LIBTOOL=\${TOP}/mk/libtool/libtool
	fi
	echo "USE_LIBTOOL=Yes" >> Makefile.config
	echo "LIBTOOL_BUNDLED=${LIBTOOL_BUNDLED}" >> Makefile.config
	echo "LIBTOOL=${LIBTOOL}" >> Makefile.config
else
	echo "USE_LIBTOOL=No" >> Makefile.config
fi
echo "PREFIX?=${PREFIX}" >> Makefile.config
echo "LDFLAGS?=${LDFLAGS}" >> Makefile.config

if [ "${PKGCONFIG}" != "" ]; then
	case "${host}" in
	*-*-freebsd* | *-*-dragonfly*)
		PKGCONFIG_LIBDIR="\${PREFIX}/libdata/pkgconfig"
		;;
	*)
		PKGCONFIG_LIBDIR="\${PREFIX}/lib/pkgconfig"
		;;
	esac
fi
bb_o=$bb_incdir/prefix.h
echo '#ifndef PREFIX' >$bb_o
echo "#define PREFIX \"$PREFIX\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"PREFIX\"] = \"$PREFIX\"" >>configure.lua
if [ "${bindir}" != '' ]; then
	BINDIR="${bindir}"
	BINDIR_SPECIFIED='yes'
else
	BINDIR="${PREFIX}/bin"
fi
bb_o=$bb_incdir/bindir.h
echo '#ifndef BINDIR' >$bb_o
echo "#define BINDIR \"$BINDIR\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"BINDIR\"] = \"$BINDIR\"" >>configure.lua
if [ "${libdir}" != '' ]; then
	LIBDIR="${libdir}"
	LIBDIR_SPECIFIED='yes'
else
	LIBDIR="${PREFIX}/lib"
fi
bb_o=$bb_incdir/libdir.h
echo '#ifndef LIBDIR' >$bb_o
echo "#define LIBDIR \"$LIBDIR\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"LIBDIR\"] = \"$LIBDIR\"" >>configure.lua
if [ "${moduledir}" != '' ]; then
	MODULEDIR="${moduledir}"
	MODULEDIR_SPECIFIED='yes'
else
	MODULEDIR="${PREFIX}/lib"
fi
bb_o=$bb_incdir/moduledir.h
echo '#ifndef MODULEDIR' >$bb_o
echo "#define MODULEDIR \"$MODULEDIR\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"MODULEDIR\"] = \"$MODULEDIR\"" >>configure.lua
if [ "${libexecdir}" != '' ]; then
	LIBEXECDIR="${libexecdir}"
	LIBEXECDIR_SPECIFIED='yes'
else
	LIBEXECDIR="${PREFIX}/libexec"
fi
bb_o=$bb_incdir/libexecdir.h
echo '#ifndef LIBEXECDIR' >$bb_o
echo "#define LIBEXECDIR \"$LIBEXECDIR\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"LIBEXECDIR\"] = \"$LIBEXECDIR\"" >>configure.lua
if [ "${datadir}" != '' ]; then
	DATADIR="${datadir}"
	DATADIR_SPECIFIED='yes'
else
	DATADIR="${PREFIX}/share"
fi
bb_o=$bb_incdir/datadir.h
echo '#ifndef DATADIR' >$bb_o
echo "#define DATADIR \"$DATADIR\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"DATADIR\"] = \"$DATADIR\"" >>configure.lua
if [ "${statedir}" != '' ]; then
	STATEDIR="${statedir}"
	STATEDIR_SPECIFIED='yes'
else
	STATEDIR="${PREFIX}/var"
fi
bb_o=$bb_incdir/statedir.h
echo '#ifndef STATEDIR' >$bb_o
echo "#define STATEDIR \"$STATEDIR\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"STATEDIR\"] = \"$STATEDIR\"" >>configure.lua
if [ "${sysconfdir}" != '' ]; then
	SYSCONFDIR="${sysconfdir}"
	SYSCONFDIR_SPECIFIED='yes'
else
	SYSCONFDIR="${PREFIX}/etc"
fi
bb_o=$bb_incdir/sysconfdir.h
echo '#ifndef SYSCONFDIR' >$bb_o
echo "#define SYSCONFDIR \"$SYSCONFDIR\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"SYSCONFDIR\"] = \"$SYSCONFDIR\"" >>configure.lua
if [ "${localedir}" != '' ]; then
	LOCALEDIR="${localedir}"
	LOCALEDIR_SPECIFIED='yes'
else
	LOCALEDIR="${DATADIR}/locale"
fi
bb_o=$bb_incdir/localedir.h
echo '#ifndef LOCALEDIR' >$bb_o
echo "#define LOCALEDIR \"$LOCALEDIR\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"LOCALEDIR\"] = \"$LOCALEDIR\"" >>configure.lua
if [ "${mandir}" != '' ]; then
	MANDIR="${mandir}"
	MANDIR_SPECIFIED='yes'
else
	case "${host}" in
	*-*-darwin*)
		MANDIR="${PREFIX}/share/man"
		;;
	*)
		MANDIR="${PREFIX}/man"
		;;
	esac
fi
bb_o=$bb_incdir/mandir.h
echo '#ifndef MANDIR' >$bb_o
echo "#define MANDIR \"$MANDIR\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"MANDIR\"] = \"$MANDIR\"" >>configure.lua
PACKAGE="Agar"
bb_o=$bb_incdir/package.h
echo '#ifndef PACKAGE' >$bb_o
echo "#define PACKAGE \"$PACKAGE\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"PACKAGE\"] = \"$PACKAGE\"" >>configure.lua
VERSION="1.6.0"
bb_o=$bb_incdir/version.h
echo '#ifndef VERSION' >$bb_o
echo "#define VERSION \"$VERSION\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"VERSION\"] = \"$VERSION\"" >>configure.lua
RELEASE="Nullability Complete"
bb_o=$bb_incdir/release.h
echo '#ifndef RELEASE' >$bb_o
echo "#define RELEASE \"$RELEASE\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"RELEASE\"] = \"$RELEASE\"" >>configure.lua
if [ "${DATADIR_SPECIFIED}" != 'yes' ]; then
DATADIR="${PREFIX}/share/agar"
bb_o=$bb_incdir/datadir.h
echo '#ifndef DATADIR' >$bb_o
echo "#define DATADIR \"$DATADIR\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"DATADIR\"] = \"$DATADIR\"" >>configure.lua
fi
if [ "${LOCALEDIR_SPECIFIED}" != 'yes' ]; then
LOCALEDIR="${DATADIR}/locale"
bb_o=$bb_incdir/localedir.h
echo '#ifndef LOCALEDIR' >$bb_o
echo "#define LOCALEDIR \"$LOCALEDIR\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"LOCALEDIR\"] = \"$LOCALEDIR\"" >>configure.lua
fi
if [ "${TTFDIR_SPECIFIED}" != 'yes' ]; then
TTFDIR="${DATADIR}/fonts"
bb_o=$bb_incdir/ttfdir.h
echo '#ifndef TTFDIR' >$bb_o
echo "#define TTFDIR \"$TTFDIR\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"TTFDIR\"] = \"$TTFDIR\"" >>configure.lua
fi
if [ "${INCLDIR_SPECIFIED}" != 'yes' ]; then
INCLDIR="${PREFIX}/include/agar"
bb_o=$bb_incdir/incldir.h
echo '#ifndef INCLDIR' >$bb_o
echo "#define INCLDIR \"$INCLDIR\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"INCLDIR\"] = \"$INCLDIR\"" >>configure.lua
fi
if [ "${DATADIR}" = "NONE" ]
 then
LOCALEDIR="NONE"
bb_o=$bb_incdir/localedir.h
echo '#ifndef LOCALEDIR' >$bb_o
echo "#define LOCALEDIR \"$LOCALEDIR\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"LOCALEDIR\"] = \"$LOCALEDIR\"" >>configure.lua
LOCALEDIR="NONE"
TTFDIR="NONE"
bb_o=$bb_incdir/ttfdir.h
echo '#ifndef TTFDIR' >$bb_o
echo "#define TTFDIR \"$TTFDIR\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"TTFDIR\"] = \"$TTFDIR\"" >>configure.lua
TTFDIR="NONE"
fi
echo '    _       _       _     ___'
echo '  / _ \   / _ \   / _ \  |  _ \'
echo ' | |_| | | (_| | | |_| | | |_) |'
echo ' |_| |_|  \__, | |_| |_| |_| |_|'
echo '          |___/                 '
if [ "${with_memory_model}" = '' ]
 then
	case "${host}" in
	amd64-* | hppa64-* | ia64-* | mips64-* | ppc64*-* | sh64-* | sparc64-* | x86_64-*)
	    with_memory_model="L"
	    ;;
	bbc | c64 | c128 | geos | nes)
	    with_memory_model="S"
	    ;;
	*)
	    with_memory_model="M"
	    ;;
	esac
fi
case "${with_memory_model}" in
S* | s*)
AG_MODEL="AG_SMALL"
bb_o=$BLD/include/agar/config/ag_model.h
echo '#ifndef AG_MODEL' >$bb_o
echo "#define AG_MODEL $AG_MODEL" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"AG_MODEL\"] = $AG_MODEL" >>configure.lua
MEMORY_MODEL="SMALL"
	;;
M* | m*)
AG_MODEL="AG_MEDIUM"
bb_o=$BLD/include/agar/config/ag_model.h
echo '#ifndef AG_MODEL' >$bb_o
echo "#define AG_MODEL $AG_MODEL" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"AG_MODEL\"] = $AG_MODEL" >>configure.lua
MEMORY_MODEL="MEDIUM"
	;;
L* | l*)
AG_MODEL="AG_LARGE"
bb_o=$BLD/include/agar/config/ag_model.h
echo '#ifndef AG_MODEL' >$bb_o
echo "#define AG_MODEL $AG_MODEL" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"AG_MODEL\"] = $AG_MODEL" >>configure.lua
MEMORY_MODEL="LARGE"
	;;
*)
	echo "No such memory model: ${with_memory_model} (use: SMALL, MEDIUM or LARGE)"
	exit 1
esac
echo "                 v$VERSION for $host_machine ($MEMORY_MODEL)"
echo ""
$ECHO_N 'checking for a C compiler...'
$ECHO_N '# checking for a C compiler...' >>config.log
# BEGIN cc
if [ "$CROSS_COMPILING" = "yes" ]; then
CROSSPFX="${host}-"
else
CROSSPFX=""
fi
HAVE_CC65="no"
if [ "$CC" = "" ]; then
case "${host}" in
apple2 | apple2enh | atari | atmos | c16 | c64 | c128 | cbm510 | cbm610 | geos | lunix | lynx | nes | pet | plus4 | supervision | vic20)
bb_save_IFS=$IFS
IFS=$PATH_SEPARATOR
for i in $PATH; do
if [ -x "${i}/cc65" ]; then
CC="${i}/cc65"
HAVE_CC65="yes"
CROSS_COMPILING="yes"
break
elif [ -x "${i}/cc65.exe" ]; then
CC="${i}/cc65.exe"
HAVE_CC65="yes"
CROSS_COMPILING="yes"
break
fi
done
IFS=$bb_save_IFS
;;
*)
bb_save_IFS=$IFS
IFS=$PATH_SEPARATOR
for i in $PATH; do
if [ -x "${i}/${CROSSPFX}clang" ]; then
CC="${i}/${CROSSPFX}clang"
break
elif [ -x "${i}/${CROSSPFX}clang70" ]; then
CC="${i}/${CROSSPFX}clang70"
break
elif [ -x "${i}/${CROSSPFX}clang60" ]; then
CC="${i}/${CROSSPFX}clang60"
break
elif [ -x "${i}/${CROSSPFX}cc" ]; then
CC="${i}/${CROSSPFX}cc"
break
elif [ -x "${i}/${CROSSPFX}gcc" ]; then
CC="${i}/${CROSSPFX}gcc"
break
elif [ -x "${i}/${CROSSPFX}gcc-6" ]; then
CC="${i}/${CROSSPFX}gcc-6"
break
elif [ -x "${i}/${CROSSPFX}gcc7" ]; then
CC="${i}/${CROSSPFX}gcc7"
break
elif [ -x "${i}/${CROSSPFX}gcc8" ]; then
CC="${i}/${CROSSPFX}gcc8"
break
elif [ -x "${i}/${CROSSPFX}gcc5" ]; then
CC="${i}/${CROSSPFX}gcc5"
break
elif [ -x "${i}/${CROSSPFX}gcc49" ]; then
CC="${i}/${CROSSPFX}gcc49"
break
elif [ -x "${i}/${CROSSPFX}gcc48" ]; then
CC="${i}/${CROSSPFX}gcc48"
break
elif [ -x "${i}/${CROSSPFX}clang.exe" ]; then
CC="${i}/${CROSSPFX}clang.exe"
break
elif [ -x "${i}/${CROSSPFX}cc.exe" ]; then
CC="${i}/${CROSSPFX}cc.exe"
break
elif [ -x "${i}/${CROSSPFX}gcc.exe" ]; then
CC="${i}/${CROSSPFX}gcc.exe"
break
fi
done
IFS=$bb_save_IFS
;;
esac
	if [ "$CC" = '' ]; then
		if [ "$HAVE_CC65" = "yes" ]; then
			echo "*"
			echo "* Cannot find cc65 in PATH. You may need to set CC."
			echo "* You can download cc65 from: https://www.cc65.org/."
			echo "*"
			echo "Cannot find cc65 in PATH." >>config.log
		else
			echo "*"
echo "* Cannot find one of clang, clang70, clang60, cc, gcc, gcc-6, gcc7, gcc8, gcc5, gcc49, gcc48, clang.exe, cc.exe, gcc.exe"
			echo "* under the current PATH, which is:"
			echo "* $PATH"
			echo "*"
			echo "* You may need to set the CC environment variable."
			echo "*"
			echo "Cannot find C compiler in PATH." >>config.log
		fi
		HAVE_CC="no"
		echo "no"
		echo "no" >>config.log
	else
		HAVE_CC="yes"
		echo "yes, ${CC}"
		echo "yes, ${CC}" >>config.log
	fi
else
	HAVE_CC="yes"
	if ${CC} -V 2>&1 |grep -q ^cc65; then
		echo "using cc65 (${CC})"
		echo "using cc65 (${CC})" >>config.log
		HAVE_CC65="yes"
		CROSS_COMPILING="yes"
	else
		echo "using ${CC}"
		echo "using ${CC}" >>config.log
	fi
fi

if [ "${HAVE_CC}" = "yes" ]; then
	$ECHO_N 'checking whether the C compiler works...'
	$ECHO_N '# checking whether the C compiler works...' >>config.log
	cat << 'EOT' > conftest.c
int main(int argc, char *argv[]) { return (0); }
EOT
	$CC -o conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
	    echo "no"
	    echo "no, compilation failed" >>config.log
		HAVE_CC="no"
	else
		HAVE_CC="yes"
	fi

	if [ "${HAVE_CC}" = "yes" ]; then
		if [ "${EXECSUFFIX}" = '' ]; then
			EXECSUFFIX=''
			for OUTFILE in conftest.exe conftest conftest.*; do
				if [ -f $OUTFILE ]; then
					case $OUTFILE in
					*.c | *.cc | *.m | *.o | *.obj | *.bb | *.bbg | *.d | *.pdb | *.tds | *.xcoff | *.dSYM | *.xSYM )
						;;
					*.* )
						EXECSUFFIX=`expr "$OUTFILE" : '[^.]*\(\..*\)'`
						break ;;
					* )
						break ;;
					esac;
			    fi
			done
			if [ "$EXECSUFFIX" != '' ]; then
				echo "yes, it outputs $EXECSUFFIX files"
				echo "yes, it outputs $EXECSUFFIX files" >>config.log
			else
				echo "yes"
				echo "yes" >>config.log
			fi
bb_o=$bb_incdir/execsuffix.h
echo '#ifndef EXECSUFFIX' >$bb_o
echo "#define EXECSUFFIX \"$EXECSUFFIX\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"EXECSUFFIX\"] = \"$EXECSUFFIX\"" >>configure.lua
		else
			echo "yes"
			echo "yes" >>config.log
		fi
	fi
	if [ "${keep_conftest}" != "yes" ]; then
		rm -f conftest.c conftest$EXECSUFFIX
	fi
	TEST_CFLAGS=''
fi
if [ "${HAVE_CC}" = "yes" ]; then
$ECHO_N 'cc: checking whether compiler is Clang...'
$ECHO_N '# cc: checking whether compiler is Clang...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#if !defined(__clang__)
# error "is not clang"
#endif
int main(int argc, char *argv[]) { return (0); }
EOT
echo >>config.log
echo '# C: HAVE_CC_CLANG' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest$$ conftest$$.c  2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest$$ conftest$$.c  2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_CC_CLANG=yes
bb_o=$bb_incdir/have_cc_clang.h
echo '#ifndef HAVE_CC_CLANG' >$bb_o
echo "#define HAVE_CC_CLANG \"$HAVE_CC_CLANG\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_CC_CLANG\"] = \"$HAVE_CC_CLANG\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_CC_CLANG=no
echo '#undef HAVE_CC_CLANG' >$bb_incdir/have_cc_clang.h
echo 'hdefs["HAVE_CC_CLANG"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
$ECHO_N 'cc: checking whether compiler is GCC...'
$ECHO_N '# cc: checking whether compiler is GCC...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#if !defined(__GNUC__) || defined(__clang__)
# error "is not gcc"
#endif
int main(int argc, char *argv[]) { return (0); }
EOT
echo >>config.log
echo '# C: HAVE_CC_GCC' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest$$ conftest$$.c  2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest$$ conftest$$.c  2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_CC_GCC=yes
bb_o=$bb_incdir/have_cc_gcc.h
echo '#ifndef HAVE_CC_GCC' >$bb_o
echo "#define HAVE_CC_GCC \"$HAVE_CC_GCC\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_CC_GCC\"] = \"$HAVE_CC_GCC\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_CC_GCC=no
echo '#undef HAVE_CC_GCC' >$bb_incdir/have_cc_gcc.h
echo 'hdefs["HAVE_CC_GCC"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
$ECHO_N 'cc: checking for compiler warning options...'
$ECHO_N '# cc: checking for compiler warning options...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
int main(int argc, char *argv[]) { return (0); }
EOT
echo >>config.log
echo '# C: HAVE_CC_WARNINGS' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -Wall -o $testdir/conftest$$ conftest$$.c  2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -Wall -o $testdir/conftest$$ conftest$$.c  2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_CC_WARNINGS=yes
bb_o=$bb_incdir/have_cc_warnings.h
echo '#ifndef HAVE_CC_WARNINGS' >$bb_o
echo "#define HAVE_CC_WARNINGS \"$HAVE_CC_WARNINGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_CC_WARNINGS\"] = \"$HAVE_CC_WARNINGS\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_CC_WARNINGS=no
echo '#undef HAVE_CC_WARNINGS' >$bb_incdir/have_cc_warnings.h
echo 'hdefs["HAVE_CC_WARNINGS"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_CC_WARNINGS}" = "yes" ]; then
TEST_CFLAGS="-Wall"
fi
$ECHO_N 'cc: checking for float and double...'
$ECHO_N '# cc: checking for float and double...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <stdio.h>
int
main(int argc, char *argv[])
{
	float f = 0.1f;
	double d = 0.2;

	printf("%f", f);
	return ((double)f + d) > 0.2 ? 1 : 0;
}
EOT
echo >>config.log
echo '# C: HAVE_FLOAT' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_FLOAT=yes
bb_o=$bb_incdir/have_float.h
echo '#ifndef HAVE_FLOAT' >$bb_o
echo "#define HAVE_FLOAT \"$HAVE_FLOAT\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_FLOAT\"] = \"$HAVE_FLOAT\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_FLOAT=no
echo '#undef HAVE_FLOAT' >$bb_incdir/have_float.h
echo 'hdefs["HAVE_FLOAT"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
$ECHO_N 'cc: checking for long double...'
$ECHO_N '# cc: checking for long double...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <stdio.h>
int
main(int argc, char *argv[])
{
	long double ld = 0.1;

	printf("%Lf", ld);
	return (ld + 0.1) > 0.2 ? 1 : 0;
}
EOT
echo >>config.log
echo '# C: HAVE_LONG_DOUBLE' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_LONG_DOUBLE=yes
bb_o=$bb_incdir/have_long_double.h
echo '#ifndef HAVE_LONG_DOUBLE' >$bb_o
echo "#define HAVE_LONG_DOUBLE \"$HAVE_LONG_DOUBLE\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_LONG_DOUBLE\"] = \"$HAVE_LONG_DOUBLE\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_LONG_DOUBLE=no
echo '#undef HAVE_LONG_DOUBLE' >$bb_incdir/have_long_double.h
echo 'hdefs["HAVE_LONG_DOUBLE"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
$ECHO_N 'cc: checking for long long...'
$ECHO_N '# cc: checking for long long...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
int
main(int argc, char *argv[])
{
	long long ll = -1;
	unsigned long long ull = 1;

	return (ll != -1 || ull != 1);
}
EOT
echo >>config.log
echo '# C: HAVE_LONG_LONG' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_LONG_LONG=yes
bb_o=$bb_incdir/have_long_long.h
echo '#ifndef HAVE_LONG_LONG' >$bb_o
echo "#define HAVE_LONG_LONG \"$HAVE_LONG_LONG\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_LONG_LONG\"] = \"$HAVE_LONG_LONG\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_LONG_LONG=no
echo '#undef HAVE_LONG_LONG' >$bb_incdir/have_long_long.h
echo 'hdefs["HAVE_LONG_LONG"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
$ECHO_N 'cc: checking for cygwin environment...'
$ECHO_N '# cc: checking for cygwin environment...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <sys/types.h>
#include <sys/stat.h>
#include <windows.h>

int
main(int argc, char *argv[]) {
	struct stat sb;
	DWORD rv;
	rv = GetFileAttributes("foo");
	stat("foo", &sb);
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_CYGWIN' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -mcygwin -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -mcygwin -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_CYGWIN=yes
bb_o=$bb_incdir/have_cygwin.h
echo '#ifndef HAVE_CYGWIN' >$bb_o
echo "#define HAVE_CYGWIN \"$HAVE_CYGWIN\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_CYGWIN\"] = \"$HAVE_CYGWIN\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_CYGWIN=no
echo '#undef HAVE_CYGWIN' >$bb_incdir/have_cygwin.h
echo 'hdefs["HAVE_CYGWIN"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
$ECHO_N 'cc: checking for -mwindows option...'
$ECHO_N '# cc: checking for -mwindows option...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <windows.h>
int
main(int argc, char *argv[]) {
	return GetFileAttributes("foo") ? 0 : 1;
}
EOT
echo >>config.log
echo '# C: HAVE_CC_MWINDOWS' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -mwindows -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -mwindows -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_CC_MWINDOWS=yes
bb_o=$bb_incdir/have_cc_mwindows.h
echo '#ifndef HAVE_CC_MWINDOWS' >$bb_o
echo "#define HAVE_CC_MWINDOWS \"$HAVE_CC_MWINDOWS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_CC_MWINDOWS\"] = \"$HAVE_CC_MWINDOWS\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_CC_MWINDOWS=no
echo '#undef HAVE_CC_MWINDOWS' >$bb_incdir/have_cc_mwindows.h
echo 'hdefs["HAVE_CC_MWINDOWS"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_CC_MWINDOWS}" = "yes" ]; then
PROG_GUI_FLAGS="-mwindows"
else
PROG_GUI_FLAGS=""
fi
$ECHO_N 'cc: checking for -mconsole option...'
$ECHO_N '# cc: checking for -mconsole option...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <windows.h>
int
main(int argc, char *argv[]) {
	return GetFileAttributes("foo") ? 0 : 1;
}
EOT
echo >>config.log
echo '# C: HAVE_CC_MCONSOLE' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -mconsole -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -mconsole -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_CC_MCONSOLE=yes
bb_o=$bb_incdir/have_cc_mconsole.h
echo '#ifndef HAVE_CC_MCONSOLE' >$bb_o
echo "#define HAVE_CC_MCONSOLE \"$HAVE_CC_MCONSOLE\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_CC_MCONSOLE\"] = \"$HAVE_CC_MCONSOLE\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_CC_MCONSOLE=no
echo '#undef HAVE_CC_MCONSOLE' >$bb_incdir/have_cc_mconsole.h
echo 'hdefs["HAVE_CC_MCONSOLE"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_CC_MCONSOLE}" = "yes" ]; then
PROG_CLI_FLAGS="-mconsole"
else
PROG_CLI_FLAGS=""
fi
case "${host}" in
*-*-cygwin* | *-*-mingw32*)
$ECHO_N 'cc: checking for linker -no-undefined option...'
$ECHO_N '# cc: checking for linker -no-undefined option...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
int main(int argc, char *argv[]) { return (0); }
EOT
echo >>config.log
echo '# C: HAVE_LD_NO_UNDEFINED' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -Wl,--no-undefined -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -Wl,--no-undefined -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_LD_NO_UNDEFINED=yes
bb_o=$bb_incdir/have_ld_no_undefined.h
echo '#ifndef HAVE_LD_NO_UNDEFINED' >$bb_o
echo "#define HAVE_LD_NO_UNDEFINED \"$HAVE_LD_NO_UNDEFINED\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_LD_NO_UNDEFINED\"] = \"$HAVE_LD_NO_UNDEFINED\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_LD_NO_UNDEFINED=no
echo '#undef HAVE_LD_NO_UNDEFINED' >$bb_incdir/have_ld_no_undefined.h
echo 'hdefs["HAVE_LD_NO_UNDEFINED"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_LD_NO_UNDEFINED}" = "yes" ]; then
LIBTOOLOPTS_SHARED="${LIBTOOLOPTS_SHARED} -no-undefined -Wl,--no-undefined"
fi
$ECHO_N 'cc: checking for linker -static-libgcc option...'
$ECHO_N '# cc: checking for linker -static-libgcc option...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
int main(int argc, char *argv[]) { return (0); }
EOT
echo >>config.log
echo '# C: HAVE_LD_STATIC_LIBGCC' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -static-libgcc -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -static-libgcc -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_LD_STATIC_LIBGCC=yes
bb_o=$bb_incdir/have_ld_static_libgcc.h
echo '#ifndef HAVE_LD_STATIC_LIBGCC' >$bb_o
echo "#define HAVE_LD_STATIC_LIBGCC \"$HAVE_LD_STATIC_LIBGCC\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_LD_STATIC_LIBGCC\"] = \"$HAVE_LD_STATIC_LIBGCC\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_LD_STATIC_LIBGCC=no
echo '#undef HAVE_LD_STATIC_LIBGCC' >$bb_incdir/have_ld_static_libgcc.h
echo 'hdefs["HAVE_LD_STATIC_LIBGCC"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_LD_STATIC_LIBGCC}" = "yes" ]; then
LIBTOOLOPTS_SHARED="${LIBTOOLOPTS_SHARED} -XCClinker -static-libgcc"
fi
;;
esac
bb_o=$bb_incdir/have_cc.h
echo '#ifndef HAVE_CC' >$bb_o
echo "#define HAVE_CC \"$HAVE_CC\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_CC\"] = \"$HAVE_CC\"" >>configure.lua
if [ "${HAVE_CC65}" = "yes" ]; then
CC_COMPILE=""
bb_o=$bb_incdir/have_cc65.h
echo '#ifndef HAVE_CC65' >$bb_o
echo "#define HAVE_CC65 \"$HAVE_CC65\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_CC65\"] = \"$HAVE_CC65\"" >>configure.lua
else
CC_COMPILE="-c"
echo '#undef HAVE_CC65' >$bb_incdir/have_cc65.h
echo 'hdefs["HAVE_CC65"] = nil' >>configure.lua
fi
else
HAVE_CC="no"
HAVE_CC65="no"
HAVE_CC_WARNINGS="no"
PROG_GUI_FLAGS=""
PROG_CLI_FLAGS=""
LIBTOOLOPTS_SHARED=""
TEST_CFLAGS=""
echo '#undef HAVE_CC' >$bb_incdir/have_cc.h
echo 'hdefs["HAVE_CC"] = nil' >>configure.lua
echo '#undef HAVE_CC_CLANG' >$bb_incdir/have_cc_clang.h
echo 'hdefs["HAVE_CC_CLANG"] = nil' >>configure.lua
echo '#undef HAVE_CC_GCC' >$bb_incdir/have_cc_gcc.h
echo 'hdefs["HAVE_CC_GCC"] = nil' >>configure.lua
echo '#undef HAVE_CC65' >$bb_incdir/have_cc65.h
echo 'hdefs["HAVE_CC65"] = nil' >>configure.lua
echo '#undef HAVE_CC_WARNINGS' >$bb_incdir/have_cc_warnings.h
echo 'hdefs["HAVE_CC_WARNINGS"] = nil' >>configure.lua
echo '#undef HAVE_FLOAT' >$bb_incdir/have_float.h
echo 'hdefs["HAVE_FLOAT"] = nil' >>configure.lua
echo '#undef HAVE_LONG_DOUBLE' >$bb_incdir/have_long_double.h
echo 'hdefs["HAVE_LONG_DOUBLE"] = nil' >>configure.lua
echo '#undef HAVE_LONG_LONG' >$bb_incdir/have_long_long.h
echo 'hdefs["HAVE_LONG_LONG"] = nil' >>configure.lua
echo '#undef HAVE_CYGWIN' >$bb_incdir/have_cygwin.h
echo 'hdefs["HAVE_CYGWIN"] = nil' >>configure.lua
echo '#undef HAVE_CC_MWINDOWS' >$bb_incdir/have_cc_mwindows.h
echo 'hdefs["HAVE_CC_MWINDOWS"] = nil' >>configure.lua
echo '#undef HAVE_CC_MCONSOLE' >$bb_incdir/have_cc_mconsole.h
echo 'hdefs["HAVE_CC_MCONSOLE"] = nil' >>configure.lua
echo '#undef HAVE_LD_NO_UNDEFINED' >$bb_incdir/have_ld_no_undefined.h
echo 'hdefs["HAVE_LD_NO_UNDEFINED"] = nil' >>configure.lua
echo '#undef HAVE_LD_STATIC_LIBGCC' >$bb_incdir/have_ld_static_libgcc.h
echo 'hdefs["HAVE_LD_STATIC_LIBGCC"] = nil' >>configure.lua
fi
# END cc
if [ "${HAVE_CC}" != "yes" ]; then
echo '* '
echo '# * ' >>config.log
echo '* This software requires a C compiler'
echo '# * This software requires a C compiler' >>config.log
echo '* '
echo '# * ' >>config.log
echo "***"
echo "*** ERROR: Required dependency cc not found"
echo "*** Failed! See ./config.log for more details."
echo "***"
exit 1
fi
case "${host}" in
bbc | c64 | c128 | geos | nes)
echo 'not enabling Objective-C compiler'
echo '# not enabling Objective-C compiler' >>config.log
HAVE_OBJC="no"
HAVE_OBJC_WARNINGS="no"
TEST_OBJCFLAGS=""
echo '#undef HAVE_OBJC' >$bb_incdir/have_objc.h
echo 'hdefs["HAVE_OBJC"] = nil' >>configure.lua
echo '#undef HAVE_OBJC_WARNINGS' >$bb_incdir/have_objc_warnings.h
echo 'hdefs["HAVE_OBJC_WARNINGS"] = nil' >>configure.lua
	enable_micro="yes"
	enable_gui="no"
	enable_shared="no"
	with_attributes="no"
	with_float="no"
	enable_ansi_color="no"
	enable_dso="no"
	enable_exec="no"
	enable_event_loop="no"
	enable_namespaces="no"
	enable_named_args="no"
	enable_net="no"
	enable_serialization="no"
	enable_string="no"
	enable_threads="no"
	enable_timers="no"
	enable_type_safety="no"
	enable_unicode="no"
	enable_user="no"
	enable_verbosity="no"
	enable_math="no"
	echo "checking for byte order...little-endian (${host})"
_MK_BYTE_ORDER="LE"
_MK_LITTLE_ENDIAN="yes"
bb_o=$bb_incdir/_mk_little_endian.h
echo '#ifndef _MK_LITTLE_ENDIAN' >$bb_o
echo "#define _MK_LITTLE_ENDIAN \"$_MK_LITTLE_ENDIAN\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"_MK_LITTLE_ENDIAN\"] = \"$_MK_LITTLE_ENDIAN\"" >>configure.lua
echo '#undef _MK_BIG_ENDIAN' >$bb_incdir/_mk_big_endian.h
echo 'hdefs["_MK_BIG_ENDIAN"] = nil' >>configure.lua
	;;
*)
$ECHO_N 'checking for Objective-C compiler...'
$ECHO_N '# checking for Objective-C compiler...' >>config.log
# BEGIN objc
if [ "$CROSS_COMPILING" = "yes" ]; then
CROSSPFX="${host}-"
else
CROSSPFX=""
fi
if [ "$OBJC" = "" ]; then
bb_save_IFS=$IFS
IFS=$PATH_SEPARATOR
for i in $PATH; do
if [ -x "${i}/${CROSSPFX}clang" ]; then
OBJC="${i}/${CROSSPFX}clang"
break
elif [ -x "${i}/${CROSSPFX}clang70" ]; then
OBJC="${i}/${CROSSPFX}clang70"
break
elif [ -x "${i}/${CROSSPFX}clang60" ]; then
OBJC="${i}/${CROSSPFX}clang60"
break
elif [ -x "${i}/${CROSSPFX}gcc" ]; then
OBJC="${i}/${CROSSPFX}gcc"
break
elif [ -x "${i}/${CROSSPFX}gcc-6" ]; then
OBJC="${i}/${CROSSPFX}gcc-6"
break
elif [ -x "${i}/${CROSSPFX}gcc7" ]; then
OBJC="${i}/${CROSSPFX}gcc7"
break
elif [ -x "${i}/${CROSSPFX}gcc8" ]; then
OBJC="${i}/${CROSSPFX}gcc8"
break
elif [ -x "${i}/${CROSSPFX}gcc5" ]; then
OBJC="${i}/${CROSSPFX}gcc5"
break
elif [ -x "${i}/${CROSSPFX}gcc49" ]; then
OBJC="${i}/${CROSSPFX}gcc49"
break
elif [ -x "${i}/${CROSSPFX}gcc48" ]; then
OBJC="${i}/${CROSSPFX}gcc48"
break
elif [ -x "${i}/${CROSSPFX}clang.exe" ]; then
OBJC="${i}/${CROSSPFX}clang.exe"
break
elif [ -x "${i}/${CROSSPFX}cc.exe" ]; then
OBJC="${i}/${CROSSPFX}cc.exe"
break
elif [ -x "${i}/${CROSSPFX}gcc.exe" ]; then
OBJC="${i}/${CROSSPFX}gcc.exe"
break
fi
done
IFS=$bb_save_IFS
	if [ "$OBJC" = '' ]; then
	    echo "*"
echo "* Cannot find one of clang, clang70, clang60, gcc, gcc-6, gcc7, gcc8, gcc5, gcc49, gcc48, clang.exe, cc.exe, gcc.exe"
		echo "* under the current PATH, which is:"
		echo "* $PATH"
		echo "*"
	    echo "* You may need to set the OBJC environment variable."
	    echo "*"
	    echo "Cannot find Objective C compiler in PATH." >>config.log
		HAVE_OBJC="no"
		echo "no"
	else
		HAVE_OBJC="yes"
		echo "yes, ${OBJC}"
		echo "yes, ${OBJC}" >>config.log
	fi
else
	HAVE_OBJC="yes"
	echo "using ${OBJC}"
fi

if [ "${HAVE_OBJC}" = "yes" ]; then
	$ECHO_N 'checking whether the Objective-C compiler works...'
	$ECHO_N '# checking whether the Objective-C compiler works...' >>config.log
	cat << 'EOT' > conftest.m
#import <stdio.h>
int main(int argc, char *argv[]) { return (0); }
EOT
	$OBJC -x objective-c -o conftest conftest.m 2>>config.log
	if [ $? != 0 ]; then
	    echo "no"
	    echo "no, compilation failed" >>config.log
		HAVE_OBJC="no"
	else
		HAVE_OBJC="yes"
	fi
	
	if [ "${HAVE_OBJC}" = "yes" ]; then
		if [ "${EXECSUFFIX}" = '' ]; then
			EXECSUFFIX=''
			for OUTFILE in conftest.exe conftest conftest.*; do
				if [ -f $OUTFILE ]; then
					case $OUTFILE in
					*.c | *.cc | *.m | *.o | *.obj | *.bb | *.bbg | *.d | *.pdb | *.tds | *.xcoff | *.dSYM | *.xSYM )
						;;
					*.* )
						EXECSUFFIX=`expr "$OUTFILE" : '[^.]*\(\..*\)'`
						break ;;
					* )
						break ;;
					esac;
			    fi
			done
			if [ "$EXECSUFFIX" != '' ]; then
				echo "yes, it outputs $EXECSUFFIX files"
				echo "yes, it outputs $EXECSUFFIX files" >>config.log
			else
				echo "yes"
				echo "yes" >>config.log
			fi
bb_o=$bb_incdir/execsuffix.h
echo '#ifndef EXECSUFFIX' >$bb_o
echo "#define EXECSUFFIX \"$EXECSUFFIX\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"EXECSUFFIX\"] = \"$EXECSUFFIX\"" >>configure.lua
		else
			echo "yes"
			echo "yes" >>config.log
		fi
	fi
	if [ "${keep_conftest}" != "yes" ]; then
		rm -f conftest.m conftest$EXECSUFFIX
	fi
	TEST_OBJCFLAGS=''
fi
if [ "${HAVE_OBJC}" = "yes" ]; then
$ECHO_N 'objc: checking for compiler warning options...'
$ECHO_N '# objc: checking for compiler warning options...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.m
int main(int argc, char *argv[]) { return (0); }
EOT
echo >>config.log
echo '# ObjC: HAVE_OBJC_WARNINGS' >>config.log
echo "cat << EOT >conftest$$.m" >>config.log
cat conftest$$.m>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -Wall -x objective-c -o $testdir/conftest$$ conftest$$.m  2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -Wall -x objective-c -o $testdir/conftest$$ conftest$$.m  2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_OBJC_WARNINGS=yes
bb_o=$bb_incdir/have_objc_warnings.h
echo '#ifndef HAVE_OBJC_WARNINGS' >$bb_o
echo "#define HAVE_OBJC_WARNINGS \"$HAVE_OBJC_WARNINGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_OBJC_WARNINGS\"] = \"$HAVE_OBJC_WARNINGS\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_OBJC_WARNINGS=no
echo '#undef HAVE_OBJC_WARNINGS' >$bb_incdir/have_objc_warnings.h
echo 'hdefs["HAVE_OBJC_WARNINGS"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.m $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_OBJC_WARNINGS}" = "yes" ]; then
TEST_OBJCFLAGS="-Wall"
fi
bb_o=$bb_incdir/have_objc.h
echo '#ifndef HAVE_OBJC' >$bb_o
echo "#define HAVE_OBJC \"$HAVE_OBJC\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_OBJC\"] = \"$HAVE_OBJC\"" >>configure.lua
rm -f conftest.m $testdir/conftest$EXECSUFFIX
else
HAVE_OBJC="no"
HAVE_OBJC_WARNINGS="no"
TEST_OBJCFLAGS=""
echo '#undef HAVE_OBJC' >$bb_incdir/have_objc.h
echo 'hdefs["HAVE_OBJC"] = nil' >>configure.lua
echo '#undef HAVE_OBJC_WARNINGS' >$bb_incdir/have_objc_warnings.h
echo 'hdefs["HAVE_OBJC_WARNINGS"] = nil' >>configure.lua
fi
# END objc
	if [ "${HAVE_FLOAT}" = "yes" -a "${with_float}" = "no" ]
 then
		echo "disabling floating-point support"
HAVE_FLOAT="no"
HAVE_LONG_DOUBLE="no"
echo '#undef HAVE_FLOAT' >$bb_incdir/have_float.h
echo 'hdefs["HAVE_FLOAT"] = nil' >>configure.lua
echo '#undef HAVE_LONG_DOUBLE' >$bb_incdir/have_long_double.h
echo 'hdefs["HAVE_LONG_DOUBLE"] = nil' >>configure.lua
	fi
	if [ "${CROSS_COMPILING}" = "yes" ]
 then
		if [ "${byte_order}" = "" ]
 then
			case "${host}" in
			*-*-mingw32*)
				echo "*"
				echo "* Assuming ${host} to be little-endian."
				echo "*"
				byte_order="LE"
				;;
			*)
				echo "*"
				echo "* Cannot guess the byte order of ${host}."
				echo "* Please use --byte-order=LE or --byte-order=BE"
				echo "*"
				exit 1
				;;
			esac
		fi
		echo "checking for byte order...${byte_order} (given)"
	fi
$ECHO_N 'checking for byte order...'
$ECHO_N '# checking for byte order...' >>config.log
# BEGIN byte_order
if [ "${byte_order}" != "" ]; then
if [ "${byte_order}" = "LE" ]; then
_MK_BYTE_ORDER="LE"
_MK_LITTLE_ENDIAN="yes"
bb_o=$bb_incdir/_mk_little_endian.h
echo '#ifndef _MK_LITTLE_ENDIAN' >$bb_o
echo "#define _MK_LITTLE_ENDIAN \"$_MK_LITTLE_ENDIAN\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"_MK_LITTLE_ENDIAN\"] = \"$_MK_LITTLE_ENDIAN\"" >>configure.lua
echo '#undef _MK_BIG_ENDIAN' >$bb_incdir/_mk_big_endian.h
echo 'hdefs["_MK_BIG_ENDIAN"] = nil' >>configure.lua
else
if [ "${byte_order}" = "BE" ]; then
_MK_BYTE_ORDER="BE"
_MK_BIG_ENDIAN="yes"
bb_o=$bb_incdir/_mk_big_endian.h
echo '#ifndef _MK_BIG_ENDIAN' >$bb_o
echo "#define _MK_BIG_ENDIAN \"$_MK_BIG_ENDIAN\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"_MK_BIG_ENDIAN\"] = \"$_MK_BIG_ENDIAN\"" >>configure.lua
echo '#undef _MK_LITTLE_ENDIAN' >$bb_incdir/_mk_little_endian.h
echo 'hdefs["_MK_LITTLE_ENDIAN"] = nil' >>configure.lua
else
echo "***"
echo "*** ERROR: Usage: --byte-order=[LE|BE]"
echo "*** Failed! See ./config.log for more details."
echo "***"
exit 1
fi
fi
else
cat << EOT > conftest.c
#include <sys/types.h>
#include <sys/param.h>
int
main(int argc, char *argv[])
{
#if BYTE_ORDER == BIG_ENDIAN
	static volatile char *bo = "BiGEnDiANBiGEnDiANBiGEnDiANBiGEnDiANBiGEnDiANBiGEnDiANBiGEnDiANBiGEnDiANBiGEnDiANBiGEnDiANBiGEnDiANBiGEnDiANBiGEnDiANBiGEnDiANBiGEnDiANBiGEnDiANBiGEnDiANBiGEnDiANBiGEnDiANBiGEnDiAN";
#else
	static volatile char *bo = "LiTTLeEnDiANLiTTLeEnDiANLiTTLeEnDiANLiTTLeEnDiANLiTTLeEnDiANLiTTLeEnDiANLiTTLeEnDiANLiTTLeEnDiANLiTTLeEnDiANLiTTLeEnDiANLiTTLeEnDiANLiTTLeEnDiANLiTTLeEnDiANLiTTLeEnDiANLiTTLeEnDiAN";
#endif
	int c = 0;
	volatile char *p = bo;
	while (*p != '\0') { c *= (int)*p; }
	return (c>123?c:456);
}

EOT
echo "$CC $CFLAGS  -o $testdir/conftest conftest.c" >>config.log
$CC $CFLAGS  -o $testdir/conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "Failed to compile test for byte order, code $?"
	echo "Failed to compile test for byte order, code $?" >> config.log
	exit 1
fi
rm -f conftest.c

_MK_BYTE_ORDER=''
_MK_BYTE_ORDER_LESTRING='LiTTLeEnD'
_MK_BYTE_ORDER_BESTRING='BiGEnDiAN'
od -tc $testdir/conftest$EXECSUFFIX | sed 's/ //g' > $testdir/conftest.dump

if grep "$_MK_BYTE_ORDER_LESTRING" $testdir/conftest.dump >/dev/null; then
	_MK_BYTE_ORDER="LE"
	if grep "$_MK_BYTE_ORDER_BESTRING" $testdir/conftest.dump >/dev/null; then
		echo '*'
		echo '* Unable to auto-determine host byte order. Please re-run ./configure'
		echo '* with --byte-order=LE or --byte-order=BE.'
		echo '*'
		exit 1
	fi
else
	if grep "$_MK_BYTE_ORDER_BESTRING" $testdir/conftest.dump >/dev/null; then
		_MK_BYTE_ORDER="BE"
		if grep "$_MK_BYTE_ORDER_LESTRING" $testdir/conftest.dump >/dev/null; then
			echo '*'
			echo '* Unable to auto-determine host byte order. Please re-run ./configure'
			echo '* with --byte-order=LE or --byte-order=BE.'
			echo '*'
			exit 1
		fi
	fi
fi
rm -f conftest.c $testdir/conftest $testdir/conftest.dump
fi
if [ "$_MK_BYTE_ORDER" = "LE" ]; then
echo 'little-endian'
echo '# little-endian' >>config.log
_MK_LITTLE_ENDIAN="yes"
bb_o=$bb_incdir/_mk_little_endian.h
echo '#ifndef _MK_LITTLE_ENDIAN' >$bb_o
echo "#define _MK_LITTLE_ENDIAN \"$_MK_LITTLE_ENDIAN\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"_MK_LITTLE_ENDIAN\"] = \"$_MK_LITTLE_ENDIAN\"" >>configure.lua
echo '#undef _MK_BIG_ENDIAN' >$bb_incdir/_mk_big_endian.h
echo 'hdefs["_MK_BIG_ENDIAN"] = nil' >>configure.lua
else
echo 'big-endian'
echo '# big-endian' >>config.log
_MK_BIG_ENDIAN="yes"
bb_o=$bb_incdir/_mk_big_endian.h
echo '#ifndef _MK_BIG_ENDIAN' >$bb_o
echo "#define _MK_BIG_ENDIAN \"$_MK_BIG_ENDIAN\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"_MK_BIG_ENDIAN\"] = \"$_MK_BIG_ENDIAN\"" >>configure.lua
echo '#undef _MK_LITTLE_ENDIAN' >$bb_incdir/_mk_little_endian.h
echo 'hdefs["_MK_LITTLE_ENDIAN"] = nil' >>configure.lua
fi
# END byte_order
	;;
esac
if [ "${enable_shared}" != 'no' ]
 then
LIB_SHARED="Yes"
else
LIB_SHARED="No"
fi
if [ "${with_attributes}" != 'no' ]
 then
$ECHO_N 'checking for C compiler attributes...'
$ECHO_N '# checking for C compiler attributes...' >>config.log
# BEGIN cc_attributes
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
int main(int argc, char *argv[])
{
	struct s1 { int x,y,z; } __attribute__ ((aligned(16)));
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_ALIGNED_ATTRIBUTE' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
HAVE_ALIGNED_ATTRIBUTE=yes
bb_o=$bb_incdir/have_aligned_attribute.h
echo '#ifndef HAVE_ALIGNED_ATTRIBUTE' >$bb_o
echo "#define HAVE_ALIGNED_ATTRIBUTE \"$HAVE_ALIGNED_ATTRIBUTE\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_ALIGNED_ATTRIBUTE\"] = \"$HAVE_ALIGNED_ATTRIBUTE\"" >>configure.lua
else
HAVE_ALIGNED_ATTRIBUTE=no
echo '#undef HAVE_ALIGNED_ATTRIBUTE' >$bb_incdir/have_aligned_attribute.h
echo 'hdefs["HAVE_ALIGNED_ATTRIBUTE"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_ALIGNED_ATTRIBUTE}" = "yes" ]; then
$ECHO_N 'aligned '
$ECHO_N '# aligned ' >>config.log
else
$ECHO_N '!aligned '
$ECHO_N '# !aligned ' >>config.log
fi
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
void foostring(char *, int) __attribute__ ((__bounded__(__string__,1,2)));
void foostring(char *a, int c) { }
void foobuffer(void *, int) __attribute__ ((__bounded__(__buffer__,1,2)));
void foobuffer(void *a, int c) { }
int main(void)
{
	char buf[32];
	foostring(buf, sizeof(buf));
	foobuffer(buf, sizeof(buf));
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_BOUNDED_ATTRIBUTE' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest$$ conftest$$.c  2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest$$ conftest$$.c  2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
HAVE_BOUNDED_ATTRIBUTE=yes
bb_o=$bb_incdir/have_bounded_attribute.h
echo '#ifndef HAVE_BOUNDED_ATTRIBUTE' >$bb_o
echo "#define HAVE_BOUNDED_ATTRIBUTE \"$HAVE_BOUNDED_ATTRIBUTE\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_BOUNDED_ATTRIBUTE\"] = \"$HAVE_BOUNDED_ATTRIBUTE\"" >>configure.lua
else
HAVE_BOUNDED_ATTRIBUTE=no
echo '#undef HAVE_BOUNDED_ATTRIBUTE' >$bb_incdir/have_bounded_attribute.h
echo 'hdefs["HAVE_BOUNDED_ATTRIBUTE"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_BOUNDED_ATTRIBUTE}" = "yes" ]; then
$ECHO_N 'bounded '
$ECHO_N '# bounded ' >>config.log
else
$ECHO_N '!bounded '
$ECHO_N '# !bounded ' >>config.log
fi
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
int foo(int) __attribute__ ((const));
int foo(int x) { return (x*x); }
int main(int argc, char *argv[])
{
	int x = foo(1);
	return (x);
}
EOT
echo >>config.log
echo '# C: HAVE_CONST_ATTRIBUTE' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
HAVE_CONST_ATTRIBUTE=yes
bb_o=$bb_incdir/have_const_attribute.h
echo '#ifndef HAVE_CONST_ATTRIBUTE' >$bb_o
echo "#define HAVE_CONST_ATTRIBUTE \"$HAVE_CONST_ATTRIBUTE\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_CONST_ATTRIBUTE\"] = \"$HAVE_CONST_ATTRIBUTE\"" >>configure.lua
else
HAVE_CONST_ATTRIBUTE=no
echo '#undef HAVE_CONST_ATTRIBUTE' >$bb_incdir/have_const_attribute.h
echo 'hdefs["HAVE_CONST_ATTRIBUTE"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_CONST_ATTRIBUTE}" = "yes" ]; then
$ECHO_N 'const '
$ECHO_N '# const ' >>config.log
else
$ECHO_N '!const '
$ECHO_N '# !const ' >>config.log
fi
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
void foo(void) __attribute__ ((deprecated));
void foo(void) { }

int main(int argc, char *argv[])
{
/*	foo(); */
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_DEPRECATED_ATTRIBUTE' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
HAVE_DEPRECATED_ATTRIBUTE=yes
bb_o=$bb_incdir/have_deprecated_attribute.h
echo '#ifndef HAVE_DEPRECATED_ATTRIBUTE' >$bb_o
echo "#define HAVE_DEPRECATED_ATTRIBUTE \"$HAVE_DEPRECATED_ATTRIBUTE\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_DEPRECATED_ATTRIBUTE\"] = \"$HAVE_DEPRECATED_ATTRIBUTE\"" >>configure.lua
else
HAVE_DEPRECATED_ATTRIBUTE=no
echo '#undef HAVE_DEPRECATED_ATTRIBUTE' >$bb_incdir/have_deprecated_attribute.h
echo 'hdefs["HAVE_DEPRECATED_ATTRIBUTE"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_DEPRECATED_ATTRIBUTE}" = "yes" ]; then
$ECHO_N 'deprecated '
$ECHO_N '# deprecated ' >>config.log
else
$ECHO_N '!deprecated '
$ECHO_N '# !deprecated ' >>config.log
fi
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <stdarg.h>
void foo1(char *, ...)
     __attribute__((__format__ (printf, 1, 2)));
void foo2(char *, ...)
     __attribute__((__format__ (__printf__, 1, 2)));
void foo1(char *a, ...) {}
void foo2(char *a, ...) {}
int main(int argc, char *argv[])
{
	foo1("foo %s", "bar");
	foo2("foo %d", 1);
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_FORMAT_ATTRIBUTE' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest$$ conftest$$.c  2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest$$ conftest$$.c  2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
HAVE_FORMAT_ATTRIBUTE=yes
bb_o=$bb_incdir/have_format_attribute.h
echo '#ifndef HAVE_FORMAT_ATTRIBUTE' >$bb_o
echo "#define HAVE_FORMAT_ATTRIBUTE \"$HAVE_FORMAT_ATTRIBUTE\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_FORMAT_ATTRIBUTE\"] = \"$HAVE_FORMAT_ATTRIBUTE\"" >>configure.lua
else
HAVE_FORMAT_ATTRIBUTE=no
echo '#undef HAVE_FORMAT_ATTRIBUTE' >$bb_incdir/have_format_attribute.h
echo 'hdefs["HAVE_FORMAT_ATTRIBUTE"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_FORMAT_ATTRIBUTE}" = "yes" ]; then
echo 'format'
echo '# format' >>config.log
else
echo '!format'
echo '# !format' >>config.log
fi
$ECHO_N 'checking for C compiler attributes...'
$ECHO_N '# checking for C compiler attributes...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <stdio.h>
#include <stdlib.h>

void *myalloc(size_t len) __attribute__ ((__malloc__));
void *myalloc(size_t len) { return (NULL); }
int main(int argc, char *argv[])
{
	void *p = myalloc(10);
	return (p != NULL);
}
EOT
echo >>config.log
echo '# C: HAVE_MALLOC_ATTRIBUTE' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
HAVE_MALLOC_ATTRIBUTE=yes
bb_o=$bb_incdir/have_malloc_attribute.h
echo '#ifndef HAVE_MALLOC_ATTRIBUTE' >$bb_o
echo "#define HAVE_MALLOC_ATTRIBUTE \"$HAVE_MALLOC_ATTRIBUTE\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_MALLOC_ATTRIBUTE\"] = \"$HAVE_MALLOC_ATTRIBUTE\"" >>configure.lua
else
HAVE_MALLOC_ATTRIBUTE=no
echo '#undef HAVE_MALLOC_ATTRIBUTE' >$bb_incdir/have_malloc_attribute.h
echo 'hdefs["HAVE_MALLOC_ATTRIBUTE"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_MALLOC_ATTRIBUTE}" = "yes" ]; then
$ECHO_N 'malloc '
$ECHO_N '# malloc ' >>config.log
else
$ECHO_N '!malloc '
$ECHO_N '# !malloc ' >>config.log
fi
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <unistd.h>
#include <stdlib.h>
void foo(void) __attribute__ ((noreturn));
void foo(void) { _exit(0); }
int main(int argc, char *argv[])
{
	foo();
}
EOT
echo >>config.log
echo '# C: HAVE_NORETURN_ATTRIBUTE' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
HAVE_NORETURN_ATTRIBUTE=yes
bb_o=$bb_incdir/have_noreturn_attribute.h
echo '#ifndef HAVE_NORETURN_ATTRIBUTE' >$bb_o
echo "#define HAVE_NORETURN_ATTRIBUTE \"$HAVE_NORETURN_ATTRIBUTE\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_NORETURN_ATTRIBUTE\"] = \"$HAVE_NORETURN_ATTRIBUTE\"" >>configure.lua
else
HAVE_NORETURN_ATTRIBUTE=no
echo '#undef HAVE_NORETURN_ATTRIBUTE' >$bb_incdir/have_noreturn_attribute.h
echo 'hdefs["HAVE_NORETURN_ATTRIBUTE"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_NORETURN_ATTRIBUTE}" = "yes" ]; then
$ECHO_N 'noreturn '
$ECHO_N '# noreturn ' >>config.log
else
$ECHO_N '!noreturn '
$ECHO_N '# !noreturn ' >>config.log
fi
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
int main(int argc, char *argv[])
{
	struct s1 { char c; int x,y,z; } __attribute__ ((packed));
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_PACKED_ATTRIBUTE' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
HAVE_PACKED_ATTRIBUTE=yes
bb_o=$bb_incdir/have_packed_attribute.h
echo '#ifndef HAVE_PACKED_ATTRIBUTE' >$bb_o
echo "#define HAVE_PACKED_ATTRIBUTE \"$HAVE_PACKED_ATTRIBUTE\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_PACKED_ATTRIBUTE\"] = \"$HAVE_PACKED_ATTRIBUTE\"" >>configure.lua
else
HAVE_PACKED_ATTRIBUTE=no
echo '#undef HAVE_PACKED_ATTRIBUTE' >$bb_incdir/have_packed_attribute.h
echo 'hdefs["HAVE_PACKED_ATTRIBUTE"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_PACKED_ATTRIBUTE}" = "yes" ]; then
$ECHO_N 'packed '
$ECHO_N '# packed ' >>config.log
else
$ECHO_N '!packed '
$ECHO_N '# !packed ' >>config.log
fi
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
volatile int glo = 1234;
int foo(int) __attribute__ ((pure));
int foo(int x) { return (x*x + glo); }
int main(int argc, char *argv[])
{
	int x = foo(1);
	glo = 2345;
	x = foo(2);
	return (x);
}
EOT
echo >>config.log
echo '# C: HAVE_PURE_ATTRIBUTE' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
HAVE_PURE_ATTRIBUTE=yes
bb_o=$bb_incdir/have_pure_attribute.h
echo '#ifndef HAVE_PURE_ATTRIBUTE' >$bb_o
echo "#define HAVE_PURE_ATTRIBUTE \"$HAVE_PURE_ATTRIBUTE\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_PURE_ATTRIBUTE\"] = \"$HAVE_PURE_ATTRIBUTE\"" >>configure.lua
else
HAVE_PURE_ATTRIBUTE=no
echo '#undef HAVE_PURE_ATTRIBUTE' >$bb_incdir/have_pure_attribute.h
echo 'hdefs["HAVE_PURE_ATTRIBUTE"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_PURE_ATTRIBUTE}" = "yes" ]; then
$ECHO_N 'pure '
$ECHO_N '# pure ' >>config.log
else
$ECHO_N '!pure '
$ECHO_N '# !pure ' >>config.log
fi
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
int main(int argc, char *argv[])
{
	int __attribute__ ((unused)) variable;
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_UNUSED_VARIABLE_ATTRIBUTE' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
HAVE_UNUSED_VARIABLE_ATTRIBUTE=yes
bb_o=$bb_incdir/have_unused_variable_attribute.h
echo '#ifndef HAVE_UNUSED_VARIABLE_ATTRIBUTE' >$bb_o
echo "#define HAVE_UNUSED_VARIABLE_ATTRIBUTE \"$HAVE_UNUSED_VARIABLE_ATTRIBUTE\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_UNUSED_VARIABLE_ATTRIBUTE\"] = \"$HAVE_UNUSED_VARIABLE_ATTRIBUTE\"" >>configure.lua
else
HAVE_UNUSED_VARIABLE_ATTRIBUTE=no
echo '#undef HAVE_UNUSED_VARIABLE_ATTRIBUTE' >$bb_incdir/have_unused_variable_attribute.h
echo 'hdefs["HAVE_UNUSED_VARIABLE_ATTRIBUTE"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_UNUSED_VARIABLE_ATTRIBUTE}" = "yes" ]; then
echo 'unused'
echo '# unused' >>config.log
else
echo '!unused'
echo '# !unused' >>config.log
fi
$ECHO_N 'checking for C compiler attributes...'
$ECHO_N '# checking for C compiler attributes...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
int foo(void) __attribute__ ((warn_unused_result));
int foo(void) { return (1); }
int main(int argc, char *argv[])
{
	int rv = foo();
	return (rv);
}
EOT
echo >>config.log
echo '# C: HAVE_WARN_UNUSED_RESULT_ATTRIBUTE' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
HAVE_WARN_UNUSED_RESULT_ATTRIBUTE=yes
bb_o=$bb_incdir/have_warn_unused_result_attribute.h
echo '#ifndef HAVE_WARN_UNUSED_RESULT_ATTRIBUTE' >$bb_o
echo "#define HAVE_WARN_UNUSED_RESULT_ATTRIBUTE \"$HAVE_WARN_UNUSED_RESULT_ATTRIBUTE\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_WARN_UNUSED_RESULT_ATTRIBUTE\"] = \"$HAVE_WARN_UNUSED_RESULT_ATTRIBUTE\"" >>configure.lua
else
HAVE_WARN_UNUSED_RESULT_ATTRIBUTE=no
echo '#undef HAVE_WARN_UNUSED_RESULT_ATTRIBUTE' >$bb_incdir/have_warn_unused_result_attribute.h
echo 'hdefs["HAVE_WARN_UNUSED_RESULT_ATTRIBUTE"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_WARN_UNUSED_RESULT_ATTRIBUTE}" = "yes" ]; then
echo 'warn_unused_result '
echo '# warn_unused_result ' >>config.log
else
echo '!warn_unused_result '
echo '# !warn_unused_result ' >>config.log
fi
# END cc_attributes
else
echo 'not enabling C compiler attributes'
echo '# not enabling C compiler attributes' >>config.log
echo '#undef HAVE_ALIGNED_ATTRIBUTE' >$bb_incdir/have_aligned_attribute.h
echo 'hdefs["HAVE_ALIGNED_ATTRIBUTE"] = nil' >>configure.lua
echo '#undef HAVE_BOUNDED_ATTRIBUTE' >$bb_incdir/have_bounded_attribute.h
echo 'hdefs["HAVE_BOUNDED_ATTRIBUTE"] = nil' >>configure.lua
echo '#undef HAVE_CONST_ATTRIBUTE' >$bb_incdir/have_const_attribute.h
echo 'hdefs["HAVE_CONST_ATTRIBUTE"] = nil' >>configure.lua
echo '#undef HAVE_DEPRECATED_ATTRIBUTE' >$bb_incdir/have_deprecated_attribute.h
echo 'hdefs["HAVE_DEPRECATED_ATTRIBUTE"] = nil' >>configure.lua
echo '#undef HAVE_FORMAT_ATTRIBUTE' >$bb_incdir/have_format_attribute.h
echo 'hdefs["HAVE_FORMAT_ATTRIBUTE"] = nil' >>configure.lua
echo '#undef HAVE_MALLOC_ATTRIBUTE' >$bb_incdir/have_malloc_attribute.h
echo 'hdefs["HAVE_MALLOC_ATTRIBUTE"] = nil' >>configure.lua
echo '#undef HAVE_NORETURN_ATTRIBUTE' >$bb_incdir/have_noreturn_attribute.h
echo 'hdefs["HAVE_NORETURN_ATTRIBUTE"] = nil' >>configure.lua
echo '#undef HAVE_PACKED_ATTRIBUTE' >$bb_incdir/have_packed_attribute.h
echo 'hdefs["HAVE_PACKED_ATTRIBUTE"] = nil' >>configure.lua
echo '#undef HAVE_PURE_ATTRIBUTE' >$bb_incdir/have_pure_attribute.h
echo 'hdefs["HAVE_PURE_ATTRIBUTE"] = nil' >>configure.lua
echo '#undef HAVE_UNUSED_VARIABLE_ATTRIBUTE' >$bb_incdir/have_unused_variable_attribute.h
echo 'hdefs["HAVE_UNUSED_VARIABLE_ATTRIBUTE"] = nil' >>configure.lua
echo '#undef HAVE_WARN_UNUSED_RESULT_ATTRIBUTE' >$bb_incdir/have_warn_unused_result_attribute.h
echo 'hdefs["HAVE_WARN_UNUSED_RESULT_ATTRIBUTE"] = nil' >>configure.lua
fi
if [ "${with_attributes}" != 'no' ]; then
AG_USE_ATTRIBUTES="yes"
bb_o=$bb_incdir/ag_use_attributes.h
echo '#ifndef AG_USE_ATTRIBUTES' >$bb_o
echo "#define AG_USE_ATTRIBUTES \"$AG_USE_ATTRIBUTES\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"AG_USE_ATTRIBUTES\"] = \"$AG_USE_ATTRIBUTES\"" >>configure.lua
else
echo '#undef AG_USE_ATTRIBUTES' >$bb_incdir/ag_use_attributes.h
echo 'hdefs["AG_USE_ATTRIBUTES"] = nil' >>configure.lua
fi
if [ "${with_inline}" = 'no' ]
 then
	with_inline_byteswap="no"
	with_inline_error="no"
	with_inline_io="no"
	with_inline_object="no"
	with_inline_string="no"
	with_inline_tbl="no"
	with_inline_threads="no"
	with_inline_variable="no"
	with_inline_surface="no"
	with_inline_widget="no"
fi
if [ "${with_inline_byteswap}" != "no" ]; then
AG_INLINE_BYTESWAP="yes"
bb_o=$bb_incdir/ag_inline_byteswap.h
echo '#ifndef AG_INLINE_BYTESWAP' >$bb_o
echo "#define AG_INLINE_BYTESWAP \"$AG_INLINE_BYTESWAP\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"AG_INLINE_BYTESWAP\"] = \"$AG_INLINE_BYTESWAP\"" >>configure.lua
else
echo '#undef AG_INLINE_BYTESWAP' >$bb_incdir/ag_inline_byteswap.h
echo 'hdefs["AG_INLINE_BYTESWAP"] = nil' >>configure.lua
fi
if [ "${with_inline_error}" != "no" ]; then
AG_INLINE_ERROR="yes"
bb_o=$bb_incdir/ag_inline_error.h
echo '#ifndef AG_INLINE_ERROR' >$bb_o
echo "#define AG_INLINE_ERROR \"$AG_INLINE_ERROR\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"AG_INLINE_ERROR\"] = \"$AG_INLINE_ERROR\"" >>configure.lua
else
echo '#undef AG_INLINE_ERROR' >$bb_incdir/ag_inline_error.h
echo 'hdefs["AG_INLINE_ERROR"] = nil' >>configure.lua
fi
if [ "${with_inline_io}" != "no" ]; then
AG_INLINE_IO="yes"
bb_o=$bb_incdir/ag_inline_io.h
echo '#ifndef AG_INLINE_IO' >$bb_o
echo "#define AG_INLINE_IO \"$AG_INLINE_IO\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"AG_INLINE_IO\"] = \"$AG_INLINE_IO\"" >>configure.lua
else
echo '#undef AG_INLINE_IO' >$bb_incdir/ag_inline_io.h
echo 'hdefs["AG_INLINE_IO"] = nil' >>configure.lua
fi
if [ "${with_inline_object}" != "no" ]; then
AG_INLINE_OBJECT="yes"
bb_o=$bb_incdir/ag_inline_object.h
echo '#ifndef AG_INLINE_OBJECT' >$bb_o
echo "#define AG_INLINE_OBJECT \"$AG_INLINE_OBJECT\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"AG_INLINE_OBJECT\"] = \"$AG_INLINE_OBJECT\"" >>configure.lua
else
echo '#undef AG_INLINE_OBJECT' >$bb_incdir/ag_inline_object.h
echo 'hdefs["AG_INLINE_OBJECT"] = nil' >>configure.lua
fi
if [ "${with_inline_string}" != "no" ]; then
AG_INLINE_STRING="yes"
bb_o=$bb_incdir/ag_inline_string.h
echo '#ifndef AG_INLINE_STRING' >$bb_o
echo "#define AG_INLINE_STRING \"$AG_INLINE_STRING\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"AG_INLINE_STRING\"] = \"$AG_INLINE_STRING\"" >>configure.lua
else
echo '#undef AG_INLINE_STRING' >$bb_incdir/ag_inline_string.h
echo 'hdefs["AG_INLINE_STRING"] = nil' >>configure.lua
fi
if [ "${with_inline_tbl}" != "no" ]; then
AG_INLINE_TBL="yes"
bb_o=$bb_incdir/ag_inline_tbl.h
echo '#ifndef AG_INLINE_TBL' >$bb_o
echo "#define AG_INLINE_TBL \"$AG_INLINE_TBL\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"AG_INLINE_TBL\"] = \"$AG_INLINE_TBL\"" >>configure.lua
else
echo '#undef AG_INLINE_TBL' >$bb_incdir/ag_inline_tbl.h
echo 'hdefs["AG_INLINE_TBL"] = nil' >>configure.lua
fi
if [ "${with_inline_threads}" != "no" ]; then
AG_INLINE_THREADS="yes"
bb_o=$bb_incdir/ag_inline_threads.h
echo '#ifndef AG_INLINE_THREADS' >$bb_o
echo "#define AG_INLINE_THREADS \"$AG_INLINE_THREADS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"AG_INLINE_THREADS\"] = \"$AG_INLINE_THREADS\"" >>configure.lua
else
echo '#undef AG_INLINE_THREADS' >$bb_incdir/ag_inline_threads.h
echo 'hdefs["AG_INLINE_THREADS"] = nil' >>configure.lua
fi
if [ "${with_inline_variable}" != "no" ]; then
AG_INLINE_VARIABLE="yes"
bb_o=$bb_incdir/ag_inline_variable.h
echo '#ifndef AG_INLINE_VARIABLE' >$bb_o
echo "#define AG_INLINE_VARIABLE \"$AG_INLINE_VARIABLE\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"AG_INLINE_VARIABLE\"] = \"$AG_INLINE_VARIABLE\"" >>configure.lua
else
echo '#undef AG_INLINE_VARIABLE' >$bb_incdir/ag_inline_variable.h
echo 'hdefs["AG_INLINE_VARIABLE"] = nil' >>configure.lua
fi
if [ "${with_inline_surface}" != "no" ]; then
AG_INLINE_SURFACE="yes"
bb_o=$bb_incdir/ag_inline_surface.h
echo '#ifndef AG_INLINE_SURFACE' >$bb_o
echo "#define AG_INLINE_SURFACE \"$AG_INLINE_SURFACE\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"AG_INLINE_SURFACE\"] = \"$AG_INLINE_SURFACE\"" >>configure.lua
else
echo '#undef AG_INLINE_SURFACE' >$bb_incdir/ag_inline_surface.h
echo 'hdefs["AG_INLINE_SURFACE"] = nil' >>configure.lua
fi
if [ "${with_inline_widget}" != "no" ]; then
AG_INLINE_WIDGET="yes"
bb_o=$bb_incdir/ag_inline_widget.h
echo '#ifndef AG_INLINE_WIDGET' >$bb_o
echo "#define AG_INLINE_WIDGET \"$AG_INLINE_WIDGET\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"AG_INLINE_WIDGET\"] = \"$AG_INLINE_WIDGET\"" >>configure.lua
else
echo '#undef AG_INLINE_WIDGET' >$bb_incdir/ag_inline_widget.h
echo 'hdefs["AG_INLINE_WIDGET"] = nil' >>configure.lua
fi
$ECHO_N 'checking for <sys/types.h>...'
$ECHO_N '# checking for <sys/types.h>...' >>config.log
# BEGIN sys_types
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <sys/types.h>
int main(int argc, char *argv[]) {
	int8_t s8 = 2;
	u_int8_t u8 = 2;
	int32_t s32 = 1234;
	u_int32_t u32 = 5678;
	return (s8+u8 == 4 && s32+u32 > 6000 ? 0 : 1);
}
EOT
echo >>config.log
echo '# C: _MK_HAVE_SYS_TYPES_H' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest$$ conftest$$.c  2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest$$ conftest$$.c  2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
_MK_HAVE_SYS_TYPES_H=yes
bb_o=$bb_incdir/_mk_have_sys_types_h.h
echo '#ifndef _MK_HAVE_SYS_TYPES_H' >$bb_o
echo "#define _MK_HAVE_SYS_TYPES_H \"$_MK_HAVE_SYS_TYPES_H\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"_MK_HAVE_SYS_TYPES_H\"] = \"$_MK_HAVE_SYS_TYPES_H\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
_MK_HAVE_SYS_TYPES_H=no
echo '#undef _MK_HAVE_SYS_TYPES_H' >$bb_incdir/_mk_have_sys_types_h.h
echo 'hdefs["_MK_HAVE_SYS_TYPES_H"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
$ECHO_N 'checking for <stdint.h>...'
$ECHO_N '# checking for <stdint.h>...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <stdint.h>
int main(int argc, char *argv[]) {
	int8_t s8 = 2;
	uint8_t u8 = 2;
	int32_t s32 = 1234;
	uint32_t u32 = 5678;
	return (s8+u8 == 4 && s32+u32 > 6000 ? 0 : 1);
}
EOT
echo >>config.log
echo '# C: _MK_HAVE_STDINT_H' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest$$ conftest$$.c  2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest$$ conftest$$.c  2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
_MK_HAVE_STDINT_H=yes
bb_o=$bb_incdir/_mk_have_stdint_h.h
echo '#ifndef _MK_HAVE_STDINT_H' >$bb_o
echo "#define _MK_HAVE_STDINT_H \"$_MK_HAVE_STDINT_H\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"_MK_HAVE_STDINT_H\"] = \"$_MK_HAVE_STDINT_H\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
_MK_HAVE_STDINT_H=no
echo '#undef _MK_HAVE_STDINT_H' >$bb_incdir/_mk_have_stdint_h.h
echo 'hdefs["_MK_HAVE_STDINT_H"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${_MK_HAVE_SYS_TYPES_H}" = "yes" ]; then
$ECHO_N 'checking for int64_t type...'
$ECHO_N '# checking for int64_t type...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <sys/types.h>
#include <stdio.h>
int main(int argc, char *argv[]) {
	int64_t i64 = 0;
	u_int64_t u64 = 0;
	printf("%lld %llu", (long long)i64, (unsigned long long)u64);
	return (i64 != 0 || u64 != 0);
}
EOT
echo >>config.log
echo '# C: HAVE_INT64_T' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest$$ conftest$$.c  2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest$$ conftest$$.c  2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_INT64_T=yes
bb_o=$bb_incdir/have_int64_t.h
echo '#ifndef HAVE_INT64_T' >$bb_o
echo "#define HAVE_INT64_T \"$HAVE_INT64_T\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_INT64_T\"] = \"$HAVE_INT64_T\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_INT64_T=no
echo '#undef HAVE_INT64_T' >$bb_incdir/have_int64_t.h
echo 'hdefs["HAVE_INT64_T"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
$ECHO_N 'checking for __int64 type...'
$ECHO_N '# checking for __int64 type...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <sys/types.h>
#include <stdio.h>
int main(int argc, char *argv[]) {
	__int64 i64 = 0;
	printf("%lld", (long long)i64);
	return (i64 != 0);
}
EOT
echo >>config.log
echo '# C: HAVE___INT64' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest$$ conftest$$.c  2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest$$ conftest$$.c  2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE___INT64=yes
bb_o=$bb_incdir/have___int64.h
echo '#ifndef HAVE___INT64' >$bb_o
echo "#define HAVE___INT64 \"$HAVE___INT64\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE___INT64\"] = \"$HAVE___INT64\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE___INT64=no
echo '#undef HAVE___INT64' >$bb_incdir/have___int64.h
echo 'hdefs["HAVE___INT64"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_INT64_T}" = "yes" ]; then
HAVE_64BIT="yes"
bb_o=$bb_incdir/have_64bit.h
echo '#ifndef HAVE_64BIT' >$bb_o
echo "#define HAVE_64BIT \"$HAVE_64BIT\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_64BIT\"] = \"$HAVE_64BIT\"" >>configure.lua
else
if [ "${HAVE___INT64}" = "yes" ]; then
HAVE_64BIT="yes"
bb_o=$bb_incdir/have_64bit.h
echo '#ifndef HAVE_64BIT' >$bb_o
echo "#define HAVE_64BIT \"$HAVE_64BIT\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_64BIT\"] = \"$HAVE_64BIT\"" >>configure.lua
else
echo '#undef HAVE_64BIT' >$bb_incdir/have_64bit.h
echo 'hdefs["HAVE_64BIT"] = nil' >>configure.lua
fi
fi
else
if [ "${_MK_HAVE_STDINT_H}" = "yes" ]; then
$ECHO_N 'checking for int64_t type...'
$ECHO_N '# checking for int64_t type...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <stdint.h>
#include <stdio.h>
int main(int argc, char *argv[]) {
	int64_t i64 = 0;
	u_int64_t u64 = 0;
	printf("%lld %llu", (long long)i64, (unsigned long long)u64);
	return (i64 != 0 || u64 != 0);
}
EOT
echo >>config.log
echo '# C: HAVE_INT64_T' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest$$ conftest$$.c  2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest$$ conftest$$.c  2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_INT64_T=yes
bb_o=$bb_incdir/have_int64_t.h
echo '#ifndef HAVE_INT64_T' >$bb_o
echo "#define HAVE_INT64_T \"$HAVE_INT64_T\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_INT64_T\"] = \"$HAVE_INT64_T\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_INT64_T=no
echo '#undef HAVE_INT64_T' >$bb_incdir/have_int64_t.h
echo 'hdefs["HAVE_INT64_T"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
$ECHO_N 'checking for __int64 type...'
$ECHO_N '# checking for __int64 type...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <stdint.h>
#include <stdio.h>
int main(int argc, char *argv[]) {
	__int64 i64 = 0;
	printf("%lld", (long long)i64);
	return (i64 != 0);
}
EOT
echo >>config.log
echo '# C: HAVE___INT64' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest$$ conftest$$.c  2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest$$ conftest$$.c  2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE___INT64=yes
bb_o=$bb_incdir/have___int64.h
echo '#ifndef HAVE___INT64' >$bb_o
echo "#define HAVE___INT64 \"$HAVE___INT64\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE___INT64\"] = \"$HAVE___INT64\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE___INT64=no
echo '#undef HAVE___INT64' >$bb_incdir/have___int64.h
echo 'hdefs["HAVE___INT64"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_INT64_T}" = "yes" ]; then
HAVE_64BIT="yes"
bb_o=$bb_incdir/have_64bit.h
echo '#ifndef HAVE_64BIT' >$bb_o
echo "#define HAVE_64BIT \"$HAVE_64BIT\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_64BIT\"] = \"$HAVE_64BIT\"" >>configure.lua
else
if [ "${HAVE___INT64}" = "yes" ]; then
HAVE_64BIT="yes"
bb_o=$bb_incdir/have_64bit.h
echo '#ifndef HAVE_64BIT' >$bb_o
echo "#define HAVE_64BIT \"$HAVE_64BIT\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_64BIT\"] = \"$HAVE_64BIT\"" >>configure.lua
else
echo '#undef HAVE_64BIT' >$bb_incdir/have_64bit.h
echo 'hdefs["HAVE_64BIT"] = nil' >>configure.lua
fi
fi
else
echo '#undef HAVE_64BIT' >$bb_incdir/have_64bit.h
echo 'hdefs["HAVE_64BIT"] = nil' >>configure.lua
fi
fi
# END sys_types
$ECHO_N 'checking for <sys/stat.h>...'
$ECHO_N '# checking for <sys/stat.h>...' >>config.log
# BEGIN sys_stat
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <sys/types.h>
#include <sys/stat.h>
int main(int argc, char *argv[]) {
	struct stat sb;
	uid_t uid;
	if (stat("/tmp/foo", &sb) != 0) { return (1); }
	return ((uid = sb.st_uid) == (uid_t)0);
}
EOT
echo >>config.log
echo '# C: _MK_HAVE_SYS_STAT_H' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest$$ conftest$$.c  2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest$$ conftest$$.c  2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
_MK_HAVE_SYS_STAT_H=yes
bb_o=$bb_incdir/_mk_have_sys_stat_h.h
echo '#ifndef _MK_HAVE_SYS_STAT_H' >$bb_o
echo "#define _MK_HAVE_SYS_STAT_H \"$_MK_HAVE_SYS_STAT_H\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"_MK_HAVE_SYS_STAT_H\"] = \"$_MK_HAVE_SYS_STAT_H\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
_MK_HAVE_SYS_STAT_H=no
echo '#undef _MK_HAVE_SYS_STAT_H' >$bb_incdir/_mk_have_sys_stat_h.h
echo 'hdefs["_MK_HAVE_SYS_STAT_H"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
# END sys_stat
$ECHO_N 'checking for <stdlib.h>...'
$ECHO_N '# checking for <stdlib.h>...' >>config.log
# BEGIN stdlib_h
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <stdlib.h>
int main(int argc, char *argv[]) {
	void *foo = malloc(1);
	free(foo);
	return (0);
}
EOT
echo >>config.log
echo '# C: _MK_HAVE_STDLIB_H' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest$$ conftest$$.c  2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest$$ conftest$$.c  2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
_MK_HAVE_STDLIB_H=yes
bb_o=$bb_incdir/_mk_have_stdlib_h.h
echo '#ifndef _MK_HAVE_STDLIB_H' >$bb_o
echo "#define _MK_HAVE_STDLIB_H \"$_MK_HAVE_STDLIB_H\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"_MK_HAVE_STDLIB_H\"] = \"$_MK_HAVE_STDLIB_H\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
_MK_HAVE_STDLIB_H=no
echo '#undef _MK_HAVE_STDLIB_H' >$bb_incdir/_mk_have_stdlib_h.h
echo 'hdefs["_MK_HAVE_STDLIB_H"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
# END stdlib_h
$ECHO_N 'checking for <unistd.h>...'
$ECHO_N '# checking for <unistd.h>...' >>config.log
# BEGIN unistd_h
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <sys/types.h>
#include <unistd.h>
int main(int argc, char *argv[]) {
	char buf;
	int rv, fdout=1;

	if ((rv = write(fdout, (void *)&buf, 1)) < 1) { return (1); }
	if ((rv = read(0, (void *)&buf, 1)) < 1) { return (1); }
	if (unlink("/tmp/foo") != 0) { return (1); }
	return (0);
}
EOT
echo >>config.log
echo '# C: _MK_HAVE_UNISTD_H' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest$$ conftest$$.c  2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest$$ conftest$$.c  2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
_MK_HAVE_UNISTD_H=yes
bb_o=$bb_incdir/_mk_have_unistd_h.h
echo '#ifndef _MK_HAVE_UNISTD_H' >$bb_o
echo "#define _MK_HAVE_UNISTD_H \"$_MK_HAVE_UNISTD_H\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"_MK_HAVE_UNISTD_H\"] = \"$_MK_HAVE_UNISTD_H\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
_MK_HAVE_UNISTD_H=no
echo '#undef _MK_HAVE_UNISTD_H' >$bb_incdir/_mk_have_unistd_h.h
echo 'hdefs["_MK_HAVE_UNISTD_H"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
# END unistd_h
$ECHO_N 'checking for compatible <limits.h>...'
$ECHO_N '# checking for compatible <limits.h>...' >>config.log
# BEGIN limits_h
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <limits.h>

int main(int argc, char *argv[]) {
	int i = INT_MIN;
	unsigned u = 0;
	long l = LONG_MIN;
	unsigned long ul = 0;
	i = INT_MAX;
	u = UINT_MAX;
	l = LONG_MAX;
	ul = ULONG_MAX;
	return (i != INT_MAX || u != UINT_MAX || l != LONG_MAX || ul != LONG_MAX);
}
EOT
echo >>config.log
echo '# C: _MK_HAVE_LIMITS_H' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest$$ conftest$$.c  2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest$$ conftest$$.c  2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
_MK_HAVE_LIMITS_H=yes
bb_o=$bb_incdir/_mk_have_limits_h.h
echo '#ifndef _MK_HAVE_LIMITS_H' >$bb_o
echo "#define _MK_HAVE_LIMITS_H \"$_MK_HAVE_LIMITS_H\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"_MK_HAVE_LIMITS_H\"] = \"$_MK_HAVE_LIMITS_H\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
_MK_HAVE_LIMITS_H=no
echo '#undef _MK_HAVE_LIMITS_H' >$bb_incdir/_mk_have_limits_h.h
echo 'hdefs["_MK_HAVE_LIMITS_H"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
# END limits_h
$ECHO_N 'checking for <float.h>...'
$ECHO_N '# checking for <float.h>...' >>config.log
# BEGIN float_h
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <float.h>

int main(int argc, char *argv[]) {
	float flt = 0.0f;
	double dbl = 0.0;

	flt += FLT_EPSILON;
	dbl += DBL_EPSILON;
	return (0);
}
EOT
echo >>config.log
echo '# C: _MK_HAVE_FLOAT_H' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest$$ conftest$$.c  2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest$$ conftest$$.c  2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
_MK_HAVE_FLOAT_H=yes
bb_o=$bb_incdir/_mk_have_float_h.h
echo '#ifndef _MK_HAVE_FLOAT_H' >$bb_o
echo "#define _MK_HAVE_FLOAT_H \"$_MK_HAVE_FLOAT_H\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"_MK_HAVE_FLOAT_H\"] = \"$_MK_HAVE_FLOAT_H\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
_MK_HAVE_FLOAT_H=no
echo '#undef _MK_HAVE_FLOAT_H' >$bb_incdir/_mk_have_float_h.h
echo 'hdefs["_MK_HAVE_FLOAT_H"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
# END float_h
$ECHO_N 'checking for the C math library...'
$ECHO_N '# checking for the C math library...' >>config.log
# BEGIN math
if [ "" != "" ]; then
MATH_CFLAGS="-I"
MATH_LIBS="-L -lm"
else
MATH_CFLAGS=""
MATH_LIBS="-lm"
fi
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <math.h>

int
main(int argc, char *argv[])
{
	double d = 1.0;
	d = fabs(d);
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_MATH' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} ${MATH_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${MATH_LIBS} 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} ${MATH_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${MATH_LIBS} 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_MATH=yes
bb_o=$bb_incdir/have_math.h
echo '#ifndef HAVE_MATH' >$bb_o
echo "#define HAVE_MATH \"$HAVE_MATH\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_MATH\"] = \"$HAVE_MATH\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_MATH=no
echo '#undef HAVE_MATH' >$bb_incdir/have_math.h
echo 'hdefs["HAVE_MATH"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_MATH}" = "yes" ]; then
bb_o=$bb_incdir/math_cflags.h
echo '#ifndef MATH_CFLAGS' >$bb_o
echo "#define MATH_CFLAGS \"$MATH_CFLAGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"MATH_CFLAGS\"] = \"$MATH_CFLAGS\"" >>configure.lua
bb_o=$bb_incdir/math_libs.h
echo '#ifndef MATH_LIBS' >$bb_o
echo "#define MATH_LIBS \"$MATH_LIBS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"MATH_LIBS\"] = \"$MATH_LIBS\"" >>configure.lua
else
echo '#undef MATH_CFLAGS' >$bb_incdir/math_cflags.h
echo 'hdefs["MATH_CFLAGS"] = nil' >>configure.lua
MATH_CFLAGS=""
echo '#undef MATH_LIBS' >$bb_incdir/math_libs.h
echo 'hdefs["MATH_LIBS"] = nil' >>configure.lua
MATH_LIBS=""
fi
# END math
$ECHO_N 'checking for the C math library (C99)...'
$ECHO_N '# checking for the C math library (C99)...' >>config.log
# BEGIN math_c99
if [ "" != "" ]; then
MATH_C99_CFLAGS="-I"
MATH_C99_LIBS="-L -lm"
else
MATH_C99_CFLAGS=""
MATH_C99_LIBS="-lm"
fi
case "${host}" in
*-pc-mingw32*)
echo 'skipping (libmingwex linker errors)'
echo '# skipping (libmingwex linker errors)' >>config.log
HAVE_MATH_C99="no"
echo '#undef HAVE_MATH_C99' >$bb_incdir/have_math_c99.h
echo 'hdefs["HAVE_MATH_C99"] = nil' >>configure.lua
;;
*)
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <math.h>

int
main(int argc, char *argv[])
{
	float f = 1.0;
	double d = 1.0;

	d = fabs(d);
	f = sqrtf(fabsf(f));
	return (f > d) ? 0 : 1;
}
EOT
echo >>config.log
echo '# C: HAVE_MATH_C99' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} ${MATH_C99_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${MATH_C99_LIBS} 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} ${MATH_C99_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${MATH_C99_LIBS} 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_MATH_C99=yes
bb_o=$bb_incdir/have_math_c99.h
echo '#ifndef HAVE_MATH_C99' >$bb_o
echo "#define HAVE_MATH_C99 \"$HAVE_MATH_C99\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_MATH_C99\"] = \"$HAVE_MATH_C99\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_MATH_C99=no
echo '#undef HAVE_MATH_C99' >$bb_incdir/have_math_c99.h
echo 'hdefs["HAVE_MATH_C99"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
;;
esac
if [ "${HAVE_MATH_C99}" = "yes" ]; then
bb_o=$bb_incdir/math_c99_cflags.h
echo '#ifndef MATH_C99_CFLAGS' >$bb_o
echo "#define MATH_C99_CFLAGS \"$MATH_C99_CFLAGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"MATH_C99_CFLAGS\"] = \"$MATH_C99_CFLAGS\"" >>configure.lua
bb_o=$bb_incdir/math_c99_libs.h
echo '#ifndef MATH_C99_LIBS' >$bb_o
echo "#define MATH_C99_LIBS \"$MATH_C99_LIBS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"MATH_C99_LIBS\"] = \"$MATH_C99_LIBS\"" >>configure.lua
else
echo '#undef MATH_C99_CFLAGS' >$bb_incdir/math_c99_cflags.h
echo 'hdefs["MATH_C99_CFLAGS"] = nil' >>configure.lua
MATH_C99_CFLAGS=""
echo '#undef MATH_C99_LIBS' >$bb_incdir/math_c99_libs.h
echo 'hdefs["MATH_C99_LIBS"] = nil' >>configure.lua
MATH_C99_LIBS=""
fi
# END math_c99
$ECHO_N 'checking for a fdclose() function...'
$ECHO_N '# checking for a fdclose() function...' >>config.log
# BEGIN fdclose
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <stdio.h>
int
main(int argc, char *argv[])
{
	FILE *f = fopen("/dev/null","r");
	int fdp;
	return fdclose(f, &fdp);
}
EOT
echo >>config.log
echo '# C: HAVE_FDCLOSE' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_FDCLOSE=yes
bb_o=$bb_incdir/have_fdclose.h
echo '#ifndef HAVE_FDCLOSE' >$bb_o
echo "#define HAVE_FDCLOSE \"$HAVE_FDCLOSE\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_FDCLOSE\"] = \"$HAVE_FDCLOSE\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_FDCLOSE=no
echo '#undef HAVE_FDCLOSE' >$bb_incdir/have_fdclose.h
echo 'hdefs["HAVE_FDCLOSE"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
# END fdclose
$ECHO_N 'checking for getpwuid()...'
$ECHO_N '# checking for getpwuid()...' >>config.log
# BEGIN getpwuid
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <string.h>
#include <sys/types.h>
#include <pwd.h>

int
main(int argc, char *argv[])
{
	struct passwd *pwd;
	uid_t uid = 0;

	pwd = getpwuid(uid);
	return (pwd != NULL && pwd->pw_dir != NULL);
}
EOT
echo >>config.log
echo '# C: HAVE_GETPWUID' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_GETPWUID=yes
bb_o=$bb_incdir/have_getpwuid.h
echo '#ifndef HAVE_GETPWUID' >$bb_o
echo "#define HAVE_GETPWUID \"$HAVE_GETPWUID\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_GETPWUID\"] = \"$HAVE_GETPWUID\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_GETPWUID=no
echo '#undef HAVE_GETPWUID' >$bb_incdir/have_getpwuid.h
echo 'hdefs["HAVE_GETPWUID"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
# END getpwuid
$ECHO_N 'checking for the getpwnam_r() interface...'
$ECHO_N '# checking for the getpwnam_r() interface...' >>config.log
# BEGIN getpwnam_r
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <sys/types.h>
#include <pwd.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>

int
main(int argc, char *argv[])
{
	struct passwd pw, *res;
	char *buf;
	size_t bufSize;
	int rv;

	bufSize = sysconf(_SC_GETPW_R_SIZE_MAX);
	if (bufSize == -1) { bufSize = 16384; }
	if ((buf = malloc(bufSize)) == NULL) { return (1); }

	rv = getpwnam_r("foo", &pw, buf, bufSize, &res);
	if (res == NULL) {
		return (rv == 0);
	}
	return (pw.pw_dir != NULL);
}
EOT
echo >>config.log
echo '# C: HAVE_GETPWNAM_R' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_GETPWNAM_R=yes
bb_o=$bb_incdir/have_getpwnam_r.h
echo '#ifndef HAVE_GETPWNAM_R' >$bb_o
echo "#define HAVE_GETPWNAM_R \"$HAVE_GETPWNAM_R\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_GETPWNAM_R\"] = \"$HAVE_GETPWNAM_R\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_GETPWNAM_R=no
echo '#undef HAVE_GETPWNAM_R' >$bb_incdir/have_getpwnam_r.h
echo 'hdefs["HAVE_GETPWNAM_R"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
# END getpwnam_r
$ECHO_N 'checking for getenv()...'
$ECHO_N '# checking for getenv()...' >>config.log
# BEGIN getenv
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <stdlib.h>
int
main(int argc, char *argv[])
{
	(void)getenv("PATH");
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_GETENV' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_GETENV=yes
bb_o=$bb_incdir/have_getenv.h
echo '#ifndef HAVE_GETENV' >$bb_o
echo "#define HAVE_GETENV \"$HAVE_GETENV\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_GETENV\"] = \"$HAVE_GETENV\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_GETENV=no
echo '#undef HAVE_GETENV' >$bb_incdir/have_getenv.h
echo 'hdefs["HAVE_GETENV"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
# END getenv
$ECHO_N 'checking for getuid()...'
$ECHO_N '# checking for getuid()...' >>config.log
# BEGIN getuid
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <sys/types.h>
#include <unistd.h>

int
main(int argc, char *argv[])
{
	uid_t uid = getuid();
	return (uid != 0);
}
EOT
echo >>config.log
echo '# C: HAVE_GETUID' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_GETUID=yes
bb_o=$bb_incdir/have_getuid.h
echo '#ifndef HAVE_GETUID' >$bb_o
echo "#define HAVE_GETUID \"$HAVE_GETUID\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_GETUID\"] = \"$HAVE_GETUID\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_GETUID=no
echo '#undef HAVE_GETUID' >$bb_incdir/have_getuid.h
echo 'hdefs["HAVE_GETUID"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
# END getuid
$ECHO_N 'checking for strsep()...'
$ECHO_N '# checking for strsep()...' >>config.log
# BEGIN strsep
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <string.h>
int
main(int argc, char *argv[])
{
	char foo[32], *pFoo = &foo[0];
	char *s;

	foo[0] = '\0';
	s = strsep(&pFoo, " ");
	return (s != NULL);
}
EOT
echo >>config.log
echo '# C: HAVE_STRSEP' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_STRSEP=yes
bb_o=$bb_incdir/have_strsep.h
echo '#ifndef HAVE_STRSEP' >$bb_o
echo "#define HAVE_STRSEP \"$HAVE_STRSEP\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_STRSEP\"] = \"$HAVE_STRSEP\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_STRSEP=no
echo '#undef HAVE_STRSEP' >$bb_incdir/have_strsep.h
echo 'hdefs["HAVE_STRSEP"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
# END strsep
$ECHO_N 'checking for asprintf()...'
$ECHO_N '# checking for asprintf()...' >>config.log
# BEGIN asprintf
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <stdio.h>

int
main(int argc, char *argv[])
{
	char *buf;
	if (asprintf(&buf, "foo %s", "bar") == 0) {
	    return (0);
	}
	return (1);
}
EOT
echo >>config.log
echo '# C: HAVE_ASPRINTF' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -D_GNU_SOURCE -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -D_GNU_SOURCE -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_ASPRINTF=yes
bb_o=$bb_incdir/have_asprintf.h
echo '#ifndef HAVE_ASPRINTF' >$bb_o
echo "#define HAVE_ASPRINTF \"$HAVE_ASPRINTF\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_ASPRINTF\"] = \"$HAVE_ASPRINTF\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_ASPRINTF=no
echo '#undef HAVE_ASPRINTF' >$bb_incdir/have_asprintf.h
echo 'hdefs["HAVE_ASPRINTF"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
# END asprintf
$ECHO_N 'checking for snprintf()...'
$ECHO_N '# checking for snprintf()...' >>config.log
# BEGIN snprintf
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <stdio.h>

int
main(int argc, char *argv[])
{
	char buf[16];
	(void)snprintf(buf, sizeof(buf), "foo");
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_SNPRINTF' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_SNPRINTF=yes
bb_o=$bb_incdir/have_snprintf.h
echo '#ifndef HAVE_SNPRINTF' >$bb_o
echo "#define HAVE_SNPRINTF \"$HAVE_SNPRINTF\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_SNPRINTF\"] = \"$HAVE_SNPRINTF\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_SNPRINTF=no
echo '#undef HAVE_SNPRINTF' >$bb_incdir/have_snprintf.h
echo 'hdefs["HAVE_SNPRINTF"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
# END snprintf
$ECHO_N 'checking for vsnprintf()...'
$ECHO_N '# checking for vsnprintf()...' >>config.log
# BEGIN vsnprintf
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <stdio.h>
#include <stdarg.h>

static void
testfmt(const char *fmt, ...)
{
	char buf[16];
	va_list ap;
	va_start(ap, fmt);
	(void)vsnprintf(buf, sizeof(buf), fmt, ap);
	va_end(ap);
}
int
main(int argc, char *argv[])
{
	testfmt("foo", 1, 2, 3);
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_VSNPRINTF' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_VSNPRINTF=yes
bb_o=$bb_incdir/have_vsnprintf.h
echo '#ifndef HAVE_VSNPRINTF' >$bb_o
echo "#define HAVE_VSNPRINTF \"$HAVE_VSNPRINTF\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_VSNPRINTF\"] = \"$HAVE_VSNPRINTF\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_VSNPRINTF=no
echo '#undef HAVE_VSNPRINTF' >$bb_incdir/have_vsnprintf.h
echo 'hdefs["HAVE_VSNPRINTF"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
# END vsnprintf
$ECHO_N 'checking for vasprintf()...'
$ECHO_N '# checking for vasprintf()...' >>config.log
# BEGIN vasprintf
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <stdio.h>
#include <stdarg.h>

int
testprintf(const char *fmt, ...)
{
	va_list args;
	char *buf;

	va_start(args, fmt);
	if (vasprintf(&buf, "%s", args) == -1) {
		return (-1);
	}
	va_end(args);
	return (0);
}
int
main(int argc, char *argv[])
{
	return (testprintf("foo %s", "bar"));
}
EOT
echo >>config.log
echo '# C: HAVE_VASPRINTF' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -D_GNU_SOURCE -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -D_GNU_SOURCE -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_VASPRINTF=yes
bb_o=$bb_incdir/have_vasprintf.h
echo '#ifndef HAVE_VASPRINTF' >$bb_o
echo "#define HAVE_VASPRINTF \"$HAVE_VASPRINTF\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_VASPRINTF\"] = \"$HAVE_VASPRINTF\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_VASPRINTF=no
echo '#undef HAVE_VASPRINTF' >$bb_incdir/have_vasprintf.h
echo 'hdefs["HAVE_VASPRINTF"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
# END vasprintf
$ECHO_N 'checking for ANSI-style signal() facilities...'
$ECHO_N '# checking for ANSI-style signal() facilities...' >>config.log
# BEGIN signal
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <signal.h>
void sighandler(int sig) { }
int
main(int argc, char *argv[])
{
	signal(SIGTERM, sighandler);
	signal(SIGILL, sighandler);
	return (0);
}
EOT
echo >>config.log
echo '# C: _MK_HAVE_SIGNAL' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
_MK_HAVE_SIGNAL=yes
bb_o=$bb_incdir/_mk_have_signal.h
echo '#ifndef _MK_HAVE_SIGNAL' >$bb_o
echo "#define _MK_HAVE_SIGNAL \"$_MK_HAVE_SIGNAL\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"_MK_HAVE_SIGNAL\"] = \"$_MK_HAVE_SIGNAL\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
_MK_HAVE_SIGNAL=no
echo '#undef _MK_HAVE_SIGNAL' >$bb_incdir/_mk_have_signal.h
echo 'hdefs["_MK_HAVE_SIGNAL"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
# END signal
$ECHO_N 'checking for setjmp() and longjmp()...'
$ECHO_N '# checking for setjmp() and longjmp()...' >>config.log
# BEGIN setjmp
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <setjmp.h>

jmp_buf jmpbuf;

int
main(int argc, char *argv[])
{
	longjmp(jmpbuf, 1);
	setjmp(jmpbuf);
	return (0);
}
EOT
echo >>config.log
echo '# C: _MK_HAVE_SETJMP' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
_MK_HAVE_SETJMP=yes
bb_o=$bb_incdir/_mk_have_setjmp.h
echo '#ifndef _MK_HAVE_SETJMP' >$bb_o
echo "#define _MK_HAVE_SETJMP \"$_MK_HAVE_SETJMP\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"_MK_HAVE_SETJMP\"] = \"$_MK_HAVE_SETJMP\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
_MK_HAVE_SETJMP=no
echo '#undef _MK_HAVE_SETJMP' >$bb_incdir/_mk_have_setjmp.h
echo 'hdefs["_MK_HAVE_SETJMP"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
# END setjmp
$ECHO_N 'checking for strtoll()...'
$ECHO_N '# checking for strtoll()...' >>config.log
# BEGIN strtoll
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <stdlib.h>

int
main(int argc, char *argv[])
{
	long long int lli;
	char *ep = NULL;
	char *foo = "1234";

	lli = strtoll(foo, &ep, 10);
	return (lli != 0);
}
EOT
echo >>config.log
echo '# C: _MK_HAVE_STRTOLL' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
_MK_HAVE_STRTOLL=yes
bb_o=$bb_incdir/_mk_have_strtoll.h
echo '#ifndef _MK_HAVE_STRTOLL' >$bb_o
echo "#define _MK_HAVE_STRTOLL \"$_MK_HAVE_STRTOLL\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"_MK_HAVE_STRTOLL\"] = \"$_MK_HAVE_STRTOLL\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
_MK_HAVE_STRTOLL=no
echo '#undef _MK_HAVE_STRTOLL' >$bb_incdir/_mk_have_strtoll.h
echo 'hdefs["_MK_HAVE_STRTOLL"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
# END strtoll
$ECHO_N 'checking for strtold()...'
$ECHO_N '# checking for strtold()...' >>config.log
# BEGIN strtold
if [ "${HAVE_LONG_DOUBLE}" = "yes" ]; then
if [ "${HAVE_CYGWIN}" = "no" ]; then
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#ifndef __NetBSD__
# define _XOPEN_SOURCE 600
#endif
#include <stdlib.h>
int
main(int argc, char *argv[])
{
	long double ld;
	char *ep = NULL;
	char *foo = "1234";

	ld = strtold(foo, &ep);
	return (ld != 1234.0);
}
EOT
echo >>config.log
echo '# C: _MK_HAVE_STRTOLD' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
_MK_HAVE_STRTOLD=yes
bb_o=$bb_incdir/_mk_have_strtold.h
echo '#ifndef _MK_HAVE_STRTOLD' >$bb_o
echo "#define _MK_HAVE_STRTOLD \"$_MK_HAVE_STRTOLD\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"_MK_HAVE_STRTOLD\"] = \"$_MK_HAVE_STRTOLD\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
_MK_HAVE_STRTOLD=no
echo '#undef _MK_HAVE_STRTOLD' >$bb_incdir/_mk_have_strtold.h
echo 'hdefs["_MK_HAVE_STRTOLD"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
else
_MK_HAVE_STRTOLD="no"
echo '#undef _MK_HAVE_STRTOLD' >$bb_incdir/_mk_have_strtold.h
echo 'hdefs["_MK_HAVE_STRTOLD"] = nil' >>configure.lua
echo 'not checking (cygwin issues)'
echo '# not checking (cygwin issues)' >>config.log
fi
else
_MK_HAVE_STRTOLD="no"
echo '#undef _MK_HAVE_STRTOLD' >$bb_incdir/_mk_have_strtold.h
echo 'hdefs["_MK_HAVE_STRTOLD"] = nil' >>configure.lua
echo 'skipping (no long double)'
echo '# skipping (no long double)' >>config.log
fi
# END strtold
$ECHO_N 'checking for dlopen() interface...'
$ECHO_N '# checking for dlopen() interface...' >>config.log
# BEGIN dlopen
DSO_CFLAGS=""
DSO_LIBS=""
TEST_CFLAGS_ORIG="${TEST_CFLAGS}"
TEST_HEADERS=Yes
echo >conftest$$.c
echo '#include <dlfcn.h>' >>conftest$$.c
echo 'int main (int argc, char *argv[]) { return (0); }' >>conftest$$.c
MK_COMPILE_STATUS=OK
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
HAVE_DLFCN_H=yes
bb_o=$bb_incdir/have_dlfcn_h.h
echo '#ifndef HAVE_DLFCN_H' >$bb_o
echo "#define HAVE_DLFCN_H \"$HAVE_DLFCN_H\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_DLFCN_H\"] = \"$HAVE_DLFCN_H\"" >>configure.lua
if [ "${TEST_HEADERS}" = "Yes" ]; then
TEST_CFLAGS="${TEST_CFLAGS} -DHAVE_DLFCN_H"
fi
else
HAVE_DLFCN_H=no
echo '#undef HAVE_DLFCN_H' >$bb_incdir/have_dlfcn_h.h
echo 'hdefs["HAVE_DLFCN_H"] = nil' >>configure.lua
fi
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <string.h>
#ifdef HAVE_DLFCN_H
#include <dlfcn.h>
#endif

int
main(int argc, char *argv[])
{
	void *handle;
	char *error;
	handle = dlopen("foo.so", 0);
	error = dlerror();
	(void)dlsym(handle, "foo");
	return (error != NULL);
}
EOT
echo >>config.log
echo '# C: HAVE_DLOPEN' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_DLOPEN=yes
bb_o=$bb_incdir/have_dlopen.h
echo '#ifndef HAVE_DLOPEN' >$bb_o
echo "#define HAVE_DLOPEN \"$HAVE_DLOPEN\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_DLOPEN\"] = \"$HAVE_DLOPEN\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_DLOPEN=no
echo '#undef HAVE_DLOPEN' >$bb_incdir/have_dlopen.h
echo 'hdefs["HAVE_DLOPEN"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_DLOPEN}" = "no" ]; then
$ECHO_N 'checking for dlopen() in -ldl...'
$ECHO_N '# checking for dlopen() in -ldl...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <string.h>
#ifdef HAVE_DLFCN_H
#include <dlfcn.h>
#endif

int
main(int argc, char *argv[])
{
	void *handle;
	char *error;
	handle = dlopen("foo.so", 0);
	error = dlerror();
	(void)dlsym(handle, "foo");
	return (error != NULL);
}
EOT
echo >>config.log
echo '# C: HAVE_DLOPEN' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -ldl -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -ldl -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_DLOPEN=yes
bb_o=$bb_incdir/have_dlopen.h
echo '#ifndef HAVE_DLOPEN' >$bb_o
echo "#define HAVE_DLOPEN \"$HAVE_DLOPEN\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_DLOPEN\"] = \"$HAVE_DLOPEN\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_DLOPEN=no
echo '#undef HAVE_DLOPEN' >$bb_incdir/have_dlopen.h
echo 'hdefs["HAVE_DLOPEN"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_DLOPEN}" = "yes" ]; then
DSO_CFLAGS=""
DSO_LIBS="-ldl"
bb_o=$bb_incdir/dso_cflags.h
echo '#ifndef DSO_CFLAGS' >$bb_o
echo "#define DSO_CFLAGS \"$DSO_CFLAGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"DSO_CFLAGS\"] = \"$DSO_CFLAGS\"" >>configure.lua
bb_o=$bb_incdir/dso_libs.h
echo '#ifndef DSO_LIBS' >$bb_o
echo "#define DSO_LIBS \"$DSO_LIBS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"DSO_LIBS\"] = \"$DSO_LIBS\"" >>configure.lua
fi
fi
TEST_CFLAGS="${TEST_CFLAGS_ORIG}"
TEST_HEADERS=
# END dlopen
$ECHO_N 'checking for dyld interface...'
$ECHO_N '# checking for dyld interface...' >>config.log
# BEGIN dyld
TEST_CFLAGS_ORIG="${TEST_CFLAGS}"
TEST_HEADERS=Yes
echo >conftest$$.c
echo '#include <mach-o/dyld.h>' >>conftest$$.c
echo 'int main (int argc, char *argv[]) { return (0); }' >>conftest$$.c
MK_COMPILE_STATUS=OK
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
HAVE_MACH_O_DYLD_H=yes
bb_o=$bb_incdir/have_mach_o_dyld_h.h
echo '#ifndef HAVE_MACH_O_DYLD_H' >$bb_o
echo "#define HAVE_MACH_O_DYLD_H \"$HAVE_MACH_O_DYLD_H\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_MACH_O_DYLD_H\"] = \"$HAVE_MACH_O_DYLD_H\"" >>configure.lua
if [ "${TEST_HEADERS}" = "Yes" ]; then
TEST_CFLAGS="${TEST_CFLAGS} -DHAVE_MACH_O_DYLD_H"
fi
else
HAVE_MACH_O_DYLD_H=no
echo '#undef HAVE_MACH_O_DYLD_H' >$bb_incdir/have_mach_o_dyld_h.h
echo 'hdefs["HAVE_MACH_O_DYLD_H"] = nil' >>configure.lua
fi
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#ifdef __APPLE__
# include <Availability.h>
# ifdef __MAC_OS_X_VERSION_MIN_REQUIRED
#  if __MAC_OS_X_VERSION_MIN_REQUIRED >= 1050
#   error "deprecated in Leopard and later"
#  endif
# endif
#endif

#ifdef HAVE_MACH_O_DYLD_H
#include <mach-o/dyld.h>
#endif

int
main(int argc, char *argv[])
{
	NSObjectFileImage img;
	NSObjectFileImageReturnCode rv;

	rv = NSCreateObjectFileImageFromFile("foo", &img);
	return (rv == NSObjectFileImageSuccess);
}
EOT
echo >>config.log
echo '# C: HAVE_DYLD' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_DYLD=yes
bb_o=$bb_incdir/have_dyld.h
echo '#ifndef HAVE_DYLD' >$bb_o
echo "#define HAVE_DYLD \"$HAVE_DYLD\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_DYLD\"] = \"$HAVE_DYLD\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_DYLD=no
echo '#undef HAVE_DYLD' >$bb_incdir/have_dyld.h
echo 'hdefs["HAVE_DYLD"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_DYLD}" = "yes" ]; then
$ECHO_N 'checking for NSLINKMODULE_OPTION_RETURN_ON_ERROR'
$ECHO_N '# checking for NSLINKMODULE_OPTION_RETURN_ON_ERROR' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#ifdef HAVE_MACH_O_DYLD_H
#include <mach-o/dyld.h>
#endif
int
main(int argc, char *argv[])
{
	NSObjectFileImage img;
	NSObjectFileImageReturnCode rv;
	void *handle;

	rv = NSCreateObjectFileImageFromFile("foo", &img);
	handle = (void *)NSLinkModule(img, "foo",
	    NSLINKMODULE_OPTION_RETURN_ON_ERROR|
		NSLINKMODULE_OPTION_NONE);
	if (handle == NULL) {
		NSLinkEditErrors errs;
		int n;
		const char *f, *s = NULL;
		NSLinkEditError(&errs, &n, &f, &s);
	}
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_DYLD_RETURN_ON_ERROR' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_DYLD_RETURN_ON_ERROR=yes
bb_o=$bb_incdir/have_dyld_return_on_error.h
echo '#ifndef HAVE_DYLD_RETURN_ON_ERROR' >$bb_o
echo "#define HAVE_DYLD_RETURN_ON_ERROR \"$HAVE_DYLD_RETURN_ON_ERROR\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_DYLD_RETURN_ON_ERROR\"] = \"$HAVE_DYLD_RETURN_ON_ERROR\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_DYLD_RETURN_ON_ERROR=no
echo '#undef HAVE_DYLD_RETURN_ON_ERROR' >$bb_incdir/have_dyld_return_on_error.h
echo 'hdefs["HAVE_DYLD_RETURN_ON_ERROR"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
else
HAVE_DYLD_RETURN_ON_ERROR="no"
echo '#undef HAVE_DYLD_RETURN_ON_ERROR' >$bb_incdir/have_dyld_return_on_error.h
echo 'hdefs["HAVE_DYLD_RETURN_ON_ERROR"] = nil' >>configure.lua
fi
TEST_CFLAGS="${TEST_CFLAGS_ORIG}"
TEST_HEADERS=
# END dyld
$ECHO_N 'checking for the shl_load() interface...'
$ECHO_N '# checking for the shl_load() interface...' >>config.log
# BEGIN shl_load
TEST_CFLAGS_ORIG="${TEST_CFLAGS}"
TEST_HEADERS=Yes
echo >conftest$$.c
echo '#include <dl.h>' >>conftest$$.c
echo 'int main (int argc, char *argv[]) { return (0); }' >>conftest$$.c
MK_COMPILE_STATUS=OK
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
HAVE_DL_H=yes
bb_o=$bb_incdir/have_dl_h.h
echo '#ifndef HAVE_DL_H' >$bb_o
echo "#define HAVE_DL_H \"$HAVE_DL_H\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_DL_H\"] = \"$HAVE_DL_H\"" >>configure.lua
if [ "${TEST_HEADERS}" = "Yes" ]; then
TEST_CFLAGS="${TEST_CFLAGS} -DHAVE_DL_H"
fi
else
HAVE_DL_H=no
echo '#undef HAVE_DL_H' >$bb_incdir/have_dl_h.h
echo 'hdefs["HAVE_DL_H"] = nil' >>configure.lua
fi
if [ "" != "" ]; then
SHL_LOAD_LIBS="-L -ldld"
else
SHL_LOAD_LIBS="-ldld"
fi
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <string.h>
#ifdef HAVE_DL_H
#include <dl.h>
#endif

int
main(int argc, char *argv[])
{
	void *handle;
	void **p;

	handle = shl_load("foo.so", BIND_IMMEDIATE, 0);
	(void)shl_findsym((shl_t *)&handle, "foo", TYPE_PROCEDURE, p);
	(void)shl_findsym((shl_t *)&handle, "foo", TYPE_DATA, p);
	shl_unload((shl_t)handle);
	return (handle != NULL);
}
EOT
echo >>config.log
echo '# C: HAVE_SHL_LOAD' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${SHL_LOAD_LIBS} -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${SHL_LOAD_LIBS} -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_SHL_LOAD=yes
bb_o=$bb_incdir/have_shl_load.h
echo '#ifndef HAVE_SHL_LOAD' >$bb_o
echo "#define HAVE_SHL_LOAD \"$HAVE_SHL_LOAD\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_SHL_LOAD\"] = \"$HAVE_SHL_LOAD\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_SHL_LOAD=no
echo '#undef HAVE_SHL_LOAD' >$bb_incdir/have_shl_load.h
echo 'hdefs["HAVE_SHL_LOAD"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_SHL_LOAD}" = "yes" ]; then
DSO_LIBS="$DSO_LIBS $SHL_LOAD_LIBS"
bb_o=$bb_incdir/have_shl_load.h
echo '#ifndef HAVE_SHL_LOAD' >$bb_o
echo "#define HAVE_SHL_LOAD \"$HAVE_SHL_LOAD\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_SHL_LOAD\"] = \"$HAVE_SHL_LOAD\"" >>configure.lua
bb_o=$bb_incdir/dso_libs.h
echo '#ifndef DSO_LIBS' >$bb_o
echo "#define DSO_LIBS \"$DSO_LIBS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"DSO_LIBS\"] = \"$DSO_LIBS\"" >>configure.lua
else
echo '#undef HAVE_SHL_LOAD' >$bb_incdir/have_shl_load.h
echo 'hdefs["HAVE_SHL_LOAD"] = nil' >>configure.lua
fi
TEST_CFLAGS="${TEST_CFLAGS_ORIG}"
TEST_HEADERS=
# END shl_load
$ECHO_N 'checking for gettimeofday()...'
$ECHO_N '# checking for gettimeofday()...' >>config.log
# BEGIN gettimeofday
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <sys/time.h>
#include <stdio.h>

int
main(int argc, char *argv[])
{
	struct timeval tv;
	int rv = gettimeofday(&tv, NULL);
	return (rv);
}
EOT
echo >>config.log
echo '# C: HAVE_GETTIMEOFDAY' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_GETTIMEOFDAY=yes
bb_o=$bb_incdir/have_gettimeofday.h
echo '#ifndef HAVE_GETTIMEOFDAY' >$bb_o
echo "#define HAVE_GETTIMEOFDAY \"$HAVE_GETTIMEOFDAY\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_GETTIMEOFDAY\"] = \"$HAVE_GETTIMEOFDAY\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_GETTIMEOFDAY=no
echo '#undef HAVE_GETTIMEOFDAY' >$bb_incdir/have_gettimeofday.h
echo 'hdefs["HAVE_GETTIMEOFDAY"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
# END gettimeofday
$ECHO_N 'checking for the select() interface...'
$ECHO_N '# checking for the select() interface...' >>config.log
# BEGIN select
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <sys/types.h>
#include <sys/time.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>

int
main(int argc, char *argv[])
{
	struct timeval tv;
	int rv;

	tv.tv_sec = 1;
	tv.tv_usec = 1;
	rv = select(0, NULL, NULL, NULL, &tv);
	return (rv == -1 && errno != EINTR);
}
EOT
echo >>config.log
echo '# C: HAVE_SELECT' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_SELECT=yes
bb_o=$bb_incdir/have_select.h
echo '#ifndef HAVE_SELECT' >$bb_o
echo "#define HAVE_SELECT \"$HAVE_SELECT\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_SELECT\"] = \"$HAVE_SELECT\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_SELECT=no
echo '#undef HAVE_SELECT' >$bb_incdir/have_select.h
echo 'hdefs["HAVE_SELECT"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
# END select
$ECHO_N 'checking for glob()...'
$ECHO_N '# checking for glob()...' >>config.log
# BEGIN glob
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <string.h>
#include <glob.h>
#include <stdio.h>

int
main(int argc, char *argv[])
{
	glob_t gl;
	int rv, i;
	char *s = NULL;

	rv = glob("~/foo", GLOB_TILDE, NULL, &gl);
	for (i = 0; i < gl.gl_pathc; i++) { s = gl.gl_pathv[i]; }
	return (rv != 0 && s != NULL);
}
EOT
echo >>config.log
echo '# C: HAVE_GLOB' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_GLOB=yes
bb_o=$bb_incdir/have_glob.h
echo '#ifndef HAVE_GLOB' >$bb_o
echo "#define HAVE_GLOB \"$HAVE_GLOB\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_GLOB\"] = \"$HAVE_GLOB\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_GLOB=no
echo '#undef HAVE_GLOB' >$bb_incdir/have_glob.h
echo 'hdefs["HAVE_GLOB"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
# END glob
$ECHO_N 'checking for the getopt() function...'
$ECHO_N '# checking for the getopt() function...' >>config.log
# BEGIN getopt
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <string.h>
#include <getopt.h>

int
main(int argc, char *argv[])
{
	int c, x = 0;
	while ((c = getopt(argc, argv, "foo")) != -1) {
		extern char *optarg;
		extern int optind, opterr, optopt;
		if (optarg != NULL) { x = 1; }
		if (optind > 0) { x = 2; }
		if (opterr > 0) { x = 3; }
		if (optopt > 0) { x = 4; }
	}
	return (x != 0);
}
EOT
echo >>config.log
echo '# C: HAVE_GETOPT' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_GETOPT=yes
bb_o=$bb_incdir/have_getopt.h
echo '#ifndef HAVE_GETOPT' >$bb_o
echo "#define HAVE_GETOPT \"$HAVE_GETOPT\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_GETOPT\"] = \"$HAVE_GETOPT\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_GETOPT=no
echo '#undef HAVE_GETOPT' >$bb_incdir/have_getopt.h
echo 'hdefs["HAVE_GETOPT"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
# END getopt
$ECHO_N 'checking for the execvp() function...'
$ECHO_N '# checking for the execvp() function...' >>config.log
# BEGIN execvp
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <unistd.h>

int
main(int argc, char *argv[])
{
	char *args[3] = { "foo", NULL, NULL };
	int rv;

	rv = execvp(args[0], args);
	return (rv);
}
EOT
echo >>config.log
echo '# C: HAVE_EXECVP' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_EXECVP=yes
bb_o=$bb_incdir/have_execvp.h
echo '#ifndef HAVE_EXECVP' >$bb_o
echo "#define HAVE_EXECVP \"$HAVE_EXECVP\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_EXECVP\"] = \"$HAVE_EXECVP\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_EXECVP=no
echo '#undef HAVE_EXECVP' >$bb_incdir/have_execvp.h
echo 'hdefs["HAVE_EXECVP"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
# END execvp
$ECHO_N 'checking for clock_gettime() interface (w/o -lrt)...'
$ECHO_N '# checking for clock_gettime() interface (w/o -lrt)...' >>config.log
# BEGIN clock_gettime
CLOCK_CFLAGS=""
CLOCK_LIBS=""
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <time.h>
int
main(int argc, char *argv[])
{
	struct timespec ts;
	clock_gettime(CLOCK_REALTIME, &ts);
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_CLOCK_GETTIME' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${CLOCK_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${CLOCK_LIBS} 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${CLOCK_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${CLOCK_LIBS} 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_CLOCK_GETTIME=yes
bb_o=$bb_incdir/have_clock_gettime.h
echo '#ifndef HAVE_CLOCK_GETTIME' >$bb_o
echo "#define HAVE_CLOCK_GETTIME \"$HAVE_CLOCK_GETTIME\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_CLOCK_GETTIME\"] = \"$HAVE_CLOCK_GETTIME\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_CLOCK_GETTIME=no
echo '#undef HAVE_CLOCK_GETTIME' >$bb_incdir/have_clock_gettime.h
echo 'hdefs["HAVE_CLOCK_GETTIME"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_CLOCK_GETTIME}" = "yes" ]; then
bb_o=$bb_incdir/have_clock_gettime.h
echo '#ifndef HAVE_CLOCK_GETTIME' >$bb_o
echo "#define HAVE_CLOCK_GETTIME \"$HAVE_CLOCK_GETTIME\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_CLOCK_GETTIME\"] = \"$HAVE_CLOCK_GETTIME\"" >>configure.lua
bb_o=$bb_incdir/clock_cflags.h
echo '#ifndef CLOCK_CFLAGS' >$bb_o
echo "#define CLOCK_CFLAGS \"$CLOCK_CFLAGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"CLOCK_CFLAGS\"] = \"$CLOCK_CFLAGS\"" >>configure.lua
bb_o=$bb_incdir/clock_libs.h
echo '#ifndef CLOCK_LIBS' >$bb_o
echo "#define CLOCK_LIBS \"$CLOCK_LIBS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"CLOCK_LIBS\"] = \"$CLOCK_LIBS\"" >>configure.lua
else
$ECHO_N 'checking for clock_gettime() interface (with -lrt)...'
$ECHO_N '# checking for clock_gettime() interface (with -lrt)...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <time.h>
int
main(int argc, char *argv[])
{
	struct timespec ts;
	clock_gettime(CLOCK_REALTIME, &ts);
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_CLOCK_GETTIME' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${CLOCK_CFLAGS} -o $testdir/conftest$$ conftest$$.c -lrt 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${CLOCK_CFLAGS} -o $testdir/conftest$$ conftest$$.c -lrt 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_CLOCK_GETTIME=yes
bb_o=$bb_incdir/have_clock_gettime.h
echo '#ifndef HAVE_CLOCK_GETTIME' >$bb_o
echo "#define HAVE_CLOCK_GETTIME \"$HAVE_CLOCK_GETTIME\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_CLOCK_GETTIME\"] = \"$HAVE_CLOCK_GETTIME\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_CLOCK_GETTIME=no
echo '#undef HAVE_CLOCK_GETTIME' >$bb_incdir/have_clock_gettime.h
echo 'hdefs["HAVE_CLOCK_GETTIME"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_CLOCK_GETTIME}" = "yes" ]; then
CLOCK_LIBS="-lrt"
bb_o=$bb_incdir/have_clock_gettime.h
echo '#ifndef HAVE_CLOCK_GETTIME' >$bb_o
echo "#define HAVE_CLOCK_GETTIME \"$HAVE_CLOCK_GETTIME\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_CLOCK_GETTIME\"] = \"$HAVE_CLOCK_GETTIME\"" >>configure.lua
bb_o=$bb_incdir/clock_cflags.h
echo '#ifndef CLOCK_CFLAGS' >$bb_o
echo "#define CLOCK_CFLAGS \"$CLOCK_CFLAGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"CLOCK_CFLAGS\"] = \"$CLOCK_CFLAGS\"" >>configure.lua
bb_o=$bb_incdir/clock_libs.h
echo '#ifndef CLOCK_LIBS' >$bb_o
echo "#define CLOCK_LIBS \"$CLOCK_LIBS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"CLOCK_LIBS\"] = \"$CLOCK_LIBS\"" >>configure.lua
else
echo '#undef HAVE_CLOCK_GETTIME' >$bb_incdir/have_clock_gettime.h
echo 'hdefs["HAVE_CLOCK_GETTIME"] = nil' >>configure.lua
fi
fi
# END clock_gettime
$ECHO_N 'checking for winmm time interface...'
$ECHO_N '# checking for winmm time interface...' >>config.log
# BEGIN clock_win32
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#ifdef _XBOX
#include <xtl.h>
#else
#include <windows.h>
#include <mmsystem.h>
#endif

int
main(int argc, char *argv[])
{
	DWORD t0;
#ifndef _XBOX
	timeBeginPeriod(1);
#endif
	t0 = timeGetTime();
	Sleep(1);
	return (t0 != 0) ? 0 : 1;
}
EOT
echo >>config.log
echo '# C: HAVE_CLOCK_WIN32' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest$$ conftest$$.c -lwinmm 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest$$ conftest$$.c -lwinmm 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_CLOCK_WIN32=yes
bb_o=$bb_incdir/have_clock_win32.h
echo '#ifndef HAVE_CLOCK_WIN32' >$bb_o
echo "#define HAVE_CLOCK_WIN32 \"$HAVE_CLOCK_WIN32\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_CLOCK_WIN32\"] = \"$HAVE_CLOCK_WIN32\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_CLOCK_WIN32=no
echo '#undef HAVE_CLOCK_WIN32' >$bb_incdir/have_clock_win32.h
echo 'hdefs["HAVE_CLOCK_WIN32"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_CLOCK_WIN32}" = "yes" ]; then
CLOCK_CFLAGS=""
CLOCK_LIBS="-lwinmm"
bb_o=$bb_incdir/have_clock_win32.h
echo '#ifndef HAVE_CLOCK_WIN32' >$bb_o
echo "#define HAVE_CLOCK_WIN32 \"$HAVE_CLOCK_WIN32\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_CLOCK_WIN32\"] = \"$HAVE_CLOCK_WIN32\"" >>configure.lua
bb_o=$bb_incdir/clock_cflags.h
echo '#ifndef CLOCK_CFLAGS' >$bb_o
echo "#define CLOCK_CFLAGS \"$CLOCK_CFLAGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"CLOCK_CFLAGS\"] = \"$CLOCK_CFLAGS\"" >>configure.lua
bb_o=$bb_incdir/clock_libs.h
echo '#ifndef CLOCK_LIBS' >$bb_o
echo "#define CLOCK_LIBS \"$CLOCK_LIBS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"CLOCK_LIBS\"] = \"$CLOCK_LIBS\"" >>configure.lua
else
echo '#undef HAVE_CLOCK_WIN32' >$bb_incdir/have_clock_win32.h
echo 'hdefs["HAVE_CLOCK_WIN32"] = nil' >>configure.lua
fi
# END clock_win32
$ECHO_N 'checking for nanosleep()...'
$ECHO_N '# checking for nanosleep()...' >>config.log
# BEGIN nanosleep
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <time.h>

int
main(int argc, char *argv[])
{
	struct timespec rqtp, rmtp;
	int rv;

	rqtp.tv_sec = 1;
	rqtp.tv_nsec = 1000000;
	rv = nanosleep(&rqtp, &rmtp);
	return (rv == -1);
}
EOT
echo >>config.log
echo '# C: HAVE_NANOSLEEP' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_NANOSLEEP=yes
bb_o=$bb_incdir/have_nanosleep.h
echo '#ifndef HAVE_NANOSLEEP' >$bb_o
echo "#define HAVE_NANOSLEEP \"$HAVE_NANOSLEEP\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_NANOSLEEP\"] = \"$HAVE_NANOSLEEP\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_NANOSLEEP=no
echo '#undef HAVE_NANOSLEEP' >$bb_incdir/have_nanosleep.h
echo 'hdefs["HAVE_NANOSLEEP"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
# END nanosleep
$ECHO_N 'checking for the kqueue() mechanism...'
$ECHO_N '# checking for the kqueue() mechanism...' >>config.log
# BEGIN kqueue
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <sys/types.h>
#include <sys/event.h>
#include <sys/time.h>
#include <fcntl.h>
#include <unistd.h>

int
main(int argc, char *argv[])
{
	struct kevent kev, chg;
	int kq, fd = -1, nev;

	if ((kq = kqueue()) == -1) { return (1); }
#if defined(__NetBSD__)
	EV_SET(&kev, (uintptr_t)fd, EVFILT_READ, EV_ADD|EV_ENABLE|EV_ONESHOT, 0, 0, (intptr_t)NULL);
	EV_SET(&kev, (uintptr_t)1, EVFILT_TIMER, EV_ADD|EV_ENABLE, 0, 0, (intptr_t)NULL);
#else
	EV_SET(&kev, fd, EVFILT_READ, EV_ADD|EV_ENABLE|EV_ONESHOT, 0, 0, NULL);
	EV_SET(&kev, 1, EVFILT_TIMER, EV_ADD|EV_ENABLE, 0, 0, NULL);
#endif
	nev = kevent(kq, &kev, 1, &chg, 1, NULL);
	return (chg.flags & EV_ERROR);
}
EOT
echo >>config.log
echo '# C: HAVE_KQUEUE' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_KQUEUE=yes
bb_o=$bb_incdir/have_kqueue.h
echo '#ifndef HAVE_KQUEUE' >$bb_o
echo "#define HAVE_KQUEUE \"$HAVE_KQUEUE\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_KQUEUE\"] = \"$HAVE_KQUEUE\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_KQUEUE=no
echo '#undef HAVE_KQUEUE' >$bb_incdir/have_kqueue.h
echo 'hdefs["HAVE_KQUEUE"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
# END kqueue
$ECHO_N 'checking for the Linux timerfd interface...'
$ECHO_N '# checking for the Linux timerfd interface...' >>config.log
# BEGIN timerfd
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <sys/timerfd.h>

int
main(int argc, char *argv[])
{
	struct itimerspec its;
	int fd;

	if ((fd = timerfd_create(CLOCK_MONOTONIC, TFD_TIMER_ABSTIME)) != -1) {
		its.it_interval.tv_sec = 0;
		its.it_interval.tv_nsec = 0L;
		its.it_value.tv_sec = 0;
		its.it_value.tv_nsec = 0L;
		return (timerfd_settime(fd, 0, &its, NULL) == -1);
	}
	return (1);
}
EOT
echo >>config.log
echo '# C: HAVE_TIMERFD' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_TIMERFD=yes
bb_o=$bb_incdir/have_timerfd.h
echo '#ifndef HAVE_TIMERFD' >$bb_o
echo "#define HAVE_TIMERFD \"$HAVE_TIMERFD\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_TIMERFD\"] = \"$HAVE_TIMERFD\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_TIMERFD=no
echo '#undef HAVE_TIMERFD' >$bb_incdir/have_timerfd.h
echo 'hdefs["HAVE_TIMERFD"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
# END timerfd
$ECHO_N 'checking for Windows CSIDL...'
$ECHO_N '# checking for Windows CSIDL...' >>config.log
# BEGIN csidl
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <shlobj.h>

int
main(int argc, char *argv[])
{
	WCHAR path[MAX_PATH];

	if (SUCCEEDED(SHGetFolderPathW(NULL, CSIDL_PROFILE, NULL, 0, path))) {
		return (0);
	} else {
		return (1);
	}
}
EOT
echo >>config.log
echo '# C: HAVE_CSIDL' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest$$ conftest$$.c  2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest$$ conftest$$.c  2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_CSIDL=yes
bb_o=$bb_incdir/have_csidl.h
echo '#ifndef HAVE_CSIDL' >$bb_o
echo "#define HAVE_CSIDL \"$HAVE_CSIDL\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_CSIDL\"] = \"$HAVE_CSIDL\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_CSIDL=no
echo '#undef HAVE_CSIDL' >$bb_incdir/have_csidl.h
echo 'hdefs["HAVE_CSIDL"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
# END csidl
$ECHO_N 'checking for the Xbox XDK...'
$ECHO_N '# checking for the Xbox XDK...' >>config.log
# BEGIN xbox
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <xtl.h>
#ifndef _XBOX
# error undefined
#endif
int
main(int argc, char *argv[])
{
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_XBOX' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_XBOX=yes
bb_o=$bb_incdir/have_xbox.h
echo '#ifndef HAVE_XBOX' >$bb_o
echo "#define HAVE_XBOX \"$HAVE_XBOX\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_XBOX\"] = \"$HAVE_XBOX\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_XBOX=no
echo '#undef HAVE_XBOX' >$bb_incdir/have_xbox.h
echo 'hdefs["HAVE_XBOX"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
# END xbox
CFLAGS="$CFLAGS -D_AGAR_INTERNAL"
CXXFLAGS="$CXXFLAGS -D_AGAR_INTERNAL"
CFLAGS="$CFLAGS -D_DEFAULT_SOURCE"
CXXFLAGS="$CXXFLAGS -D_DEFAULT_SOURCE"
CFLAGS="$CFLAGS -D_BSD_SOURCE"
CXXFLAGS="$CXXFLAGS -D_BSD_SOURCE"
if [ "${enable_warnings}" = 'yes' ]
 then
CFLAGS="$CFLAGS -Wall"
CXXFLAGS="$CXXFLAGS -Wall"
CFLAGS="$CFLAGS -Werror"
CXXFLAGS="$CXXFLAGS -Werror"
CFLAGS="$CFLAGS -Wmissing-prototypes"
CXXFLAGS="$CXXFLAGS -Wmissing-prototypes"
CFLAGS="$CFLAGS -Wno-switch"
CXXFLAGS="$CXXFLAGS -Wno-switch"
	case "${host}" in
	*-*-darwin*)
CFLAGS="$CFLAGS -Wno-deprecated-declarations"
CXXFLAGS="$CXXFLAGS -Wno-deprecated-declarations"
		;;
	esac
fi
if [ "${enable_debug}" = 'yes' ]
 then
AG_DEBUG="yes"
bb_o=$bb_incdir/ag_debug.h
echo '#ifndef AG_DEBUG' >$bb_o
echo "#define AG_DEBUG \"$AG_DEBUG\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"AG_DEBUG\"] = \"$AG_DEBUG\"" >>configure.lua
AG_TYPE_SAFETY="yes"
bb_o=$bb_incdir/ag_type_safety.h
echo '#ifndef AG_TYPE_SAFETY' >$bb_o
echo "#define AG_TYPE_SAFETY \"$AG_TYPE_SAFETY\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"AG_TYPE_SAFETY\"] = \"$AG_TYPE_SAFETY\"" >>configure.lua
CFLAGS="${CFLAGS} -g"
else
echo '#undef AG_DEBUG' >$bb_incdir/ag_debug.h
echo 'hdefs["AG_DEBUG"] = nil' >>configure.lua
if [ "${enable_type_safety}" = 'yes' ]; then
AG_TYPE_SAFETY="yes"
bb_o=$bb_incdir/ag_type_safety.h
echo '#ifndef AG_TYPE_SAFETY' >$bb_o
echo "#define AG_TYPE_SAFETY \"$AG_TYPE_SAFETY\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"AG_TYPE_SAFETY\"] = \"$AG_TYPE_SAFETY\"" >>configure.lua
else
echo '#undef AG_TYPE_SAFETY' >$bb_incdir/ag_type_safety.h
echo 'hdefs["AG_TYPE_SAFETY"] = nil' >>configure.lua
fi
fi
if [ "${enable_ansi_color}" != 'no' ]; then
AG_ANSI_COLOR="yes"
bb_o=$bb_incdir/ag_ansi_color.h
echo '#ifndef AG_ANSI_COLOR' >$bb_o
echo "#define AG_ANSI_COLOR \"$AG_ANSI_COLOR\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"AG_ANSI_COLOR\"] = \"$AG_ANSI_COLOR\"" >>configure.lua
else
echo '#undef AG_ANSI_COLOR' >$bb_incdir/ag_ansi_color.h
echo 'hdefs["AG_ANSI_COLOR"] = nil' >>configure.lua
fi
if [ "${enable_dso}" != 'no' ]; then
AG_ENABLE_DSO="yes"
bb_o=$bb_incdir/ag_enable_dso.h
echo '#ifndef AG_ENABLE_DSO' >$bb_o
echo "#define AG_ENABLE_DSO \"$AG_ENABLE_DSO\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"AG_ENABLE_DSO\"] = \"$AG_ENABLE_DSO\"" >>configure.lua
else
echo '#undef AG_ENABLE_DSO' >$bb_incdir/ag_enable_dso.h
echo 'hdefs["AG_ENABLE_DSO"] = nil' >>configure.lua
fi
if [ "${enable_event_loop}" != 'no' ]; then
AG_EVENT_LOOP="yes"
bb_o=$bb_incdir/ag_event_loop.h
echo '#ifndef AG_EVENT_LOOP' >$bb_o
echo "#define AG_EVENT_LOOP \"$AG_EVENT_LOOP\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"AG_EVENT_LOOP\"] = \"$AG_EVENT_LOOP\"" >>configure.lua
else
echo '#undef AG_EVENT_LOOP' >$bb_incdir/ag_event_loop.h
echo 'hdefs["AG_EVENT_LOOP"] = nil' >>configure.lua
fi
if [ "${enable_exec}" != 'no' ]; then
AG_ENABLE_EXEC="yes"
bb_o=$bb_incdir/ag_enable_exec.h
echo '#ifndef AG_ENABLE_EXEC' >$bb_o
echo "#define AG_ENABLE_EXEC \"$AG_ENABLE_EXEC\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"AG_ENABLE_EXEC\"] = \"$AG_ENABLE_EXEC\"" >>configure.lua
else
echo '#undef AG_ENABLE_EXEC' >$bb_incdir/ag_enable_exec.h
echo 'hdefs["AG_ENABLE_EXEC"] = nil' >>configure.lua
fi
if [ "${enable_legacy}" != 'no' ]; then
AG_LEGACY="yes"
bb_o=$bb_incdir/ag_legacy.h
echo '#ifndef AG_LEGACY' >$bb_o
echo "#define AG_LEGACY \"$AG_LEGACY\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"AG_LEGACY\"] = \"$AG_LEGACY\"" >>configure.lua
else
echo '#undef AG_LEGACY' >$bb_incdir/ag_legacy.h
echo 'hdefs["AG_LEGACY"] = nil' >>configure.lua
fi
if [ "${enable_named_args}" != 'no' ]; then
AG_NAMED_ARGS="yes"
bb_o=$bb_incdir/ag_named_args.h
echo '#ifndef AG_NAMED_ARGS' >$bb_o
echo "#define AG_NAMED_ARGS \"$AG_NAMED_ARGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"AG_NAMED_ARGS\"] = \"$AG_NAMED_ARGS\"" >>configure.lua
else
echo '#undef AG_NAMED_ARGS' >$bb_incdir/ag_named_args.h
echo 'hdefs["AG_NAMED_ARGS"] = nil' >>configure.lua
fi
if [ "${enable_namespaces}" != 'no' ]; then
AG_NAMESPACES="yes"
bb_o=$bb_incdir/ag_namespaces.h
echo '#ifndef AG_NAMESPACES' >$bb_o
echo "#define AG_NAMESPACES \"$AG_NAMESPACES\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"AG_NAMESPACES\"] = \"$AG_NAMESPACES\"" >>configure.lua
else
echo '#undef AG_NAMESPACES' >$bb_incdir/ag_namespaces.h
echo 'hdefs["AG_NAMESPACES"] = nil' >>configure.lua
fi
if [ "${enable_serialization}" != 'no' ]; then
AG_SERIALIZATION="yes"
bb_o=$bb_incdir/ag_serialization.h
echo '#ifndef AG_SERIALIZATION' >$bb_o
echo "#define AG_SERIALIZATION \"$AG_SERIALIZATION\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"AG_SERIALIZATION\"] = \"$AG_SERIALIZATION\"" >>configure.lua
else
echo '#undef AG_SERIALIZATION' >$bb_incdir/ag_serialization.h
echo 'hdefs["AG_SERIALIZATION"] = nil' >>configure.lua
fi
if [ "${enable_string}" != 'no' ]; then
AG_ENABLE_STRING="yes"
bb_o=$bb_incdir/ag_enable_string.h
echo '#ifndef AG_ENABLE_STRING' >$bb_o
echo "#define AG_ENABLE_STRING \"$AG_ENABLE_STRING\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"AG_ENABLE_STRING\"] = \"$AG_ENABLE_STRING\"" >>configure.lua
else
echo '#undef AG_ENABLE_STRING' >$bb_incdir/ag_enable_string.h
echo 'hdefs["AG_ENABLE_STRING"] = nil' >>configure.lua
fi
if [ "${enable_timers}" != 'no' ]; then
AG_TIMERS="yes"
bb_o=$bb_incdir/ag_timers.h
echo '#ifndef AG_TIMERS' >$bb_o
echo "#define AG_TIMERS \"$AG_TIMERS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"AG_TIMERS\"] = \"$AG_TIMERS\"" >>configure.lua
else
echo '#undef AG_TIMERS' >$bb_incdir/ag_timers.h
echo 'hdefs["AG_TIMERS"] = nil' >>configure.lua
fi
if [ "${enable_unicode}" != 'no' ]; then
AG_UNICODE="yes"
bb_o=$bb_incdir/ag_unicode.h
echo '#ifndef AG_UNICODE' >$bb_o
echo "#define AG_UNICODE \"$AG_UNICODE\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"AG_UNICODE\"] = \"$AG_UNICODE\"" >>configure.lua
else
echo '#undef AG_UNICODE' >$bb_incdir/ag_unicode.h
echo 'hdefs["AG_UNICODE"] = nil' >>configure.lua
fi
if [ "${enable_user}" != 'no' ]; then
AG_USER="yes"
bb_o=$bb_incdir/ag_user.h
echo '#ifndef AG_USER' >$bb_o
echo "#define AG_USER \"$AG_USER\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"AG_USER\"] = \"$AG_USER\"" >>configure.lua
else
echo '#undef AG_USER' >$bb_incdir/ag_user.h
echo 'hdefs["AG_USER"] = nil' >>configure.lua
fi
if [ "${enable_verbosity}" != 'no' ]; then
AG_VERBOSITY="yes"
bb_o=$bb_incdir/ag_verbosity.h
echo '#ifndef AG_VERBOSITY' >$bb_o
echo "#define AG_VERBOSITY \"$AG_VERBOSITY\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"AG_VERBOSITY\"] = \"$AG_VERBOSITY\"" >>configure.lua
else
echo '#undef AG_VERBOSITY' >$bb_incdir/ag_verbosity.h
echo 'hdefs["AG_VERBOSITY"] = nil' >>configure.lua
fi
if [ "${enable_widgets}" != 'no' ]; then
AG_WIDGETS="yes"
bb_o=$bb_incdir/ag_widgets.h
echo '#ifndef AG_WIDGETS' >$bb_o
echo "#define AG_WIDGETS \"$AG_WIDGETS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"AG_WIDGETS\"] = \"$AG_WIDGETS\"" >>configure.lua
else
echo '#undef AG_WIDGETS' >$bb_incdir/ag_widgets.h
echo 'hdefs["AG_WIDGETS"] = nil' >>configure.lua
fi
if [ "${enable_wm_hints}" != 'no' ]; then
AG_WM_HINTS="yes"
bb_o=$bb_incdir/ag_wm_hints.h
echo '#ifndef AG_WM_HINTS' >$bb_o
echo "#define AG_WM_HINTS \"$AG_WM_HINTS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"AG_WM_HINTS\"] = \"$AG_WM_HINTS\"" >>configure.lua
else
echo '#undef AG_WM_HINTS' >$bb_incdir/ag_wm_hints.h
echo 'hdefs["AG_WM_HINTS"] = nil' >>configure.lua
fi
if [ "${enable_gui}" != 'no' ]
 then
ENABLE_GUI="yes"
bb_o=$bb_incdir/enable_gui.h
echo '#ifndef ENABLE_GUI' >$bb_o
echo "#define ENABLE_GUI \"$ENABLE_GUI\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"ENABLE_GUI\"] = \"$ENABLE_GUI\"" >>configure.lua
ENABLE_GUI_LIBS="-L../gui -lag_gui"
SUBDIR_gui="gui"
	if [ "${with_sdl}" != 'no' ]
 then
$ECHO_N 'checking for SDL 1.2...'
$ECHO_N '# checking for SDL 1.2...' >>config.log
# BEGIN sdl(1.2.0 ${prefix_sdl})
if [ "${prefix_sdl}" != "" ]; then
SDL_PREFIX=
if [ "${prefix_sdl}" != "" ]; then
if [ -e "${prefix_sdl}/bin/sdl-config" ]; then
SDL_PREFIX=`${prefix_sdl}/bin/sdl-config --prefix`
MK_EXEC_FOUND=Yes
MK_EXEC_PATH="${prefix_sdl}/bin/sdl-config"
fi
else
bb_save_IFS=$IFS
IFS=$PATH_SEPARATOR
for path in $PATH; do
if [ -e "${path}/sdl-config" ]; then
SDL_PREFIX=`${path}/sdl-config --prefix`
MK_EXEC_FOUND=Yes
MK_EXEC_PATH="${path}/sdl-config"
break
elif [ -e "${path}/sdl-config.exe" ]; then
SDL_PREFIX=`${path}/sdl-config.exe --prefix`
MK_EXEC_FOUND=Yes
MK_EXEC_PATH="${path}/sdl-config.exe"
break
fi
done
IFS=$bb_save_IFS
fi
SDL_VERSION=
if [ "${prefix_sdl}" != "" ]; then
if [ -e "${prefix_sdl}/bin/sdl-config" ]; then
SDL_VERSION=`${prefix_sdl}/bin/sdl-config --version`
MK_EXEC_FOUND=Yes
MK_EXEC_PATH="${prefix_sdl}/bin/sdl-config"
fi
else
bb_save_IFS=$IFS
IFS=$PATH_SEPARATOR
for path in $PATH; do
if [ -e "${path}/sdl-config" ]; then
SDL_VERSION=`${path}/sdl-config --version`
MK_EXEC_FOUND=Yes
MK_EXEC_PATH="${path}/sdl-config"
break
elif [ -e "${path}/sdl-config.exe" ]; then
SDL_VERSION=`${path}/sdl-config.exe --version`
MK_EXEC_FOUND=Yes
MK_EXEC_PATH="${path}/sdl-config.exe"
break
fi
done
IFS=$bb_save_IFS
fi
SDL_CFLAGS=
if [ "${prefix_sdl}" != "" ]; then
if [ -e "${prefix_sdl}/bin/sdl-config" ]; then
SDL_CFLAGS=`${prefix_sdl}/bin/sdl-config --cflags`
MK_EXEC_FOUND=Yes
MK_EXEC_PATH="${prefix_sdl}/bin/sdl-config"
fi
else
bb_save_IFS=$IFS
IFS=$PATH_SEPARATOR
for path in $PATH; do
if [ -e "${path}/sdl-config" ]; then
SDL_CFLAGS=`${path}/sdl-config --cflags`
MK_EXEC_FOUND=Yes
MK_EXEC_PATH="${path}/sdl-config"
break
elif [ -e "${path}/sdl-config.exe" ]; then
SDL_CFLAGS=`${path}/sdl-config.exe --cflags`
MK_EXEC_FOUND=Yes
MK_EXEC_PATH="${path}/sdl-config.exe"
break
fi
done
IFS=$bb_save_IFS
fi
SDL_LIBS=
if [ "${prefix_sdl}" != "" ]; then
if [ -e "${prefix_sdl}/bin/sdl-config" ]; then
SDL_LIBS=`${prefix_sdl}/bin/sdl-config --libs`
MK_EXEC_FOUND=Yes
MK_EXEC_PATH="${prefix_sdl}/bin/sdl-config"
fi
else
bb_save_IFS=$IFS
IFS=$PATH_SEPARATOR
for path in $PATH; do
if [ -e "${path}/sdl-config" ]; then
SDL_LIBS=`${path}/sdl-config --libs`
MK_EXEC_FOUND=Yes
MK_EXEC_PATH="${path}/sdl-config"
break
elif [ -e "${path}/sdl-config.exe" ]; then
SDL_LIBS=`${path}/sdl-config.exe --libs`
MK_EXEC_FOUND=Yes
MK_EXEC_PATH="${path}/sdl-config.exe"
break
fi
done
IFS=$bb_save_IFS
fi
else
case "${host}" in
*-*-darwin*)
SDL_VERSION=
bb_save_IFS=$IFS
IFS=$PATH_SEPARATOR
for path in $PATH; do
if [ -e "${path}/sdl-config" ]; then
SDL_VERSION=`${path}/sdl-config --version`
MK_EXEC_FOUND=Yes
break
elif [ -e "${path}/sdl-config.exe" ]; then
SDL_VERSION=`${path}/sdl-config.exe --version`
MK_EXEC_FOUND=Yes
break
fi
done
IFS=$bb_save_IFS
if [ "${SDL_VERSION}" != "" ]; then
SDL_PREFIX=
bb_save_IFS=$IFS
IFS=$PATH_SEPARATOR
for path in $PATH; do
if [ -e "${path}/sdl-config" ]; then
SDL_PREFIX=`${path}/sdl-config --prefix`
MK_EXEC_FOUND=Yes
break
elif [ -e "${path}/sdl-config.exe" ]; then
SDL_PREFIX=`${path}/sdl-config.exe --prefix`
MK_EXEC_FOUND=Yes
break
fi
done
IFS=$bb_save_IFS
SDL_CFLAGS=
bb_save_IFS=$IFS
IFS=$PATH_SEPARATOR
for path in $PATH; do
if [ -e "${path}/sdl-config" ]; then
SDL_CFLAGS=`${path}/sdl-config --cflags`
MK_EXEC_FOUND=Yes
break
elif [ -e "${path}/sdl-config.exe" ]; then
SDL_CFLAGS=`${path}/sdl-config.exe --cflags`
MK_EXEC_FOUND=Yes
break
fi
done
IFS=$bb_save_IFS
SDL_LIBS=
bb_save_IFS=$IFS
IFS=$PATH_SEPARATOR
for path in $PATH; do
if [ -e "${path}/sdl-config" ]; then
SDL_LIBS=`${path}/sdl-config --libs`
MK_EXEC_FOUND=Yes
break
elif [ -e "${path}/sdl-config.exe" ]; then
SDL_LIBS=`${path}/sdl-config.exe --libs`
MK_EXEC_FOUND=Yes
break
fi
done
IFS=$bb_save_IFS
else
$ECHO_N 'framework...'
$ECHO_N '# framework...' >>config.log
SDL_VERSION="1.2.15"
SDL_CFLAGS="-D_USE_SDL_FRAMEWORK"
SDL_LIBS="-framework SDL"
fi
;;
*-*-freebsd*)
SDL_VERSION=
bb_save_IFS=$IFS
IFS=$PATH_SEPARATOR
for path in $PATH; do
if [ -e "${path}/sdl11-config" ]; then
SDL_VERSION=`${path}/sdl11-config --version`
MK_EXEC_FOUND=Yes
break
elif [ -e "${path}/sdl11-config.exe" ]; then
SDL_VERSION=`${path}/sdl11-config.exe --version`
MK_EXEC_FOUND=Yes
break
fi
done
IFS=$bb_save_IFS
if [ "${SDL_VERSION}" != "" ]; then
SDL_PREFIX=
bb_save_IFS=$IFS
IFS=$PATH_SEPARATOR
for path in $PATH; do
if [ -e "${path}/sdl11-config" ]; then
SDL_PREFIX=`${path}/sdl11-config --prefix`
MK_EXEC_FOUND=Yes
break
elif [ -e "${path}/sdl11-config.exe" ]; then
SDL_PREFIX=`${path}/sdl11-config.exe --prefix`
MK_EXEC_FOUND=Yes
break
fi
done
IFS=$bb_save_IFS
SDL_CFLAGS=
bb_save_IFS=$IFS
IFS=$PATH_SEPARATOR
for path in $PATH; do
if [ -e "${path}/sdl11-config" ]; then
SDL_CFLAGS=`${path}/sdl11-config --cflags`
MK_EXEC_FOUND=Yes
break
elif [ -e "${path}/sdl11-config.exe" ]; then
SDL_CFLAGS=`${path}/sdl11-config.exe --cflags`
MK_EXEC_FOUND=Yes
break
fi
done
IFS=$bb_save_IFS
SDL_LIBS=
bb_save_IFS=$IFS
IFS=$PATH_SEPARATOR
for path in $PATH; do
if [ -e "${path}/sdl11-config" ]; then
SDL_LIBS=`${path}/sdl11-config --libs`
MK_EXEC_FOUND=Yes
break
elif [ -e "${path}/sdl11-config.exe" ]; then
SDL_LIBS=`${path}/sdl11-config.exe --libs`
MK_EXEC_FOUND=Yes
break
fi
done
IFS=$bb_save_IFS
else
SDL_PREFIX=
bb_save_IFS=$IFS
IFS=$PATH_SEPARATOR
for path in $PATH; do
if [ -e "${path}/sdl-config" ]; then
SDL_PREFIX=`${path}/sdl-config --prefix`
MK_EXEC_FOUND=Yes
break
elif [ -e "${path}/sdl-config.exe" ]; then
SDL_PREFIX=`${path}/sdl-config.exe --prefix`
MK_EXEC_FOUND=Yes
break
fi
done
IFS=$bb_save_IFS
SDL_VERSION=
bb_save_IFS=$IFS
IFS=$PATH_SEPARATOR
for path in $PATH; do
if [ -e "${path}/sdl-config" ]; then
SDL_VERSION=`${path}/sdl-config --version`
MK_EXEC_FOUND=Yes
break
elif [ -e "${path}/sdl-config.exe" ]; then
SDL_VERSION=`${path}/sdl-config.exe --version`
MK_EXEC_FOUND=Yes
break
fi
done
IFS=$bb_save_IFS
SDL_CFLAGS=
bb_save_IFS=$IFS
IFS=$PATH_SEPARATOR
for path in $PATH; do
if [ -e "${path}/sdl-config" ]; then
SDL_CFLAGS=`${path}/sdl-config --cflags`
MK_EXEC_FOUND=Yes
break
elif [ -e "${path}/sdl-config.exe" ]; then
SDL_CFLAGS=`${path}/sdl-config.exe --cflags`
MK_EXEC_FOUND=Yes
break
fi
done
IFS=$bb_save_IFS
SDL_LIBS=
bb_save_IFS=$IFS
IFS=$PATH_SEPARATOR
for path in $PATH; do
if [ -e "${path}/sdl-config" ]; then
SDL_LIBS=`${path}/sdl-config --libs`
MK_EXEC_FOUND=Yes
break
elif [ -e "${path}/sdl-config.exe" ]; then
SDL_LIBS=`${path}/sdl-config.exe --libs`
MK_EXEC_FOUND=Yes
break
fi
done
IFS=$bb_save_IFS
fi
;;
*)
SDL_PREFIX=
bb_save_IFS=$IFS
IFS=$PATH_SEPARATOR
for path in $PATH; do
if [ -e "${path}/sdl-config" ]; then
SDL_PREFIX=`${path}/sdl-config --prefix`
MK_EXEC_FOUND=Yes
break
elif [ -e "${path}/sdl-config.exe" ]; then
SDL_PREFIX=`${path}/sdl-config.exe --prefix`
MK_EXEC_FOUND=Yes
break
fi
done
IFS=$bb_save_IFS
SDL_VERSION=
bb_save_IFS=$IFS
IFS=$PATH_SEPARATOR
for path in $PATH; do
if [ -e "${path}/sdl-config" ]; then
SDL_VERSION=`${path}/sdl-config --version`
MK_EXEC_FOUND=Yes
break
elif [ -e "${path}/sdl-config.exe" ]; then
SDL_VERSION=`${path}/sdl-config.exe --version`
MK_EXEC_FOUND=Yes
break
fi
done
IFS=$bb_save_IFS
SDL_CFLAGS=
bb_save_IFS=$IFS
IFS=$PATH_SEPARATOR
for path in $PATH; do
if [ -e "${path}/sdl-config" ]; then
SDL_CFLAGS=`${path}/sdl-config --cflags`
MK_EXEC_FOUND=Yes
break
elif [ -e "${path}/sdl-config.exe" ]; then
SDL_CFLAGS=`${path}/sdl-config.exe --cflags`
MK_EXEC_FOUND=Yes
break
fi
done
IFS=$bb_save_IFS
SDL_LIBS=
bb_save_IFS=$IFS
IFS=$PATH_SEPARATOR
for path in $PATH; do
if [ -e "${path}/sdl-config" ]; then
SDL_LIBS=`${path}/sdl-config --libs`
MK_EXEC_FOUND=Yes
break
elif [ -e "${path}/sdl-config.exe" ]; then
SDL_LIBS=`${path}/sdl-config.exe --libs`
MK_EXEC_FOUND=Yes
break
fi
done
IFS=$bb_save_IFS
;;
esac
fi
if [ "${SDL_VERSION}" != "" ]; then
if [ "${prefix_sdl}" != "" ]; then
echo "yes ($SDL_VERSION in ${prefix_sdl})"
echo "# yes ($SDL_VERSION in ${prefix_sdl})" >>config.log
else
echo "yes ($SDL_VERSION)"
echo "# yes ($SDL_VERSION)" >>config.log
fi
MK_VERSION_MAJOR=`echo "$SDL_VERSION" |sed 's/\([0-9]*\).\([0-9]*\).\([0-9]*\).*/\1/'`;
MK_VERSION_MINOR=`echo "$SDL_VERSION" |sed 's/\([0-9]*\).\([0-9]*\).\([0-9]*\).*/\2/'`;
MK_VERSION_MICRO=`echo "$SDL_VERSION" |sed 's/\([0-9]*\).\([0-9]*\).\([0-9]*\).*/\3/'`;
MK_VERSION_OK=no
if [ $MK_VERSION_MAJOR -gt 1 ]; then
MK_VERSION_OK=yes
elif [ $MK_VERSION_MAJOR -eq 1 ]; then
if [ "$MK_VERSION_MINOR" = '' ]; then
MK_VERSION_OK=yes
else
if [ $MK_VERSION_MINOR -gt 2 ]; then
MK_VERSION_OK=yes
elif [ $MK_VERSION_MINOR -eq 2 ]; then
if [ "$MK_VERSION_MICRO" = '' ]; then
MK_VERSION_OK=yes
else
if [ $MK_VERSION_MICRO -ge 0 ]; then
MK_VERSION_OK=yes
fi
fi
fi
fi
fi
if [ "${MK_VERSION_OK}" = "no" ]; then
echo '*'
echo '# *' >>config.log
echo "* Minimum required version is 1.2.0 (found $SDL_VERSION)"
echo "# * Minimum required version is 1.2.0 (found $SDL_VERSION)" >>config.log
echo '*'
echo '# *' >>config.log
fi
else
if [ "${prefix_sdl}" != "" ]; then
echo "no (not in ${prefix_sdl})"
echo "# no (not in ${prefix_sdl})" >>config.log
else
echo 'no'
echo '# no' >>config.log
fi
MK_VERSION_OK="no"
fi
if [ "${MK_VERSION_OK}" = "yes" ]; then
$ECHO_N 'checking whether SDL works...'
$ECHO_N '# checking whether SDL works...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#ifdef _USE_SDL_FRAMEWORK
# include <SDL/SDL.h>
# ifdef main
#  undef main
# endif
#else
# include <SDL.h>
#endif
int main(int argc, char *argv[]) {
	SDL_Surface *su;

	if (SDL_Init(SDL_INIT_TIMER|SDL_INIT_NOPARACHUTE) != 0) {
		return (1);
	}
	su = SDL_CreateRGBSurface(0, 16, 16, 32, 0, 0, 0, 0);
	SDL_FreeSurface(su);
	SDL_Quit();
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_SDL' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${SDL_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${SDL_LIBS} 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${SDL_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${SDL_LIBS} 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_SDL=yes
bb_o=$bb_incdir/have_sdl.h
echo '#ifndef HAVE_SDL' >$bb_o
echo "#define HAVE_SDL \"$HAVE_SDL\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_SDL\"] = \"$HAVE_SDL\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_SDL=no
echo '#undef HAVE_SDL' >$bb_incdir/have_sdl.h
echo 'hdefs["HAVE_SDL"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_SDL}" = "yes" ]; then
case "${host}" in
*-*-cygwin* | *-*-mingw32*)
if [ -e "${SDL_PREFIX}/include/SDL" ]; then
SDL_CFLAGS="-I${SDL_PREFIX}/include/SDL -D_GNU_SOURCE=1"
fi
if [ -e "${SDL_PREFIX}/lib/libSDL.dll.a" ]; then
SDL_LIBS="-L${SDL_PREFIX}/lib -lSDL.dll"
fi
;;
esac
bb_save_IFS=$IFS
IFS=" "
SDL_LIBS_FIXED=""
for sdl_lib in $SDL_LIBS; do
case "${sdl_lib}" in
-Wl*)
;;
-pthread)
SDL_LIBS_FIXED="$SDL_LIBS_FIXED -lpthread"
;;
*)
SDL_LIBS_FIXED="$SDL_LIBS_FIXED ${sdl_lib}"
;;
esac
done
IFS=$bb_save_IFS
SDL_LIBS="${SDL_LIBS_FIXED}"
bb_o=$bb_incdir/sdl_cflags.h
echo '#ifndef SDL_CFLAGS' >$bb_o
echo "#define SDL_CFLAGS \"$SDL_CFLAGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"SDL_CFLAGS\"] = \"$SDL_CFLAGS\"" >>configure.lua
bb_o=$bb_incdir/sdl_libs.h
echo '#ifndef SDL_LIBS' >$bb_o
echo "#define SDL_LIBS \"$SDL_LIBS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"SDL_LIBS\"] = \"$SDL_LIBS\"" >>configure.lua
else
$ECHO_N 'checking whether SDL works (with X11 libs)...'
$ECHO_N '# checking whether SDL works (with X11 libs)...' >>config.log
SDL_LIBS="${SDL_LIBS} -L/usr/X11R6/lib -lX11 -lXext -lXrandr -lXrender"
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#ifdef _USE_SDL_FRAMEWORK
# include <SDL/SDL.h>
# ifdef main
#  undef main
# endif
#else
# include <SDL.h>
#endif
int main(int argc, char *argv[]) {
	SDL_Surface *su;

	if (SDL_Init(SDL_INIT_TIMER|SDL_INIT_NOPARACHUTE) != 0) {
		return (1);
	}
	su = SDL_CreateRGBSurface(0, 16, 16, 32, 0, 0, 0, 0);
	SDL_FreeSurface(su);
	SDL_Quit();
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_SDL' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${SDL_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${SDL_LIBS} 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${SDL_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${SDL_LIBS} 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_SDL=yes
bb_o=$bb_incdir/have_sdl.h
echo '#ifndef HAVE_SDL' >$bb_o
echo "#define HAVE_SDL \"$HAVE_SDL\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_SDL\"] = \"$HAVE_SDL\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_SDL=no
echo '#undef HAVE_SDL' >$bb_incdir/have_sdl.h
echo 'hdefs["HAVE_SDL"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_SDL}" = "yes" ]; then
bb_o=$bb_incdir/sdl_cflags.h
echo '#ifndef SDL_CFLAGS' >$bb_o
echo "#define SDL_CFLAGS \"$SDL_CFLAGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"SDL_CFLAGS\"] = \"$SDL_CFLAGS\"" >>configure.lua
bb_o=$bb_incdir/sdl_libs.h
echo '#ifndef SDL_LIBS' >$bb_o
echo "#define SDL_LIBS \"$SDL_LIBS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"SDL_LIBS\"] = \"$SDL_LIBS\"" >>configure.lua
else
echo '#undef SDL_CFLAGS' >$bb_incdir/sdl_cflags.h
echo 'hdefs["SDL_CFLAGS"] = nil' >>configure.lua
SDL_CFLAGS=""
echo '#undef SDL_LIBS' >$bb_incdir/sdl_libs.h
echo 'hdefs["SDL_LIBS"] = nil' >>configure.lua
SDL_LIBS=""
fi
fi
else
HAVE_SDL="no"
SDL_CFLAGS=""
SDL_LIBS=""
SDL_PC=""
echo '#undef HAVE_SDL' >$bb_incdir/have_sdl.h
echo 'hdefs["HAVE_SDL"] = nil' >>configure.lua
echo '#undef SDL_CFLAGS' >$bb_incdir/sdl_cflags.h
echo 'hdefs["SDL_CFLAGS"] = nil' >>configure.lua
echo '#undef SDL_LIBS' >$bb_incdir/sdl_libs.h
echo 'hdefs["SDL_LIBS"] = nil' >>configure.lua
fi
if [ "${HAVE_SDL}" = "yes" ]; then
SDL_PC="sdl"
else
SDL_PC=""
fi
# END sdl
		if [ "${HAVE_SDL}" != 'yes' ]
 then
			if [ "${with_sdl}" = 'yes' ]
 then
				echo "*"
				echo "* --with-sdl was requested, but the SDL "
				echo "* library was not found."
				echo "*"
				exit 1
			fi
echo 'not enabling SDL 1.2'
echo '# not enabling SDL 1.2' >>config.log
HAVE_SDL="no"
SDL_CFLAGS=""
SDL_LIBS=""
SDL_PC=""
echo '#undef HAVE_SDL' >$bb_incdir/have_sdl.h
echo 'hdefs["HAVE_SDL"] = nil' >>configure.lua
echo '#undef SDL_CFLAGS' >$bb_incdir/sdl_cflags.h
echo 'hdefs["SDL_CFLAGS"] = nil' >>configure.lua
echo '#undef SDL_LIBS' >$bb_incdir/sdl_libs.h
echo 'hdefs["SDL_LIBS"] = nil' >>configure.lua
		fi
	else
echo 'not enabling SDL 1.2'
echo '# not enabling SDL 1.2' >>config.log
HAVE_SDL="no"
SDL_CFLAGS=""
SDL_LIBS=""
SDL_PC=""
echo '#undef HAVE_SDL' >$bb_incdir/have_sdl.h
echo 'hdefs["HAVE_SDL"] = nil' >>configure.lua
echo '#undef SDL_CFLAGS' >$bb_incdir/sdl_cflags.h
echo 'hdefs["SDL_CFLAGS"] = nil' >>configure.lua
echo '#undef SDL_LIBS' >$bb_incdir/sdl_libs.h
echo 'hdefs["SDL_LIBS"] = nil' >>configure.lua
	fi
	if [ "${with_gl}" != 'no' ]
 then
$ECHO_N 'checking for OpenGL...'
$ECHO_N '# checking for OpenGL...' >>config.log
# BEGIN opengl(0 ${prefix_gl})
GL_CFLAGS=""
GL_LIBS=""
GL_FOUND=""
if [ "${prefix_gl}" != "" ]; then
if [ -e "${prefix_gl}/include" ]; then
GL_CFLAGS="-I${prefix_gl}/include"
GL_LIBS="${GL_LIBS} -L${prefix_gl}/lib"
GL_FOUND=yes
fi
else
case "${host}" in
*-*-darwin*)
$ECHO_N 'framework...'
$ECHO_N '# framework...' >>config.log
OPENGL_CFLAGS="-D_USE_OPENGL_FRAMEWORK"
OPENGL_LIBS="-framework OpenGL"
GL_FOUND=yes
;;
*)
if [ -e "/usr/include/X11/GL" ]; then
GL_CFLAGS="-I/usr/include/X11"
GL_FOUND=yes
fi
if [ -e "/usr/include/X11R6/GL" ]; then
GL_CFLAGS="-I/usr/include/X11R6"
GL_FOUND=yes
fi
if [ -e "/usr/include/X11R7/GL" ]; then
GL_CFLAGS="-I/usr/include/X11R7"
GL_FOUND=yes
fi
if [ -e "/usr/local/X11/include/GL" ]; then
GL_CFLAGS="-I/usr/local/X11/include"
GL_FOUND=yes
fi
if [ -e "/usr/local/X11R6/include/GL" ]; then
GL_CFLAGS="-I/usr/local/X11R6/include"
GL_FOUND=yes
fi
if [ -e "/usr/local/X11R7/include/GL" ]; then
GL_CFLAGS="-I/usr/local/X11R7/include"
GL_FOUND=yes
fi
if [ -e "/usr/local/include/X11/GL" ]; then
GL_CFLAGS="-I/usr/local/include/X11"
GL_FOUND=yes
fi
if [ -e "/usr/local/include/X11R6/GL" ]; then
GL_CFLAGS="-I/usr/local/include/X11R6"
GL_FOUND=yes
fi
if [ -e "/usr/local/include/X11R7/GL" ]; then
GL_CFLAGS="-I/usr/local/include/X11R7"
GL_FOUND=yes
fi
if [ -e "/usr/X11/include/GL" ]; then
GL_CFLAGS="-I/usr/X11/include"
GL_FOUND=yes
fi
if [ -e "/usr/X11R6/include/GL" ]; then
GL_CFLAGS="-I/usr/X11R6/include"
GL_FOUND=yes
fi
if [ -e "/usr/X11R7/include/GL" ]; then
GL_CFLAGS="-I/usr/X11R7/include"
GL_FOUND=yes
fi
if [ -e "/usr/local/include/GL" ]; then
GL_CFLAGS="-I/usr/local/include"
GL_FOUND=yes
fi
if [ -e "/usr/local/X11/lib" ]; then
GL_LIBS="${GL_LIBS} -L/usr/local/X11/lib"
GL_FOUND=yes
fi
if [ -e "/usr/local/X11R6/lib" ]; then
GL_LIBS="${GL_LIBS} -L/usr/local/X11R6/lib"
GL_FOUND=yes
fi
if [ -e "/usr/local/X11R7/lib" ]; then
GL_LIBS="${GL_LIBS} -L/usr/local/X11R7/lib"
GL_FOUND=yes
fi
if [ -e "/usr/X11/lib" ]; then
GL_LIBS="${GL_LIBS} -L/usr/X11/lib"
GL_FOUND=yes
fi
if [ -e "/usr/X11R6/lib" ]; then
GL_LIBS="${GL_LIBS} -L/usr/X11R6/lib"
GL_FOUND=yes
fi
if [ -e "/usr/X11R7/lib" ]; then
GL_LIBS="${GL_LIBS} -L/usr/X11R7/lib"
GL_FOUND=yes
fi
if [ -e "/usr/local/lib" ]; then
GL_LIBS="${GL_LIBS} -L/usr/local/lib"
GL_FOUND=yes
fi
;;
esac
fi
if [ "${GL_FOUND}" = "yes" ]; then
echo 'yes'
echo '# yes' >>config.log
case "${host}" in
*-*-darwin*)
;;
*-*-cygwin* | *-*-mingw32*)
$ECHO_N 'checking whether -lopengl32 works...'
$ECHO_N '# checking whether -lopengl32 works...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#ifdef _USE_OPENGL_FRAMEWORK
# include <OpenGL/gl.h>
#else
# include <GL/gl.h>
#endif
int main(int argc, char *argv[]) {
	glFlush();
	glLoadIdentity();
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_LIBOPENGL32' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${OPENGL_CFLAGS} -o $testdir/conftest$$ conftest$$.c -lopengl32 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${OPENGL_CFLAGS} -o $testdir/conftest$$ conftest$$.c -lopengl32 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_LIBOPENGL32=yes
bb_o=$bb_incdir/have_libopengl32.h
echo '#ifndef HAVE_LIBOPENGL32' >$bb_o
echo "#define HAVE_LIBOPENGL32 \"$HAVE_LIBOPENGL32\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_LIBOPENGL32\"] = \"$HAVE_LIBOPENGL32\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_LIBOPENGL32=no
echo '#undef HAVE_LIBOPENGL32' >$bb_incdir/have_libopengl32.h
echo 'hdefs["HAVE_LIBOPENGL32"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_LIBOPENGL32}" = "yes" ]; then
OPENGL_LIBS="${GL_LIBS} -lopengl32"
else
OPENGL_LIBS="${GL_LIBS} -lGL"
fi
;;
*)
OPENGL_CFLAGS="${GL_CFLAGS}"
OPENGL_LIBS="${GL_LIBS} -lGL"
;;
esac
$ECHO_N 'checking whether OpenGL works...'
$ECHO_N '# checking whether OpenGL works...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#ifdef _USE_OPENGL_FRAMEWORK
# include <OpenGL/gl.h>
#else
# include <GL/gl.h>
#endif
int main(int argc, char *argv[]) {
	glFlush();
	glLoadIdentity();
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_OPENGL' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${OPENGL_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${OPENGL_LIBS} 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${OPENGL_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${OPENGL_LIBS} 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_OPENGL=yes
bb_o=$bb_incdir/have_opengl.h
echo '#ifndef HAVE_OPENGL' >$bb_o
echo "#define HAVE_OPENGL \"$HAVE_OPENGL\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_OPENGL\"] = \"$HAVE_OPENGL\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_OPENGL=no
echo '#undef HAVE_OPENGL' >$bb_incdir/have_opengl.h
echo 'hdefs["HAVE_OPENGL"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_OPENGL}" = "yes" ]; then
bb_o=$bb_incdir/opengl_cflags.h
echo '#ifndef OPENGL_CFLAGS' >$bb_o
echo "#define OPENGL_CFLAGS \"$OPENGL_CFLAGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"OPENGL_CFLAGS\"] = \"$OPENGL_CFLAGS\"" >>configure.lua
bb_o=$bb_incdir/opengl_libs.h
echo '#ifndef OPENGL_LIBS' >$bb_o
echo "#define OPENGL_LIBS \"$OPENGL_LIBS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"OPENGL_LIBS\"] = \"$OPENGL_LIBS\"" >>configure.lua
else
$ECHO_N 'checking whether -lGL requires -lm...'
$ECHO_N '# checking whether -lGL requires -lm...' >>config.log
OPENGL_LIBS="${OPENGL_LIBS} -lm"
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#ifdef _USE_OPENGL_FRAMEWORK
# include <OpenGL/gl.h>
#else
# include <GL/gl.h>
#endif
int main(int argc, char *argv[]) {
	glFlush();
	glLoadIdentity();
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_OPENGL' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${OPENGL_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${OPENGL_LIBS} 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${OPENGL_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${OPENGL_LIBS} 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_OPENGL=yes
bb_o=$bb_incdir/have_opengl.h
echo '#ifndef HAVE_OPENGL' >$bb_o
echo "#define HAVE_OPENGL \"$HAVE_OPENGL\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_OPENGL\"] = \"$HAVE_OPENGL\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_OPENGL=no
echo '#undef HAVE_OPENGL' >$bb_incdir/have_opengl.h
echo 'hdefs["HAVE_OPENGL"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_OPENGL}" = "yes" ]; then
bb_o=$bb_incdir/opengl_cflags.h
echo '#ifndef OPENGL_CFLAGS' >$bb_o
echo "#define OPENGL_CFLAGS \"$OPENGL_CFLAGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"OPENGL_CFLAGS\"] = \"$OPENGL_CFLAGS\"" >>configure.lua
bb_o=$bb_incdir/opengl_libs.h
echo '#ifndef OPENGL_LIBS' >$bb_o
echo "#define OPENGL_LIBS \"$OPENGL_LIBS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"OPENGL_LIBS\"] = \"$OPENGL_LIBS\"" >>configure.lua
else
echo '#undef OPENGL_CFLAGS' >$bb_incdir/opengl_cflags.h
echo 'hdefs["OPENGL_CFLAGS"] = nil' >>configure.lua
OPENGL_CFLAGS=""
echo '#undef OPENGL_LIBS' >$bb_incdir/opengl_libs.h
echo 'hdefs["OPENGL_LIBS"] = nil' >>configure.lua
OPENGL_LIBS=""
fi
fi
$ECHO_N 'checking whether OpenGL has glext...'
$ECHO_N '# checking whether OpenGL has glext...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#define GL_GLEXT_PROTOTYPES
#ifdef _USE_OPENGL_FRAMEWORK
# include <OpenGL/gl.h>
# include <OpenGL/glext.h>
#else
# include <GL/gl.h>
# include <GL/glext.h>
#endif

static void
DebugMessageCallback(GLenum source, GLenum type, GLuint id, GLenum severity,
    GLsizei length, const GLchar *message, const void *userParam)
{ }

int main(int argc, char *argv[]) {
	glEnable(GL_DEBUG_OUTPUT);
	glDebugMessageCallback(DebugMessageCallback, 0);
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_GLEXT' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${OPENGL_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${OPENGL_LIBS} 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${OPENGL_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${OPENGL_LIBS} 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_GLEXT=yes
bb_o=$bb_incdir/have_glext.h
echo '#ifndef HAVE_GLEXT' >$bb_o
echo "#define HAVE_GLEXT \"$HAVE_GLEXT\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_GLEXT\"] = \"$HAVE_GLEXT\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_GLEXT=no
echo '#undef HAVE_GLEXT' >$bb_incdir/have_glext.h
echo 'hdefs["HAVE_GLEXT"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
else
echo 'no'
echo '# no' >>config.log
HAVE_GLEXT="no"
echo '#undef HAVE_GLEXT' >$bb_incdir/have_glext.h
echo 'hdefs["HAVE_GLEXT"] = nil' >>configure.lua
fi
if [ "${HAVE_OPENGL}" = "yes" ]; then
OPENGL_PC="gl"
else
OPENGL_PC=""
fi
# END opengl
		if [ "${HAVE_OPENGL}" = 'yes' ]
 then
SDL_CFLAGS="$SDL_CFLAGS $OPENGL_CFLAGS"
		else
			if [ "${with_gl}" = 'yes' ]
 then
				echo "*"
				echo "* --with-gl was requested, but no OpenGL"
				echo "* library was found."
				echo "*"
				exit 1
			fi
echo 'not enabling OpenGL'
echo '# not enabling OpenGL' >>config.log
HAVE_OPENGL="no"
HAVE_GLEXT="no"
OPENGL_CFLAGS=""
OPENGL_LIBS=""
OPENGL_PC=""
echo '#undef HAVE_OPENGL' >$bb_incdir/have_opengl.h
echo 'hdefs["HAVE_OPENGL"] = nil' >>configure.lua
echo '#undef HAVE_GLEXT' >$bb_incdir/have_glext.h
echo 'hdefs["HAVE_GLEXT"] = nil' >>configure.lua
echo '#undef OPENGL_CFLAGS' >$bb_incdir/opengl_cflags.h
echo 'hdefs["OPENGL_CFLAGS"] = nil' >>configure.lua
echo '#undef OPENGL_LIBS' >$bb_incdir/opengl_libs.h
echo 'hdefs["OPENGL_LIBS"] = nil' >>configure.lua
		fi
	else
echo 'not enabling OpenGL'
echo '# not enabling OpenGL' >>config.log
HAVE_OPENGL="no"
HAVE_GLEXT="no"
OPENGL_CFLAGS=""
OPENGL_LIBS=""
OPENGL_PC=""
echo '#undef HAVE_OPENGL' >$bb_incdir/have_opengl.h
echo 'hdefs["HAVE_OPENGL"] = nil' >>configure.lua
echo '#undef HAVE_GLEXT' >$bb_incdir/have_glext.h
echo 'hdefs["HAVE_GLEXT"] = nil' >>configure.lua
echo '#undef OPENGL_CFLAGS' >$bb_incdir/opengl_cflags.h
echo 'hdefs["OPENGL_CFLAGS"] = nil' >>configure.lua
echo '#undef OPENGL_LIBS' >$bb_incdir/opengl_libs.h
echo 'hdefs["OPENGL_LIBS"] = nil' >>configure.lua
	fi
	
	if [ "${with_x}" != 'no' ]
 then
$ECHO_N 'checking for the X window system...'
$ECHO_N '# checking for the X window system...' >>config.log
# BEGIN x11(0 ${prefix_x})
if [ "${PKGCONFIG}" != '' -a "`${PKGCONFIG} --variable=prefix x11 2>/dev/null`" != '' ]; then
if [ "$pfx" != "" ]; then
MK_EXEC_PKGPREFIX=`$PKGCONFIG --variable=prefix x11 2>/dev/null`
if [ "$MK_EXEC_PKGPREFIX" != "$pfx" ]; then
echo "* "
echo "# * " >>config.log
echo "* ERROR: According to pkg-config, x11 is installed in prefix: "
echo "# * ERROR: According to pkg-config, x11 is installed in prefix: " >>config.log
echo "* $MK_EXEC_PKGPREFIX, but the prefix ${prefix_x} was given."
echo "# * $MK_EXEC_PKGPREFIX, but the prefix ${prefix_x} was given." >>config.log
echo "* "
echo "# * " >>config.log
echo "* Please indicate correct x11 prefix (or omit for autodetect)."
echo "# * Please indicate correct x11 prefix (or omit for autodetect)." >>config.log
echo "* "
echo "# * " >>config.log
echo "***"
echo "*** ERROR: Package prefix mismatch"
echo "*** Failed! See ./config.log for more details."
echo "***"
exit 1
fi
fi
X11_VERSION=`$PKGCONFIG x11 --modversion 2>/dev/null`
if [ "$pfx" != "" ]; then
MK_EXEC_PKGPREFIX=`$PKGCONFIG --variable=prefix x11 2>/dev/null`
if [ "$MK_EXEC_PKGPREFIX" != "$pfx" ]; then
echo "* "
echo "# * " >>config.log
echo "* ERROR: According to pkg-config, x11 is installed in prefix: "
echo "# * ERROR: According to pkg-config, x11 is installed in prefix: " >>config.log
echo "* $MK_EXEC_PKGPREFIX, but the prefix ${prefix_x} was given."
echo "# * $MK_EXEC_PKGPREFIX, but the prefix ${prefix_x} was given." >>config.log
echo "* "
echo "# * " >>config.log
echo "* Please indicate correct x11 prefix (or omit for autodetect)."
echo "# * Please indicate correct x11 prefix (or omit for autodetect)." >>config.log
echo "* "
echo "# * " >>config.log
echo "***"
echo "*** ERROR: Package prefix mismatch"
echo "*** Failed! See ./config.log for more details."
echo "***"
exit 1
fi
fi
X11_CFLAGS=`$PKGCONFIG x11 --cflags 2>/dev/null`
if [ "$pfx" != "" ]; then
MK_EXEC_PKGPREFIX=`$PKGCONFIG --variable=prefix x11 2>/dev/null`
if [ "$MK_EXEC_PKGPREFIX" != "$pfx" ]; then
echo "* "
echo "# * " >>config.log
echo "* ERROR: According to pkg-config, x11 is installed in prefix: "
echo "# * ERROR: According to pkg-config, x11 is installed in prefix: " >>config.log
echo "* $MK_EXEC_PKGPREFIX, but the prefix ${prefix_x} was given."
echo "# * $MK_EXEC_PKGPREFIX, but the prefix ${prefix_x} was given." >>config.log
echo "* "
echo "# * " >>config.log
echo "* Please indicate correct x11 prefix (or omit for autodetect)."
echo "# * Please indicate correct x11 prefix (or omit for autodetect)." >>config.log
echo "* "
echo "# * " >>config.log
echo "***"
echo "*** ERROR: Package prefix mismatch"
echo "*** Failed! See ./config.log for more details."
echo "***"
exit 1
fi
fi
X11_LIBS=`$PKGCONFIG x11 --libs 2>/dev/null`
else
X11_CFLAGS=""
X11_LIBS=""
if [ "${prefix_x}" != "" ]; then
if [ -e "${prefix_x}/include/X11" ]; then
X11_CFLAGS="-I${prefix_x}/include"
fi
if [ -e "${prefix_x}/lib" ]; then
X11_LIBS="-L${prefix_x}/lib -lX11"
fi
else
if [ "${with_x_libraries}" != "" ]; then
if [ -e "${with_x_includes}/X11" ]; then
X11_CFLAGS="-I${with_x_includes}/X11"
else
X11_CFLAGS="-I${with_x_includes}"
fi
X11_LIBS="-L${with_x_libraries} -lX11"
else
if [ -e "/usr/local/include/X11" ]; then
X11_CFLAGS="-I/usr/local/include"
break
fi
if [ -e "/usr/include/X11" ]; then
X11_CFLAGS="-I/usr/include"
break
fi
if [ -e "/usr/include/X11/X11" ]; then
X11_CFLAGS="-I/usr/include/X11"
break
fi
if [ -e "/usr/include/X11R7/X11" ]; then
X11_CFLAGS="-I/usr/include/X11R7"
break
fi
if [ -e "/usr/include/X11R6/X11" ]; then
X11_CFLAGS="-I/usr/include/X11R6"
break
fi
if [ -e "/usr/include/X11R5/X11" ]; then
X11_CFLAGS="-I/usr/include/X11R5"
break
fi
if [ -e "/usr/include/X11R4/X11" ]; then
X11_CFLAGS="-I/usr/include/X11R4"
break
fi
if [ -e "/usr/local/X11/include/X11" ]; then
X11_CFLAGS="-I/usr/local/X11/include"
break
fi
if [ -e "/usr/local/X11R7/include/X11" ]; then
X11_CFLAGS="-I/usr/local/X11R7/include"
break
fi
if [ -e "/usr/local/X11R6/include/X11" ]; then
X11_CFLAGS="-I/usr/local/X11R6/include"
break
fi
if [ -e "/usr/local/X11R5/include/X11" ]; then
X11_CFLAGS="-I/usr/local/X11R5/include"
break
fi
if [ -e "/usr/local/X11R4/include/X11" ]; then
X11_CFLAGS="-I/usr/local/X11R4/include"
break
fi
if [ -e "/usr/local/include/X11/X11" ]; then
X11_CFLAGS="-I/usr/local/include/X11"
break
fi
if [ -e "/usr/local/include/X11R7/X11" ]; then
X11_CFLAGS="-I/usr/local/include/X11R7"
break
fi
if [ -e "/usr/local/include/X11R6/X11" ]; then
X11_CFLAGS="-I/usr/local/include/X11R6"
break
fi
if [ -e "/usr/local/include/X11R5/X11" ]; then
X11_CFLAGS="-I/usr/local/include/X11R5"
break
fi
if [ -e "/usr/local/include/X11R4/X11" ]; then
X11_CFLAGS="-I/usr/local/include/X11R4"
break
fi
if [ -e "/usr/X11/include/X11" ]; then
X11_CFLAGS="-I/usr/X11/include"
break
fi
if [ -e "/usr/X11R7/include/X11" ]; then
X11_CFLAGS="-I/usr/X11R7/include"
break
fi
if [ -e "/usr/X11R6/include/X11" ]; then
X11_CFLAGS="-I/usr/X11R6/include"
break
fi
if [ -e "/usr/X11R5/include/X11" ]; then
X11_CFLAGS="-I/usr/X11R5/include"
break
fi
if [ -e "/usr/X11R4/include/X11" ]; then
X11_CFLAGS="-I/usr/X11R4/include"
break
fi
if [ -e "/opt/X11/include/X11" ]; then
X11_CFLAGS="-I/opt/X11/include"
break
fi
if [ -e "/usr/local/lib/libX11.so" ]; then
X11_LIBS="-L/usr/local/lib -lX11"
break
fi
if [ -e "/usr/local/lib/libX11.so.*" ]; then
X11_LIBS="-L/usr/local/lib -lX11"
break
fi
if [ -e "/usr/lib/libX11.so" ]; then
X11_LIBS="-L/usr/lib -lX11"
break
fi
if [ -e "/usr/lib/libX11.so.*" ]; then
X11_LIBS="-L/usr/lib -lX11"
break
fi
if [ -e "/usr/local/X11/lib/libX11.so" ]; then
X11_LIBS="-L/usr/local/X11/lib -lX11"
break
fi
if [ -e "/usr/local/X11/lib/libX11.so.*" ]; then
X11_LIBS="-L/usr/local/X11/lib -lX11"
break
fi
if [ -e "/usr/local/X11R7/lib/libX11.so" ]; then
X11_LIBS="-L/usr/local/X11R7/lib -lX11"
break
fi
if [ -e "/usr/local/X11R7/lib/libX11.so.*" ]; then
X11_LIBS="-L/usr/local/X11R7/lib -lX11"
break
fi
if [ -e "/usr/local/X11R6/lib/libX11.so" ]; then
X11_LIBS="-L/usr/local/X11R6/lib -lX11"
break
fi
if [ -e "/usr/local/X11R6/lib/libX11.so.*" ]; then
X11_LIBS="-L/usr/local/X11R6/lib -lX11"
break
fi
if [ -e "/usr/local/X11R5/lib/libX11.so" ]; then
X11_LIBS="-L/usr/local/X11R5/lib -lX11"
break
fi
if [ -e "/usr/local/X11R5/lib/libX11.so.*" ]; then
X11_LIBS="-L/usr/local/X11R5/lib -lX11"
break
fi
if [ -e "/usr/local/X11R4/lib/libX11.so" ]; then
X11_LIBS="-L/usr/local/X11R4/lib -lX11"
break
fi
if [ -e "/usr/local/X11R4/lib/libX11.so.*" ]; then
X11_LIBS="-L/usr/local/X11R4/lib -lX11"
break
fi
if [ -e "/usr/X11/lib/libX11.so" ]; then
X11_LIBS="-L/usr/X11/lib -lX11"
break
fi
if [ -e "/usr/X11/lib/libX11.so.*" ]; then
X11_LIBS="-L/usr/X11/lib -lX11"
break
fi
if [ -e "/usr/X11R7/lib/libX11.so" ]; then
X11_LIBS="-L/usr/X11R7/lib -lX11"
break
fi
if [ -e "/usr/X11R7/lib/libX11.so.*" ]; then
X11_LIBS="-L/usr/X11R7/lib -lX11"
break
fi
if [ -e "/usr/X11R6/lib/libX11.so" ]; then
X11_LIBS="-L/usr/X11R6/lib -lX11"
break
fi
if [ -e "/usr/X11R6/lib/libX11.so.*" ]; then
X11_LIBS="-L/usr/X11R6/lib -lX11"
break
fi
if [ -e "/usr/X11R5/lib/libX11.so" ]; then
X11_LIBS="-L/usr/X11R5/lib -lX11"
break
fi
if [ -e "/usr/X11R5/lib/libX11.so.*" ]; then
X11_LIBS="-L/usr/X11R5/lib -lX11"
break
fi
if [ -e "/usr/X11R4/lib/libX11.so" ]; then
X11_LIBS="-L/usr/X11R4/lib -lX11"
break
fi
if [ -e "/usr/X11R4/lib/libX11.so.*" ]; then
X11_LIBS="-L/usr/X11R4/lib -lX11"
break
fi
if [ -e "/opt/X11/lib/libX11.so" ]; then
X11_LIBS="-L/opt/X11/lib -lX11"
break
fi
if [ -e "/opt/X11/lib/libX11.so.*" ]; then
X11_LIBS="-L/opt/X11/lib -lX11"
break
fi
fi
fi
fi
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <X11/Xlib.h>
int main(int argc, char *argv[])
{
	Display *disp = XOpenDisplay(NULL);
	XCloseDisplay(disp);
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_X11' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${X11_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${X11_LIBS} 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${X11_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${X11_LIBS} 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_X11=yes
bb_o=$bb_incdir/have_x11.h
echo '#ifndef HAVE_X11' >$bb_o
echo "#define HAVE_X11 \"$HAVE_X11\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_X11\"] = \"$HAVE_X11\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_X11=no
echo '#undef HAVE_X11' >$bb_incdir/have_x11.h
echo 'hdefs["HAVE_X11"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_X11}" = "yes" ]; then
bb_o=$bb_incdir/x11_cflags.h
echo '#ifndef X11_CFLAGS' >$bb_o
echo "#define X11_CFLAGS \"$X11_CFLAGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"X11_CFLAGS\"] = \"$X11_CFLAGS\"" >>configure.lua
bb_o=$bb_incdir/x11_libs.h
echo '#ifndef X11_LIBS' >$bb_o
echo "#define X11_LIBS \"$X11_LIBS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"X11_LIBS\"] = \"$X11_LIBS\"" >>configure.lua
else
echo '#undef X11_CFLAGS' >$bb_incdir/x11_cflags.h
echo 'hdefs["X11_CFLAGS"] = nil' >>configure.lua
X11_CFLAGS=""
echo '#undef X11_LIBS' >$bb_incdir/x11_libs.h
echo 'hdefs["X11_LIBS"] = nil' >>configure.lua
X11_LIBS=""
fi
if [ "${HAVE_X11}" = "yes" ]; then
X11_PC="x11"
$ECHO_N 'checking for the XKB extension...'
$ECHO_N '# checking for the XKB extension...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <X11/Xlib.h>
#include <X11/XKBlib.h>
int main(int argc, char *argv[])
{
	Display *disp = XOpenDisplay(NULL);
	KeyCode kc = 0;
	KeySym ks = XkbKeycodeToKeysym(disp, kc, 0, 0);
	XCloseDisplay(disp);
	return (ks != NoSymbol);
}
EOT
echo >>config.log
echo '# C: HAVE_XKB' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${X11_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${X11_LIBS} -lX11 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${X11_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${X11_LIBS} -lX11 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_XKB=yes
bb_o=$bb_incdir/have_xkb.h
echo '#ifndef HAVE_XKB' >$bb_o
echo "#define HAVE_XKB \"$HAVE_XKB\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_XKB\"] = \"$HAVE_XKB\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_XKB=no
echo '#undef HAVE_XKB' >$bb_incdir/have_xkb.h
echo 'hdefs["HAVE_XKB"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_XKB}" = "yes" ]; then
HAVE_XF86MISC="no"
echo '#undef HAVE_XF86MISC' >$bb_incdir/have_xf86misc.h
echo 'hdefs["HAVE_XF86MISC"] = nil' >>configure.lua
else
$ECHO_N 'checking for the XF86MISC extension...'
$ECHO_N '# checking for the XF86MISC extension...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <X11/Xlib.h>
#include <X11/extensions/xf86misc.h>
int main(int argc, char *argv[])
{
	Display *disp = XOpenDisplay(NULL);
	int dummy, rv;
	rv = XF86MiscQueryExtension(disp, &dummy, &dummy);
	XCloseDisplay(disp);
	return (rv != 0);
}
EOT
echo >>config.log
echo '# C: HAVE_XF86MISC' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${X11_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${X11_LIBS} -lX11 -lXxf86misc 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${X11_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${X11_LIBS} -lX11 -lXxf86misc 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_XF86MISC=yes
bb_o=$bb_incdir/have_xf86misc.h
echo '#ifndef HAVE_XF86MISC' >$bb_o
echo "#define HAVE_XF86MISC \"$HAVE_XF86MISC\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_XF86MISC\"] = \"$HAVE_XF86MISC\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_XF86MISC=no
echo '#undef HAVE_XF86MISC' >$bb_incdir/have_xf86misc.h
echo 'hdefs["HAVE_XF86MISC"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_XF86MISC}" = "yes" ]; then
X11_LIBS="${X11_LIBS} -lXxf86misc"
bb_o=$bb_incdir/have_xf86misc.h
echo '#ifndef HAVE_XF86MISC' >$bb_o
echo "#define HAVE_XF86MISC \"$HAVE_XF86MISC\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_XF86MISC\"] = \"$HAVE_XF86MISC\"" >>configure.lua
bb_o=$bb_incdir/x11_libs.h
echo '#ifndef X11_LIBS' >$bb_o
echo "#define X11_LIBS \"$X11_LIBS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"X11_LIBS\"] = \"$X11_LIBS\"" >>configure.lua
else
echo '#undef HAVE_XF86MISC' >$bb_incdir/have_xf86misc.h
echo 'hdefs["HAVE_XF86MISC"] = nil' >>configure.lua
fi
fi
else
HAVE_X11="no"
HAVE_XKB="no"
HAVE_XF86MISC="no"
X11_CFLAGS=""
X11_LIBS=""
X11_PC=""
echo '#undef HAVE_X11' >$bb_incdir/have_x11.h
echo 'hdefs["HAVE_X11"] = nil' >>configure.lua
echo '#undef HAVE_XKB' >$bb_incdir/have_xkb.h
echo 'hdefs["HAVE_XKB"] = nil' >>configure.lua
echo '#undef HAVE_XF86MISC' >$bb_incdir/have_xf86misc.h
echo 'hdefs["HAVE_XF86MISC"] = nil' >>configure.lua
echo '#undef X11_CFLAGS' >$bb_incdir/x11_cflags.h
echo 'hdefs["X11_CFLAGS"] = nil' >>configure.lua
echo '#undef X11_LIBS' >$bb_incdir/x11_libs.h
echo 'hdefs["X11_LIBS"] = nil' >>configure.lua
fi
# END x11
		if [ "${HAVE_X11}" != 'yes' ]
 then
			if [ "${with_x}" = 'yes' ]
 then
				echo "*"
				echo "* --with-x was requested, but Xlib "
				echo "* was not found."
				echo "*"
				exit 1
			else
echo 'not enabling the X window system'
echo '# not enabling the X window system' >>config.log
HAVE_X11="no"
HAVE_XKB="no"
HAVE_XF86MISC="no"
X11_CFLAGS=""
X11_LIBS=""
X11_PC=""
echo '#undef HAVE_X11' >$bb_incdir/have_x11.h
echo 'hdefs["HAVE_X11"] = nil' >>configure.lua
echo '#undef HAVE_XKB' >$bb_incdir/have_xkb.h
echo 'hdefs["HAVE_XKB"] = nil' >>configure.lua
echo '#undef HAVE_XF86MISC' >$bb_incdir/have_xf86misc.h
echo 'hdefs["HAVE_XF86MISC"] = nil' >>configure.lua
echo '#undef X11_CFLAGS' >$bb_incdir/x11_cflags.h
echo 'hdefs["X11_CFLAGS"] = nil' >>configure.lua
echo '#undef X11_LIBS' >$bb_incdir/x11_libs.h
echo 'hdefs["X11_LIBS"] = nil' >>configure.lua
			fi
		fi
		if [ "${with_xinerama}" != 'no' ]
 then
$ECHO_N 'checking for the Xinerama extension...'
$ECHO_N '# checking for the Xinerama extension...' >>config.log
# BEGIN xinerama(0 ${prefix_xinerama})
if [ "${PKGCONFIG}" != '' -a "`${PKGCONFIG} --variable=prefix xinerama 2>/dev/null`" != '' ]; then
if [ "$pfx" != "" ]; then
MK_EXEC_PKGPREFIX=`$PKGCONFIG --variable=prefix xinerama 2>/dev/null`
if [ "$MK_EXEC_PKGPREFIX" != "$pfx" ]; then
echo "* "
echo "# * " >>config.log
echo "* ERROR: According to pkg-config, xinerama is installed in prefix: "
echo "# * ERROR: According to pkg-config, xinerama is installed in prefix: " >>config.log
echo "* $MK_EXEC_PKGPREFIX, but the prefix ${prefix_xinerama} was given."
echo "# * $MK_EXEC_PKGPREFIX, but the prefix ${prefix_xinerama} was given." >>config.log
echo "* "
echo "# * " >>config.log
echo "* Please indicate correct xinerama prefix (or omit for autodetect)."
echo "# * Please indicate correct xinerama prefix (or omit for autodetect)." >>config.log
echo "* "
echo "# * " >>config.log
echo "***"
echo "*** ERROR: Package prefix mismatch"
echo "*** Failed! See ./config.log for more details."
echo "***"
exit 1
fi
fi
XINERAMA_VERSION=`$PKGCONFIG xinerama --modversion 2>/dev/null`
if [ "$pfx" != "" ]; then
MK_EXEC_PKGPREFIX=`$PKGCONFIG --variable=prefix xinerama 2>/dev/null`
if [ "$MK_EXEC_PKGPREFIX" != "$pfx" ]; then
echo "* "
echo "# * " >>config.log
echo "* ERROR: According to pkg-config, xinerama is installed in prefix: "
echo "# * ERROR: According to pkg-config, xinerama is installed in prefix: " >>config.log
echo "* $MK_EXEC_PKGPREFIX, but the prefix ${prefix_xinerama} was given."
echo "# * $MK_EXEC_PKGPREFIX, but the prefix ${prefix_xinerama} was given." >>config.log
echo "* "
echo "# * " >>config.log
echo "* Please indicate correct xinerama prefix (or omit for autodetect)."
echo "# * Please indicate correct xinerama prefix (or omit for autodetect)." >>config.log
echo "* "
echo "# * " >>config.log
echo "***"
echo "*** ERROR: Package prefix mismatch"
echo "*** Failed! See ./config.log for more details."
echo "***"
exit 1
fi
fi
XINERAMA_CFLAGS=`$PKGCONFIG xinerama --cflags 2>/dev/null`
if [ "$pfx" != "" ]; then
MK_EXEC_PKGPREFIX=`$PKGCONFIG --variable=prefix xinerama 2>/dev/null`
if [ "$MK_EXEC_PKGPREFIX" != "$pfx" ]; then
echo "* "
echo "# * " >>config.log
echo "* ERROR: According to pkg-config, xinerama is installed in prefix: "
echo "# * ERROR: According to pkg-config, xinerama is installed in prefix: " >>config.log
echo "* $MK_EXEC_PKGPREFIX, but the prefix ${prefix_xinerama} was given."
echo "# * $MK_EXEC_PKGPREFIX, but the prefix ${prefix_xinerama} was given." >>config.log
echo "* "
echo "# * " >>config.log
echo "* Please indicate correct xinerama prefix (or omit for autodetect)."
echo "# * Please indicate correct xinerama prefix (or omit for autodetect)." >>config.log
echo "* "
echo "# * " >>config.log
echo "***"
echo "*** ERROR: Package prefix mismatch"
echo "*** Failed! See ./config.log for more details."
echo "***"
exit 1
fi
fi
XINERAMA_LIBS=`$PKGCONFIG xinerama --libs 2>/dev/null`
else
XINERAM_CFLAGS=""
XINERAMA_LIBS=""
if [ "${prefix_xinerama}" != "" ]; then
if [ -e "${prefix_xinerama}/include/X11" ]; then
XINERAMA_CFLAGS="-I${prefix_xinerama}/include"
fi
if [ -e "${prefix_xinerama}/lib" ]; then
XINERAMA_LIBS="-L${prefix_xinerama}/lib"
fi
else
if [ -e "/usr/include/X11/X11" ]; then
XINERAMA_CFLAGS="-I/usr/include/X11"
fi
if [ -e "/usr/include/X11R6/X11" ]; then
XINERAMA_CFLAGS="-I/usr/include/X11R6"
fi
if [ -e "/usr/local/X11/include/X11" ]; then
XINERAMA_CFLAGS="-I/usr/local/X11/include"
fi
if [ -e "/usr/local/X11R6/include/X11" ]; then
XINERAMA_CFLAGS="-I/usr/local/X11R6/include"
fi
if [ -e "/usr/local/include/X11/X11" ]; then
XINERAMA_CFLAGS="-I/usr/local/include/X11"
fi
if [ -e "/usr/local/include/X11R6/X11" ]; then
XINERAMA_CFLAGS="-I/usr/local/include/X11R6"
fi
if [ -e "/usr/X11/include/X11" ]; then
XINERAMA_CFLAGS="-I/usr/X11/include"
fi
if [ -e "/usr/X11R6/include/X11" ]; then
XINERAMA_CFLAGS="-I/usr/X11R6/include"
fi
if [ -e "/usr/local/X11/lib" ]; then
XINERAMA_LIBS="${XINERAMA_LIBS} -L/usr/local/X11/lib"
fi
if [ -e "/usr/local/X11R6/lib" ]; then
XINERAMA_LIBS="${XINERAMA_LIBS} -L/usr/local/X11R6/lib"
fi
if [ -e "/usr/X11/lib" ]; then
XINERAMA_LIBS="${XINERAMA_LIBS} -L/usr/X11/lib"
fi
if [ -e "/usr/X11R6/lib" ]; then
XINERAMA_LIBS="${XINERAMA_LIBS} -L/usr/X11R6/lib"
fi
fi
XINERAMA_LIBS="${XINERAMA_LIBS} -lXinerama"
fi
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <X11/Xlib.h>
#include <X11/extensions/Xinerama.h>

int main(int argc, char *argv[])
{
	Display *disp;
	int event_base = 0, error_base = 0;
	int rv = 1;

	disp = XOpenDisplay(NULL);
	if (XineramaQueryExtension(disp, &event_base, &error_base)) {
		rv = 0;
	}
	XCloseDisplay(disp);
	return (rv);
}
EOT
echo >>config.log
echo '# C: HAVE_XINERAMA' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${X11_CFLAGS} ${XINERAMA_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${X11_LIBS} ${XINERAMA_LIBS} 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${X11_CFLAGS} ${XINERAMA_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${X11_LIBS} ${XINERAMA_LIBS} 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_XINERAMA=yes
bb_o=$bb_incdir/have_xinerama.h
echo '#ifndef HAVE_XINERAMA' >$bb_o
echo "#define HAVE_XINERAMA \"$HAVE_XINERAMA\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_XINERAMA\"] = \"$HAVE_XINERAMA\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_XINERAMA=no
echo '#undef HAVE_XINERAMA' >$bb_incdir/have_xinerama.h
echo 'hdefs["HAVE_XINERAMA"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_XINERAMA}" = "yes" ]; then
bb_o=$bb_incdir/xinerama_cflags.h
echo '#ifndef XINERAMA_CFLAGS' >$bb_o
echo "#define XINERAMA_CFLAGS \"$XINERAMA_CFLAGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"XINERAMA_CFLAGS\"] = \"$XINERAMA_CFLAGS\"" >>configure.lua
bb_o=$bb_incdir/xinerama_libs.h
echo '#ifndef XINERAMA_LIBS' >$bb_o
echo "#define XINERAMA_LIBS \"$XINERAMA_LIBS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"XINERAMA_LIBS\"] = \"$XINERAMA_LIBS\"" >>configure.lua
else
echo '#undef XINERAMA_CFLAGS' >$bb_incdir/xinerama_cflags.h
echo 'hdefs["XINERAMA_CFLAGS"] = nil' >>configure.lua
XINERAMA_CFLAGS=""
echo '#undef XINERAMA_LIBS' >$bb_incdir/xinerama_libs.h
echo 'hdefs["XINERAMA_LIBS"] = nil' >>configure.lua
XINERAMA_LIBS=""
fi
if [ "${HAVE_XINERAMA}" = "yes" ]; then
XINERAMA_PC="xinerama"
else
XINERAMA_PC=""
fi
# END xinerama
			if [ "${HAVE_XINERAMA}" != 'yes' ]
 then
				if [ "${with_xinerama}" = 'yes' ]
 then
					echo "*"
					echo "* --with-xinerama was requested, but the "
					echo "* Xinerama extension was not found."
					echo "*"
					exit 1
				fi
echo 'not enabling the Xinerama extension'
echo '# not enabling the Xinerama extension' >>config.log
HAVE_XINERAMA="no"
XINERAMA_CFLAGS=""
XINERAMA_LIBS=""
XINERAMA_PC=""
echo '#undef HAVE_XINERAMA' >$bb_incdir/have_xinerama.h
echo 'hdefs["HAVE_XINERAMA"] = nil' >>configure.lua
echo '#undef XINERAMA_CFLAGS' >$bb_incdir/xinerama_cflags.h
echo 'hdefs["XINERAMA_CFLAGS"] = nil' >>configure.lua
echo '#undef XINERAMA_LIBS' >$bb_incdir/xinerama_libs.h
echo 'hdefs["XINERAMA_LIBS"] = nil' >>configure.lua
			fi
		else
echo 'not enabling the Xinerama extension'
echo '# not enabling the Xinerama extension' >>config.log
HAVE_XINERAMA="no"
XINERAMA_CFLAGS=""
XINERAMA_LIBS=""
XINERAMA_PC=""
echo '#undef HAVE_XINERAMA' >$bb_incdir/have_xinerama.h
echo 'hdefs["HAVE_XINERAMA"] = nil' >>configure.lua
echo '#undef XINERAMA_CFLAGS' >$bb_incdir/xinerama_cflags.h
echo 'hdefs["XINERAMA_CFLAGS"] = nil' >>configure.lua
echo '#undef XINERAMA_LIBS' >$bb_incdir/xinerama_libs.h
echo 'hdefs["XINERAMA_LIBS"] = nil' >>configure.lua
		fi
	else
echo 'not enabling the X window system'
echo '# not enabling the X window system' >>config.log
HAVE_X11="no"
HAVE_XKB="no"
HAVE_XF86MISC="no"
X11_CFLAGS=""
X11_LIBS=""
X11_PC=""
echo '#undef HAVE_X11' >$bb_incdir/have_x11.h
echo 'hdefs["HAVE_X11"] = nil' >>configure.lua
echo '#undef HAVE_XKB' >$bb_incdir/have_xkb.h
echo 'hdefs["HAVE_XKB"] = nil' >>configure.lua
echo '#undef HAVE_XF86MISC' >$bb_incdir/have_xf86misc.h
echo 'hdefs["HAVE_XF86MISC"] = nil' >>configure.lua
echo '#undef X11_CFLAGS' >$bb_incdir/x11_cflags.h
echo 'hdefs["X11_CFLAGS"] = nil' >>configure.lua
echo '#undef X11_LIBS' >$bb_incdir/x11_libs.h
echo 'hdefs["X11_LIBS"] = nil' >>configure.lua
echo 'not enabling the Xinerama extension'
echo '# not enabling the Xinerama extension' >>config.log
HAVE_XINERAMA="no"
XINERAMA_CFLAGS=""
XINERAMA_LIBS=""
XINERAMA_PC=""
echo '#undef HAVE_XINERAMA' >$bb_incdir/have_xinerama.h
echo 'hdefs["HAVE_XINERAMA"] = nil' >>configure.lua
echo '#undef XINERAMA_CFLAGS' >$bb_incdir/xinerama_cflags.h
echo 'hdefs["XINERAMA_CFLAGS"] = nil' >>configure.lua
echo '#undef XINERAMA_LIBS' >$bb_incdir/xinerama_libs.h
echo 'hdefs["XINERAMA_LIBS"] = nil' >>configure.lua
	fi
	
	if [ "${with_cocoa}" != 'no' ]
 then
$ECHO_N 'checking for the Cocoa framework...'
$ECHO_N '# checking for the Cocoa framework...' >>config.log
# BEGIN cocoa(0)
COCOA_CFLAGS="-DTARGET_API_MAC_CARBON -DTARGET_API_MAC_OSX -force_cpusubtype_ALL -fpascal-strings"
COCOA_LIBS="-lobjc -Wl,-framework,Cocoa -Wl,-framework,OpenGL -Wl,-framework,IOKit"
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.m
#import <Cocoa/Cocoa.h>

int main(int argc, char *argv[]) { return (0); }
EOT
echo >>config.log
echo '# ObjC: HAVE_COCOA' >>config.log
echo "cat << EOT >conftest$$.m" >>config.log
cat conftest$$.m>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${COCOA_CFLAGS} -x objective-c -o $testdir/conftest$$ conftest$$.m ${COCOA_LIBS} 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${COCOA_CFLAGS} -x objective-c -o $testdir/conftest$$ conftest$$.m ${COCOA_LIBS} 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_COCOA=yes
bb_o=$bb_incdir/have_cocoa.h
echo '#ifndef HAVE_COCOA' >$bb_o
echo "#define HAVE_COCOA \"$HAVE_COCOA\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_COCOA\"] = \"$HAVE_COCOA\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_COCOA=no
echo '#undef HAVE_COCOA' >$bb_incdir/have_cocoa.h
echo 'hdefs["HAVE_COCOA"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.m $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_COCOA}" = "yes" ]; then
bb_o=$bb_incdir/cocoa_cflags.h
echo '#ifndef COCOA_CFLAGS' >$bb_o
echo "#define COCOA_CFLAGS \"$COCOA_CFLAGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"COCOA_CFLAGS\"] = \"$COCOA_CFLAGS\"" >>configure.lua
bb_o=$bb_incdir/cocoa_libs.h
echo '#ifndef COCOA_LIBS' >$bb_o
echo "#define COCOA_LIBS \"$COCOA_LIBS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"COCOA_LIBS\"] = \"$COCOA_LIBS\"" >>configure.lua
else
echo '#undef COCOA_CFLAGS' >$bb_incdir/cocoa_cflags.h
echo 'hdefs["COCOA_CFLAGS"] = nil' >>configure.lua
COCOA_CFLAGS=""
echo '#undef COCOA_LIBS' >$bb_incdir/cocoa_libs.h
echo 'hdefs["COCOA_LIBS"] = nil' >>configure.lua
COCOA_LIBS=""
fi
# END cocoa
		if [ "${HAVE_COCOA}" != 'yes' ]
 then
			if [ "${with_cocoa}" = 'yes' ]
 then
				echo "*"
				echo "* --with-cocoa was requested, but the "
				echo "* Cocoa framework was not found."
				echo "*"
				exit 1
			fi
echo 'not enabling the Cocoa framework'
echo '# not enabling the Cocoa framework' >>config.log
HAVE_COCOA="no"
COCOA_CFLAGS=""
COCOA_LIBS=""
echo '#undef HAVE_COCOA' >$bb_incdir/have_cocoa.h
echo 'hdefs["HAVE_COCOA"] = nil' >>configure.lua
echo '#undef COCOA_CFLAGS' >$bb_incdir/cocoa_cflags.h
echo 'hdefs["COCOA_CFLAGS"] = nil' >>configure.lua
echo '#undef COCOA_LIBS' >$bb_incdir/cocoa_libs.h
echo 'hdefs["COCOA_LIBS"] = nil' >>configure.lua
		fi
	else
echo 'not enabling the Cocoa framework'
echo '# not enabling the Cocoa framework' >>config.log
HAVE_COCOA="no"
COCOA_CFLAGS=""
COCOA_LIBS=""
echo '#undef HAVE_COCOA' >$bb_incdir/have_cocoa.h
echo 'hdefs["HAVE_COCOA"] = nil' >>configure.lua
echo '#undef COCOA_CFLAGS' >$bb_incdir/cocoa_cflags.h
echo 'hdefs["COCOA_CFLAGS"] = nil' >>configure.lua
echo '#undef COCOA_LIBS' >$bb_incdir/cocoa_libs.h
echo 'hdefs["COCOA_LIBS"] = nil' >>configure.lua
	fi
	if [ "${HAVE_OPENGL}" = 'yes' ]
 then
		if [ "${with_glx}" != 'no' ]
 then
$ECHO_N 'checking for the GLX interface...'
$ECHO_N '# checking for the GLX interface...' >>config.log
# BEGIN glx(1.4 ${prefix_glx})
GLX_CFLAGS="${OPENGL_CFLAGS} ${X11_CFLAGS}"
GLX_LIBS="${OPENGL_LIBS} ${X11_LIBS}"
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <X11/Xlib.h>
#include <X11/Xutil.h>
#ifdef __APPLE__
#include <OpenGL/gl.h>
#include <OpenGL/glx.h>
#else
#include <GL/gl.h>
#include <GL/glx.h>
#endif
int main(int argc, char *argv[]) {
	Display *d;
	XVisualInfo *xvi;
	int glxAttrs[] = { GLX_RGBA, GLX_RED_SIZE,1, GLX_DEPTH_SIZE,1, None };
	GLXContext glxCtx;
	int err, ev, s;

	d = XOpenDisplay(NULL);
	(void)glXQueryExtension(d, &err, &ev);
	s = DefaultScreen(d);
	if ((xvi = glXChooseVisual(d, s, glxAttrs)) == NULL) { return (1); }
	if ((glxCtx = glXCreateContext(d, xvi, 0, GL_FALSE)) == NULL) { return (1); }
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_GLX' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${GLX_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${GLX_LIBS} 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${GLX_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${GLX_LIBS} 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_GLX=yes
bb_o=$bb_incdir/have_glx.h
echo '#ifndef HAVE_GLX' >$bb_o
echo "#define HAVE_GLX \"$HAVE_GLX\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_GLX\"] = \"$HAVE_GLX\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_GLX=no
echo '#undef HAVE_GLX' >$bb_incdir/have_glx.h
echo 'hdefs["HAVE_GLX"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_GLX}" = "yes" ]; then
bb_o=$bb_incdir/glx_cflags.h
echo '#ifndef GLX_CFLAGS' >$bb_o
echo "#define GLX_CFLAGS \"$GLX_CFLAGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"GLX_CFLAGS\"] = \"$GLX_CFLAGS\"" >>configure.lua
bb_o=$bb_incdir/glx_libs.h
echo '#ifndef GLX_LIBS' >$bb_o
echo "#define GLX_LIBS \"$GLX_LIBS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"GLX_LIBS\"] = \"$GLX_LIBS\"" >>configure.lua
else
echo '#undef GLX_CFLAGS' >$bb_incdir/glx_cflags.h
echo 'hdefs["GLX_CFLAGS"] = nil' >>configure.lua
GLX_CFLAGS=""
echo '#undef GLX_LIBS' >$bb_incdir/glx_libs.h
echo 'hdefs["GLX_LIBS"] = nil' >>configure.lua
GLX_LIBS=""
fi
# END glx
			if [ "${HAVE_GLX}" != 'yes' ]
 then
				if [ "${with_glx}" = 'yes' ]
 then
					echo "*"
					echo "* --with-glx was requested, but no"
					echo "* compatible GLX library was found."
					echo "*"
					exit 1
				fi
echo 'not enabling the GLX interface'
echo '# not enabling the GLX interface' >>config.log
HAVE_GLX="no"
GLX_CFLAGS=""
GLX_LIBS=""
echo '#undef HAVE_GLX' >$bb_incdir/have_glx.h
echo 'hdefs["HAVE_GLX"] = nil' >>configure.lua
echo '#undef GLX_CFLAGS' >$bb_incdir/glx_cflags.h
echo 'hdefs["GLX_CFLAGS"] = nil' >>configure.lua
echo '#undef GLX_LIBS' >$bb_incdir/glx_libs.h
echo 'hdefs["GLX_LIBS"] = nil' >>configure.lua
			fi
		else
echo 'not enabling the GLX interface'
echo '# not enabling the GLX interface' >>config.log
HAVE_GLX="no"
GLX_CFLAGS=""
GLX_LIBS=""
echo '#undef HAVE_GLX' >$bb_incdir/have_glx.h
echo 'hdefs["HAVE_GLX"] = nil' >>configure.lua
echo '#undef GLX_CFLAGS' >$bb_incdir/glx_cflags.h
echo 'hdefs["GLX_CFLAGS"] = nil' >>configure.lua
echo '#undef GLX_LIBS' >$bb_incdir/glx_libs.h
echo 'hdefs["GLX_LIBS"] = nil' >>configure.lua
		fi
		
		if [ "${with_wgl}" != 'no' ]
 then
$ECHO_N 'checking for the WGL interface...'
$ECHO_N '# checking for the WGL interface...' >>config.log
# BEGIN wgl(0)
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <windows.h>

int main(int argc, char *argv[]) {
	HWND hwnd;
	HDC hdc;
	HGLRC hglrc;

	hwnd = CreateWindowEx(0, "a", "a", WS_OVERLAPPEDWINDOW, CW_USEDEFAULT,
	    CW_USEDEFAULT, 0,0, NULL, NULL, GetModuleHandle(NULL), NULL);
	hdc = GetDC(hwnd);
	hglrc = wglCreateContext(hdc);
	SwapBuffers(hdc);
	wglDeleteContext(hglrc);
	ReleaseDC(hwnd, hdc);
	DestroyWindow(hwnd);
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_WGL' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${OPENGL_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${OPENGL_LIBS} -lgdi32 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${OPENGL_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${OPENGL_LIBS} -lgdi32 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_WGL=yes
bb_o=$bb_incdir/have_wgl.h
echo '#ifndef HAVE_WGL' >$bb_o
echo "#define HAVE_WGL \"$HAVE_WGL\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_WGL\"] = \"$HAVE_WGL\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_WGL=no
echo '#undef HAVE_WGL' >$bb_incdir/have_wgl.h
echo 'hdefs["HAVE_WGL"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_WGL}" = "yes" ]; then
OPENGL_LIBS="${OPENGL_LIBS} -lgdi32"
bb_o=$bb_incdir/opengl_libs.h
echo '#ifndef OPENGL_LIBS' >$bb_o
echo "#define OPENGL_LIBS \"$OPENGL_LIBS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"OPENGL_LIBS\"] = \"$OPENGL_LIBS\"" >>configure.lua
fi
# END wgl
			if [ "${HAVE_WGL}" != 'yes' ]
 then
				if [ "${with_wgl}" = 'yes' ]
 then
					echo "*"
					echo "* --with-wgl was requested, but the"
					echo "* WGL test has failed."
					echo "*"
					exit 1
				fi
echo 'not enabling the WGL interface'
echo '# not enabling the WGL interface' >>config.log
HAVE_WGL="no"
echo '#undef HAVE_WGL' >$bb_incdir/have_wgl.h
echo 'hdefs["HAVE_WGL"] = nil' >>configure.lua
			fi
		else
echo 'not enabling the WGL interface'
echo '# not enabling the WGL interface' >>config.log
HAVE_WGL="no"
echo '#undef HAVE_WGL' >$bb_incdir/have_wgl.h
echo 'hdefs["HAVE_WGL"] = nil' >>configure.lua
		fi
	else
echo 'not enabling the GLX interface'
echo '# not enabling the GLX interface' >>config.log
HAVE_GLX="no"
GLX_CFLAGS=""
GLX_LIBS=""
echo '#undef HAVE_GLX' >$bb_incdir/have_glx.h
echo 'hdefs["HAVE_GLX"] = nil' >>configure.lua
echo '#undef GLX_CFLAGS' >$bb_incdir/glx_cflags.h
echo 'hdefs["GLX_CFLAGS"] = nil' >>configure.lua
echo '#undef GLX_LIBS' >$bb_incdir/glx_libs.h
echo 'hdefs["GLX_LIBS"] = nil' >>configure.lua
echo 'not enabling the WGL interface'
echo '# not enabling the WGL interface' >>config.log
HAVE_WGL="no"
echo '#undef HAVE_WGL' >$bb_incdir/have_wgl.h
echo 'hdefs["HAVE_WGL"] = nil' >>configure.lua
	fi
	
	if [ "${with_freetype}" != 'no' ]
 then
$ECHO_N 'checking for FreeType...'
$ECHO_N '# checking for FreeType...' >>config.log
# BEGIN freetype(7.0.1 ${prefix_freetype})
if [ "${PKGCONFIG}" != '' -a "`${PKGCONFIG} --variable=prefix freetype2 2>/dev/null`" != '' ]; then
if [ "$pfx" != "" ]; then
MK_EXEC_PKGPREFIX=`$PKGCONFIG --variable=prefix freetype2 2>/dev/null`
if [ "$MK_EXEC_PKGPREFIX" != "$pfx" ]; then
echo "* "
echo "# * " >>config.log
echo "* ERROR: According to pkg-config, freetype2 is installed in prefix: "
echo "# * ERROR: According to pkg-config, freetype2 is installed in prefix: " >>config.log
echo "* $MK_EXEC_PKGPREFIX, but the prefix ${prefix_freetype} was given."
echo "# * $MK_EXEC_PKGPREFIX, but the prefix ${prefix_freetype} was given." >>config.log
echo "* "
echo "# * " >>config.log
echo "* Please indicate correct freetype2 prefix (or omit for autodetect)."
echo "# * Please indicate correct freetype2 prefix (or omit for autodetect)." >>config.log
echo "* "
echo "# * " >>config.log
echo "***"
echo "*** ERROR: Package prefix mismatch"
echo "*** Failed! See ./config.log for more details."
echo "***"
exit 1
fi
fi
FREETYPE_VERSION=`$PKGCONFIG freetype2 --modversion 2>/dev/null`
if [ "$pfx" != "" ]; then
MK_EXEC_PKGPREFIX=`$PKGCONFIG --variable=prefix freetype2 2>/dev/null`
if [ "$MK_EXEC_PKGPREFIX" != "$pfx" ]; then
echo "* "
echo "# * " >>config.log
echo "* ERROR: According to pkg-config, freetype2 is installed in prefix: "
echo "# * ERROR: According to pkg-config, freetype2 is installed in prefix: " >>config.log
echo "* $MK_EXEC_PKGPREFIX, but the prefix ${prefix_freetype} was given."
echo "# * $MK_EXEC_PKGPREFIX, but the prefix ${prefix_freetype} was given." >>config.log
echo "* "
echo "# * " >>config.log
echo "* Please indicate correct freetype2 prefix (or omit for autodetect)."
echo "# * Please indicate correct freetype2 prefix (or omit for autodetect)." >>config.log
echo "* "
echo "# * " >>config.log
echo "***"
echo "*** ERROR: Package prefix mismatch"
echo "*** Failed! See ./config.log for more details."
echo "***"
exit 1
fi
fi
FREETYPE_CFLAGS=`$PKGCONFIG freetype2 --cflags 2>/dev/null`
if [ "$pfx" != "" ]; then
MK_EXEC_PKGPREFIX=`$PKGCONFIG --variable=prefix freetype2 2>/dev/null`
if [ "$MK_EXEC_PKGPREFIX" != "$pfx" ]; then
echo "* "
echo "# * " >>config.log
echo "* ERROR: According to pkg-config, freetype2 is installed in prefix: "
echo "# * ERROR: According to pkg-config, freetype2 is installed in prefix: " >>config.log
echo "* $MK_EXEC_PKGPREFIX, but the prefix ${prefix_freetype} was given."
echo "# * $MK_EXEC_PKGPREFIX, but the prefix ${prefix_freetype} was given." >>config.log
echo "* "
echo "# * " >>config.log
echo "* Please indicate correct freetype2 prefix (or omit for autodetect)."
echo "# * Please indicate correct freetype2 prefix (or omit for autodetect)." >>config.log
echo "* "
echo "# * " >>config.log
echo "***"
echo "*** ERROR: Package prefix mismatch"
echo "*** Failed! See ./config.log for more details."
echo "***"
exit 1
fi
fi
FREETYPE_LIBS=`$PKGCONFIG freetype2 --libs 2>/dev/null`
else
FREETYPE_VERSION=
if [ "${prefix_freetype}" != "" ]; then
if [ -e "${prefix_freetype}/bin/freetype-config" ]; then
FREETYPE_VERSION=`${prefix_freetype}/bin/freetype-config --version`
MK_EXEC_FOUND=Yes
MK_EXEC_PATH="${prefix_freetype}/bin/freetype-config"
fi
else
bb_save_IFS=$IFS
IFS=$PATH_SEPARATOR
for path in $PATH; do
if [ -e "${path}/freetype-config" ]; then
FREETYPE_VERSION=`${path}/freetype-config --version`
MK_EXEC_FOUND=Yes
MK_EXEC_PATH="${path}/freetype-config"
break
elif [ -e "${path}/freetype-config.exe" ]; then
FREETYPE_VERSION=`${path}/freetype-config.exe --version`
MK_EXEC_FOUND=Yes
MK_EXEC_PATH="${path}/freetype-config.exe"
break
fi
done
IFS=$bb_save_IFS
fi
FREETYPE_CFLAGS=
if [ "${prefix_freetype}" != "" ]; then
if [ -e "${prefix_freetype}/bin/freetype-config" ]; then
FREETYPE_CFLAGS=`${prefix_freetype}/bin/freetype-config --cflags`
MK_EXEC_FOUND=Yes
MK_EXEC_PATH="${prefix_freetype}/bin/freetype-config"
fi
else
bb_save_IFS=$IFS
IFS=$PATH_SEPARATOR
for path in $PATH; do
if [ -e "${path}/freetype-config" ]; then
FREETYPE_CFLAGS=`${path}/freetype-config --cflags`
MK_EXEC_FOUND=Yes
MK_EXEC_PATH="${path}/freetype-config"
break
elif [ -e "${path}/freetype-config.exe" ]; then
FREETYPE_CFLAGS=`${path}/freetype-config.exe --cflags`
MK_EXEC_FOUND=Yes
MK_EXEC_PATH="${path}/freetype-config.exe"
break
fi
done
IFS=$bb_save_IFS
fi
FREETYPE_LIBS=
if [ "${prefix_freetype}" != "" ]; then
if [ -e "${prefix_freetype}/bin/freetype-config" ]; then
FREETYPE_LIBS=`${prefix_freetype}/bin/freetype-config --libs`
MK_EXEC_FOUND=Yes
MK_EXEC_PATH="${prefix_freetype}/bin/freetype-config"
fi
else
bb_save_IFS=$IFS
IFS=$PATH_SEPARATOR
for path in $PATH; do
if [ -e "${path}/freetype-config" ]; then
FREETYPE_LIBS=`${path}/freetype-config --libs`
MK_EXEC_FOUND=Yes
MK_EXEC_PATH="${path}/freetype-config"
break
elif [ -e "${path}/freetype-config.exe" ]; then
FREETYPE_LIBS=`${path}/freetype-config.exe --libs`
MK_EXEC_FOUND=Yes
MK_EXEC_PATH="${path}/freetype-config.exe"
break
fi
done
IFS=$bb_save_IFS
fi
fi
case "${host}" in
*-*-irix*)
if [ -e "/usr/freeware/include" ]; then
FREETYPE_CFLAGS="${FREETYPE_CFLAGS} -I/usr/freeware/include"
fi
;;
esac
if [ "${FREETYPE_VERSION}" != "" ]; then
if [ "${prefix_freetype}" != "" ]; then
echo "yes ($FREETYPE_VERSION in ${prefix_freetype})"
echo "# yes ($FREETYPE_VERSION in ${prefix_freetype})" >>config.log
else
echo "yes ($FREETYPE_VERSION)"
echo "# yes ($FREETYPE_VERSION)" >>config.log
fi
MK_VERSION_MAJOR=`echo "$FREETYPE_VERSION" |sed 's/\([0-9]*\).\([0-9]*\).\([0-9]*\).*/\1/'`;
MK_VERSION_MINOR=`echo "$FREETYPE_VERSION" |sed 's/\([0-9]*\).\([0-9]*\).\([0-9]*\).*/\2/'`;
MK_VERSION_MICRO=`echo "$FREETYPE_VERSION" |sed 's/\([0-9]*\).\([0-9]*\).\([0-9]*\).*/\3/'`;
MK_VERSION_OK=no
if [ $MK_VERSION_MAJOR -gt 7 ]; then
MK_VERSION_OK=yes
elif [ $MK_VERSION_MAJOR -eq 7 ]; then
if [ "$MK_VERSION_MINOR" = '' ]; then
MK_VERSION_OK=yes
else
if [ $MK_VERSION_MINOR -gt 0 ]; then
MK_VERSION_OK=yes
elif [ $MK_VERSION_MINOR -eq 0 ]; then
if [ "$MK_VERSION_MICRO" = '' ]; then
MK_VERSION_OK=yes
else
if [ $MK_VERSION_MICRO -ge 1 ]; then
MK_VERSION_OK=yes
fi
fi
fi
fi
fi
if [ "${MK_VERSION_OK}" = "no" ]; then
echo '*'
echo '# *' >>config.log
echo "* Minimum required version is 7.0.1 (found $FREETYPE_VERSION)"
echo "# * Minimum required version is 7.0.1 (found $FREETYPE_VERSION)" >>config.log
echo '*'
echo '# *' >>config.log
fi
else
if [ "${prefix_freetype}" != "" ]; then
echo "no (not in ${prefix_freetype})"
echo "# no (not in ${prefix_freetype})" >>config.log
else
echo 'no'
echo '# no' >>config.log
fi
MK_VERSION_OK="no"
fi
if [ "${MK_VERSION_OK}" = "yes" ]; then
$ECHO_N 'checking whether FreeType works...'
$ECHO_N '# checking whether FreeType works...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <ft2build.h>
#include FT_FREETYPE_H
#include FT_OUTLINE_H
int
main(int argc, char *argv[])
{
	FT_Library library;
	FT_Face face;
	FT_Init_FreeType(&library);
	FT_New_Face(library, "foo", 0, &face);
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_FREETYPE' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${FREETYPE_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${FREETYPE_LIBS} 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${FREETYPE_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${FREETYPE_LIBS} 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_FREETYPE=yes
bb_o=$bb_incdir/have_freetype.h
echo '#ifndef HAVE_FREETYPE' >$bb_o
echo "#define HAVE_FREETYPE \"$HAVE_FREETYPE\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_FREETYPE\"] = \"$HAVE_FREETYPE\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_FREETYPE=no
echo '#undef HAVE_FREETYPE' >$bb_incdir/have_freetype.h
echo 'hdefs["HAVE_FREETYPE"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_FREETYPE}" = "yes" ]; then
bb_o=$bb_incdir/freetype_cflags.h
echo '#ifndef FREETYPE_CFLAGS' >$bb_o
echo "#define FREETYPE_CFLAGS \"$FREETYPE_CFLAGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"FREETYPE_CFLAGS\"] = \"$FREETYPE_CFLAGS\"" >>configure.lua
bb_o=$bb_incdir/freetype_libs.h
echo '#ifndef FREETYPE_LIBS' >$bb_o
echo "#define FREETYPE_LIBS \"$FREETYPE_LIBS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"FREETYPE_LIBS\"] = \"$FREETYPE_LIBS\"" >>configure.lua
else
echo '#undef FREETYPE_CFLAGS' >$bb_incdir/freetype_cflags.h
echo 'hdefs["FREETYPE_CFLAGS"] = nil' >>configure.lua
FREETYPE_CFLAGS=""
echo '#undef FREETYPE_LIBS' >$bb_incdir/freetype_libs.h
echo 'hdefs["FREETYPE_LIBS"] = nil' >>configure.lua
FREETYPE_LIBS=""
fi
else
HAVE_FREETYPE="no"
FREETYPE_CFLAGS=""
FREETYPE_LIBS=""
FREETYPE_PC=""
echo '#undef HAVE_FREETYPE' >$bb_incdir/have_freetype.h
echo 'hdefs["HAVE_FREETYPE"] = nil' >>configure.lua
echo '#undef FREETYPE_CFFLAGS' >$bb_incdir/freetype_cfflags.h
echo 'hdefs["FREETYPE_CFFLAGS"] = nil' >>configure.lua
echo '#undef FREETYPE_LIBS' >$bb_incdir/freetype_libs.h
echo 'hdefs["FREETYPE_LIBS"] = nil' >>configure.lua
fi
if [ "${HAVE_FREETYPE}" = "yes" ]; then
FREETYPE_PC="freetype2"
else
FREETYPE_PC=""
fi
# END freetype
		if [ "${HAVE_FREETYPE}" != 'yes' ]
 then
			echo "*"
			echo "* The FreeType library was not found, aborting!"
			echo "*"
			echo "* Agar needs FreeType to display vector fonts"
			echo "* (http://www.freetype.org/)."
			echo "*"
			echo "* If you really want to use Agar's built-in"
			echo "* monospace bitmap font engine (not recommended),"
			echo "* please use: ./configure --without-freetype"
			echo "*"
			exit 1
		fi
	else
echo 'not enabling FreeType'
echo '# not enabling FreeType' >>config.log
HAVE_FREETYPE="no"
FREETYPE_CFLAGS=""
FREETYPE_LIBS=""
FREETYPE_PC=""
echo '#undef HAVE_FREETYPE' >$bb_incdir/have_freetype.h
echo 'hdefs["HAVE_FREETYPE"] = nil' >>configure.lua
echo '#undef FREETYPE_CFFLAGS' >$bb_incdir/freetype_cfflags.h
echo 'hdefs["FREETYPE_CFFLAGS"] = nil' >>configure.lua
echo '#undef FREETYPE_LIBS' >$bb_incdir/freetype_libs.h
echo 'hdefs["FREETYPE_LIBS"] = nil' >>configure.lua
	fi
	
	if [ "${with_fontconfig}" != 'no' ]
 then
$ECHO_N 'checking for fontconfig...'
$ECHO_N '# checking for fontconfig...' >>config.log
# BEGIN fontconfig(2.6.0 ${prefix_fontconfig})
if [ "$pfx" != "" ]; then
MK_EXEC_PKGPREFIX=`$PKGCONFIG --variable=prefix fontconfig 2>/dev/null`
if [ "$MK_EXEC_PKGPREFIX" != "$pfx" ]; then
echo "* "
echo "# * " >>config.log
echo "* ERROR: According to pkg-config, fontconfig is installed in prefix: "
echo "# * ERROR: According to pkg-config, fontconfig is installed in prefix: " >>config.log
echo "* $MK_EXEC_PKGPREFIX, but the prefix ${prefix_fontconfig} was given."
echo "# * $MK_EXEC_PKGPREFIX, but the prefix ${prefix_fontconfig} was given." >>config.log
echo "* "
echo "# * " >>config.log
echo "* Please indicate correct fontconfig prefix (or omit for autodetect)."
echo "# * Please indicate correct fontconfig prefix (or omit for autodetect)." >>config.log
echo "* "
echo "# * " >>config.log
echo "***"
echo "*** ERROR: Package prefix mismatch"
echo "*** Failed! See ./config.log for more details."
echo "***"
exit 1
fi
fi
FONTCONFIG_VERSION=`$PKGCONFIG fontconfig --modversion 2>/dev/null`
if [ "$pfx" != "" ]; then
MK_EXEC_PKGPREFIX=`$PKGCONFIG --variable=prefix fontconfig 2>/dev/null`
if [ "$MK_EXEC_PKGPREFIX" != "$pfx" ]; then
echo "* "
echo "# * " >>config.log
echo "* ERROR: According to pkg-config, fontconfig is installed in prefix: "
echo "# * ERROR: According to pkg-config, fontconfig is installed in prefix: " >>config.log
echo "* $MK_EXEC_PKGPREFIX, but the prefix ${prefix_fontconfig} was given."
echo "# * $MK_EXEC_PKGPREFIX, but the prefix ${prefix_fontconfig} was given." >>config.log
echo "* "
echo "# * " >>config.log
echo "* Please indicate correct fontconfig prefix (or omit for autodetect)."
echo "# * Please indicate correct fontconfig prefix (or omit for autodetect)." >>config.log
echo "* "
echo "# * " >>config.log
echo "***"
echo "*** ERROR: Package prefix mismatch"
echo "*** Failed! See ./config.log for more details."
echo "***"
exit 1
fi
fi
FONTCONFIG_CFLAGS=`$PKGCONFIG fontconfig --cflags 2>/dev/null`
if [ "$pfx" != "" ]; then
MK_EXEC_PKGPREFIX=`$PKGCONFIG --variable=prefix fontconfig 2>/dev/null`
if [ "$MK_EXEC_PKGPREFIX" != "$pfx" ]; then
echo "* "
echo "# * " >>config.log
echo "* ERROR: According to pkg-config, fontconfig is installed in prefix: "
echo "# * ERROR: According to pkg-config, fontconfig is installed in prefix: " >>config.log
echo "* $MK_EXEC_PKGPREFIX, but the prefix ${prefix_fontconfig} was given."
echo "# * $MK_EXEC_PKGPREFIX, but the prefix ${prefix_fontconfig} was given." >>config.log
echo "* "
echo "# * " >>config.log
echo "* Please indicate correct fontconfig prefix (or omit for autodetect)."
echo "# * Please indicate correct fontconfig prefix (or omit for autodetect)." >>config.log
echo "* "
echo "# * " >>config.log
echo "***"
echo "*** ERROR: Package prefix mismatch"
echo "*** Failed! See ./config.log for more details."
echo "***"
exit 1
fi
fi
FONTCONFIG_LIBS=`$PKGCONFIG fontconfig --libs 2>/dev/null`
if [ "${FONTCONFIG_VERSION}" != "" ]; then
if [ "${prefix_fontconfig}" != "" ]; then
echo "yes ($FONTCONFIG_VERSION in ${prefix_fontconfig})"
echo "# yes ($FONTCONFIG_VERSION in ${prefix_fontconfig})" >>config.log
else
echo "yes ($FONTCONFIG_VERSION)"
echo "# yes ($FONTCONFIG_VERSION)" >>config.log
fi
MK_VERSION_MAJOR=`echo "$FONTCONFIG_VERSION" |sed 's/\([0-9]*\).\([0-9]*\).\([0-9]*\).*/\1/'`;
MK_VERSION_MINOR=`echo "$FONTCONFIG_VERSION" |sed 's/\([0-9]*\).\([0-9]*\).\([0-9]*\).*/\2/'`;
MK_VERSION_MICRO=`echo "$FONTCONFIG_VERSION" |sed 's/\([0-9]*\).\([0-9]*\).\([0-9]*\).*/\3/'`;
MK_VERSION_OK=no
if [ $MK_VERSION_MAJOR -gt 2 ]; then
MK_VERSION_OK=yes
elif [ $MK_VERSION_MAJOR -eq 2 ]; then
if [ "$MK_VERSION_MINOR" = '' ]; then
MK_VERSION_OK=yes
else
if [ $MK_VERSION_MINOR -gt 6 ]; then
MK_VERSION_OK=yes
elif [ $MK_VERSION_MINOR -eq 6 ]; then
if [ "$MK_VERSION_MICRO" = '' ]; then
MK_VERSION_OK=yes
else
if [ $MK_VERSION_MICRO -ge 0 ]; then
MK_VERSION_OK=yes
fi
fi
fi
fi
fi
if [ "${MK_VERSION_OK}" = "no" ]; then
echo '*'
echo '# *' >>config.log
echo "* Minimum required version is 2.6.0 (found $FONTCONFIG_VERSION)"
echo "# * Minimum required version is 2.6.0 (found $FONTCONFIG_VERSION)" >>config.log
echo '*'
echo '# *' >>config.log
fi
else
if [ "${prefix_fontconfig}" != "" ]; then
echo "no (not in ${prefix_fontconfig})"
echo "# no (not in ${prefix_fontconfig})" >>config.log
else
echo 'no'
echo '# no' >>config.log
fi
MK_VERSION_OK="no"
fi
if [ "${MK_VERSION_OK}" = "yes" ]; then
$ECHO_N 'checking whether fontconfig works...'
$ECHO_N '# checking whether fontconfig works...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <stdio.h>
#include <string.h>
#include <fontconfig/fontconfig.h>

int
main(int argc, char *argv[])
{
	FcPattern *pattern, *fpat;
    FcResult result = FcResultMatch;
	const FcChar8 name[1] = { '\0' };
    FcChar8 *file;
    FcMatrix *mat = NULL;
    double size;
    int idx;
    if (!FcInit()) { return (1); }
    if ((pattern = FcNameParse(name)) == NULL) { return (1); }
    if (!FcConfigSubstitute(NULL, pattern, FcMatchPattern)) { return (1); }
    FcDefaultSubstitute(pattern);
    if ((fpat = FcFontMatch(NULL, pattern, &result)) == NULL) { return (1); }
    if (FcPatternGetString(fpat, FC_FILE, 0, &file) != FcResultMatch) { return (1); }
    if (FcPatternGetInteger(fpat, FC_INDEX, 0, &idx) != FcResultMatch) { return (1); }
    if (FcPatternGetDouble(fpat, FC_SIZE, 0, &size) != FcResultMatch) { return (1); }
    if (FcPatternGetMatrix(fpat, FC_MATRIX, 0, &mat) != FcResultMatch) { return (1); }
    return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_FONTCONFIG' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${FONTCONFIG_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${FONTCONFIG_LIBS} 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${FONTCONFIG_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${FONTCONFIG_LIBS} 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_FONTCONFIG=yes
bb_o=$bb_incdir/have_fontconfig.h
echo '#ifndef HAVE_FONTCONFIG' >$bb_o
echo "#define HAVE_FONTCONFIG \"$HAVE_FONTCONFIG\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_FONTCONFIG\"] = \"$HAVE_FONTCONFIG\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_FONTCONFIG=no
echo '#undef HAVE_FONTCONFIG' >$bb_incdir/have_fontconfig.h
echo 'hdefs["HAVE_FONTCONFIG"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_FONTCONFIG}" = "yes" ]; then
bb_o=$bb_incdir/fontconfig_cflags.h
echo '#ifndef FONTCONFIG_CFLAGS' >$bb_o
echo "#define FONTCONFIG_CFLAGS \"$FONTCONFIG_CFLAGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"FONTCONFIG_CFLAGS\"] = \"$FONTCONFIG_CFLAGS\"" >>configure.lua
bb_o=$bb_incdir/fontconfig_libs.h
echo '#ifndef FONTCONFIG_LIBS' >$bb_o
echo "#define FONTCONFIG_LIBS \"$FONTCONFIG_LIBS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"FONTCONFIG_LIBS\"] = \"$FONTCONFIG_LIBS\"" >>configure.lua
else
echo '#undef FONTCONFIG_CFLAGS' >$bb_incdir/fontconfig_cflags.h
echo 'hdefs["FONTCONFIG_CFLAGS"] = nil' >>configure.lua
FONTCONFIG_CFLAGS=""
echo '#undef FONTCONFIG_LIBS' >$bb_incdir/fontconfig_libs.h
echo 'hdefs["FONTCONFIG_LIBS"] = nil' >>configure.lua
FONTCONFIG_LIBS=""
fi
else
HAVE_FONTCONFIG="no"
FONTCONFIG_CFLAGS=""
FONTCONFIG_LIBS=""
echo '#undef HAVE_FONTCONFIG' >$bb_incdir/have_fontconfig.h
echo 'hdefs["HAVE_FONTCONFIG"] = nil' >>configure.lua
echo '#undef FONTCONFIG_CFLAGS' >$bb_incdir/fontconfig_cflags.h
echo 'hdefs["FONTCONFIG_CFLAGS"] = nil' >>configure.lua
echo '#undef FONTCONFIG_LIBS' >$bb_incdir/fontconfig_libs.h
echo 'hdefs["FONTCONFIG_LIBS"] = nil' >>configure.lua
fi
# END fontconfig
	else
echo 'not enabling fontconfig'
echo '# not enabling fontconfig' >>config.log
HAVE_FONTCONFIG="no"
FONTCONFIG_CFLAGS=""
FONTCONFIG_LIBS=""
echo '#undef HAVE_FONTCONFIG' >$bb_incdir/have_fontconfig.h
echo 'hdefs["HAVE_FONTCONFIG"] = nil' >>configure.lua
echo '#undef FONTCONFIG_CFLAGS' >$bb_incdir/fontconfig_cflags.h
echo 'hdefs["FONTCONFIG_CFLAGS"] = nil' >>configure.lua
echo '#undef FONTCONFIG_LIBS' >$bb_incdir/fontconfig_libs.h
echo 'hdefs["FONTCONFIG_LIBS"] = nil' >>configure.lua
	fi
	
	if [ "${with_jpeg}" != 'no' ]
 then
$ECHO_N 'checking for libjpeg...'
$ECHO_N '# checking for libjpeg...' >>config.log
# BEGIN jpeg(0 ${prefix_jpeg})
JPEG_CFLAGS=""
if [ "${prefix_jpeg}" != "" ]; then
if [ -e "${prefix_jpeg}/include/jpeglib.h" ]; then
JPEG_CFLAGS="-I${prefix_jpeg}/include"
JPEG_LIBS="-L${prefix_jpeg}/lib -ljpeg"
fi
else
if [ -e "/usr/local/include/jpeglib.h" ]; then
JPEG_CFLAGS="-I/usr/local/include"
JPEG_LIBS="-L/usr/local/lib -ljpeg"
fi
if [ -e "/usr/X11R6/include/jpeglib.h" ]; then
JPEG_CFLAGS="-I/usr/X11R6/include"
JPEG_LIBS="-L/usr/X11R6/lib -ljpeg"
fi
if [ -e "/usr/include/jpeglib.h" ]; then
JPEG_CFLAGS="-I/usr/include"
JPEG_LIBS="-L/usr/lib -ljpeg"
fi
if [ -e "/usr/pkg/include/jpeglib.h" ]; then
JPEG_CFLAGS="-I/usr/pkg/include"
JPEG_LIBS="-L/usr/pkg/lib -ljpeg"
fi
if [ -e "/opt/local/include/jpeglib.h" ]; then
JPEG_CFLAGS="-I/opt/local/include"
JPEG_LIBS="-L/opt/local/lib -ljpeg"
fi
if [ -e "/opt/include/jpeglib.h" ]; then
JPEG_CFLAGS="-I/opt/include"
JPEG_LIBS="-L/opt/lib -ljpeg"
fi
fi
if [ "${JPEG_LIBS}" != "" ]; then
echo 'yes'
echo '# yes' >>config.log
$ECHO_N 'checking whether libjpeg works...'
$ECHO_N '# checking whether libjpeg works...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <stdio.h>
#include <jpeglib.h>

struct jpeg_error_mgr		jerr;
struct jpeg_compress_struct	jcomp;

int
main(int argc, char *argv[])
{
	jcomp.err = jpeg_std_error(&jerr);

	jpeg_create_compress(&jcomp);
	jcomp.image_width = 32;
	jcomp.image_height = 32;
	jcomp.input_components = 3;
	jcomp.in_color_space = JCS_RGB;

	jpeg_set_defaults(&jcomp);
	jpeg_set_quality(&jcomp, 75, TRUE);

	jpeg_destroy_compress(&jcomp);
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_JPEG' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${JPEG_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${JPEG_LIBS} 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${JPEG_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${JPEG_LIBS} 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_JPEG=yes
bb_o=$bb_incdir/have_jpeg.h
echo '#ifndef HAVE_JPEG' >$bb_o
echo "#define HAVE_JPEG \"$HAVE_JPEG\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_JPEG\"] = \"$HAVE_JPEG\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_JPEG=no
echo '#undef HAVE_JPEG' >$bb_incdir/have_jpeg.h
echo 'hdefs["HAVE_JPEG"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_JPEG}" = "yes" ]; then
bb_o=$bb_incdir/jpeg_cflags.h
echo '#ifndef JPEG_CFLAGS' >$bb_o
echo "#define JPEG_CFLAGS \"$JPEG_CFLAGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"JPEG_CFLAGS\"] = \"$JPEG_CFLAGS\"" >>configure.lua
bb_o=$bb_incdir/jpeg_libs.h
echo '#ifndef JPEG_LIBS' >$bb_o
echo "#define JPEG_LIBS \"$JPEG_LIBS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"JPEG_LIBS\"] = \"$JPEG_LIBS\"" >>configure.lua
else
echo '#undef JPEG_CFLAGS' >$bb_incdir/jpeg_cflags.h
echo 'hdefs["JPEG_CFLAGS"] = nil' >>configure.lua
JPEG_CFLAGS=""
echo '#undef JPEG_LIBS' >$bb_incdir/jpeg_libs.h
echo 'hdefs["JPEG_LIBS"] = nil' >>configure.lua
JPEG_LIBS=""
fi
else
echo 'no'
echo '# no' >>config.log
HAVE_JPEG="no"
JPEG_CFLAGS=""
JPEG_LIBS=""
JPEG_PC=""
echo '#undef HAVE_JPEG' >$bb_incdir/have_jpeg.h
echo 'hdefs["HAVE_JPEG"] = nil' >>configure.lua
echo '#undef JPEG_CFLAGS' >$bb_incdir/jpeg_cflags.h
echo 'hdefs["JPEG_CFLAGS"] = nil' >>configure.lua
echo '#undef JPEG_LIBS' >$bb_incdir/jpeg_libs.h
echo 'hdefs["JPEG_LIBS"] = nil' >>configure.lua
fi
if [ "${HAVE_JPEG}" = "yes" ]; then
JPEG_PC="libjpeg"
else
JPEG_PC=""
fi
# END jpeg
		if [ "${HAVE_JPEG}" != 'yes' ]
 then
			if [ "${with_jpeg}" = 'yes' ]
 then
				echo "*"
				echo "* --with-jpeg was requested, but libjpeg"
				echo "* was not found."
				echo "*"
				exit 1
			fi
echo 'not enabling libjpeg'
echo '# not enabling libjpeg' >>config.log
HAVE_JPEG="no"
JPEG_CFLAGS=""
JPEG_LIBS=""
JPEG_PC=""
echo '#undef HAVE_JPEG' >$bb_incdir/have_jpeg.h
echo 'hdefs["HAVE_JPEG"] = nil' >>configure.lua
echo '#undef JPEG_CFLAGS' >$bb_incdir/jpeg_cflags.h
echo 'hdefs["JPEG_CFLAGS"] = nil' >>configure.lua
echo '#undef JPEG_LIBS' >$bb_incdir/jpeg_libs.h
echo 'hdefs["JPEG_LIBS"] = nil' >>configure.lua
		fi
	else
echo 'not enabling libjpeg'
echo '# not enabling libjpeg' >>config.log
HAVE_JPEG="no"
JPEG_CFLAGS=""
JPEG_LIBS=""
JPEG_PC=""
echo '#undef HAVE_JPEG' >$bb_incdir/have_jpeg.h
echo 'hdefs["HAVE_JPEG"] = nil' >>configure.lua
echo '#undef JPEG_CFLAGS' >$bb_incdir/jpeg_cflags.h
echo 'hdefs["JPEG_CFLAGS"] = nil' >>configure.lua
echo '#undef JPEG_LIBS' >$bb_incdir/jpeg_libs.h
echo 'hdefs["JPEG_LIBS"] = nil' >>configure.lua
	fi
	
	if [ "${with_png}" != 'no' ]
 then
$ECHO_N 'checking for libpng...'
$ECHO_N '# checking for libpng...' >>config.log
# BEGIN png(1.2.49 ${prefix_png})
PNG_VERSION=
if [ "${prefix_png}" != "" ]; then
if [ -e "${prefix_png}/bin/libpng-config" ]; then
PNG_VERSION=`${prefix_png}/bin/libpng-config --version`
MK_EXEC_FOUND=Yes
MK_EXEC_PATH="${prefix_png}/bin/libpng-config"
fi
else
bb_save_IFS=$IFS
IFS=$PATH_SEPARATOR
for path in $PATH; do
if [ -e "${path}/libpng-config" ]; then
PNG_VERSION=`${path}/libpng-config --version`
MK_EXEC_FOUND=Yes
MK_EXEC_PATH="${path}/libpng-config"
break
elif [ -e "${path}/libpng-config.exe" ]; then
PNG_VERSION=`${path}/libpng-config.exe --version`
MK_EXEC_FOUND=Yes
MK_EXEC_PATH="${path}/libpng-config.exe"
break
fi
done
IFS=$bb_save_IFS
fi
PNG_CFLAGS=
if [ "${prefix_png}" != "" ]; then
if [ -e "${prefix_png}/bin/libpng-config" ]; then
PNG_CFLAGS=`${prefix_png}/bin/libpng-config --cflags`
MK_EXEC_FOUND=Yes
MK_EXEC_PATH="${prefix_png}/bin/libpng-config"
fi
else
bb_save_IFS=$IFS
IFS=$PATH_SEPARATOR
for path in $PATH; do
if [ -e "${path}/libpng-config" ]; then
PNG_CFLAGS=`${path}/libpng-config --cflags`
MK_EXEC_FOUND=Yes
MK_EXEC_PATH="${path}/libpng-config"
break
elif [ -e "${path}/libpng-config.exe" ]; then
PNG_CFLAGS=`${path}/libpng-config.exe --cflags`
MK_EXEC_FOUND=Yes
MK_EXEC_PATH="${path}/libpng-config.exe"
break
fi
done
IFS=$bb_save_IFS
fi
PNG_LOPTS=
if [ "${prefix_png}" != "" ]; then
if [ -e "${prefix_png}/bin/libpng-config" ]; then
PNG_LOPTS=`${prefix_png}/bin/libpng-config --L_opts`
MK_EXEC_FOUND=Yes
MK_EXEC_PATH="${prefix_png}/bin/libpng-config"
fi
else
bb_save_IFS=$IFS
IFS=$PATH_SEPARATOR
for path in $PATH; do
if [ -e "${path}/libpng-config" ]; then
PNG_LOPTS=`${path}/libpng-config --L_opts`
MK_EXEC_FOUND=Yes
MK_EXEC_PATH="${path}/libpng-config"
break
elif [ -e "${path}/libpng-config.exe" ]; then
PNG_LOPTS=`${path}/libpng-config.exe --L_opts`
MK_EXEC_FOUND=Yes
MK_EXEC_PATH="${path}/libpng-config.exe"
break
fi
done
IFS=$bb_save_IFS
fi
PNG_LIBS=
if [ "${prefix_png}" != "" ]; then
if [ -e "${prefix_png}/bin/libpng-config" ]; then
PNG_LIBS=`${prefix_png}/bin/libpng-config --libs`
MK_EXEC_FOUND=Yes
MK_EXEC_PATH="${prefix_png}/bin/libpng-config"
fi
else
bb_save_IFS=$IFS
IFS=$PATH_SEPARATOR
for path in $PATH; do
if [ -e "${path}/libpng-config" ]; then
PNG_LIBS=`${path}/libpng-config --libs`
MK_EXEC_FOUND=Yes
MK_EXEC_PATH="${path}/libpng-config"
break
elif [ -e "${path}/libpng-config.exe" ]; then
PNG_LIBS=`${path}/libpng-config.exe --libs`
MK_EXEC_FOUND=Yes
MK_EXEC_PATH="${path}/libpng-config.exe"
break
fi
done
IFS=$bb_save_IFS
fi
PNG_LIBS="${PNG_LOPTS} ${PNG_LIBS}"
if [ "${PNG_VERSION}" != "" ]; then
if [ "${prefix_png}" != "" ]; then
echo "yes ($PNG_VERSION in ${prefix_png})"
echo "# yes ($PNG_VERSION in ${prefix_png})" >>config.log
else
echo "yes ($PNG_VERSION)"
echo "# yes ($PNG_VERSION)" >>config.log
fi
MK_VERSION_MAJOR=`echo "$PNG_VERSION" |sed 's/\([0-9]*\).\([0-9]*\).\([0-9]*\).*/\1/'`;
MK_VERSION_MINOR=`echo "$PNG_VERSION" |sed 's/\([0-9]*\).\([0-9]*\).\([0-9]*\).*/\2/'`;
MK_VERSION_MICRO=`echo "$PNG_VERSION" |sed 's/\([0-9]*\).\([0-9]*\).\([0-9]*\).*/\3/'`;
MK_VERSION_OK=no
if [ $MK_VERSION_MAJOR -gt 1 ]; then
MK_VERSION_OK=yes
elif [ $MK_VERSION_MAJOR -eq 1 ]; then
if [ "$MK_VERSION_MINOR" = '' ]; then
MK_VERSION_OK=yes
else
if [ $MK_VERSION_MINOR -gt 2 ]; then
MK_VERSION_OK=yes
elif [ $MK_VERSION_MINOR -eq 2 ]; then
if [ "$MK_VERSION_MICRO" = '' ]; then
MK_VERSION_OK=yes
else
if [ $MK_VERSION_MICRO -ge 49 ]; then
MK_VERSION_OK=yes
fi
fi
fi
fi
fi
if [ "${MK_VERSION_OK}" = "no" ]; then
echo '*'
echo '# *' >>config.log
echo "* Minimum required version is 1.2.49 (found $PNG_VERSION)"
echo "# * Minimum required version is 1.2.49 (found $PNG_VERSION)" >>config.log
echo '*'
echo '# *' >>config.log
fi
else
if [ "${prefix_png}" != "" ]; then
echo "no (not in ${prefix_png})"
echo "# no (not in ${prefix_png})" >>config.log
else
echo 'no'
echo '# no' >>config.log
fi
MK_VERSION_OK="no"
fi
if [ "${MK_VERSION_OK}" = "yes" ]; then
$ECHO_N 'checking whether libpng works...'
$ECHO_N '# checking whether libpng works...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <stdio.h>
#include <png.h>

int main(int argc, char *argv[])
{
	char foo[4];

	if (png_sig_cmp((png_bytep)foo, 0, 3)) {
		return (1);
	}
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_PNG' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${PNG_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${PNG_LIBS} 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${PNG_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${PNG_LIBS} 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_PNG=yes
bb_o=$bb_incdir/have_png.h
echo '#ifndef HAVE_PNG' >$bb_o
echo "#define HAVE_PNG \"$HAVE_PNG\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_PNG\"] = \"$HAVE_PNG\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_PNG=no
echo '#undef HAVE_PNG' >$bb_incdir/have_png.h
echo 'hdefs["HAVE_PNG"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_PNG}" = "yes" ]; then
bb_o=$bb_incdir/png_cflags.h
echo '#ifndef PNG_CFLAGS' >$bb_o
echo "#define PNG_CFLAGS \"$PNG_CFLAGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"PNG_CFLAGS\"] = \"$PNG_CFLAGS\"" >>configure.lua
bb_o=$bb_incdir/png_libs.h
echo '#ifndef PNG_LIBS' >$bb_o
echo "#define PNG_LIBS \"$PNG_LIBS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"PNG_LIBS\"] = \"$PNG_LIBS\"" >>configure.lua
else
echo '#undef PNG_CFLAGS' >$bb_incdir/png_cflags.h
echo 'hdefs["PNG_CFLAGS"] = nil' >>configure.lua
PNG_CFLAGS=""
echo '#undef PNG_LIBS' >$bb_incdir/png_libs.h
echo 'hdefs["PNG_LIBS"] = nil' >>configure.lua
PNG_LIBS=""
fi
MK_VERSION_MAJOR=`echo "$PNG_VERSION" |sed 's/\([0-9]*\).\([0-9]*\).\([0-9]*\).*/\1/'`;
MK_VERSION_MINOR=`echo "$PNG_VERSION" |sed 's/\([0-9]*\).\([0-9]*\).\([0-9]*\).*/\2/'`;
MK_VERSION_MICRO=`echo "$PNG_VERSION" |sed 's/\([0-9]*\).\([0-9]*\).\([0-9]*\).*/\3/'`;
MK_VERSION_OK=no
if [ $MK_VERSION_MAJOR -gt 1 ]; then
MK_VERSION_OK=yes
elif [ $MK_VERSION_MAJOR -eq 1 ]; then
if [ "$MK_VERSION_MINOR" = '' ]; then
MK_VERSION_OK=yes
else
if [ $MK_VERSION_MINOR -gt 4 ]; then
MK_VERSION_OK=yes
elif [ $MK_VERSION_MINOR -eq 4 ]; then
if [ "$MK_VERSION_MICRO" = '' ]; then
MK_VERSION_OK=yes
else
if [ $MK_VERSION_MICRO -ge 0 ]; then
MK_VERSION_OK=yes
fi
fi
fi
fi
fi
if [ "${MK_VERSION_OK}" = "yes" ]; then
HAVE_LIBPNG14="yes"
bb_o=$bb_incdir/have_libpng14.h
echo '#ifndef HAVE_LIBPNG14' >$bb_o
echo "#define HAVE_LIBPNG14 \"$HAVE_LIBPNG14\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_LIBPNG14\"] = \"$HAVE_LIBPNG14\"" >>configure.lua
else
echo '#undef HAVE_LIBPNG14' >$bb_incdir/have_libpng14.h
echo 'hdefs["HAVE_LIBPNG14"] = nil' >>configure.lua
fi
else
HAVE_PNG="no"
HAVE_LIBPNG14="no"
PNG_CFLAGS=""
PNG_LIBS=""
PNG_PC=""
echo '#undef HAVE_PNG' >$bb_incdir/have_png.h
echo 'hdefs["HAVE_PNG"] = nil' >>configure.lua
echo '#undef HAVE_LIBPNG14' >$bb_incdir/have_libpng14.h
echo 'hdefs["HAVE_LIBPNG14"] = nil' >>configure.lua
echo '#undef PNG_CFLAGS' >$bb_incdir/png_cflags.h
echo 'hdefs["PNG_CFLAGS"] = nil' >>configure.lua
echo '#undef PNG_LIBS' >$bb_incdir/png_libs.h
echo 'hdefs["PNG_LIBS"] = nil' >>configure.lua
fi
if [ "${HAVE_PNG}" = "yes" ]; then
PNG_PC="libpng"
else
PNG_PC=""
fi
# END png
		if [ "${HAVE_PNG}" != 'yes' ]
 then
			if [ "${with_png}" = 'yes' ]
 then
				echo "*"
				echo "* --with-png was requested, but libpng"
				echo "* was not found."
				echo "*"
				exit 1
			fi
echo 'not enabling libpng'
echo '# not enabling libpng' >>config.log
HAVE_PNG="no"
HAVE_LIBPNG14="no"
PNG_CFLAGS=""
PNG_LIBS=""
PNG_PC=""
echo '#undef HAVE_PNG' >$bb_incdir/have_png.h
echo 'hdefs["HAVE_PNG"] = nil' >>configure.lua
echo '#undef HAVE_LIBPNG14' >$bb_incdir/have_libpng14.h
echo 'hdefs["HAVE_LIBPNG14"] = nil' >>configure.lua
echo '#undef PNG_CFLAGS' >$bb_incdir/png_cflags.h
echo 'hdefs["PNG_CFLAGS"] = nil' >>configure.lua
echo '#undef PNG_LIBS' >$bb_incdir/png_libs.h
echo 'hdefs["PNG_LIBS"] = nil' >>configure.lua
		fi
	else
echo 'not enabling libpng'
echo '# not enabling libpng' >>config.log
HAVE_PNG="no"
HAVE_LIBPNG14="no"
PNG_CFLAGS=""
PNG_LIBS=""
PNG_PC=""
echo '#undef HAVE_PNG' >$bb_incdir/have_png.h
echo 'hdefs["HAVE_PNG"] = nil' >>configure.lua
echo '#undef HAVE_LIBPNG14' >$bb_incdir/have_libpng14.h
echo 'hdefs["HAVE_LIBPNG14"] = nil' >>configure.lua
echo '#undef PNG_CFLAGS' >$bb_incdir/png_cflags.h
echo 'hdefs["PNG_CFLAGS"] = nil' >>configure.lua
echo '#undef PNG_LIBS' >$bb_incdir/png_libs.h
echo 'hdefs["PNG_LIBS"] = nil' >>configure.lua
	fi
else
echo '#undef ENABLE_GUI' >$bb_incdir/enable_gui.h
echo 'hdefs["ENABLE_GUI"] = nil' >>configure.lua
ENABLE_GUI_LIBS=""
SUBDIR_gui=""
echo 'not enabling SDL 1.2'
echo '# not enabling SDL 1.2' >>config.log
HAVE_SDL="no"
SDL_CFLAGS=""
SDL_LIBS=""
SDL_PC=""
echo '#undef HAVE_SDL' >$bb_incdir/have_sdl.h
echo 'hdefs["HAVE_SDL"] = nil' >>configure.lua
echo '#undef SDL_CFLAGS' >$bb_incdir/sdl_cflags.h
echo 'hdefs["SDL_CFLAGS"] = nil' >>configure.lua
echo '#undef SDL_LIBS' >$bb_incdir/sdl_libs.h
echo 'hdefs["SDL_LIBS"] = nil' >>configure.lua
echo 'not enabling the X window system'
echo '# not enabling the X window system' >>config.log
HAVE_X11="no"
HAVE_XKB="no"
HAVE_XF86MISC="no"
X11_CFLAGS=""
X11_LIBS=""
X11_PC=""
echo '#undef HAVE_X11' >$bb_incdir/have_x11.h
echo 'hdefs["HAVE_X11"] = nil' >>configure.lua
echo '#undef HAVE_XKB' >$bb_incdir/have_xkb.h
echo 'hdefs["HAVE_XKB"] = nil' >>configure.lua
echo '#undef HAVE_XF86MISC' >$bb_incdir/have_xf86misc.h
echo 'hdefs["HAVE_XF86MISC"] = nil' >>configure.lua
echo '#undef X11_CFLAGS' >$bb_incdir/x11_cflags.h
echo 'hdefs["X11_CFLAGS"] = nil' >>configure.lua
echo '#undef X11_LIBS' >$bb_incdir/x11_libs.h
echo 'hdefs["X11_LIBS"] = nil' >>configure.lua
echo 'not enabling the Xinerama extension'
echo '# not enabling the Xinerama extension' >>config.log
HAVE_XINERAMA="no"
XINERAMA_CFLAGS=""
XINERAMA_LIBS=""
XINERAMA_PC=""
echo '#undef HAVE_XINERAMA' >$bb_incdir/have_xinerama.h
echo 'hdefs["HAVE_XINERAMA"] = nil' >>configure.lua
echo '#undef XINERAMA_CFLAGS' >$bb_incdir/xinerama_cflags.h
echo 'hdefs["XINERAMA_CFLAGS"] = nil' >>configure.lua
echo '#undef XINERAMA_LIBS' >$bb_incdir/xinerama_libs.h
echo 'hdefs["XINERAMA_LIBS"] = nil' >>configure.lua
echo 'not enabling the Cocoa framework'
echo '# not enabling the Cocoa framework' >>config.log
HAVE_COCOA="no"
COCOA_CFLAGS=""
COCOA_LIBS=""
echo '#undef HAVE_COCOA' >$bb_incdir/have_cocoa.h
echo 'hdefs["HAVE_COCOA"] = nil' >>configure.lua
echo '#undef COCOA_CFLAGS' >$bb_incdir/cocoa_cflags.h
echo 'hdefs["COCOA_CFLAGS"] = nil' >>configure.lua
echo '#undef COCOA_LIBS' >$bb_incdir/cocoa_libs.h
echo 'hdefs["COCOA_LIBS"] = nil' >>configure.lua
echo 'not enabling OpenGL'
echo '# not enabling OpenGL' >>config.log
HAVE_OPENGL="no"
HAVE_GLEXT="no"
OPENGL_CFLAGS=""
OPENGL_LIBS=""
OPENGL_PC=""
echo '#undef HAVE_OPENGL' >$bb_incdir/have_opengl.h
echo 'hdefs["HAVE_OPENGL"] = nil' >>configure.lua
echo '#undef HAVE_GLEXT' >$bb_incdir/have_glext.h
echo 'hdefs["HAVE_GLEXT"] = nil' >>configure.lua
echo '#undef OPENGL_CFLAGS' >$bb_incdir/opengl_cflags.h
echo 'hdefs["OPENGL_CFLAGS"] = nil' >>configure.lua
echo '#undef OPENGL_LIBS' >$bb_incdir/opengl_libs.h
echo 'hdefs["OPENGL_LIBS"] = nil' >>configure.lua
echo 'not enabling GLU'
echo '# not enabling GLU' >>config.log
HAVE_GLU="no"
GLU_CFLAGS=""
GLU_LIBS=""
echo '#undef HAVE_GLU' >$bb_incdir/have_glu.h
echo 'hdefs["HAVE_GLU"] = nil' >>configure.lua
echo '#undef GLU_CFLAGS' >$bb_incdir/glu_cflags.h
echo 'hdefs["GLU_CFLAGS"] = nil' >>configure.lua
echo '#undef GLU_LIBS' >$bb_incdir/glu_libs.h
echo 'hdefs["GLU_LIBS"] = nil' >>configure.lua
echo 'not enabling the GLX interface'
echo '# not enabling the GLX interface' >>config.log
HAVE_GLX="no"
GLX_CFLAGS=""
GLX_LIBS=""
echo '#undef HAVE_GLX' >$bb_incdir/have_glx.h
echo 'hdefs["HAVE_GLX"] = nil' >>configure.lua
echo '#undef GLX_CFLAGS' >$bb_incdir/glx_cflags.h
echo 'hdefs["GLX_CFLAGS"] = nil' >>configure.lua
echo '#undef GLX_LIBS' >$bb_incdir/glx_libs.h
echo 'hdefs["GLX_LIBS"] = nil' >>configure.lua
echo 'not enabling the WGL interface'
echo '# not enabling the WGL interface' >>config.log
HAVE_WGL="no"
echo '#undef HAVE_WGL' >$bb_incdir/have_wgl.h
echo 'hdefs["HAVE_WGL"] = nil' >>configure.lua
echo 'not enabling FreeType'
echo '# not enabling FreeType' >>config.log
HAVE_FREETYPE="no"
FREETYPE_CFLAGS=""
FREETYPE_LIBS=""
FREETYPE_PC=""
echo '#undef HAVE_FREETYPE' >$bb_incdir/have_freetype.h
echo 'hdefs["HAVE_FREETYPE"] = nil' >>configure.lua
echo '#undef FREETYPE_CFFLAGS' >$bb_incdir/freetype_cfflags.h
echo 'hdefs["FREETYPE_CFFLAGS"] = nil' >>configure.lua
echo '#undef FREETYPE_LIBS' >$bb_incdir/freetype_libs.h
echo 'hdefs["FREETYPE_LIBS"] = nil' >>configure.lua
echo 'not enabling fontconfig'
echo '# not enabling fontconfig' >>config.log
HAVE_FONTCONFIG="no"
FONTCONFIG_CFLAGS=""
FONTCONFIG_LIBS=""
echo '#undef HAVE_FONTCONFIG' >$bb_incdir/have_fontconfig.h
echo 'hdefs["HAVE_FONTCONFIG"] = nil' >>configure.lua
echo '#undef FONTCONFIG_CFLAGS' >$bb_incdir/fontconfig_cflags.h
echo 'hdefs["FONTCONFIG_CFLAGS"] = nil' >>configure.lua
echo '#undef FONTCONFIG_LIBS' >$bb_incdir/fontconfig_libs.h
echo 'hdefs["FONTCONFIG_LIBS"] = nil' >>configure.lua
echo 'not enabling libjpeg'
echo '# not enabling libjpeg' >>config.log
HAVE_JPEG="no"
JPEG_CFLAGS=""
JPEG_LIBS=""
JPEG_PC=""
echo '#undef HAVE_JPEG' >$bb_incdir/have_jpeg.h
echo 'hdefs["HAVE_JPEG"] = nil' >>configure.lua
echo '#undef JPEG_CFLAGS' >$bb_incdir/jpeg_cflags.h
echo 'hdefs["JPEG_CFLAGS"] = nil' >>configure.lua
echo '#undef JPEG_LIBS' >$bb_incdir/jpeg_libs.h
echo 'hdefs["JPEG_LIBS"] = nil' >>configure.lua
echo 'not enabling libpng'
echo '# not enabling libpng' >>config.log
HAVE_PNG="no"
HAVE_LIBPNG14="no"
PNG_CFLAGS=""
PNG_LIBS=""
PNG_PC=""
echo '#undef HAVE_PNG' >$bb_incdir/have_png.h
echo 'hdefs["HAVE_PNG"] = nil' >>configure.lua
echo '#undef HAVE_LIBPNG14' >$bb_incdir/have_libpng14.h
echo 'hdefs["HAVE_LIBPNG14"] = nil' >>configure.lua
echo '#undef PNG_CFLAGS' >$bb_incdir/png_cflags.h
echo 'hdefs["PNG_CFLAGS"] = nil' >>configure.lua
echo '#undef PNG_LIBS' >$bb_incdir/png_libs.h
echo 'hdefs["PNG_LIBS"] = nil' >>configure.lua
fi
if [ "${enable_micro}" = 'yes' ]
 then
ENABLE_MICRO="yes"
bb_o=$bb_incdir/enable_micro.h
echo '#ifndef ENABLE_MICRO' >$bb_o
echo "#define ENABLE_MICRO \"$ENABLE_MICRO\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"ENABLE_MICRO\"] = \"$ENABLE_MICRO\"" >>configure.lua
ENABLE_MICRO_LIBS="-L../micro -lag_micro_gui"
SUBDIR_micro="micro"
else
echo '#undef ENABLE_MICRO' >$bb_incdir/enable_micro.h
echo 'hdefs["ENABLE_MICRO"] = nil' >>configure.lua
ENABLE_MICRO_LIBS=""
SUBDIR_micro=""
fi
if [ "${enable_net}" != 'no' ]
 then
SUBDIR_net="net"
$ECHO_N 'checking for getaddrinfo()...'
$ECHO_N '# checking for getaddrinfo()...' >>config.log
# BEGIN getaddrinfo
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>

int
main(int argc, char *argv[])
{
	struct addrinfo hints, *res0;
	const char *s;
	int rv;

	hints.ai_family = PF_UNSPEC;
	hints.ai_socktype = SOCK_STREAM;
	hints.ai_flags = AI_PASSIVE;
	rv = getaddrinfo("hostname", "port", &hints, &res0);
	s = gai_strerror(rv);
	freeaddrinfo(res0);
	return (s != NULL);
}
EOT
echo >>config.log
echo '# C: HAVE_GETADDRINFO' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_GETADDRINFO=yes
bb_o=$bb_incdir/have_getaddrinfo.h
echo '#ifndef HAVE_GETADDRINFO' >$bb_o
echo "#define HAVE_GETADDRINFO \"$HAVE_GETADDRINFO\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_GETADDRINFO\"] = \"$HAVE_GETADDRINFO\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_GETADDRINFO=no
echo '#undef HAVE_GETADDRINFO' >$bb_incdir/have_getaddrinfo.h
echo 'hdefs["HAVE_GETADDRINFO"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
# END getaddrinfo
$ECHO_N 'checking for the SIOCGIFCONF interface...'
$ECHO_N '# checking for the SIOCGIFCONF interface...' >>config.log
# BEGIN siocgifconf
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/ioctl.h>
#include <sys/time.h>
#include <unistd.h>
#include <fcntl.h>
#include <netinet/in.h>
#include <net/if.h>
#include <netdb.h>
int
main(int argc, char *argv[])
{
	char buf[4096];
	struct ifconf conf;
	struct ifreq *ifr;
	int sock;
	if ((sock = socket(AF_INET, SOCK_DGRAM, 0)) == -1) {
		return (1);
	}
	conf.ifc_len = sizeof(buf);
	conf.ifc_buf = (caddr_t)buf;
	if (ioctl(sock, SIOCGIFCONF, &conf) < 0) {
		return (1);
	}
#if !defined(_SIZEOF_ADDR_IFREQ)
#define _SIZEOF_ADDR_IFREQ sizeof
#endif
	for (ifr = (struct ifreq *)buf;
	     (char *)ifr < &buf[conf.ifc_len];
	     ifr = (struct ifreq *)((char *)ifr + _SIZEOF_ADDR_IFREQ(*ifr))) {
		if (ifr->ifr_addr.sa_family == AF_INET)
			return (1);
	}
	close(sock);
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_SIOCGIFCONF' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_SIOCGIFCONF=yes
bb_o=$bb_incdir/have_siocgifconf.h
echo '#ifndef HAVE_SIOCGIFCONF' >$bb_o
echo "#define HAVE_SIOCGIFCONF \"$HAVE_SIOCGIFCONF\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_SIOCGIFCONF\"] = \"$HAVE_SIOCGIFCONF\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_SIOCGIFCONF=no
echo '#undef HAVE_SIOCGIFCONF' >$bb_incdir/have_siocgifconf.h
echo 'hdefs["HAVE_SIOCGIFCONF"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
# END siocgifconf
$ECHO_N 'checking for setsockopt()...'
$ECHO_N '# checking for setsockopt()...' >>config.log
# BEGIN sockopts
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <fcntl.h>
int
main(int argc, char *argv[])
{
	int fd = 0, rv;
	struct timeval tv;
	socklen_t tvLen = sizeof(tv);
	tv.tv_sec = 1; tv.tv_usec = 0;
	rv = setsockopt(fd, SOL_SOCKET, SO_SNDTIMEO, &tv, tvLen);
	return (rv != 0);
}
EOT
echo >>config.log
echo '# C: HAVE_SETSOCKOPT' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_SETSOCKOPT=yes
bb_o=$bb_incdir/have_setsockopt.h
echo '#ifndef HAVE_SETSOCKOPT' >$bb_o
echo "#define HAVE_SETSOCKOPT \"$HAVE_SETSOCKOPT\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_SETSOCKOPT\"] = \"$HAVE_SETSOCKOPT\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_SETSOCKOPT=no
echo '#undef HAVE_SETSOCKOPT' >$bb_incdir/have_setsockopt.h
echo 'hdefs["HAVE_SETSOCKOPT"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_SETSOCKOPT}" = "yes" ]; then
$ECHO_N 'checking for SO_OOBINLINE...'
$ECHO_N '# checking for SO_OOBINLINE...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <sys/types.h>
#include <sys/socket.h>
#include <fcntl.h>
int
main(int argc, char *argv[])
{
	int fd = 0, val = 1, rv;
	socklen_t valLen = sizeof(val);
	rv = setsockopt(fd, SOL_SOCKET, SO_OOBINLINE, &val, valLen);
	return (rv != 0);
}
EOT
echo >>config.log
echo '# C: HAVE_SO_OOBINLINE' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_SO_OOBINLINE=yes
bb_o=$bb_incdir/have_so_oobinline.h
echo '#ifndef HAVE_SO_OOBINLINE' >$bb_o
echo "#define HAVE_SO_OOBINLINE \"$HAVE_SO_OOBINLINE\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_SO_OOBINLINE\"] = \"$HAVE_SO_OOBINLINE\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_SO_OOBINLINE=no
echo '#undef HAVE_SO_OOBINLINE' >$bb_incdir/have_so_oobinline.h
echo 'hdefs["HAVE_SO_OOBINLINE"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
$ECHO_N 'checking for SO_REUSEPORT...'
$ECHO_N '# checking for SO_REUSEPORT...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <sys/types.h>
#include <sys/socket.h>
#include <fcntl.h>
int
main(int argc, char *argv[])
{
	int fd = 0, val = 1, rv;
	socklen_t valLen = sizeof(val);
	rv = setsockopt(fd, SOL_SOCKET, SO_REUSEPORT, &val, valLen);
	return (rv != 0);
}
EOT
echo >>config.log
echo '# C: HAVE_SO_REUSEPORT' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_SO_REUSEPORT=yes
bb_o=$bb_incdir/have_so_reuseport.h
echo '#ifndef HAVE_SO_REUSEPORT' >$bb_o
echo "#define HAVE_SO_REUSEPORT \"$HAVE_SO_REUSEPORT\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_SO_REUSEPORT\"] = \"$HAVE_SO_REUSEPORT\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_SO_REUSEPORT=no
echo '#undef HAVE_SO_REUSEPORT' >$bb_incdir/have_so_reuseport.h
echo 'hdefs["HAVE_SO_REUSEPORT"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
$ECHO_N 'checking for SO_TIMESTAMP...'
$ECHO_N '# checking for SO_TIMESTAMP...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <sys/types.h>
#include <sys/socket.h>
#include <fcntl.h>
int
main(int argc, char *argv[])
{
	int fd = 0, val = 1, rv;
	socklen_t valLen = sizeof(val);
	rv = setsockopt(fd, SOL_SOCKET, SO_TIMESTAMP, &val, valLen);
	return (rv != 0);
}
EOT
echo >>config.log
echo '# C: HAVE_SO_TIMESTAMP' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_SO_TIMESTAMP=yes
bb_o=$bb_incdir/have_so_timestamp.h
echo '#ifndef HAVE_SO_TIMESTAMP' >$bb_o
echo "#define HAVE_SO_TIMESTAMP \"$HAVE_SO_TIMESTAMP\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_SO_TIMESTAMP\"] = \"$HAVE_SO_TIMESTAMP\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_SO_TIMESTAMP=no
echo '#undef HAVE_SO_TIMESTAMP' >$bb_incdir/have_so_timestamp.h
echo 'hdefs["HAVE_SO_TIMESTAMP"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
$ECHO_N 'checking for SO_NOSIGPIPE...'
$ECHO_N '# checking for SO_NOSIGPIPE...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <sys/types.h>
#include <sys/socket.h>
#include <fcntl.h>
int
main(int argc, char *argv[])
{
	int fd = 0, val = 1, rv;
	socklen_t valLen = sizeof(val);
	rv = setsockopt(fd, SOL_SOCKET, SO_NOSIGPIPE, &val, valLen);
	return (rv != 0);
}
EOT
echo >>config.log
echo '# C: HAVE_SO_NOSIGPIPE' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_SO_NOSIGPIPE=yes
bb_o=$bb_incdir/have_so_nosigpipe.h
echo '#ifndef HAVE_SO_NOSIGPIPE' >$bb_o
echo "#define HAVE_SO_NOSIGPIPE \"$HAVE_SO_NOSIGPIPE\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_SO_NOSIGPIPE\"] = \"$HAVE_SO_NOSIGPIPE\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_SO_NOSIGPIPE=no
echo '#undef HAVE_SO_NOSIGPIPE' >$bb_incdir/have_so_nosigpipe.h
echo 'hdefs["HAVE_SO_NOSIGPIPE"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
$ECHO_N 'checking for SO_LINGER...'
$ECHO_N '# checking for SO_LINGER...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <sys/types.h>
#include <sys/socket.h>
#include <fcntl.h>
int
main(int argc, char *argv[])
{
	int fd = 0, rv;
	struct linger ling;
	socklen_t lingLen = sizeof(ling);
	ling.l_onoff = 1; ling.l_linger = 1;
	rv = setsockopt(fd, SOL_SOCKET, SO_LINGER, &ling, lingLen);
	return (rv != 0);
}
EOT
echo >>config.log
echo '# C: HAVE_SO_LINGER' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_SO_LINGER=yes
bb_o=$bb_incdir/have_so_linger.h
echo '#ifndef HAVE_SO_LINGER' >$bb_o
echo "#define HAVE_SO_LINGER \"$HAVE_SO_LINGER\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_SO_LINGER\"] = \"$HAVE_SO_LINGER\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_SO_LINGER=no
echo '#undef HAVE_SO_LINGER' >$bb_incdir/have_so_linger.h
echo 'hdefs["HAVE_SO_LINGER"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
$ECHO_N 'checking for SO_ACCEPTFILTER...'
$ECHO_N '# checking for SO_ACCEPTFILTER...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <sys/types.h>
#include <sys/socket.h>
#include <fcntl.h>
int
main(int argc, char *argv[])
{
	int fd = 0, rv;
	struct accept_filter_arg afa;
	socklen_t afaLen = sizeof(afa);
	afa.af_name[0] = '\0';
	afa.af_arg[0] = '\0';
	rv = setsockopt(fd, SOL_SOCKET, SO_ACCEPTFILTER, &afa, afaLen);
	return (rv != 0);
}
EOT
echo >>config.log
echo '# C: HAVE_SO_ACCEPTFILTER' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest$$ conftest$$.c 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_SO_ACCEPTFILTER=yes
bb_o=$bb_incdir/have_so_acceptfilter.h
echo '#ifndef HAVE_SO_ACCEPTFILTER' >$bb_o
echo "#define HAVE_SO_ACCEPTFILTER \"$HAVE_SO_ACCEPTFILTER\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_SO_ACCEPTFILTER\"] = \"$HAVE_SO_ACCEPTFILTER\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_SO_ACCEPTFILTER=no
echo '#undef HAVE_SO_ACCEPTFILTER' >$bb_incdir/have_so_acceptfilter.h
echo 'hdefs["HAVE_SO_ACCEPTFILTER"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
else
HAVE_SETSOCKOPT="no"
HAVE_SO_OOBINLINE="no"
HAVE_SO_REUSEPORT="no"
HAVE_SO_TIMESTAMP="no"
HAVE_SO_NOSIGPIPE="no"
HAVE_SO_LINGER="no"
HAVE_SO_ACCEPTFILTER="no"
echo '#undef HAVE_SETSOCKOPT' >$bb_incdir/have_setsockopt.h
echo 'hdefs["HAVE_SETSOCKOPT"] = nil' >>configure.lua
echo '#undef HAVE_SO_OOBINLINE' >$bb_incdir/have_so_oobinline.h
echo 'hdefs["HAVE_SO_OOBINLINE"] = nil' >>configure.lua
echo '#undef HAVE_SO_REUSEPORT' >$bb_incdir/have_so_reuseport.h
echo 'hdefs["HAVE_SO_REUSEPORT"] = nil' >>configure.lua
echo '#undef HAVE_SO_TIMESTAMP' >$bb_incdir/have_so_timestamp.h
echo 'hdefs["HAVE_SO_TIMESTAMP"] = nil' >>configure.lua
echo '#undef HAVE_SO_NOSIGPIPE' >$bb_incdir/have_so_nosigpipe.h
echo 'hdefs["HAVE_SO_NOSIGPIPE"] = nil' >>configure.lua
echo '#undef HAVE_SO_LINGER' >$bb_incdir/have_so_linger.h
echo 'hdefs["HAVE_SO_LINGER"] = nil' >>configure.lua
echo '#undef HAVE_SO_ACCEPTFILTER' >$bb_incdir/have_so_acceptfilter.h
echo 'hdefs["HAVE_SO_ACCEPTFILTER"] = nil' >>configure.lua
fi
# END sockopts
$ECHO_N 'checking for WinSock...'
$ECHO_N '# checking for WinSock...' >>config.log
# BEGIN winsock
echo 'not checking'
echo '# not checking' >>config.log
HAVE_WINSOCK1="no"
HAVE_WINSOCK2="no"
echo '#undef HAVE_WINSOCK1' >$bb_incdir/have_winsock1.h
echo 'hdefs["HAVE_WINSOCK1"] = nil' >>configure.lua
echo '#undef HAVE_WINSOCK2' >$bb_incdir/have_winsock2.h
echo 'hdefs["HAVE_WINSOCK2"] = nil' >>configure.lua
# END winsock
HAVE_NETWORK="yes"
AG_NETWORK="yes"
bb_o=$bb_incdir/ag_network.h
echo '#ifndef AG_NETWORK' >$bb_o
echo "#define AG_NETWORK \"$AG_NETWORK\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"AG_NETWORK\"] = \"$AG_NETWORK\"" >>configure.lua
else
SUBDIR_net=""
echo 'not enabling getaddrinfo()'
echo '# not enabling getaddrinfo()' >>config.log
HAVE_GETADDRINFO="no"
echo '#undef HAVE_GETADDRINFO' >$bb_incdir/have_getaddrinfo.h
echo 'hdefs["HAVE_GETADDRINFO"] = nil' >>configure.lua
echo 'not enabling the SIOCGIFCONF interface'
echo '# not enabling the SIOCGIFCONF interface' >>config.log
HAVE_SIOCGIFCONF="no"
echo '#undef HAVE_SIOCGIFCONF' >$bb_incdir/have_siocgifconf.h
echo 'hdefs["HAVE_SIOCGIFCONF"] = nil' >>configure.lua
echo 'not enabling setsockopt()'
echo '# not enabling setsockopt()' >>config.log
HAVE_SETSOCKOPT="no"
HAVE_SO_OOBINLINE="no"
HAVE_SO_REUSEPORT="no"
HAVE_SO_TIMESTAMP="no"
HAVE_SO_NOSIGPIPE="no"
HAVE_SO_LINGER="no"
HAVE_SO_ACCEPTFILTER="no"
echo '#undef HAVE_SETSOCKOPT' >$bb_incdir/have_setsockopt.h
echo 'hdefs["HAVE_SETSOCKOPT"] = nil' >>configure.lua
echo '#undef HAVE_SO_OOBINLINE' >$bb_incdir/have_so_oobinline.h
echo 'hdefs["HAVE_SO_OOBINLINE"] = nil' >>configure.lua
echo '#undef HAVE_SO_REUSEPORT' >$bb_incdir/have_so_reuseport.h
echo 'hdefs["HAVE_SO_REUSEPORT"] = nil' >>configure.lua
echo '#undef HAVE_SO_TIMESTAMP' >$bb_incdir/have_so_timestamp.h
echo 'hdefs["HAVE_SO_TIMESTAMP"] = nil' >>configure.lua
echo '#undef HAVE_SO_NOSIGPIPE' >$bb_incdir/have_so_nosigpipe.h
echo 'hdefs["HAVE_SO_NOSIGPIPE"] = nil' >>configure.lua
echo '#undef HAVE_SO_LINGER' >$bb_incdir/have_so_linger.h
echo 'hdefs["HAVE_SO_LINGER"] = nil' >>configure.lua
echo '#undef HAVE_SO_ACCEPTFILTER' >$bb_incdir/have_so_acceptfilter.h
echo 'hdefs["HAVE_SO_ACCEPTFILTER"] = nil' >>configure.lua
echo 'not enabling WinSock'
echo '# not enabling WinSock' >>config.log
HAVE_WINSOCK1="no"
HAVE_WINSOCK2="no"
echo '#undef HAVE_WINSOCK1' >$bb_incdir/have_winsock1.h
echo 'hdefs["HAVE_WINSOCK1"] = nil' >>configure.lua
echo '#undef HAVE_WINSOCK2' >$bb_incdir/have_winsock2.h
echo 'hdefs["HAVE_WINSOCK2"] = nil' >>configure.lua
HAVE_NETWORK="no"
echo '#undef AG_NETWORK' >$bb_incdir/ag_network.h
echo 'hdefs["AG_NETWORK"] = nil' >>configure.lua
fi
if [ "${enable_web}" = 'yes' ]
 then
$ECHO_N 'checking for zlib...'
$ECHO_N '# checking for zlib...' >>config.log
# BEGIN zlib(0 ${prefix_z})
ZLIB_CFLAGS=""
ZLIB_LIBS=""
if [ "${prefix_z}" != "" ]; then
ZLIB_CFLAGS="-I${prefix_z}/include"
ZLIB_LIBS="-L${prefix_z}/lib -lz"
else
if [ -f "/usr/local/include/zlib.h" ]; then
ZLIB_CFLAGS="-I/usr/local/include"
ZLIB_LIBS="-L/usr/local/lib -lz"
fi
if [ -f "/usr/include/zlib.h" ]; then
ZLIB_CFLAGS="-I/usr/include"
ZLIB_LIBS="-L/usr/lib -lz"
fi
fi
if [ "${ZLIB_LIBS}" != "" ]; then
echo 'ok'
echo '# ok' >>config.log
$ECHO_N 'checking whether zlib works...'
$ECHO_N '# checking whether zlib works...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <stdio.h>
#include <string.h>
#include <zlib.h>

int main(int argc, char *argv[]) {
	z_stream strm;
	strm.zalloc = Z_NULL;
	strm.zfree = Z_NULL;
	strm.opaque = Z_NULL;
	return deflateInit(&strm, 0);
}
EOT
echo >>config.log
echo '# C: HAVE_ZLIB' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${ZLIB_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${ZLIB_LIBS} 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${ZLIB_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${ZLIB_LIBS} 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_ZLIB=yes
bb_o=$bb_incdir/have_zlib.h
echo '#ifndef HAVE_ZLIB' >$bb_o
echo "#define HAVE_ZLIB \"$HAVE_ZLIB\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_ZLIB\"] = \"$HAVE_ZLIB\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_ZLIB=no
echo '#undef HAVE_ZLIB' >$bb_incdir/have_zlib.h
echo 'hdefs["HAVE_ZLIB"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_ZLIB}" = "yes" ]; then
bb_o=$bb_incdir/zlib_cflags.h
echo '#ifndef ZLIB_CFLAGS' >$bb_o
echo "#define ZLIB_CFLAGS \"$ZLIB_CFLAGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"ZLIB_CFLAGS\"] = \"$ZLIB_CFLAGS\"" >>configure.lua
bb_o=$bb_incdir/zlib_libs.h
echo '#ifndef ZLIB_LIBS' >$bb_o
echo "#define ZLIB_LIBS \"$ZLIB_LIBS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"ZLIB_LIBS\"] = \"$ZLIB_LIBS\"" >>configure.lua
else
echo '#undef ZLIB_CFLAGS' >$bb_incdir/zlib_cflags.h
echo 'hdefs["ZLIB_CFLAGS"] = nil' >>configure.lua
ZLIB_CFLAGS=""
echo '#undef ZLIB_LIBS' >$bb_incdir/zlib_libs.h
echo 'hdefs["ZLIB_LIBS"] = nil' >>configure.lua
ZLIB_LIBS=""
fi
else
echo 'no'
echo '# no' >>config.log
HAVE_ZLIB="no"
ZLIB_CFLAGS=""
ZLIB_LIBS=""
echo '#undef HAVE_ZLIB' >$bb_incdir/have_zlib.h
echo 'hdefs["HAVE_ZLIB"] = nil' >>configure.lua
echo '#undef ZLIB_CFLAGS' >$bb_incdir/zlib_cflags.h
echo 'hdefs["ZLIB_CFLAGS"] = nil' >>configure.lua
echo '#undef ZLIB_LIBS' >$bb_incdir/zlib_libs.h
echo 'hdefs["ZLIB_LIBS"] = nil' >>configure.lua
fi
# END zlib
$ECHO_N 'checking for <sys/uio.h> (HAVE_SYS_UIO_H)...'
$ECHO_N '# checking for <sys/uio.h> (HAVE_SYS_UIO_H)...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <sys/uio.h>
int main (int argc, char *argv[]) { return (0); }
EOT
echo >>config.log
echo '# C: HAVE_SYS_UIO_H' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest$$ conftest$$.c  2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest$$ conftest$$.c  2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_SYS_UIO_H=yes
bb_o=$bb_incdir/have_sys_uio_h.h
echo '#ifndef HAVE_SYS_UIO_H' >$bb_o
echo "#define HAVE_SYS_UIO_H \"$HAVE_SYS_UIO_H\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_SYS_UIO_H\"] = \"$HAVE_SYS_UIO_H\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_SYS_UIO_H=no
echo '#undef HAVE_SYS_UIO_H' >$bb_incdir/have_sys_uio_h.h
echo 'hdefs["HAVE_SYS_UIO_H"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
$ECHO_N 'checking for <sys/param.h> (HAVE_SYS_PARAM_H)...'
$ECHO_N '# checking for <sys/param.h> (HAVE_SYS_PARAM_H)...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <sys/param.h>
int main (int argc, char *argv[]) { return (0); }
EOT
echo >>config.log
echo '# C: HAVE_SYS_PARAM_H' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest$$ conftest$$.c  2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest$$ conftest$$.c  2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_SYS_PARAM_H=yes
bb_o=$bb_incdir/have_sys_param_h.h
echo '#ifndef HAVE_SYS_PARAM_H' >$bb_o
echo "#define HAVE_SYS_PARAM_H \"$HAVE_SYS_PARAM_H\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_SYS_PARAM_H\"] = \"$HAVE_SYS_PARAM_H\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_SYS_PARAM_H=no
echo '#undef HAVE_SYS_PARAM_H' >$bb_incdir/have_sys_param_h.h
echo 'hdefs["HAVE_SYS_PARAM_H"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
HAVE_WEB="yes"
AG_WEB="yes"
bb_o=$bb_incdir/ag_web.h
echo '#ifndef AG_WEB' >$bb_o
echo "#define AG_WEB \"$AG_WEB\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"AG_WEB\"] = \"$AG_WEB\"" >>configure.lua
else
echo 'not enabling zlib'
echo '# not enabling zlib' >>config.log
HAVE_ZLIB="no"
ZLIB_CFLAGS=""
ZLIB_LIBS=""
echo '#undef HAVE_ZLIB' >$bb_incdir/have_zlib.h
echo 'hdefs["HAVE_ZLIB"] = nil' >>configure.lua
echo '#undef ZLIB_CFLAGS' >$bb_incdir/zlib_cflags.h
echo 'hdefs["ZLIB_CFLAGS"] = nil' >>configure.lua
echo '#undef ZLIB_LIBS' >$bb_incdir/zlib_libs.h
echo 'hdefs["ZLIB_LIBS"] = nil' >>configure.lua
echo '#undef HAVE_SYS_UIO_H' >$bb_incdir/have_sys_uio_h.h
echo 'hdefs["HAVE_SYS_UIO_H"] = nil' >>configure.lua
echo '#undef HAVE_SYS_PARAM_H' >$bb_incdir/have_sys_param_h.h
echo 'hdefs["HAVE_SYS_PARAM_H"] = nil' >>configure.lua
HAVE_WEB="no"
echo '#undef AG_WEB' >$bb_incdir/ag_web.h
echo 'hdefs["AG_WEB"] = nil' >>configure.lua
fi
if [ "${with_db4}" = 'yes' ]
 then
$ECHO_N 'checking for Berkeley DB 4.x...'
$ECHO_N '# checking for Berkeley DB 4.x...' >>config.log
# BEGIN db4(0 ${prefix_db4})
DB4_CFLAGS=""
DB4_LIBS=""
DB4_VERSION=""
DB4_VERSION_J=""
for path in ${prefix_db4} /usr/local /usr /opt; do
for dbver in 4.8 4.7 4.6 4.5 4.4 4.3 4.2 4; do
DB4_VERSION_J=`echo "${dbver}" | sed "s/\.//"`
if [ -e "${path}/include/db$dbver" ]; then
DB4_CFLAGS="-I${path}/include/db${dbver} -I${path}/include"
DB4_VERSION="${dbver}"
break
else
if [ -e "${path}/include/db${DB4_VERSION_J}" ]; then
DB4_CFLAGS="-I${path}/include/db${DB4_VERSION_J} -I${path}/include"
DB4_VERSION="${dbver}"
break
fi
fi
done
done
if [ "${DB4_VERSION}" != "" ]; then
if [ "${prefix_db4}" != "" ]; then
echo "yes ($DB4_VERSION in ${prefix_db4})"
echo "# yes ($DB4_VERSION in ${prefix_db4})" >>config.log
else
echo "yes ($DB4_VERSION)"
echo "# yes ($DB4_VERSION)" >>config.log
fi
if [ "${MK_VERSION_OK}" = "no" ]; then
echo '*'
echo '# *' >>config.log
echo "* Minimum required version is 0 (found $DB4_VERSION)"
echo "# * Minimum required version is 0 (found $DB4_VERSION)" >>config.log
echo '*'
echo '# *' >>config.log
fi
else
if [ "${prefix_db4}" != "" ]; then
echo "no (not in ${prefix_db4})"
echo "# no (not in ${prefix_db4})" >>config.log
else
echo 'no'
echo '# no' >>config.log
fi
MK_VERSION_OK="no"
fi
if [ "${MK_VERSION_OK}" = "yes" ]; then
if [ -e "${path}/lib/db${DB4_VERSION_J}" ]; then
DB4_LIBS="-L${path}/lib/db${DB4_VERSION_J} -ldb"
else
DB4_LIBS="-L${path}/lib -ldb-${DB4_VERSION}"
fi
$ECHO_N 'checking whether DB4 works...'
$ECHO_N '# checking whether DB4 works...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <db.h>
#if DB_VERSION_MAJOR != 4
#error version
#endif
int main(int argc, char *argv[]) {
	DB *db;
	db_create(&db, NULL, 0);
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_DB4' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${DB4_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${DB4_LIBS} 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${DB4_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${DB4_LIBS} 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_DB4=yes
bb_o=$bb_incdir/have_db4.h
echo '#ifndef HAVE_DB4' >$bb_o
echo "#define HAVE_DB4 \"$HAVE_DB4\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_DB4\"] = \"$HAVE_DB4\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_DB4=no
echo '#undef HAVE_DB4' >$bb_incdir/have_db4.h
echo 'hdefs["HAVE_DB4"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_DB4}" = "yes" ]; then
bb_o=$bb_incdir/db4_cflags.h
echo '#ifndef DB4_CFLAGS' >$bb_o
echo "#define DB4_CFLAGS \"$DB4_CFLAGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"DB4_CFLAGS\"] = \"$DB4_CFLAGS\"" >>configure.lua
bb_o=$bb_incdir/db4_libs.h
echo '#ifndef DB4_LIBS' >$bb_o
echo "#define DB4_LIBS \"$DB4_LIBS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"DB4_LIBS\"] = \"$DB4_LIBS\"" >>configure.lua
else
echo '#undef DB4_CFLAGS' >$bb_incdir/db4_cflags.h
echo 'hdefs["DB4_CFLAGS"] = nil' >>configure.lua
DB4_CFLAGS=""
echo '#undef DB4_LIBS' >$bb_incdir/db4_libs.h
echo 'hdefs["DB4_LIBS"] = nil' >>configure.lua
DB4_LIBS=""
fi
else
HAVE_DB4="no"
DB4_CFLAGS=""
DB4_LIBS=""
echo '#undef HAVE_DB4' >$bb_incdir/have_db4.h
echo 'hdefs["HAVE_DB4"] = nil' >>configure.lua
echo '#undef DB4_CFLAGS' >$bb_incdir/db4_cflags.h
echo 'hdefs["DB4_CFLAGS"] = nil' >>configure.lua
echo '#undef DB4_LIBS' >$bb_incdir/db4_libs.h
echo 'hdefs["DB4_LIBS"] = nil' >>configure.lua
fi
# END db4
	if [ "${HAVE_DB4}" != 'yes' ]
 then
		if [ "${with_db4}" = 'yes' ]
 then
			echo "*"
			echo "* --with-db4 requested and DB4 was not found"
			echo "* (did you mean --with-db5?)"
			echo "*"
			exit 1
		else
echo 'not enabling Berkeley DB 4.x'
echo '# not enabling Berkeley DB 4.x' >>config.log
HAVE_DB4="no"
DB4_CFLAGS=""
DB4_LIBS=""
echo '#undef HAVE_DB4' >$bb_incdir/have_db4.h
echo 'hdefs["HAVE_DB4"] = nil' >>configure.lua
echo '#undef DB4_CFLAGS' >$bb_incdir/db4_cflags.h
echo 'hdefs["DB4_CFLAGS"] = nil' >>configure.lua
echo '#undef DB4_LIBS' >$bb_incdir/db4_libs.h
echo 'hdefs["DB4_LIBS"] = nil' >>configure.lua
		fi
	fi
else
echo 'not enabling Berkeley DB 4.x'
echo '# not enabling Berkeley DB 4.x' >>config.log
HAVE_DB4="no"
DB4_CFLAGS=""
DB4_LIBS=""
echo '#undef HAVE_DB4' >$bb_incdir/have_db4.h
echo 'hdefs["HAVE_DB4"] = nil' >>configure.lua
echo '#undef DB4_CFLAGS' >$bb_incdir/db4_cflags.h
echo 'hdefs["DB4_CFLAGS"] = nil' >>configure.lua
echo '#undef DB4_LIBS' >$bb_incdir/db4_libs.h
echo 'hdefs["DB4_LIBS"] = nil' >>configure.lua
fi
if [ "${with_db5}" = 'yes' ]
 then
$ECHO_N 'checking for Berkeley DB 5.x...'
$ECHO_N '# checking for Berkeley DB 5.x...' >>config.log
# BEGIN db5(0 ${prefix_db5})
DB5_CFLAGS=""
DB5_LIBS=""
DB5_VERSION=""
DB5_VERSION_J=""
for path in ${prefix_db5} /usr/local /usr /opt; do
for dbver in 5.0 5.1 5.2 5.3 5; do
DB5_VERSION_J=`echo "${dbver}" | sed "s/\.//"`
if [ -e "${path}/lib/db5/libdb-$dbver.so" ]; then
if [ -e "${path}/include/db${DB5_VERSION_J}" ]; then
DB5_CFLAGS="-I${path}/include/db${DB5_VERSION_J} -I${path}/include"
else
DB5_CFLAGS="-I${path}/include/db5 -I${path}/include"
fi
DB5_LIBS="-L${path}/lib/db5 -ldb-$dbver"
DB5_VERSION="${dbver}"
break
fi
done
done
if [ "${DB5_VERSION}" != "" ]; then
if [ "${prefix_db5}" != "" ]; then
echo "yes ($DB5_VERSION in ${prefix_db5})"
echo "# yes ($DB5_VERSION in ${prefix_db5})" >>config.log
else
echo "yes ($DB5_VERSION)"
echo "# yes ($DB5_VERSION)" >>config.log
fi
if [ "${MK_VERSION_OK}" = "no" ]; then
echo '*'
echo '# *' >>config.log
echo "* Minimum required version is 0 (found $DB5_VERSION)"
echo "# * Minimum required version is 0 (found $DB5_VERSION)" >>config.log
echo '*'
echo '# *' >>config.log
fi
else
if [ "${prefix_db5}" != "" ]; then
echo "no (not in ${prefix_db5})"
echo "# no (not in ${prefix_db5})" >>config.log
else
echo 'no'
echo '# no' >>config.log
fi
MK_VERSION_OK="no"
fi
if [ "${MK_VERSION_OK}" = "yes" ]; then
$ECHO_N 'checking whether DB5 works...'
$ECHO_N '# checking whether DB5 works...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <db5/db.h>
#if DB_VERSION_MAJOR != 5
#error version
#endif
int main(int argc, char *argv[]) {
	DB *db;
	db_create(&db, NULL, 0);
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_DB5' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${DB5_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${DB5_LIBS} 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${DB5_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${DB5_LIBS} 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_DB5=yes
bb_o=$bb_incdir/have_db5.h
echo '#ifndef HAVE_DB5' >$bb_o
echo "#define HAVE_DB5 \"$HAVE_DB5\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_DB5\"] = \"$HAVE_DB5\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_DB5=no
echo '#undef HAVE_DB5' >$bb_incdir/have_db5.h
echo 'hdefs["HAVE_DB5"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_DB5}" = "yes" ]; then
bb_o=$bb_incdir/db5_cflags.h
echo '#ifndef DB5_CFLAGS' >$bb_o
echo "#define DB5_CFLAGS \"$DB5_CFLAGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"DB5_CFLAGS\"] = \"$DB5_CFLAGS\"" >>configure.lua
bb_o=$bb_incdir/db5_libs.h
echo '#ifndef DB5_LIBS' >$bb_o
echo "#define DB5_LIBS \"$DB5_LIBS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"DB5_LIBS\"] = \"$DB5_LIBS\"" >>configure.lua
else
echo '#undef DB5_CFLAGS' >$bb_incdir/db5_cflags.h
echo 'hdefs["DB5_CFLAGS"] = nil' >>configure.lua
DB5_CFLAGS=""
echo '#undef DB5_LIBS' >$bb_incdir/db5_libs.h
echo 'hdefs["DB5_LIBS"] = nil' >>configure.lua
DB5_LIBS=""
fi
else
echo "no"
echo "# no" >>config.log
HAVE_DB5="no"
DB5_CFLAGS=""
DB5_LIBS=""
echo '#undef HAVE_DB5' >$bb_incdir/have_db5.h
echo 'hdefs["HAVE_DB5"] = nil' >>configure.lua
echo '#undef DB5_CFLAGS' >$bb_incdir/db5_cflags.h
echo 'hdefs["DB5_CFLAGS"] = nil' >>configure.lua
echo '#undef DB5_LIBS' >$bb_incdir/db5_libs.h
echo 'hdefs["DB5_LIBS"] = nil' >>configure.lua
fi
# END db5
	if [ "${HAVE_DB5}" != 'yes' ]
 then
		if [ "${with_db5}" = 'yes' ]
 then
			echo "*"
			echo "* --with-db5 requested and DB5 was not found"
			echo "* (did you mean --with-db4?)"
			echo "*"
			exit 1
		else
echo 'not enabling Berkeley DB 5.x'
echo '# not enabling Berkeley DB 5.x' >>config.log
HAVE_DB5="no"
DB5_CFLAGS=""
DB5_LIBS=""
echo '#undef HAVE_DB5' >$bb_incdir/have_db5.h
echo 'hdefs["HAVE_DB5"] = nil' >>configure.lua
echo '#undef DB5_CFLAGS' >$bb_incdir/db5_cflags.h
echo 'hdefs["DB5_CFLAGS"] = nil' >>configure.lua
echo '#undef DB5_LIBS' >$bb_incdir/db5_libs.h
echo 'hdefs["DB5_LIBS"] = nil' >>configure.lua
		fi
	fi
else
echo 'not enabling Berkeley DB 5.x'
echo '# not enabling Berkeley DB 5.x' >>config.log
HAVE_DB5="no"
DB5_CFLAGS=""
DB5_LIBS=""
echo '#undef HAVE_DB5' >$bb_incdir/have_db5.h
echo 'hdefs["HAVE_DB5"] = nil' >>configure.lua
echo '#undef DB5_CFLAGS' >$bb_incdir/db5_cflags.h
echo 'hdefs["DB5_CFLAGS"] = nil' >>configure.lua
echo '#undef DB5_LIBS' >$bb_incdir/db5_libs.h
echo 'hdefs["DB5_LIBS"] = nil' >>configure.lua
fi
if [ "${with_mysql}" = 'yes' ]
 then
$ECHO_N 'checking for MySQL...'
$ECHO_N '# checking for MySQL...' >>config.log
# BEGIN mysql(5.5.8 ${prefix_mysql})
MK_EXEC_FOUND=No
MK_EXEC_UNIQUE=No
MK_EXEC_FOUND_PATH=No
MYSQL_VERSION=
MYSQL_VERSION=
bb_save_IFS=$IFS
IFS=$PATH_SEPARATOR
for path in $PATH; do
if [ -e "${path}/mysql_config" ]; then
if [ "${MK_EXEC_FOUND}" = "Yes" ]; then
echo "yes."
echo "# yes." >>config.log
if [ "${MK_EXEC_FOUND_PATH}" != "${path}/mysql_config.exe" ]; then
echo "* WARNING: Multiple mysql_config in PATH (using ${MK_EXEC_FOUND_PATH})"
echo "# * WARNING: Multiple mysql_config in PATH (using ${MK_EXEC_FOUND_PATH})" >>config.log
fi
break
fi
MYSQL_VERSION=`${path}/mysql_config --version`
MK_EXEC_FOUND=Yes
MK_EXEC_FOUND_PATH=${path}/mysql_config
elif [ -e "${path}/mysql_config.exe" ]; then
if [ "${MK_EXEC_FOUND}" = "Yes" ]; then
echo "yes."
echo "# yes." >>config.log
if [ "${MK_EXEC_FOUND_PATH}" != "${path}/mysql_config" ]; then
echo "* WARNING: Multiple mysql_config in PATH (using ${MK_EXEC_FOUND_PATH})"
echo "# * WARNING: Multiple mysql_config in PATH (using ${MK_EXEC_FOUND_PATH})" >>config.log
fi
break
fi
MYSQL_VERSION=`${path}/mysql_config.exe --version`
MK_EXEC_FOUND=Yes
MK_EXEC_FOUND_PATH=${path}/mysql_config.exe
fi
done
IFS=$bb_save_IFS
if [ "${MYSQL_VERSION}" != "" ]; then
if [ "${prefix_mysql}" != "" ]; then
echo "yes ($MYSQL_VERSION in ${prefix_mysql})"
echo "# yes ($MYSQL_VERSION in ${prefix_mysql})" >>config.log
else
echo "yes ($MYSQL_VERSION)"
echo "# yes ($MYSQL_VERSION)" >>config.log
fi
MK_VERSION_MAJOR=`echo "$MYSQL_VERSION" |sed 's/\([0-9]*\).\([0-9]*\).\([0-9]*\).*/\1/'`;
MK_VERSION_MINOR=`echo "$MYSQL_VERSION" |sed 's/\([0-9]*\).\([0-9]*\).\([0-9]*\).*/\2/'`;
MK_VERSION_MICRO=`echo "$MYSQL_VERSION" |sed 's/\([0-9]*\).\([0-9]*\).\([0-9]*\).*/\3/'`;
MK_VERSION_OK=no
if [ $MK_VERSION_MAJOR -gt 5 ]; then
MK_VERSION_OK=yes
elif [ $MK_VERSION_MAJOR -eq 5 ]; then
if [ "$MK_VERSION_MINOR" = '' ]; then
MK_VERSION_OK=yes
else
if [ $MK_VERSION_MINOR -gt 5 ]; then
MK_VERSION_OK=yes
elif [ $MK_VERSION_MINOR -eq 5 ]; then
if [ "$MK_VERSION_MICRO" = '' ]; then
MK_VERSION_OK=yes
else
if [ $MK_VERSION_MICRO -ge 8 ]; then
MK_VERSION_OK=yes
fi
fi
fi
fi
fi
if [ "${MK_VERSION_OK}" = "no" ]; then
echo '*'
echo '# *' >>config.log
echo "* Minimum required version is 5.5.8 (found $MYSQL_VERSION)"
echo "# * Minimum required version is 5.5.8 (found $MYSQL_VERSION)" >>config.log
echo '*'
echo '# *' >>config.log
fi
else
if [ "${prefix_mysql}" != "" ]; then
echo "no (not in ${prefix_mysql})"
echo "# no (not in ${prefix_mysql})" >>config.log
else
echo 'no'
echo '# no' >>config.log
fi
MK_VERSION_OK="no"
fi
if [ "${MK_VERSION_OK}" = "yes" ]; then
$ECHO_N 'checking whether MySQL works...'
$ECHO_N '# checking whether MySQL works...' >>config.log
MYSQL_CFLAGS=
bb_save_IFS=$IFS
IFS=$PATH_SEPARATOR
for path in $PATH; do
if [ -e "${path}/mysql_config" ]; then
MYSQL_CFLAGS=`${path}/mysql_config --cflags`
MK_EXEC_FOUND=Yes
break
elif [ -e "${path}/mysql_config.exe" ]; then
MYSQL_CFLAGS=`${path}/mysql_config.exe --cflags`
MK_EXEC_FOUND=Yes
break
fi
done
IFS=$bb_save_IFS
MYSQL_LIBS=
bb_save_IFS=$IFS
IFS=$PATH_SEPARATOR
for path in $PATH; do
if [ -e "${path}/mysql_config" ]; then
MYSQL_LIBS=`${path}/mysql_config --libs`
MK_EXEC_FOUND=Yes
break
elif [ -e "${path}/mysql_config.exe" ]; then
MYSQL_LIBS=`${path}/mysql_config.exe --libs`
MK_EXEC_FOUND=Yes
break
fi
done
IFS=$bb_save_IFS
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <mysql.h>
#include <string.h>

int
main(int argc, char *argv[])
{
	MYSQL *my = mysql_init(NULL);
	if (my != NULL) { mysql_close(my); }
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_MYSQL' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${MYSQL_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${MYSQL_LIBS} 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${MYSQL_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${MYSQL_LIBS} 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_MYSQL=yes
bb_o=$bb_incdir/have_mysql.h
echo '#ifndef HAVE_MYSQL' >$bb_o
echo "#define HAVE_MYSQL \"$HAVE_MYSQL\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_MYSQL\"] = \"$HAVE_MYSQL\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_MYSQL=no
echo '#undef HAVE_MYSQL' >$bb_incdir/have_mysql.h
echo 'hdefs["HAVE_MYSQL"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_MYSQL}" = "yes" ]; then
bb_o=$bb_incdir/mysql_cflags.h
echo '#ifndef MYSQL_CFLAGS' >$bb_o
echo "#define MYSQL_CFLAGS \"$MYSQL_CFLAGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"MYSQL_CFLAGS\"] = \"$MYSQL_CFLAGS\"" >>configure.lua
bb_o=$bb_incdir/mysql_libs.h
echo '#ifndef MYSQL_LIBS' >$bb_o
echo "#define MYSQL_LIBS \"$MYSQL_LIBS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"MYSQL_LIBS\"] = \"$MYSQL_LIBS\"" >>configure.lua
else
echo '#undef MYSQL_CFLAGS' >$bb_incdir/mysql_cflags.h
echo 'hdefs["MYSQL_CFLAGS"] = nil' >>configure.lua
MYSQL_CFLAGS=""
echo '#undef MYSQL_LIBS' >$bb_incdir/mysql_libs.h
echo 'hdefs["MYSQL_LIBS"] = nil' >>configure.lua
MYSQL_LIBS=""
fi
else
HAVE_MYSQL="no"
MYSQL_CFLAGS=""
MYSQL_LIBS=""
echo '#undef HAVE_MYSQL' >$bb_incdir/have_mysql.h
echo 'hdefs["HAVE_MYSQL"] = nil' >>configure.lua
echo '#undef MYSQL_CFLAGS' >$bb_incdir/mysql_cflags.h
echo 'hdefs["MYSQL_CFLAGS"] = nil' >>configure.lua
echo '#undef MYSQL_LIBS' >$bb_incdir/mysql_libs.h
echo 'hdefs["MYSQL_LIBS"] = nil' >>configure.lua
fi
# END mysql
	if [ "${HAVE_MYSQL}" != 'yes' ]
 then
		if [ "${with_mysql}" = 'yes' ]
 then
			echo "*"
			echo "* --with-mysql was requested, but libmysqlclient"
			echo "* was not found."
			echo "*"
			exit 1
		fi
echo 'not enabling MySQL'
echo '# not enabling MySQL' >>config.log
HAVE_MYSQL="no"
MYSQL_CFLAGS=""
MYSQL_LIBS=""
echo '#undef HAVE_MYSQL' >$bb_incdir/have_mysql.h
echo 'hdefs["HAVE_MYSQL"] = nil' >>configure.lua
echo '#undef MYSQL_CFLAGS' >$bb_incdir/mysql_cflags.h
echo 'hdefs["MYSQL_CFLAGS"] = nil' >>configure.lua
echo '#undef MYSQL_LIBS' >$bb_incdir/mysql_libs.h
echo 'hdefs["MYSQL_LIBS"] = nil' >>configure.lua
	fi
else
echo 'not enabling MySQL'
echo '# not enabling MySQL' >>config.log
HAVE_MYSQL="no"
MYSQL_CFLAGS=""
MYSQL_LIBS=""
echo '#undef HAVE_MYSQL' >$bb_incdir/have_mysql.h
echo 'hdefs["HAVE_MYSQL"] = nil' >>configure.lua
echo '#undef MYSQL_CFLAGS' >$bb_incdir/mysql_cflags.h
echo 'hdefs["MYSQL_CFLAGS"] = nil' >>configure.lua
echo '#undef MYSQL_LIBS' >$bb_incdir/mysql_libs.h
echo 'hdefs["MYSQL_LIBS"] = nil' >>configure.lua
fi
if [ "${enable_threads}" != 'no' ]
 then
$ECHO_N 'checking for POSIX threads...'
$ECHO_N '# checking for POSIX threads...' >>config.log
# BEGIN pthreads(0 ${prefix_pthreads})
if [ "${prefix_pthreads}" != "" ]; then
PTHREADS_CFLAGS="-I${prefix_pthreads}/include"
PTHREADS_LIBS="-L${prefix_pthreads}/lib -lpthread"
else
PTHREADS_CFLAGS=""
PTHREADS_LIBS="-lpthread"
fi
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <pthread.h>
#include <signal.h>

static void *start_routine(void *arg)
{
	return (NULL);
}
int main(int argc, char *argv[])
{
	pthread_mutex_t mutex;
	pthread_t thread;
	pthread_mutex_init(&mutex, NULL);
	pthread_mutex_lock(&mutex);
	pthread_mutex_unlock(&mutex);
	pthread_mutex_destroy(&mutex);
	pthread_create(&thread, NULL, start_routine, NULL);
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_PTHREADS' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${PTHREADS_LIBS} 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${PTHREADS_LIBS} 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_PTHREADS=yes
bb_o=$bb_incdir/have_pthreads.h
echo '#ifndef HAVE_PTHREADS' >$bb_o
echo "#define HAVE_PTHREADS \"$HAVE_PTHREADS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_PTHREADS\"] = \"$HAVE_PTHREADS\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_PTHREADS=no
echo '#undef HAVE_PTHREADS' >$bb_incdir/have_pthreads.h
echo 'hdefs["HAVE_PTHREADS"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_PTHREADS}" = "yes" ]; then
CFLAGS="${CFLAGS} ${PTHREADS_CFLAGS}"
bb_o=$bb_incdir/pthreads_cflags.h
echo '#ifndef PTHREADS_CFLAGS' >$bb_o
echo "#define PTHREADS_CFLAGS \"$PTHREADS_CFLAGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"PTHREADS_CFLAGS\"] = \"$PTHREADS_CFLAGS\"" >>configure.lua
bb_o=$bb_incdir/pthreads_libs.h
echo '#ifndef PTHREADS_LIBS' >$bb_o
echo "#define PTHREADS_LIBS \"$PTHREADS_LIBS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"PTHREADS_LIBS\"] = \"$PTHREADS_LIBS\"" >>configure.lua
else
$ECHO_N 'checking for -pthread...'
$ECHO_N '# checking for -pthread...' >>config.log
PTHREADS_LIBS="-pthread"
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <pthread.h>
#include <signal.h>

static void *start_routine(void *arg)
{
	return (NULL);
}
int main(int argc, char *argv[])
{
	pthread_mutex_t mutex;
	pthread_t thread;
	pthread_mutex_init(&mutex, NULL);
	pthread_mutex_lock(&mutex);
	pthread_mutex_unlock(&mutex);
	pthread_mutex_destroy(&mutex);
	pthread_create(&thread, NULL, start_routine, NULL);
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_PTHREADS' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${PTHREADS_LIBS} 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${PTHREADS_LIBS} 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_PTHREADS=yes
bb_o=$bb_incdir/have_pthreads.h
echo '#ifndef HAVE_PTHREADS' >$bb_o
echo "#define HAVE_PTHREADS \"$HAVE_PTHREADS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_PTHREADS\"] = \"$HAVE_PTHREADS\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_PTHREADS=no
echo '#undef HAVE_PTHREADS' >$bb_incdir/have_pthreads.h
echo 'hdefs["HAVE_PTHREADS"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_PTHREADS}" = "yes" ]; then
CFLAGS="${CFLAGS} ${PTHREADS_CFLAGS}"
bb_o=$bb_incdir/pthreads_cflags.h
echo '#ifndef PTHREADS_CFLAGS' >$bb_o
echo "#define PTHREADS_CFLAGS \"$PTHREADS_CFLAGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"PTHREADS_CFLAGS\"] = \"$PTHREADS_CFLAGS\"" >>configure.lua
bb_o=$bb_incdir/pthreads_libs.h
echo '#ifndef PTHREADS_LIBS' >$bb_o
echo "#define PTHREADS_LIBS \"$PTHREADS_LIBS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"PTHREADS_LIBS\"] = \"$PTHREADS_LIBS\"" >>configure.lua
else
PTHREADS_CFLAGS=""
PTHREADS_LIBS=""
$ECHO_N 'checking for -pthread (common paths)...'
$ECHO_N '# checking for -pthread (common paths)...' >>config.log
if [ -e "${prefix_pthreads}/lib/pthread.h" ]; then
PTHREADS_CFLAGS="-I${prefix_pthreads}/lib"
fi
if [ -e "/usr/include/pthreads/pthread.h" ]; then
PTHREADS_CFLAGS="-I/usr/include/pthreads"
fi
if [ -e "/usr/local/include/pthread.h" ]; then
PTHREADS_CFLAGS="-I/usr/local/include"
fi
if [ -e "/usr/local/include/pthreads/pthread.h" ]; then
PTHREADS_CFLAGS="-I/usr/local/include/pthreads"
fi
if [ -e "${prefix_pthreads}/lib/libpthread.a" ]; then
PTHREADS_LIBS="-L${prefix_pthreads}/lib -lpthread"
fi
if [ -e "${prefix_pthreads}/lib/libpthreadGC1.a" ]; then
PTHREADS_LIBS="-L${prefix_pthreads}/lib -lpthreadGC1"
fi
if [ -e "${prefix_pthreads}/lib/libpthreadGC1d.a" ]; then
PTHREADS_LIBS="-L${prefix_pthreads}/lib -lpthreadGC1d"
fi
if [ -e "${prefix_pthreads}/lib/libpthreadGCE1.a" ]; then
PTHREADS_LIBS="-L${prefix_pthreads}/lib -lpthreadGCE1"
fi
if [ -e "${prefix_pthreads}/lib/libpthreadGCE1d.a" ]; then
PTHREADS_LIBS="-L${prefix_pthreads}/lib -lpthreadGCE1d"
fi
if [ -e "${prefix_pthreads}/lib/libpthreadGC2.a" ]; then
PTHREADS_LIBS="-L${prefix_pthreads}/lib -lpthreadGC2"
fi
if [ -e "${prefix_pthreads}/lib/libpthreadGC2d.a" ]; then
PTHREADS_LIBS="-L${prefix_pthreads}/lib -lpthreadGC2d"
fi
if [ -e "${prefix_pthreads}/lib/libpthreadGCE2.a" ]; then
PTHREADS_LIBS="-L${prefix_pthreads}/lib -lpthreadGCE2"
fi
if [ -e "${prefix_pthreads}/lib/libpthreadGCE2d.a" ]; then
PTHREADS_LIBS="-L${prefix_pthreads}/lib -lpthreadGCE2d"
fi
if [ -e "/usr/local/lib/libpthread.a" ]; then
PTHREADS_LIBS="-L/usr/local/lib -lpthread"
fi
if [ -e "/usr/local/lib/libpthreadGC1.a" ]; then
PTHREADS_LIBS="-L/usr/local/lib -lpthreadGC1"
fi
if [ -e "/usr/local/lib/libpthreadGC1d.a" ]; then
PTHREADS_LIBS="-L/usr/local/lib -lpthreadGC1d"
fi
if [ -e "/usr/local/lib/libpthreadGCE1.a" ]; then
PTHREADS_LIBS="-L/usr/local/lib -lpthreadGCE1"
fi
if [ -e "/usr/local/lib/libpthreadGCE1d.a" ]; then
PTHREADS_LIBS="-L/usr/local/lib -lpthreadGCE1d"
fi
if [ -e "/usr/local/lib/libpthreadGC2.a" ]; then
PTHREADS_LIBS="-L/usr/local/lib -lpthreadGC2"
fi
if [ -e "/usr/local/lib/libpthreadGC2d.a" ]; then
PTHREADS_LIBS="-L/usr/local/lib -lpthreadGC2d"
fi
if [ -e "/usr/local/lib/libpthreadGCE2.a" ]; then
PTHREADS_LIBS="-L/usr/local/lib -lpthreadGCE2"
fi
if [ -e "/usr/local/lib/libpthreadGCE2d.a" ]; then
PTHREADS_LIBS="-L/usr/local/lib -lpthreadGCE2d"
fi
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <pthread.h>
#include <signal.h>

static void *start_routine(void *arg)
{
	return (NULL);
}
int main(int argc, char *argv[])
{
	pthread_mutex_t mutex;
	pthread_t thread;
	pthread_mutex_init(&mutex, NULL);
	pthread_mutex_lock(&mutex);
	pthread_mutex_unlock(&mutex);
	pthread_mutex_destroy(&mutex);
	pthread_create(&thread, NULL, start_routine, NULL);
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_PTHREADS' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${PTHREADS_LIBS} 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${PTHREADS_LIBS} 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_PTHREADS=yes
bb_o=$bb_incdir/have_pthreads.h
echo '#ifndef HAVE_PTHREADS' >$bb_o
echo "#define HAVE_PTHREADS \"$HAVE_PTHREADS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_PTHREADS\"] = \"$HAVE_PTHREADS\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_PTHREADS=no
echo '#undef HAVE_PTHREADS' >$bb_incdir/have_pthreads.h
echo 'hdefs["HAVE_PTHREADS"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_PTHREADS}" = "yes" ]; then
CFLAGS="${CFLAGS} ${PTHREADS_CFLAGS}"
bb_o=$bb_incdir/pthreads_cflags.h
echo '#ifndef PTHREADS_CFLAGS' >$bb_o
echo "#define PTHREADS_CFLAGS \"$PTHREADS_CFLAGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"PTHREADS_CFLAGS\"] = \"$PTHREADS_CFLAGS\"" >>configure.lua
bb_o=$bb_incdir/pthreads_libs.h
echo '#ifndef PTHREADS_LIBS' >$bb_o
echo "#define PTHREADS_LIBS \"$PTHREADS_LIBS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"PTHREADS_LIBS\"] = \"$PTHREADS_LIBS\"" >>configure.lua
fi
fi
fi
$ECHO_N 'checking for the X/Open Threads Extension...'
$ECHO_N '# checking for the X/Open Threads Extension...' >>config.log
case "${host}" in
*-*-freebsd* | *-*-dragonfly*)
PTHREADS_XOPEN_CFLAGS=""
;;
*)
PTHREADS_XOPEN_CFLAGS="-U_XOPEN_SOURCE -D_XOPEN_SOURCE=600"
;;
esac
if [ "${prefix_pthreads}" != "" ]; then
PTHREADS_XOPEN_LIBS="-L${prefix_pthreads}/lib -lpthread"
else
PTHREADS_XOPEN_LIBS="-lpthread"
fi
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <pthread.h>
#include <signal.h>

int main(int argc, char *argv[])
{
	pthread_mutex_t mutex;
	pthread_mutexattr_t mutexattr;
	pthread_mutexattr_settype(&mutexattr, PTHREAD_MUTEX_RECURSIVE);
	pthread_mutex_init(&mutex, &mutexattr);
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_PTHREADS_XOPEN' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_XOPEN_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${PTHREADS_XOPEN_LIBS} 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_XOPEN_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${PTHREADS_XOPEN_LIBS} 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_PTHREADS_XOPEN=yes
bb_o=$bb_incdir/have_pthreads_xopen.h
echo '#ifndef HAVE_PTHREADS_XOPEN' >$bb_o
echo "#define HAVE_PTHREADS_XOPEN \"$HAVE_PTHREADS_XOPEN\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_PTHREADS_XOPEN\"] = \"$HAVE_PTHREADS_XOPEN\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_PTHREADS_XOPEN=no
echo '#undef HAVE_PTHREADS_XOPEN' >$bb_incdir/have_pthreads_xopen.h
echo 'hdefs["HAVE_PTHREADS_XOPEN"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_PTHREADS_XOPEN}" = "yes" ]; then
bb_o=$bb_incdir/have_pthreads_xopen.h
echo '#ifndef HAVE_PTHREADS_XOPEN' >$bb_o
echo "#define HAVE_PTHREADS_XOPEN \"$HAVE_PTHREADS_XOPEN\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_PTHREADS_XOPEN\"] = \"$HAVE_PTHREADS_XOPEN\"" >>configure.lua
bb_o=$bb_incdir/pthreads_xopen_cflags.h
echo '#ifndef PTHREADS_XOPEN_CFLAGS' >$bb_o
echo "#define PTHREADS_XOPEN_CFLAGS \"$PTHREADS_XOPEN_CFLAGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"PTHREADS_XOPEN_CFLAGS\"] = \"$PTHREADS_XOPEN_CFLAGS\"" >>configure.lua
bb_o=$bb_incdir/pthreads_xopen_libs.h
echo '#ifndef PTHREADS_XOPEN_LIBS' >$bb_o
echo "#define PTHREADS_XOPEN_LIBS \"$PTHREADS_XOPEN_LIBS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"PTHREADS_XOPEN_LIBS\"] = \"$PTHREADS_XOPEN_LIBS\"" >>configure.lua
else
PTHREADS_XOPEN_LIBS=""
$ECHO_N 'checking for the X/Open Threads Extension (common paths)...'
$ECHO_N '# checking for the X/Open Threads Extension (common paths)...' >>config.log
if [ -e "${prefix_pthreads}/lib/libpthread.a" ]; then
PTHREADS_XOPEN_LIBS="-L${prefix_pthreads}/lib -lpthread"
fi
if [ -e "${prefix_pthreads}/lib/libpthreadGC1.a" ]; then
PTHREADS_XOPEN_LIBS="-L${prefix_pthreads}/lib -lpthreadGC1"
fi
if [ -e "${prefix_pthreads}/lib/libpthreadGC1d.a" ]; then
PTHREADS_XOPEN_LIBS="-L${prefix_pthreads}/lib -lpthreadGC1d"
fi
if [ -e "${prefix_pthreads}/lib/libpthreadGCE1.a" ]; then
PTHREADS_XOPEN_LIBS="-L${prefix_pthreads}/lib -lpthreadGCE1"
fi
if [ -e "${prefix_pthreads}/lib/libpthreadGCE1d.a" ]; then
PTHREADS_XOPEN_LIBS="-L${prefix_pthreads}/lib -lpthreadGCE1d"
fi
if [ -e "${prefix_pthreads}/lib/libpthreadGC2.a" ]; then
PTHREADS_XOPEN_LIBS="-L${prefix_pthreads}/lib -lpthreadGC2"
fi
if [ -e "${prefix_pthreads}/lib/libpthreadGC2d.a" ]; then
PTHREADS_XOPEN_LIBS="-L${prefix_pthreads}/lib -lpthreadGC2d"
fi
if [ -e "${prefix_pthreads}/lib/libpthreadGCE2.a" ]; then
PTHREADS_XOPEN_LIBS="-L${prefix_pthreads}/lib -lpthreadGCE2"
fi
if [ -e "${prefix_pthreads}/lib/libpthreadGCE2d.a" ]; then
PTHREADS_XOPEN_LIBS="-L${prefix_pthreads}/lib -lpthreadGCE2d"
fi
if [ -e "/usr/local/lib/libpthread.a" ]; then
PTHREADS_XOPEN_LIBS="-L/usr/local/lib -lpthread"
fi
if [ -e "/usr/local/lib/libpthreadGC1.a" ]; then
PTHREADS_XOPEN_LIBS="-L/usr/local/lib -lpthreadGC1"
fi
if [ -e "/usr/local/lib/libpthreadGC1d.a" ]; then
PTHREADS_XOPEN_LIBS="-L/usr/local/lib -lpthreadGC1d"
fi
if [ -e "/usr/local/lib/libpthreadGCE1.a" ]; then
PTHREADS_XOPEN_LIBS="-L/usr/local/lib -lpthreadGCE1"
fi
if [ -e "/usr/local/lib/libpthreadGCE1d.a" ]; then
PTHREADS_XOPEN_LIBS="-L/usr/local/lib -lpthreadGCE1d"
fi
if [ -e "/usr/local/lib/libpthreadGC2.a" ]; then
PTHREADS_XOPEN_LIBS="-L/usr/local/lib -lpthreadGC2"
fi
if [ -e "/usr/local/lib/libpthreadGC2d.a" ]; then
PTHREADS_XOPEN_LIBS="-L/usr/local/lib -lpthreadGC2d"
fi
if [ -e "/usr/local/lib/libpthreadGCE2.a" ]; then
PTHREADS_XOPEN_LIBS="-L/usr/local/lib -lpthreadGCE2"
fi
if [ -e "/usr/local/lib/libpthreadGCE2d.a" ]; then
PTHREADS_XOPEN_LIBS="-L/usr/local/lib -lpthreadGCE2d"
fi
if [ -e "${prefix_pthreads}/lib/pthread.h" ]; then
PTHREADS_CFLAGS="-I${prefix_pthreads}/lib"
fi
if [ -e "/usr/include/pthreads/pthread.h" ]; then
PTHREADS_CFLAGS="-I/usr/include/pthreads"
fi
if [ -e "/usr/local/include/pthread.h" ]; then
PTHREADS_CFLAGS="-I/usr/local/include"
fi
if [ -e "/usr/local/include/pthreads/pthread.h" ]; then
PTHREADS_CFLAGS="-I/usr/local/include/pthreads"
fi
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <pthread.h>
#include <signal.h>

int main(int argc, char *argv[])
{
	pthread_mutex_t mutex;
	pthread_mutexattr_t mutexattr;
	pthread_mutexattr_settype(&mutexattr, PTHREAD_MUTEX_RECURSIVE);
	pthread_mutex_init(&mutex, &mutexattr);
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_PTHREADS_XOPEN' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_XOPEN_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${PTHREADS_XOPEN_LIBS} 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_XOPEN_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${PTHREADS_XOPEN_LIBS} 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_PTHREADS_XOPEN=yes
bb_o=$bb_incdir/have_pthreads_xopen.h
echo '#ifndef HAVE_PTHREADS_XOPEN' >$bb_o
echo "#define HAVE_PTHREADS_XOPEN \"$HAVE_PTHREADS_XOPEN\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_PTHREADS_XOPEN\"] = \"$HAVE_PTHREADS_XOPEN\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_PTHREADS_XOPEN=no
echo '#undef HAVE_PTHREADS_XOPEN' >$bb_incdir/have_pthreads_xopen.h
echo 'hdefs["HAVE_PTHREADS_XOPEN"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_PTHREADS_XOPEN}" = "yes" ]; then
bb_o=$bb_incdir/have_pthreads_xopen.h
echo '#ifndef HAVE_PTHREADS_XOPEN' >$bb_o
echo "#define HAVE_PTHREADS_XOPEN \"$HAVE_PTHREADS_XOPEN\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_PTHREADS_XOPEN\"] = \"$HAVE_PTHREADS_XOPEN\"" >>configure.lua
bb_o=$bb_incdir/pthreads_xopen_cflags.h
echo '#ifndef PTHREADS_XOPEN_CFLAGS' >$bb_o
echo "#define PTHREADS_XOPEN_CFLAGS \"$PTHREADS_XOPEN_CFLAGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"PTHREADS_XOPEN_CFLAGS\"] = \"$PTHREADS_XOPEN_CFLAGS\"" >>configure.lua
bb_o=$bb_incdir/pthreads_xopen_libs.h
echo '#ifndef PTHREADS_XOPEN_LIBS' >$bb_o
echo "#define PTHREADS_XOPEN_LIBS \"$PTHREADS_XOPEN_LIBS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"PTHREADS_XOPEN_LIBS\"] = \"$PTHREADS_XOPEN_LIBS\"" >>configure.lua
else
echo '#undef HAVE_PTHREADS_XOPEN' >$bb_incdir/have_pthreads_xopen.h
echo 'hdefs["HAVE_PTHREADS_XOPEN"] = nil' >>configure.lua
fi
fi
$ECHO_N 'checking for PTHREAD_MUTEX_RECURSIVE...'
$ECHO_N '# checking for PTHREAD_MUTEX_RECURSIVE...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <pthread.h>
#include <signal.h>
int main(int argc, char *argv[])
{
	pthread_mutex_t mutex;
	pthread_mutexattr_t mutexattr;
	pthread_mutexattr_settype(&mutexattr, PTHREAD_MUTEX_RECURSIVE);
	pthread_mutex_init(&mutex, &mutexattr);
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_PTHREAD_MUTEX_RECURSIVE' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${PTHREADS_LIBS} 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${PTHREADS_LIBS} 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_PTHREAD_MUTEX_RECURSIVE=yes
bb_o=$bb_incdir/have_pthread_mutex_recursive.h
echo '#ifndef HAVE_PTHREAD_MUTEX_RECURSIVE' >$bb_o
echo "#define HAVE_PTHREAD_MUTEX_RECURSIVE \"$HAVE_PTHREAD_MUTEX_RECURSIVE\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_PTHREAD_MUTEX_RECURSIVE\"] = \"$HAVE_PTHREAD_MUTEX_RECURSIVE\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_PTHREAD_MUTEX_RECURSIVE=no
echo '#undef HAVE_PTHREAD_MUTEX_RECURSIVE' >$bb_incdir/have_pthread_mutex_recursive.h
echo 'hdefs["HAVE_PTHREAD_MUTEX_RECURSIVE"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_PTHREAD_MUTEX_RECURSIVE}" = "yes" ]; then
bb_o=$bb_incdir/have_pthread_mutex_recursive.h
echo '#ifndef HAVE_PTHREAD_MUTEX_RECURSIVE' >$bb_o
echo "#define HAVE_PTHREAD_MUTEX_RECURSIVE \"$HAVE_PTHREAD_MUTEX_RECURSIVE\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_PTHREAD_MUTEX_RECURSIVE\"] = \"$HAVE_PTHREAD_MUTEX_RECURSIVE\"" >>configure.lua
else
echo '#undef HAVE_PTHREAD_MUTEX_RECURSIVE' >$bb_incdir/have_pthread_mutex_recursive.h
echo 'hdefs["HAVE_PTHREAD_MUTEX_RECURSIVE"] = nil' >>configure.lua
fi
$ECHO_N 'checking for PTHREAD_MUTEX_RECURSIVE_NP...'
$ECHO_N '# checking for PTHREAD_MUTEX_RECURSIVE_NP...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <pthread.h>
#include <signal.h>
int main(int argc, char *argv[])
{
	pthread_mutex_t mutex;
	pthread_mutexattr_t mutexattr;
	pthread_mutexattr_settype(&mutexattr, PTHREAD_MUTEX_RECURSIVE_NP);
	pthread_mutex_init(&mutex, &mutexattr);
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_PTHREAD_MUTEX_RECURSIVE_NP' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${PTHREADS_LIBS} 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${PTHREADS_LIBS} 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_PTHREAD_MUTEX_RECURSIVE_NP=yes
bb_o=$bb_incdir/have_pthread_mutex_recursive_np.h
echo '#ifndef HAVE_PTHREAD_MUTEX_RECURSIVE_NP' >$bb_o
echo "#define HAVE_PTHREAD_MUTEX_RECURSIVE_NP \"$HAVE_PTHREAD_MUTEX_RECURSIVE_NP\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_PTHREAD_MUTEX_RECURSIVE_NP\"] = \"$HAVE_PTHREAD_MUTEX_RECURSIVE_NP\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_PTHREAD_MUTEX_RECURSIVE_NP=no
echo '#undef HAVE_PTHREAD_MUTEX_RECURSIVE_NP' >$bb_incdir/have_pthread_mutex_recursive_np.h
echo 'hdefs["HAVE_PTHREAD_MUTEX_RECURSIVE_NP"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_PTHREAD_MUTEX_RECURSIVE_NP}" = "yes" ]; then
bb_o=$bb_incdir/have_pthread_mutex_recursive_np.h
echo '#ifndef HAVE_PTHREAD_MUTEX_RECURSIVE_NP' >$bb_o
echo "#define HAVE_PTHREAD_MUTEX_RECURSIVE_NP \"$HAVE_PTHREAD_MUTEX_RECURSIVE_NP\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_PTHREAD_MUTEX_RECURSIVE_NP\"] = \"$HAVE_PTHREAD_MUTEX_RECURSIVE_NP\"" >>configure.lua
else
echo '#undef HAVE_PTHREAD_MUTEX_RECURSIVE_NP' >$bb_incdir/have_pthread_mutex_recursive_np.h
echo 'hdefs["HAVE_PTHREAD_MUTEX_RECURSIVE_NP"] = nil' >>configure.lua
fi
$ECHO_N 'checking whether pthread_mutex_t is a pointer...'
$ECHO_N '# checking whether pthread_mutex_t is a pointer...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <pthread.h>

int main(int argc, char *argv[])
{
	pthread_mutex_t mutex = NULL;
	pthread_mutex_init(&mutex, NULL);
	return (mutex != NULL);
}
EOT
echo >>config.log
echo '# C: HAVE_PTHREAD_MUTEX_T_POINTER' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${PTHREADS_LIBS} 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${PTHREADS_LIBS} 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_PTHREAD_MUTEX_T_POINTER=yes
bb_o=$bb_incdir/have_pthread_mutex_t_pointer.h
echo '#ifndef HAVE_PTHREAD_MUTEX_T_POINTER' >$bb_o
echo "#define HAVE_PTHREAD_MUTEX_T_POINTER \"$HAVE_PTHREAD_MUTEX_T_POINTER\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_PTHREAD_MUTEX_T_POINTER\"] = \"$HAVE_PTHREAD_MUTEX_T_POINTER\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_PTHREAD_MUTEX_T_POINTER=no
echo '#undef HAVE_PTHREAD_MUTEX_T_POINTER' >$bb_incdir/have_pthread_mutex_t_pointer.h
echo 'hdefs["HAVE_PTHREAD_MUTEX_T_POINTER"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
$ECHO_N 'checking whether pthread_cond_t is a pointer...'
$ECHO_N '# checking whether pthread_cond_t is a pointer...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <pthread.h>

int main(int argc, char *argv[])
{
	pthread_cond_t cond = NULL;
	pthread_cond_init(&cond, NULL);
	return (cond != NULL);
}
EOT
echo >>config.log
echo '# C: HAVE_PTHREAD_COND_T_POINTER' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${PTHREADS_LIBS} 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${PTHREADS_LIBS} 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_PTHREAD_COND_T_POINTER=yes
bb_o=$bb_incdir/have_pthread_cond_t_pointer.h
echo '#ifndef HAVE_PTHREAD_COND_T_POINTER' >$bb_o
echo "#define HAVE_PTHREAD_COND_T_POINTER \"$HAVE_PTHREAD_COND_T_POINTER\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_PTHREAD_COND_T_POINTER\"] = \"$HAVE_PTHREAD_COND_T_POINTER\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_PTHREAD_COND_T_POINTER=no
echo '#undef HAVE_PTHREAD_COND_T_POINTER' >$bb_incdir/have_pthread_cond_t_pointer.h
echo 'hdefs["HAVE_PTHREAD_COND_T_POINTER"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
$ECHO_N 'checking whether pthread_t is a pointer...'
$ECHO_N '# checking whether pthread_t is a pointer...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <pthread.h>
static void *start_routine(void *arg) { return (NULL); }
int main(int argc, char *argv[])
{
	pthread_t th = NULL;
	return pthread_create(&th, NULL, start_routine, NULL);
}
EOT
echo >>config.log
echo '# C: HAVE_PTHREAD_T_POINTER' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${PTHREADS_LIBS} 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${PTHREADS_LIBS} 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_PTHREAD_T_POINTER=yes
bb_o=$bb_incdir/have_pthread_t_pointer.h
echo '#ifndef HAVE_PTHREAD_T_POINTER' >$bb_o
echo "#define HAVE_PTHREAD_T_POINTER \"$HAVE_PTHREAD_T_POINTER\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_PTHREAD_T_POINTER\"] = \"$HAVE_PTHREAD_T_POINTER\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_PTHREAD_T_POINTER=no
echo '#undef HAVE_PTHREAD_T_POINTER' >$bb_incdir/have_pthread_t_pointer.h
echo 'hdefs["HAVE_PTHREAD_T_POINTER"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
# END pthreads
	if [ "${HAVE_PTHREADS}" = 'yes' ]
 then
		if [ "${HAVE_PTHREADS_XOPEN}" = 'no' ]
 then
		if [ "${HAVE_PTHREAD_MUTEX_RECURSIVE}" = 'no' ]
 then
		if [ "${HAVE_PTHREAD_MUTEX_RECURSIVE_NP}" = 'no' ]
 then
			if [ "${enable_threads}" = 'yes' ]
 then
				echo "*"
				echo "* --enable-threads was given, but your"
				echo "* pthreads library seems to lack support"
				echo "* for recursive mutexes."
				echo "*"
				exit 1
			fi
echo '#undef AG_THREADS' >$bb_incdir/ag_threads.h
echo 'hdefs["AG_THREADS"] = nil' >>configure.lua
		fi
		fi
		fi
AG_THREADS="yes"
bb_o=$bb_incdir/ag_threads.h
echo '#ifndef AG_THREADS' >$bb_o
echo "#define AG_THREADS \"$AG_THREADS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"AG_THREADS\"] = \"$AG_THREADS\"" >>configure.lua
	else
		if [ "${enable_threads}" = 'yes' ]
 then
			echo "*"
			echo "* --enable-threads was given, but no pthreads"
			echo "* library was found on your system."
			echo "*"
			exit 1
		fi
echo '#undef AG_THREADS' >$bb_incdir/ag_threads.h
echo 'hdefs["AG_THREADS"] = nil' >>configure.lua
	fi
else
echo 'not enabling POSIX threads'
echo '# not enabling POSIX threads' >>config.log
HAVE_PTHREADS="no"
HAVE_PTHREAD_MUTEX_RECURSIVE="no"
HAVE_PTHREAD_MUTEX_RECURSIVE_NP="no"
HAVE_PTHREADS_XOPEN="no"
PTHREADS_CFLAGS=""
PTHREADS_LIBS=""
PTHREADS_XOPEN_CFLAGS=""
PTHREADS_XOPEN_LIBS=""
echo '#undef HAVE_PTHREADS' >$bb_incdir/have_pthreads.h
echo 'hdefs["HAVE_PTHREADS"] = nil' >>configure.lua
echo '#undef HAVE_PTHREAD_MUTEX_RECURSIVE' >$bb_incdir/have_pthread_mutex_recursive.h
echo 'hdefs["HAVE_PTHREAD_MUTEX_RECURSIVE"] = nil' >>configure.lua
echo '#undef HAVE_PTHREAD_MUTEX_RECURSIVE_NP' >$bb_incdir/have_pthread_mutex_recursive_np.h
echo 'hdefs["HAVE_PTHREAD_MUTEX_RECURSIVE_NP"] = nil' >>configure.lua
echo '#undef HAVE_PTHREADS_XOPEN' >$bb_incdir/have_pthreads_xopen.h
echo 'hdefs["HAVE_PTHREADS_XOPEN"] = nil' >>configure.lua
echo '#undef HAVE_PTHREAD_MUTEX_T_POINTER' >$bb_incdir/have_pthread_mutex_t_pointer.h
echo 'hdefs["HAVE_PTHREAD_MUTEX_T_POINTER"] = nil' >>configure.lua
echo '#undef HAVE_PTHREAD_COND_T_POINTER' >$bb_incdir/have_pthread_cond_t_pointer.h
echo 'hdefs["HAVE_PTHREAD_COND_T_POINTER"] = nil' >>configure.lua
echo '#undef HAVE_PTHREAD_T_POINTER' >$bb_incdir/have_pthread_t_pointer.h
echo 'hdefs["HAVE_PTHREAD_T_POINTER"] = nil' >>configure.lua
echo '#undef PTHREADS_CFLAGS' >$bb_incdir/pthreads_cflags.h
echo 'hdefs["PTHREADS_CFLAGS"] = nil' >>configure.lua
echo '#undef PTHREADS_LIBS' >$bb_incdir/pthreads_libs.h
echo 'hdefs["PTHREADS_LIBS"] = nil' >>configure.lua
echo '#undef PTHREADS_XOPEN_CFLAGS' >$bb_incdir/pthreads_xopen_cflags.h
echo 'hdefs["PTHREADS_XOPEN_CFLAGS"] = nil' >>configure.lua
echo '#undef PTHREADS_XOPEN_LIBS' >$bb_incdir/pthreads_xopen_libs.h
echo 'hdefs["PTHREADS_XOPEN_LIBS"] = nil' >>configure.lua
echo '#undef AG_THREADS' >$bb_incdir/ag_threads.h
echo 'hdefs["AG_THREADS"] = nil' >>configure.lua
	if [ "${enable_warnings}" = 'yes' ]
 then
CFLAGS="$CFLAGS -Wno-unused"
CXXFLAGS="$CXXFLAGS -Wno-unused"
	fi
fi
if [ "${enable_nls}" = 'yes' ]
 then
$ECHO_N 'checking for iconv()...'
$ECHO_N '# checking for iconv()...' >>config.log
# BEGIN iconv(0 ${prefix_iconv})
ICONV_CFLAGS=""
ICONV_LIBS=""
if [ "${prefix_iconv}" != "" ]; then
if [ -e "${prefix_iconv}/include/iconv.h" ]; then
ICONV_CFLAGS="-I${prefix_iconv}/include"
ICONV_LIBS="-L${prefix_iconv}/lib -liconv"
fi
else
if [ -e "/usr/include/iconv.h" ]; then
ICONV_CFLAGS="-I/usr/include"
ICONV_LIBS="-L/usr/lib -liconv"
fi
if [ -e "/usr/local/include/iconv.h" ]; then
ICONV_CFLAGS="-I/usr/local/include"
ICONV_LIBS="-L/usr/local/lib -liconv"
fi
if [ -e "/opt/include/iconv.h" ]; then
ICONV_CFLAGS="-I/opt/include"
ICONV_LIBS="-L/opt/lib -liconv"
fi
if [ -e "/opt/local/include/iconv.h" ]; then
ICONV_CFLAGS="-I/opt/local/include"
ICONV_LIBS="-L/opt/local/lib -liconv"
fi
if [ -e "/usr/pkg/include/iconv.h" ]; then
ICONV_CFLAGS="-I/usr/pkg/include"
ICONV_LIBS="-L/usr/pkg/lib -liconv"
fi
fi
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <iconv.h>

int main(int argc, char *argv[])
{
	char *inbuf = "foo";
	size_t inlen = strlen(inbuf), rv;
	char *outbuf = malloc(3);
	size_t outbuflen = 3;
	iconv_t cd;

	cd = iconv_open("ISO-8859-1", "UTF-8");
	rv = iconv(cd, &inbuf, &inlen, &outbuf, &outbuflen);
	iconv_close(cd);
	return ((rv == (size_t)-1));
}
EOT
echo >>config.log
echo '# C: HAVE_ICONV' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${ICONV_CFLAGS} -Wno-cast-qual -o $testdir/conftest$$ conftest$$.c ${ICONV_LIBS} 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${ICONV_CFLAGS} -Wno-cast-qual -o $testdir/conftest$$ conftest$$.c ${ICONV_LIBS} 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_ICONV=yes
bb_o=$bb_incdir/have_iconv.h
echo '#ifndef HAVE_ICONV' >$bb_o
echo "#define HAVE_ICONV \"$HAVE_ICONV\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_ICONV\"] = \"$HAVE_ICONV\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_ICONV=no
echo '#undef HAVE_ICONV' >$bb_incdir/have_iconv.h
echo 'hdefs["HAVE_ICONV"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_ICONV}" = "yes" ]; then
bb_o=$bb_incdir/iconv_cflags.h
echo '#ifndef ICONV_CFLAGS' >$bb_o
echo "#define ICONV_CFLAGS \"$ICONV_CFLAGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"ICONV_CFLAGS\"] = \"$ICONV_CFLAGS\"" >>configure.lua
bb_o=$bb_incdir/iconv_libs.h
echo '#ifndef ICONV_LIBS' >$bb_o
echo "#define ICONV_LIBS \"$ICONV_LIBS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"ICONV_LIBS\"] = \"$ICONV_LIBS\"" >>configure.lua
else
echo '#undef ICONV_CFLAGS' >$bb_incdir/iconv_cflags.h
echo 'hdefs["ICONV_CFLAGS"] = nil' >>configure.lua
ICONV_CFLAGS=""
echo '#undef ICONV_LIBS' >$bb_incdir/iconv_libs.h
echo 'hdefs["ICONV_LIBS"] = nil' >>configure.lua
ICONV_LIBS=""
fi
# END iconv
$ECHO_N 'checking for a gettext library in libc...'
$ECHO_N '# checking for a gettext library in libc...' >>config.log
# BEGIN gettext(0 ${prefix_gettext})
GETTEXT_CFLAGS=""
GETTEXT_LIBS=""
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <libintl.h>
int main(int argc, char *argv[])
{
	char *s;
	bindtextdomain("foo", "/foo");
	textdomain("foo");
	s = gettext("string");
	s = dgettext("foo","string");
	return (s != NULL);
}
EOT
echo >>config.log
echo '# C: HAVE_GETTEXT' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${GETTEXT_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${GETTEXT_LIBS} 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${GETTEXT_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${GETTEXT_LIBS} 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_GETTEXT=yes
bb_o=$bb_incdir/have_gettext.h
echo '#ifndef HAVE_GETTEXT' >$bb_o
echo "#define HAVE_GETTEXT \"$HAVE_GETTEXT\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_GETTEXT\"] = \"$HAVE_GETTEXT\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_GETTEXT=no
echo '#undef HAVE_GETTEXT' >$bb_incdir/have_gettext.h
echo 'hdefs["HAVE_GETTEXT"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_GETTEXT}" = "no" ]; then
$ECHO_N 'checking for a gettext library in -lintl...'
$ECHO_N '# checking for a gettext library in -lintl...' >>config.log
if [ "${prefix_gettext}" != "" ]; then
if [ -e "${prefix_gettext}/include/libintl.h" ]; then
GETTEXT_CFLAGS="-I${prefix_gettext}/include"
GETTEXT_LIBS="-L${prefix_gettext}/lib -lintl"
fi
else
if [ -e "${prefix_gettext}/include/libintl.h" ]; then
GETTEXT_CFLAGS="-I${prefix_gettext}/include"
GETTEXT_LIBS="-L${prefix_gettext}/lib -lintl"
fi
if [ -e "/usr/include/libintl.h" ]; then
GETTEXT_CFLAGS="-I/usr/include"
GETTEXT_LIBS="-L/usr/lib -lintl"
fi
if [ -e "/usr/local/include/libintl.h" ]; then
GETTEXT_CFLAGS="-I/usr/local/include"
GETTEXT_LIBS="-L/usr/local/lib -lintl"
fi
if [ -e "/opt/include/libintl.h" ]; then
GETTEXT_CFLAGS="-I/opt/include"
GETTEXT_LIBS="-L/opt/lib -lintl"
fi
if [ -e "/opt/local/include/libintl.h" ]; then
GETTEXT_CFLAGS="-I/opt/local/include"
GETTEXT_LIBS="-L/opt/local/lib -lintl"
fi
if [ -e "/usr/pkg/include/libintl.h" ]; then
GETTEXT_CFLAGS="-I/usr/pkg/include"
GETTEXT_LIBS="-L/usr/pkg/lib -lintl"
fi
fi
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <libintl.h>
int main(int argc, char *argv[])
{
	char *s;
	bindtextdomain("foo", "/foo");
	textdomain("foo");
	s = gettext("string");
	s = dgettext("foo","string");
	return (s != NULL);
}
EOT
echo >>config.log
echo '# C: HAVE_GETTEXT' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${GETTEXT_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${GETTEXT_LIBS} 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${GETTEXT_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${GETTEXT_LIBS} 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_GETTEXT=yes
bb_o=$bb_incdir/have_gettext.h
echo '#ifndef HAVE_GETTEXT' >$bb_o
echo "#define HAVE_GETTEXT \"$HAVE_GETTEXT\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_GETTEXT\"] = \"$HAVE_GETTEXT\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_GETTEXT=no
echo '#undef HAVE_GETTEXT' >$bb_incdir/have_gettext.h
echo 'hdefs["HAVE_GETTEXT"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_GETTEXT}" = "yes" ]; then
bb_o=$bb_incdir/gettext_cflags.h
echo '#ifndef GETTEXT_CFLAGS' >$bb_o
echo "#define GETTEXT_CFLAGS \"$GETTEXT_CFLAGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"GETTEXT_CFLAGS\"] = \"$GETTEXT_CFLAGS\"" >>configure.lua
bb_o=$bb_incdir/gettext_libs.h
echo '#ifndef GETTEXT_LIBS' >$bb_o
echo "#define GETTEXT_LIBS \"$GETTEXT_LIBS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"GETTEXT_LIBS\"] = \"$GETTEXT_LIBS\"" >>configure.lua
else
$ECHO_N 'checking whether -lintl requires -liconv...'
$ECHO_N '# checking whether -lintl requires -liconv...' >>config.log
if [ "${prefix_gettext}" != "" ]; then
if [ -e "${prefix_gettext}/include/iconv.h" ]; then
GETTEXT_CFLAGS="${GETTEXT_CFLAGS} -I${prefix_gettext}/include"
GETTEXT_LIBS="${GETTEXT_LIBS} -L${prefix_gettext}/lib -liconv"
fi
else
if [ -e "${prefix_gettext}/include/iconv.h" ]; then
GETTEXT_CFLAGS="${GETTEXT_CFLAGS} -I${prefix_gettext}/include"
GETTEXT_LIBS="${GETTEXT_LIBS} -L${prefix_gettext}/lib -liconv"
fi
if [ -e "/usr/include/iconv.h" ]; then
GETTEXT_CFLAGS="${GETTEXT_CFLAGS} -I/usr/include"
GETTEXT_LIBS="${GETTEXT_LIBS} -L/usr/lib -liconv"
fi
if [ -e "/usr/local/include/iconv.h" ]; then
GETTEXT_CFLAGS="${GETTEXT_CFLAGS} -I/usr/local/include"
GETTEXT_LIBS="${GETTEXT_LIBS} -L/usr/local/lib -liconv"
fi
if [ -e "/opt/include/iconv.h" ]; then
GETTEXT_CFLAGS="${GETTEXT_CFLAGS} -I/opt/include"
GETTEXT_LIBS="${GETTEXT_LIBS} -L/opt/lib -liconv"
fi
if [ -e "/opt/local/include/iconv.h" ]; then
GETTEXT_CFLAGS="${GETTEXT_CFLAGS} -I/opt/local/include"
GETTEXT_LIBS="${GETTEXT_LIBS} -L/opt/local/lib -liconv"
fi
if [ -e "/usr/pkg/include/iconv.h" ]; then
GETTEXT_CFLAGS="${GETTEXT_CFLAGS} -I/usr/pkg/include"
GETTEXT_LIBS="${GETTEXT_LIBS} -L/usr/pkg/lib -liconv"
fi
fi
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <libintl.h>
int main(int argc, char *argv[])
{
	char *s;
	bindtextdomain("foo", "/foo");
	textdomain("foo");
	s = gettext("string");
	s = dgettext("foo","string");
	return (s != NULL);
}
EOT
echo >>config.log
echo '# C: HAVE_GETTEXT' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${GETTEXT_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${GETTEXT_LIBS} 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${GETTEXT_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${GETTEXT_LIBS} 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_GETTEXT=yes
bb_o=$bb_incdir/have_gettext.h
echo '#ifndef HAVE_GETTEXT' >$bb_o
echo "#define HAVE_GETTEXT \"$HAVE_GETTEXT\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_GETTEXT\"] = \"$HAVE_GETTEXT\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_GETTEXT=no
echo '#undef HAVE_GETTEXT' >$bb_incdir/have_gettext.h
echo 'hdefs["HAVE_GETTEXT"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_GETTEXT}" = "yes" ]; then
bb_o=$bb_incdir/gettext_cflags.h
echo '#ifndef GETTEXT_CFLAGS' >$bb_o
echo "#define GETTEXT_CFLAGS \"$GETTEXT_CFLAGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"GETTEXT_CFLAGS\"] = \"$GETTEXT_CFLAGS\"" >>configure.lua
bb_o=$bb_incdir/gettext_libs.h
echo '#ifndef GETTEXT_LIBS' >$bb_o
echo "#define GETTEXT_LIBS \"$GETTEXT_LIBS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"GETTEXT_LIBS\"] = \"$GETTEXT_LIBS\"" >>configure.lua
else
echo '#undef GETTEXT_CFLAGS' >$bb_incdir/gettext_cflags.h
echo 'hdefs["GETTEXT_CFLAGS"] = nil' >>configure.lua
GETTEXT_CFLAGS=""
echo '#undef GETTEXT_LIBS' >$bb_incdir/gettext_libs.h
echo 'hdefs["GETTEXT_LIBS"] = nil' >>configure.lua
GETTEXT_LIBS=""
fi
fi
else
echo '#undef GETTEXT_CFLAGS' >$bb_incdir/gettext_cflags.h
echo 'hdefs["GETTEXT_CFLAGS"] = nil' >>configure.lua
echo '#undef GETTEXT_LIBS' >$bb_incdir/gettext_libs.h
echo 'hdefs["GETTEXT_LIBS"] = nil' >>configure.lua
fi
# END gettext
	if [ "${HAVE_GETTEXT}" != 'yes' ]
 then
		echo "*"
		echo "* --enable-nls was given but gettext was not found."
		echo "*"
		exit 1
	fi
else
echo 'not enabling iconv()'
echo '# not enabling iconv()' >>config.log
HAVE_ICONV="no"
ICONV_CFLAGS=""
ICONV_LIBS=""
echo '#undef HAVE_ICONV' >$bb_incdir/have_iconv.h
echo 'hdefs["HAVE_ICONV"] = nil' >>configure.lua
echo '#undef ICONV_CFLAGS' >$bb_incdir/iconv_cflags.h
echo 'hdefs["ICONV_CFLAGS"] = nil' >>configure.lua
echo '#undef ICONV_LIBS' >$bb_incdir/iconv_libs.h
echo 'hdefs["ICONV_LIBS"] = nil' >>configure.lua
echo 'not enabling a gettext library in libc'
echo '# not enabling a gettext library in libc' >>config.log
HAVE_GETTEXT="no"
GETTEXT_CFLAGS=""
GETTEXT_LIBS=""
echo '#undef HAVE_GETTEXT' >$bb_incdir/have_gettext.h
echo 'hdefs["HAVE_GETTEXT"] = nil' >>configure.lua
echo '#undef GETTEXT_CFLAGS' >$bb_incdir/gettext_cflags.h
echo 'hdefs["GETTEXT_CFLAGS"] = nil' >>configure.lua
echo '#undef GETTEXT_LIBS' >$bb_incdir/gettext_libs.h
echo 'hdefs["GETTEXT_LIBS"] = nil' >>configure.lua
fi
if [ "${enable_math}" != 'no' ]
 then
ENABLE_MATH="yes"
bb_o=$bb_incdir/enable_math.h
echo '#ifndef ENABLE_MATH' >$bb_o
echo "#define ENABLE_MATH \"$ENABLE_MATH\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"ENABLE_MATH\"] = \"$ENABLE_MATH\"" >>configure.lua
SUBDIR_math="math"
else
echo '#undef ENABLE_MATH' >$bb_incdir/enable_math.h
echo 'hdefs["ENABLE_MATH"] = nil' >>configure.lua
SUBDIR_math=""
fi
if [ "${with_altivec}" != 'no' ]
 then
$ECHO_N 'checking for AltiVec (with <altivec.h>)...'
$ECHO_N '# checking for AltiVec (with <altivec.h>)...' >>config.log
# BEGIN altivec
case "$host" in
powerpc-*-darwin*)
	ALTIVEC_CFLAGS='-faltivec -maltivec'
	ALTIVEC_CHECK_CFLAGS='-D_DARWIN_C_SOURCE'
	echo "ALTIVEC_CHECK_CFLAGS=${ALTIVEC_CHECK_CFLAGS}" >> Makefile.config
	;;
*)
	ALTIVEC_CFLAGS='-mabi=altivec -maltivec'
	ALTIVEC_CHECK_CFLAGS=''
	echo "ALTIVEC_CHECK_CFLAGS=" >> Makefile.config
	;;
esac
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <altivec.h>
float a[4] = { 1,2,3,4 };
float b[4] = { 5,6,7,8 };
float c[4];

int
main(int argc, char *argv[])
{
	vector float *va = (vector float *)a;
	vector float *vb = (vector float *)b;
	vector float *vc = (vector float *)c;

	*vc = vec_add(*va, *vb);
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_ALTIVEC' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} ${ALTIVEC_CFLAGS} -o $testdir/conftest$$ conftest$$.c  2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} ${ALTIVEC_CFLAGS} -o $testdir/conftest$$ conftest$$.c  2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_ALTIVEC=yes
bb_o=$bb_incdir/have_altivec.h
echo '#ifndef HAVE_ALTIVEC' >$bb_o
echo "#define HAVE_ALTIVEC \"$HAVE_ALTIVEC\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_ALTIVEC\"] = \"$HAVE_ALTIVEC\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_ALTIVEC=no
echo '#undef HAVE_ALTIVEC' >$bb_incdir/have_altivec.h
echo 'hdefs["HAVE_ALTIVEC"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_ALTIVEC}" = "yes" ]; then
HAVE_ALTIVEC_H=""
bb_o=$bb_incdir/altivec_cflags.h
echo '#ifndef ALTIVEC_CFLAGS' >$bb_o
echo "#define ALTIVEC_CFLAGS \"$ALTIVEC_CFLAGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"ALTIVEC_CFLAGS\"] = \"$ALTIVEC_CFLAGS\"" >>configure.lua
bb_o=$bb_incdir/have_altivec_h.h
echo '#ifndef HAVE_ALTIVEC_H' >$bb_o
echo "#define HAVE_ALTIVEC_H \"$HAVE_ALTIVEC_H\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_ALTIVEC_H\"] = \"$HAVE_ALTIVEC_H\"" >>configure.lua
else
$ECHO_N 'checking for AltiVec (without <altivec.h>)...'
$ECHO_N '# checking for AltiVec (without <altivec.h>)...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
float a[4] = { 1,2,3,4 };
float b[4] = { 5,6,7,8 };
float c[4];

int
main(int argc, char *argv[])
{
	vector float *va = (vector float *)a;
	vector float *vb = (vector float *)b;
	vector float *vc = (vector float *)c;

	*vc = vec_add(*va, *vb);
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_ALTIVEC' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} ${ALTIVEC_CFLAGS} -o $testdir/conftest$$ conftest$$.c  2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} ${ALTIVEC_CFLAGS} -o $testdir/conftest$$ conftest$$.c  2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_ALTIVEC=yes
bb_o=$bb_incdir/have_altivec.h
echo '#ifndef HAVE_ALTIVEC' >$bb_o
echo "#define HAVE_ALTIVEC \"$HAVE_ALTIVEC\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_ALTIVEC\"] = \"$HAVE_ALTIVEC\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_ALTIVEC=no
echo '#undef HAVE_ALTIVEC' >$bb_incdir/have_altivec.h
echo 'hdefs["HAVE_ALTIVEC"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_ALTIVEC}" = "yes" ]; then
bb_o=$bb_incdir/altivec_cflags.h
echo '#ifndef ALTIVEC_CFLAGS' >$bb_o
echo "#define ALTIVEC_CFLAGS \"$ALTIVEC_CFLAGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"ALTIVEC_CFLAGS\"] = \"$ALTIVEC_CFLAGS\"" >>configure.lua
else
echo '#undef ALTIVEC_CFLAGS' >$bb_incdir/altivec_cflags.h
echo 'hdefs["ALTIVEC_CFLAGS"] = nil' >>configure.lua
ALTIVEC_CFLAGS=""
fi
echo '#undef HAVE_ALTIVEC_H' >$bb_incdir/have_altivec_h.h
echo 'hdefs["HAVE_ALTIVEC_H"] = nil' >>configure.lua
fi
# END altivec
	if [ "${HAVE_ALTIVEC}" != 'yes' ]
 then
		if [ "${with_altivec}" = 'yes' -o "${with_altivec}" = 'inline' ]
 then
			echo "*"
			echo "* --with-altivec was requested, but "
			echo "* AltiVec is not supported by compiler"
			echo "*"
			exit 1
		else
echo 'not enabling AltiVec (with <altivec.h>)'
echo '# not enabling AltiVec (with <altivec.h>)' >>config.log
HAVE_ALTIVEC="no"
HAVE_ALTIVEC_H="no"
ALTIVEC_CFLAGS=""
echo '#undef HAVE_ALTIVEC' >$bb_incdir/have_altivec.h
echo 'hdefs["HAVE_ALTIVEC"] = nil' >>configure.lua
echo '#undef HAVE_ALTIVEC_H' >$bb_incdir/have_altivec_h.h
echo 'hdefs["HAVE_ALTIVEC_H"] = nil' >>configure.lua
echo '#undef ALTIVEC_CFLAGS' >$bb_incdir/altivec_cflags.h
echo 'hdefs["ALTIVEC_CFLAGS"] = nil' >>configure.lua
echo '#undef INLINE_ALTIVEC' >$bb_incdir/inline_altivec.h
echo 'hdefs["INLINE_ALTIVEC"] = nil' >>configure.lua
		fi
	else
if [ "${with_altivec}" = 'inline' ]; then
INLINE_ALTIVEC="yes"
bb_o=$bb_incdir/inline_altivec.h
echo '#ifndef INLINE_ALTIVEC' >$bb_o
echo "#define INLINE_ALTIVEC \"$INLINE_ALTIVEC\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"INLINE_ALTIVEC\"] = \"$INLINE_ALTIVEC\"" >>configure.lua
else
echo '#undef INLINE_ALTIVEC' >$bb_incdir/inline_altivec.h
echo 'hdefs["INLINE_ALTIVEC"] = nil' >>configure.lua
fi
	fi
else
echo 'not enabling AltiVec (with <altivec.h>)'
echo '# not enabling AltiVec (with <altivec.h>)' >>config.log
HAVE_ALTIVEC="no"
HAVE_ALTIVEC_H="no"
ALTIVEC_CFLAGS=""
echo '#undef HAVE_ALTIVEC' >$bb_incdir/have_altivec.h
echo 'hdefs["HAVE_ALTIVEC"] = nil' >>configure.lua
echo '#undef HAVE_ALTIVEC_H' >$bb_incdir/have_altivec_h.h
echo 'hdefs["HAVE_ALTIVEC_H"] = nil' >>configure.lua
echo '#undef ALTIVEC_CFLAGS' >$bb_incdir/altivec_cflags.h
echo 'hdefs["ALTIVEC_CFLAGS"] = nil' >>configure.lua
echo '#undef INLINE_ALTIVEC' >$bb_incdir/inline_altivec.h
echo 'hdefs["INLINE_ALTIVEC"] = nil' >>configure.lua
fi
if [ "${with_sse}" != 'no' ]
 then
$ECHO_N 'checking for SSE extensions...'
$ECHO_N '# checking for SSE extensions...' >>config.log
# BEGIN sse
SSE_CFLAGS="-msse"
MK_COMPILE_STATUS=OK
MK_RUN_STATUS=OK
cat << EOT >conftest$$.c
#include <xmmintrin.h>
#include <stdio.h>

#define MAXERR 1e-4

typedef union vec {
	float v[4];
	__m128 m128;
	struct { float x, y, z, pad; };
} MyVector __attribute__ ((aligned(16)));

int
main(int argc, char *argv[])
{
	MyVector a;
	__m128 v;

	a.x = 1.0f;
	a.y = 2.0f;
	a.z = 3.0f;
	v = _mm_set1_ps(1.0f);
	a.m128 = _mm_mul_ps(a.m128, v);
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_SSE' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} ${SSE_CFLAGS} -o $testdir/conftest$$ conftest$$.c  2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} ${SSE_CFLAGS} -o $testdir/conftest$$ conftest$$.c  2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
(cd $testdir && ./conftest$$$EXECSUFFIX) >>config.log
if [ "$?" = "0" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_SSE=yes
bb_o=$bb_incdir/have_sse.h
echo '#ifndef HAVE_SSE' >$bb_o
echo "#define HAVE_SSE \"$HAVE_SSE\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_SSE\"] = \"$HAVE_SSE\"" >>configure.lua
else
echo 'no, test program failed'
echo '# no, test program failed' >>config.log
MK_RUN_STATUS="FAIL $?"
HAVE_SSE=no
echo '#undef HAVE_SSE' >$bb_incdir/have_sse.h
echo 'hdefs["HAVE_SSE"] = nil' >>configure.lua
fi
else
echo 'no'
echo '# no' >>config.log
MK_RUN_STATUS="FAIL $?"
HAVE_SSE=no
echo '#undef HAVE_SSE' >$bb_incdir/have_sse.h
echo 'hdefs["HAVE_SSE"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_SSE}" = "yes" ]; then
bb_o=$bb_incdir/sse_cflags.h
echo '#ifndef SSE_CFLAGS' >$bb_o
echo "#define SSE_CFLAGS \"$SSE_CFLAGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"SSE_CFLAGS\"] = \"$SSE_CFLAGS\"" >>configure.lua
else
echo '#undef SSE_CFLAGS' >$bb_incdir/sse_cflags.h
echo 'hdefs["SSE_CFLAGS"] = nil' >>configure.lua
SSE_CFLAGS=""
fi
$ECHO_N 'checking for SSE2 extensions...'
$ECHO_N '# checking for SSE2 extensions...' >>config.log
SSE2_CFLAGS="-msse2"
MK_COMPILE_STATUS=OK
MK_RUN_STATUS=OK
cat << EOT >conftest$$.c
#include <emmintrin.h>

int
main(int argc, char *argv[])
{
	double a[4] __attribute__ ((aligned(16)));
	double b[4] __attribute__ ((aligned(16)));
	double rv;
	__m128d vec1, vec2;
	a[0] = 1.0f; a[1] = 2.0f; a[2] = 3.0f; a[3] = 4.0f;
	b[0] = 1.0f; b[1] = 2.0f; b[2] = 3.0f; b[3] = 4.0f;
	vec1 = _mm_load_pd(a);
	vec2 = _mm_load_pd(b);
	vec1 = _mm_xor_pd(vec1, vec2);
	_mm_store_sd(&rv, vec1);
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_SSE2' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} ${SSE2_CFLAGS} -o $testdir/conftest$$ conftest$$.c  2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} ${SSE2_CFLAGS} -o $testdir/conftest$$ conftest$$.c  2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
(cd $testdir && ./conftest$$$EXECSUFFIX) >>config.log
if [ "$?" = "0" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_SSE2=yes
bb_o=$bb_incdir/have_sse2.h
echo '#ifndef HAVE_SSE2' >$bb_o
echo "#define HAVE_SSE2 \"$HAVE_SSE2\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_SSE2\"] = \"$HAVE_SSE2\"" >>configure.lua
else
echo 'no, test program failed'
echo '# no, test program failed' >>config.log
MK_RUN_STATUS="FAIL $?"
HAVE_SSE2=no
echo '#undef HAVE_SSE2' >$bb_incdir/have_sse2.h
echo 'hdefs["HAVE_SSE2"] = nil' >>configure.lua
fi
else
echo 'no'
echo '# no' >>config.log
MK_RUN_STATUS="FAIL $?"
HAVE_SSE2=no
echo '#undef HAVE_SSE2' >$bb_incdir/have_sse2.h
echo 'hdefs["HAVE_SSE2"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_SSE2}" = "yes" ]; then
bb_o=$bb_incdir/sse2_cflags.h
echo '#ifndef SSE2_CFLAGS' >$bb_o
echo "#define SSE2_CFLAGS \"$SSE2_CFLAGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"SSE2_CFLAGS\"] = \"$SSE2_CFLAGS\"" >>configure.lua
else
echo '#undef SSE2_CFLAGS' >$bb_incdir/sse2_cflags.h
echo 'hdefs["SSE2_CFLAGS"] = nil' >>configure.lua
SSE2_CFLAGS=""
fi
$ECHO_N 'checking for SSE3 extensions...'
$ECHO_N '# checking for SSE3 extensions...' >>config.log
SSE3_CFLAGS="-msse3"
MK_COMPILE_STATUS=OK
MK_RUN_STATUS=OK
cat << EOT >conftest$$.c
#include <pmmintrin.h>

int
main(int argc, char *argv[])
{
	float a[4] __attribute__ ((aligned(16)));
	float b[4] __attribute__ ((aligned(16)));
	__m128 vec1, vec2;
	float rv;
	a[0] = 1.0f; a[1] = 2.0f; a[2] = 3.0f; a[3] = 4.0f;
	b[0] = 1.0f; b[1] = 2.0f; b[2] = 3.0f; b[3] = 4.0f;
	vec1 = _mm_load_ps(a);
	vec2 = _mm_load_ps(b);
	vec1 = _mm_mul_ps(vec1, vec2);
	vec1 = _mm_hadd_ps(vec1, vec1);
	vec1 = _mm_hadd_ps(vec1, vec1);
	_mm_store_ss(&rv, vec1);
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_SSE3' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} ${SSE3_CFLAGS} -o $testdir/conftest$$ conftest$$.c  2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} ${SSE3_CFLAGS} -o $testdir/conftest$$ conftest$$.c  2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
(cd $testdir && ./conftest$$$EXECSUFFIX) >>config.log
if [ "$?" = "0" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_SSE3=yes
bb_o=$bb_incdir/have_sse3.h
echo '#ifndef HAVE_SSE3' >$bb_o
echo "#define HAVE_SSE3 \"$HAVE_SSE3\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_SSE3\"] = \"$HAVE_SSE3\"" >>configure.lua
else
echo 'no, test program failed'
echo '# no, test program failed' >>config.log
MK_RUN_STATUS="FAIL $?"
HAVE_SSE3=no
echo '#undef HAVE_SSE3' >$bb_incdir/have_sse3.h
echo 'hdefs["HAVE_SSE3"] = nil' >>configure.lua
fi
else
echo 'no'
echo '# no' >>config.log
MK_RUN_STATUS="FAIL $?"
HAVE_SSE3=no
echo '#undef HAVE_SSE3' >$bb_incdir/have_sse3.h
echo 'hdefs["HAVE_SSE3"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_SSE3}" = "yes" ]; then
bb_o=$bb_incdir/sse3_cflags.h
echo '#ifndef SSE3_CFLAGS' >$bb_o
echo "#define SSE3_CFLAGS \"$SSE3_CFLAGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"SSE3_CFLAGS\"] = \"$SSE3_CFLAGS\"" >>configure.lua
else
echo '#undef SSE3_CFLAGS' >$bb_incdir/sse3_cflags.h
echo 'hdefs["SSE3_CFLAGS"] = nil' >>configure.lua
SSE3_CFLAGS=""
fi
# END sse
	if [ "${HAVE_SSE}" != 'yes' ]
 then
		if [ "${with_sse}" = 'yes' -o "${with_sse}" = 'inline' ]
 then
			echo "*"
			echo "* --with-sse was requested, but SSE "
			echo "* intrinsics not supported by compiler"
			echo "*"
			exit 1
		fi
echo 'not enabling SSE extensions'
echo '# not enabling SSE extensions' >>config.log
HAVE_SSE="no"
HAVE_SSE2="no"
HAVE_SSE3="no"
INLINE_SSE="no"
SSE_CFLAGS=""
SSE2_CFLAGS=""
SSE3_CFLAGS=""
echo '#undef HAVE_SSE' >$bb_incdir/have_sse.h
echo 'hdefs["HAVE_SSE"] = nil' >>configure.lua
echo '#undef HAVE_SSE2' >$bb_incdir/have_sse2.h
echo 'hdefs["HAVE_SSE2"] = nil' >>configure.lua
echo '#undef HAVE_SSE3' >$bb_incdir/have_sse3.h
echo 'hdefs["HAVE_SSE3"] = nil' >>configure.lua
echo '#undef INLINE_SSE' >$bb_incdir/inline_sse.h
echo 'hdefs["INLINE_SSE"] = nil' >>configure.lua
echo '#undef SSE_CFLAGS' >$bb_incdir/sse_cflags.h
echo 'hdefs["SSE_CFLAGS"] = nil' >>configure.lua
echo '#undef SSE2_CFLAGS' >$bb_incdir/sse2_cflags.h
echo 'hdefs["SSE2_CFLAGS"] = nil' >>configure.lua
echo '#undef SSE3_CFLAGS' >$bb_incdir/sse3_cflags.h
echo 'hdefs["SSE3_CFLAGS"] = nil' >>configure.lua
	else
if [ "${with_sse}" = 'inline' ]; then
INLINE_SSE="yes"
bb_o=$bb_incdir/inline_sse.h
echo '#ifndef INLINE_SSE' >$bb_o
echo "#define INLINE_SSE \"$INLINE_SSE\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"INLINE_SSE\"] = \"$INLINE_SSE\"" >>configure.lua
else
echo '#undef INLINE_SSE' >$bb_incdir/inline_sse.h
echo 'hdefs["INLINE_SSE"] = nil' >>configure.lua
fi
if [ "${with_sse2}" = 'no' ]; then
echo '#undef HAVE_SSE2' >$bb_incdir/have_sse2.h
echo 'hdefs["HAVE_SSE2"] = nil' >>configure.lua
fi
if [ "${with_sse3}" = 'no' ]; then
echo '#undef HAVE_SSE3' >$bb_incdir/have_sse3.h
echo 'hdefs["HAVE_SSE3"] = nil' >>configure.lua
fi
	fi
else
echo 'not enabling SSE extensions'
echo '# not enabling SSE extensions' >>config.log
HAVE_SSE="no"
HAVE_SSE2="no"
HAVE_SSE3="no"
INLINE_SSE="no"
SSE_CFLAGS=""
SSE2_CFLAGS=""
SSE3_CFLAGS=""
echo '#undef HAVE_SSE' >$bb_incdir/have_sse.h
echo 'hdefs["HAVE_SSE"] = nil' >>configure.lua
echo '#undef HAVE_SSE2' >$bb_incdir/have_sse2.h
echo 'hdefs["HAVE_SSE2"] = nil' >>configure.lua
echo '#undef HAVE_SSE3' >$bb_incdir/have_sse3.h
echo 'hdefs["HAVE_SSE3"] = nil' >>configure.lua
echo '#undef INLINE_SSE' >$bb_incdir/inline_sse.h
echo 'hdefs["INLINE_SSE"] = nil' >>configure.lua
echo '#undef SSE_CFLAGS' >$bb_incdir/sse_cflags.h
echo 'hdefs["SSE_CFLAGS"] = nil' >>configure.lua
echo '#undef SSE2_CFLAGS' >$bb_incdir/sse2_cflags.h
echo 'hdefs["SSE2_CFLAGS"] = nil' >>configure.lua
echo '#undef SSE3_CFLAGS' >$bb_incdir/sse3_cflags.h
echo 'hdefs["SSE3_CFLAGS"] = nil' >>configure.lua
fi
if [ "${with_single_fp}" = 'yes' ]
 then
	if [ "${HAVE_MATH_C99}" != 'yes' ]
 then
		echo "*"
		echo "* --with-single-fp was requested, but your compiler does"
		echo "* not support the C99 math routines (sinf(), etc)."
		echo "*"
		exit 1
	fi
SINGLE_PRECISION="yes"
bb_o=$bb_incdir/single_precision.h
echo '#ifndef SINGLE_PRECISION' >$bb_o
echo "#define SINGLE_PRECISION \"$SINGLE_PRECISION\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"SINGLE_PRECISION\"] = \"$SINGLE_PRECISION\"" >>configure.lua
else
echo '#undef SINGLE_PRECISION' >$bb_incdir/single_precision.h
echo 'hdefs["SINGLE_PRECISION"] = nil' >>configure.lua
fi
if [ "${with_double_fp}" != 'no' ]; then
DOUBLE_PRECISION="yes"
bb_o=$bb_incdir/double_precision.h
echo '#ifndef DOUBLE_PRECISION' >$bb_o
echo "#define DOUBLE_PRECISION \"$DOUBLE_PRECISION\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"DOUBLE_PRECISION\"] = \"$DOUBLE_PRECISION\"" >>configure.lua
else
echo '#undef DOUBLE_PRECISION' >$bb_incdir/double_precision.h
echo 'hdefs["DOUBLE_PRECISION"] = nil' >>configure.lua
fi
if [ "${with_quad_fp}" = 'yes' ]
 then
	if [ "${HAVE_LONG_DOUBLE}" != 'yes' ]
 then
		echo "*"
		echo "* --with-quad-fp was requested, but your compiler"
		echo "* does not support the C99 long double type."
		echo "*"
		exit 1
	fi
	if [ "${HAVE_MATH_C99}" != 'yes' ]
 then
		echo "*"
		echo "* --with-quad-fp was requested, but the C99 math"
		echo "* routines (sinl(), etc.) are not available."
		echo "*"
		exit 1
	fi
QUAD_PRECISION="yes"
bb_o=$bb_incdir/quad_precision.h
echo '#ifndef QUAD_PRECISION' >$bb_o
echo "#define QUAD_PRECISION \"$QUAD_PRECISION\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"QUAD_PRECISION\"] = \"$QUAD_PRECISION\"" >>configure.lua
else
echo '#undef QUAD_PRECISION' >$bb_incdir/quad_precision.h
echo 'hdefs["QUAD_PRECISION"] = nil' >>configure.lua
fi
if [ "${enable_vg}" != 'no' -a "${enable_gui}" != 'no' ]
 then
ENABLE_VG="yes"
bb_o=$bb_incdir/enable_vg.h
echo '#ifndef ENABLE_VG' >$bb_o
echo "#define ENABLE_VG \"$ENABLE_VG\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"ENABLE_VG\"] = \"$ENABLE_VG\"" >>configure.lua
SUBDIR_vg="vg"
else
echo '#undef ENABLE_VG' >$bb_incdir/enable_vg.h
echo 'hdefs["ENABLE_VG"] = nil' >>configure.lua
SUBDIR_vg=""
fi
if [ "${enable_au}" = 'yes' -a "${enable_gui}" != 'no' ]
 then
ENABLE_AU="yes"
bb_o=$bb_incdir/enable_au.h
echo '#ifndef ENABLE_AU' >$bb_o
echo "#define ENABLE_AU \"$ENABLE_AU\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"ENABLE_AU\"] = \"$ENABLE_AU\"" >>configure.lua
SUBDIR_au="au"
$ECHO_N 'checking for libsndfile...'
$ECHO_N '# checking for libsndfile...' >>config.log
# BEGIN sndfile(1.0.21 ${prefix_sndfile})
if [ "$pfx" != "" ]; then
MK_EXEC_PKGPREFIX=`$PKGCONFIG --variable=prefix sndfile 2>/dev/null`
if [ "$MK_EXEC_PKGPREFIX" != "$pfx" ]; then
echo "* "
echo "# * " >>config.log
echo "* ERROR: According to pkg-config, sndfile is installed in prefix: "
echo "# * ERROR: According to pkg-config, sndfile is installed in prefix: " >>config.log
echo "* $MK_EXEC_PKGPREFIX, but the prefix ${prefix_sndfile} was given."
echo "# * $MK_EXEC_PKGPREFIX, but the prefix ${prefix_sndfile} was given." >>config.log
echo "* "
echo "# * " >>config.log
echo "* Please indicate correct sndfile prefix (or omit for autodetect)."
echo "# * Please indicate correct sndfile prefix (or omit for autodetect)." >>config.log
echo "* "
echo "# * " >>config.log
echo "***"
echo "*** ERROR: Package prefix mismatch"
echo "*** Failed! See ./config.log for more details."
echo "***"
exit 1
fi
fi
SNDFILE_VERSION=`$PKGCONFIG sndfile --modversion 2>/dev/null`
if [ "$pfx" != "" ]; then
MK_EXEC_PKGPREFIX=`$PKGCONFIG --variable=prefix sndfile 2>/dev/null`
if [ "$MK_EXEC_PKGPREFIX" != "$pfx" ]; then
echo "* "
echo "# * " >>config.log
echo "* ERROR: According to pkg-config, sndfile is installed in prefix: "
echo "# * ERROR: According to pkg-config, sndfile is installed in prefix: " >>config.log
echo "* $MK_EXEC_PKGPREFIX, but the prefix ${prefix_sndfile} was given."
echo "# * $MK_EXEC_PKGPREFIX, but the prefix ${prefix_sndfile} was given." >>config.log
echo "* "
echo "# * " >>config.log
echo "* Please indicate correct sndfile prefix (or omit for autodetect)."
echo "# * Please indicate correct sndfile prefix (or omit for autodetect)." >>config.log
echo "* "
echo "# * " >>config.log
echo "***"
echo "*** ERROR: Package prefix mismatch"
echo "*** Failed! See ./config.log for more details."
echo "***"
exit 1
fi
fi
SNDFILE_CFLAGS=`$PKGCONFIG sndfile --cflags 2>/dev/null`
if [ "$pfx" != "" ]; then
MK_EXEC_PKGPREFIX=`$PKGCONFIG --variable=prefix sndfile 2>/dev/null`
if [ "$MK_EXEC_PKGPREFIX" != "$pfx" ]; then
echo "* "
echo "# * " >>config.log
echo "* ERROR: According to pkg-config, sndfile is installed in prefix: "
echo "# * ERROR: According to pkg-config, sndfile is installed in prefix: " >>config.log
echo "* $MK_EXEC_PKGPREFIX, but the prefix ${prefix_sndfile} was given."
echo "# * $MK_EXEC_PKGPREFIX, but the prefix ${prefix_sndfile} was given." >>config.log
echo "* "
echo "# * " >>config.log
echo "* Please indicate correct sndfile prefix (or omit for autodetect)."
echo "# * Please indicate correct sndfile prefix (or omit for autodetect)." >>config.log
echo "* "
echo "# * " >>config.log
echo "***"
echo "*** ERROR: Package prefix mismatch"
echo "*** Failed! See ./config.log for more details."
echo "***"
exit 1
fi
fi
SNDFILE_LIBS=`$PKGCONFIG sndfile --libs 2>/dev/null`
if [ "${SNDFILE_VERSION}" != "" ]; then
if [ "${prefix_sndfile}" != "" ]; then
echo "yes ($SNDFILE_VERSION in ${prefix_sndfile})"
echo "# yes ($SNDFILE_VERSION in ${prefix_sndfile})" >>config.log
else
echo "yes ($SNDFILE_VERSION)"
echo "# yes ($SNDFILE_VERSION)" >>config.log
fi
MK_VERSION_MAJOR=`echo "$SNDFILE_VERSION" |sed 's/\([0-9]*\).\([0-9]*\).\([0-9]*\).*/\1/'`;
MK_VERSION_MINOR=`echo "$SNDFILE_VERSION" |sed 's/\([0-9]*\).\([0-9]*\).\([0-9]*\).*/\2/'`;
MK_VERSION_MICRO=`echo "$SNDFILE_VERSION" |sed 's/\([0-9]*\).\([0-9]*\).\([0-9]*\).*/\3/'`;
MK_VERSION_OK=no
if [ $MK_VERSION_MAJOR -gt 1 ]; then
MK_VERSION_OK=yes
elif [ $MK_VERSION_MAJOR -eq 1 ]; then
if [ "$MK_VERSION_MINOR" = '' ]; then
MK_VERSION_OK=yes
else
if [ $MK_VERSION_MINOR -gt 0 ]; then
MK_VERSION_OK=yes
elif [ $MK_VERSION_MINOR -eq 0 ]; then
if [ "$MK_VERSION_MICRO" = '' ]; then
MK_VERSION_OK=yes
else
if [ $MK_VERSION_MICRO -ge 21 ]; then
MK_VERSION_OK=yes
fi
fi
fi
fi
fi
if [ "${MK_VERSION_OK}" = "no" ]; then
echo '*'
echo '# *' >>config.log
echo "* Minimum required version is 1.0.21 (found $SNDFILE_VERSION)"
echo "# * Minimum required version is 1.0.21 (found $SNDFILE_VERSION)" >>config.log
echo '*'
echo '# *' >>config.log
fi
else
if [ "${prefix_sndfile}" != "" ]; then
echo "no (not in ${prefix_sndfile})"
echo "# no (not in ${prefix_sndfile})" >>config.log
else
echo 'no'
echo '# no' >>config.log
fi
MK_VERSION_OK="no"
fi
if [ "${MK_VERSION_OK}" = "yes" ]; then
$ECHO_N 'checking whether libsndfile works...'
$ECHO_N '# checking whether libsndfile works...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <stdio.h>
#include <sndfile.h>

int main(int argc, char *argv[]) {
	SNDFILE *sf;
	SF_INFO sfi;

	sfi.format = 0;
	sf = sf_open("foo", 0, &sfi);
	sf_close(sf);
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_SNDFILE' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${SNDFILE_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${SNDFILE_LIBS} 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${SNDFILE_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${SNDFILE_LIBS} 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_SNDFILE=yes
bb_o=$bb_incdir/have_sndfile.h
echo '#ifndef HAVE_SNDFILE' >$bb_o
echo "#define HAVE_SNDFILE \"$HAVE_SNDFILE\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_SNDFILE\"] = \"$HAVE_SNDFILE\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_SNDFILE=no
echo '#undef HAVE_SNDFILE' >$bb_incdir/have_sndfile.h
echo 'hdefs["HAVE_SNDFILE"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_SNDFILE}" = "yes" ]; then
bb_o=$bb_incdir/sndfile_cflags.h
echo '#ifndef SNDFILE_CFLAGS' >$bb_o
echo "#define SNDFILE_CFLAGS \"$SNDFILE_CFLAGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"SNDFILE_CFLAGS\"] = \"$SNDFILE_CFLAGS\"" >>configure.lua
bb_o=$bb_incdir/sndfile_libs.h
echo '#ifndef SNDFILE_LIBS' >$bb_o
echo "#define SNDFILE_LIBS \"$SNDFILE_LIBS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"SNDFILE_LIBS\"] = \"$SNDFILE_LIBS\"" >>configure.lua
else
echo '#undef SNDFILE_CFLAGS' >$bb_incdir/sndfile_cflags.h
echo 'hdefs["SNDFILE_CFLAGS"] = nil' >>configure.lua
SNDFILE_CFLAGS=""
echo '#undef SNDFILE_LIBS' >$bb_incdir/sndfile_libs.h
echo 'hdefs["SNDFILE_LIBS"] = nil' >>configure.lua
SNDFILE_LIBS=""
fi
else
echo '#undef HAVE_SNDFILE' >$bb_incdir/have_sndfile.h
echo 'hdefs["HAVE_SNDFILE"] = nil' >>configure.lua
fi
if [ "${HAVE_SNDFILE}" = "yes" ]; then
SNDFILE_PC="sndfile"
else
SNDFILE_PC=""
fi
# END sndfile
$ECHO_N 'checking for PortAudio2...'
$ECHO_N '# checking for PortAudio2...' >>config.log
# BEGIN portaudio(19.0 ${prefix_portaudio})
PORTAUDIO_VERSION=""
if [ "${PKGCONFIG}" != '' -a "`${PKGCONFIG} --variable=prefix portaudio-2.0 2>/dev/null`" != '' ]; then
if [ "$pfx" != "" ]; then
MK_EXEC_PKGPREFIX=`$PKGCONFIG --variable=prefix portaudio-2.0 2>/dev/null`
if [ "$MK_EXEC_PKGPREFIX" != "$pfx" ]; then
echo "* "
echo "# * " >>config.log
echo "* ERROR: According to pkg-config, portaudio-2.0 is installed in prefix: "
echo "# * ERROR: According to pkg-config, portaudio-2.0 is installed in prefix: " >>config.log
echo "* $MK_EXEC_PKGPREFIX, but the prefix ${prefix_portaudio} was given."
echo "# * $MK_EXEC_PKGPREFIX, but the prefix ${prefix_portaudio} was given." >>config.log
echo "* "
echo "# * " >>config.log
echo "* Please indicate correct portaudio-2.0 prefix (or omit for autodetect)."
echo "# * Please indicate correct portaudio-2.0 prefix (or omit for autodetect)." >>config.log
echo "* "
echo "# * " >>config.log
echo "***"
echo "*** ERROR: Package prefix mismatch"
echo "*** Failed! See ./config.log for more details."
echo "***"
exit 1
fi
fi
PORTAUDIO_VERSION=`$PKGCONFIG portaudio-2.0 --modversion 2>/dev/null`
if [ "$pfx" != "" ]; then
MK_EXEC_PKGPREFIX=`$PKGCONFIG --variable=prefix portaudio-2.0 2>/dev/null`
if [ "$MK_EXEC_PKGPREFIX" != "$pfx" ]; then
echo "* "
echo "# * " >>config.log
echo "* ERROR: According to pkg-config, portaudio-2.0 is installed in prefix: "
echo "# * ERROR: According to pkg-config, portaudio-2.0 is installed in prefix: " >>config.log
echo "* $MK_EXEC_PKGPREFIX, but the prefix ${prefix_portaudio} was given."
echo "# * $MK_EXEC_PKGPREFIX, but the prefix ${prefix_portaudio} was given." >>config.log
echo "* "
echo "# * " >>config.log
echo "* Please indicate correct portaudio-2.0 prefix (or omit for autodetect)."
echo "# * Please indicate correct portaudio-2.0 prefix (or omit for autodetect)." >>config.log
echo "* "
echo "# * " >>config.log
echo "***"
echo "*** ERROR: Package prefix mismatch"
echo "*** Failed! See ./config.log for more details."
echo "***"
exit 1
fi
fi
PORTAUDIO_CFLAGS=`$PKGCONFIG portaudio-2.0 --cflags 2>/dev/null`
if [ "$pfx" != "" ]; then
MK_EXEC_PKGPREFIX=`$PKGCONFIG --variable=prefix portaudio-2.0 2>/dev/null`
if [ "$MK_EXEC_PKGPREFIX" != "$pfx" ]; then
echo "* "
echo "# * " >>config.log
echo "* ERROR: According to pkg-config, portaudio-2.0 is installed in prefix: "
echo "# * ERROR: According to pkg-config, portaudio-2.0 is installed in prefix: " >>config.log
echo "* $MK_EXEC_PKGPREFIX, but the prefix ${prefix_portaudio} was given."
echo "# * $MK_EXEC_PKGPREFIX, but the prefix ${prefix_portaudio} was given." >>config.log
echo "* "
echo "# * " >>config.log
echo "* Please indicate correct portaudio-2.0 prefix (or omit for autodetect)."
echo "# * Please indicate correct portaudio-2.0 prefix (or omit for autodetect)." >>config.log
echo "* "
echo "# * " >>config.log
echo "***"
echo "*** ERROR: Package prefix mismatch"
echo "*** Failed! See ./config.log for more details."
echo "***"
exit 1
fi
fi
PORTAUDIO_LIBS=`$PKGCONFIG portaudio-2.0 --libs 2>/dev/null`
if [ "${PORTAUDIO_VERSION}" != "" ]; then
PORTAUDIO_VERSION="${PORTAUDIO_VERSION}.0"
fi
if [ -e "/usr/local/include/portaudio2/portaudio.h" ]; then
PORTAUDIO_CFLAGS="-I/usr/local/include/portaudio2 ${PORTAUDIO_CFLAGS}"
fi
if [ -e "/usr/include/portaudio2/portaudio.h" ]; then
PORTAUDIO_CFLAGS="-I/usr/include/portaudio2 ${PORTAUDIO_CFLAGS}"
fi
if [ -e "/opt/local/include/portaudio2/portaudio.h" ]; then
PORTAUDIO_CFLAGS="-I/opt/local/include/portaudio2 ${PORTAUDIO_CFLAGS}"
fi
if [ -e "/opt/include/portaudio2/portaudio.h" ]; then
PORTAUDIO_CFLAGS="-I/opt/include/portaudio2 ${PORTAUDIO_CFLAGS}"
fi
if [ -e "/usr/pkg/include/portaudio2/portaudio.h" ]; then
PORTAUDIO_CFLAGS="-I/usr/pkg/include/portaudio2 ${PORTAUDIO_CFLAGS}"
fi
else
PORTAUDIO_CFLAGS=""
PORTAUDIO_LIBS=""
if [ "${prefix_portaudio}" != "" ]; then
if [ -e "${prefix_portaudio}/include/portaudio.h" ]; then
PORTAUDIO_CFLAGS="-I${prefix_portaudio}/include ${PTHREADS_CFLAGS}"
PORTAUDIO_LIBS="-L${prefix_portaudio}/lib -lportaudio ${PTHREADS_LIBS}"
PORTAUDIO_VERSION="18.0"
fi
else
if [ -e "/usr/local/include/portaudio.h" ]; then
PORTAUDIO_CFLAGS="-I/usr/local/include ${PTHREADS_CFLAGS}"
PORTAUDIO_LIBS="-L/usr/local/lib -lportaudio ${PTHREADS_LIBS}"
PORTAUDIO_VERSION="18.0"
fi
if [ -e "/usr/include/portaudio.h" ]; then
PORTAUDIO_CFLAGS="-I/usr/include ${PTHREADS_CFLAGS}"
PORTAUDIO_LIBS="-L/usr/lib -lportaudio ${PTHREADS_LIBS}"
PORTAUDIO_VERSION="18.0"
fi
if [ -e "/opt/local/include/portaudio.h" ]; then
PORTAUDIO_CFLAGS="-I/opt/local/include ${PTHREADS_CFLAGS}"
PORTAUDIO_LIBS="-L/opt/local/lib -lportaudio ${PTHREADS_LIBS}"
PORTAUDIO_VERSION="18.0"
fi
if [ -e "/opt/include/portaudio.h" ]; then
PORTAUDIO_CFLAGS="-I/opt/include ${PTHREADS_CFLAGS}"
PORTAUDIO_LIBS="-L/opt/lib -lportaudio ${PTHREADS_LIBS}"
PORTAUDIO_VERSION="18.0"
fi
if [ -e "/usr/pkg/include/portaudio.h" ]; then
PORTAUDIO_CFLAGS="-I/usr/pkg/include ${PTHREADS_CFLAGS}"
PORTAUDIO_LIBS="-L/usr/pkg/lib -lportaudio ${PTHREADS_LIBS}"
PORTAUDIO_VERSION="18.0"
fi
fi
fi
if [ "${PORTAUDIO_VERSION}" != "" ]; then
if [ "${prefix_portaudio}" != "" ]; then
echo "yes ($PORTAUDIO_VERSION in ${prefix_portaudio})"
echo "# yes ($PORTAUDIO_VERSION in ${prefix_portaudio})" >>config.log
else
echo "yes ($PORTAUDIO_VERSION)"
echo "# yes ($PORTAUDIO_VERSION)" >>config.log
fi
MK_VERSION_MAJOR=`echo "$PORTAUDIO_VERSION" |sed 's/\([0-9]*\).\([0-9]*\).\([0-9]*\).*/\1/'`;
MK_VERSION_MINOR=`echo "$PORTAUDIO_VERSION" |sed 's/\([0-9]*\).\([0-9]*\).\([0-9]*\).*/\2/'`;
MK_VERSION_OK=no
if [ $MK_VERSION_MAJOR -gt 19 ]; then
MK_VERSION_OK=yes
elif [ $MK_VERSION_MAJOR -eq 19 ]; then
if [ "$MK_VERSION_MINOR" = '' ]; then
MK_VERSION_OK=yes
else
if [ $MK_VERSION_MINOR -ge 0 ]; then
MK_VERSION_OK=yes
fi
fi
fi
if [ "${MK_VERSION_OK}" = "no" ]; then
echo '*'
echo '# *' >>config.log
echo "* Minimum required version is 19.0 (found $PORTAUDIO_VERSION)"
echo "# * Minimum required version is 19.0 (found $PORTAUDIO_VERSION)" >>config.log
echo '*'
echo '# *' >>config.log
fi
else
if [ "${prefix_portaudio}" != "" ]; then
echo "no (not in ${prefix_portaudio})"
echo "# no (not in ${prefix_portaudio})" >>config.log
else
echo 'no'
echo '# no' >>config.log
fi
MK_VERSION_OK="no"
fi
if [ "${MK_VERSION_OK}" = "yes" ]; then
$ECHO_N 'checking whether PortAudio2 works...'
$ECHO_N '# checking whether PortAudio2 works...' >>config.log
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#include <stdio.h>
#include <portaudio.h>

int
main(int argc, char *argv[])
{
	int rv;

	if ((rv = Pa_Initialize()) != paNoError) {
		if (Pa_IsFormatSupported(NULL, NULL, 48000.0) != 0) {
			return (0);
		} else {
			return (rv);
		}
	} else {
		Pa_Terminate();
		return (0);
	}
}
EOT
echo >>config.log
echo '# C: HAVE_PORTAUDIO' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${PORTAUDIO_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${PORTAUDIO_LIBS} 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${PORTAUDIO_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${PORTAUDIO_LIBS} 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_PORTAUDIO=yes
bb_o=$bb_incdir/have_portaudio.h
echo '#ifndef HAVE_PORTAUDIO' >$bb_o
echo "#define HAVE_PORTAUDIO \"$HAVE_PORTAUDIO\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_PORTAUDIO\"] = \"$HAVE_PORTAUDIO\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_PORTAUDIO=no
echo '#undef HAVE_PORTAUDIO' >$bb_incdir/have_portaudio.h
echo 'hdefs["HAVE_PORTAUDIO"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_PORTAUDIO}" = "yes" ]; then
bb_o=$bb_incdir/portaudio_cflags.h
echo '#ifndef PORTAUDIO_CFLAGS' >$bb_o
echo "#define PORTAUDIO_CFLAGS \"$PORTAUDIO_CFLAGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"PORTAUDIO_CFLAGS\"] = \"$PORTAUDIO_CFLAGS\"" >>configure.lua
bb_o=$bb_incdir/portaudio_libs.h
echo '#ifndef PORTAUDIO_LIBS' >$bb_o
echo "#define PORTAUDIO_LIBS \"$PORTAUDIO_LIBS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"PORTAUDIO_LIBS\"] = \"$PORTAUDIO_LIBS\"" >>configure.lua
else
echo '#undef PORTAUDIO_CFLAGS' >$bb_incdir/portaudio_cflags.h
echo 'hdefs["PORTAUDIO_CFLAGS"] = nil' >>configure.lua
PORTAUDIO_CFLAGS=""
echo '#undef PORTAUDIO_LIBS' >$bb_incdir/portaudio_libs.h
echo 'hdefs["PORTAUDIO_LIBS"] = nil' >>configure.lua
PORTAUDIO_LIBS=""
fi
else
echo '#undef HAVE_PORTAUDIO' >$bb_incdir/have_portaudio.h
echo 'hdefs["HAVE_PORTAUDIO"] = nil' >>configure.lua
echo '#undef PORTAUDIO_CFLAGS' >$bb_incdir/portaudio_cflags.h
echo 'hdefs["PORTAUDIO_CFLAGS"] = nil' >>configure.lua
echo '#undef PORTAUDIO_LIBS' >$bb_incdir/portaudio_libs.h
echo 'hdefs["PORTAUDIO_LIBS"] = nil' >>configure.lua
fi
if [ "${HAVE_PORTAUDIO}" = "yes" ]; then
PORTAUDIO_PC="portaudio-2.0"
else
PORTAUDIO_PC=""
fi
# END portaudio
else
echo '#undef ENABLE_AU' >$bb_incdir/enable_au.h
echo 'hdefs["ENABLE_AU"] = nil' >>configure.lua
SUBDIR_au=""
echo 'not enabling libsndfile'
echo '# not enabling libsndfile' >>config.log
HAVE_SNDFILE="no"
SNDFILE_CFLAGS=""
SNDFILE_LIBS=""
SNDFILE_PC=""
echo '#undef HAVE_SNDFILE' >$bb_incdir/have_sndfile.h
echo 'hdefs["HAVE_SNDFILE"] = nil' >>configure.lua
echo '#undef SNDFILE_CFLAGS' >$bb_incdir/sndfile_cflags.h
echo 'hdefs["SNDFILE_CFLAGS"] = nil' >>configure.lua
echo '#undef SNDFILE_LIBS' >$bb_incdir/sndfile_libs.h
echo 'hdefs["SNDFILE_LIBS"] = nil' >>configure.lua
echo 'not enabling PortAudio2'
echo '# not enabling PortAudio2' >>config.log
HAVE_PORTAUDIO="no"
PORTAUDIO_CFLAGS=""
PORTAUDIO_LIBS=""
PORTAUDIO_PC=""
echo '#undef HAVE_PORTAUDIO' >$bb_incdir/have_portaudio.h
echo 'hdefs["HAVE_PORTAUDIO"] = nil' >>configure.lua
echo '#undef PORTAUDIO_CFLAGS' >$bb_incdir/portaudio_cflags.h
echo 'hdefs["PORTAUDIO_CFLAGS"] = nil' >>configure.lua
echo '#undef PORTAUDIO_LIBS' >$bb_incdir/portaudio_libs.h
echo 'hdefs["PORTAUDIO_LIBS"] = nil' >>configure.lua
fi
if [ "${enable_map}" = 'yes' -a "${enable_gui}" != 'no' ]
 then
ENABLE_MAP="yes"
bb_o=$bb_incdir/enable_map.h
echo '#ifndef ENABLE_MAP' >$bb_o
echo "#define ENABLE_MAP \"$ENABLE_MAP\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"ENABLE_MAP\"] = \"$ENABLE_MAP\"" >>configure.lua
SUBDIR_map="map"
else
echo '#undef ENABLE_MAP' >$bb_incdir/enable_map.h
echo 'hdefs["ENABLE_MAP"] = nil' >>configure.lua
SUBDIR_map=""
fi
if [ "${enable_sg}" != 'no' -a "${enable_gui}" != 'no' -a "${enable_math}" != 'no' -a "${enable_threads}" != 'no' -a "${HAVE_OPENGL}" = 'yes' ]
 then
ENABLE_SG="yes"
bb_o=$bb_incdir/enable_sg.h
echo '#ifndef ENABLE_SG' >$bb_o
echo "#define ENABLE_SG \"$ENABLE_SG\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"ENABLE_SG\"] = \"$ENABLE_SG\"" >>configure.lua
SUBDIR_sg="sg"
	if [ "${with_glu}" != 'no' ]
 then
$ECHO_N 'checking for GLU...'
$ECHO_N '# checking for GLU...' >>config.log
# BEGIN glu(0 ${prefix_glu})
GLU_CFLAGS=""
GLU_LIBS=""
case "${host}" in
*-*-darwin*)
GLU_CFLAGS=""
GLU_LIBS="-framework GLUT"
;;
*-*-cygwin* | *-*-mingw32*)
if [ "${prefix_glu}" != "" ]; then
GLU_CFLAGS="-I${prefix_glu}/include"
GLU_LIBS="-L${prefix_glu}/lib -lglu32"
else
GLU_CFLAGS=""
GLU_LIBS="-lglu32"
fi
;;
*)
if [ "${prefix_glu}" != "" ]; then
if [ -e "${prefix_glu}/include/GL/glu.h" ]; then
GLU_CFLAGS="-I${prefix_glu}/include"
GLU_LIBS="-L${prefix_glu}/lib -lGLU"
fi
else
if [ -e "/usr/include/GL/glu.h" ]; then
GLU_CFLAGS="-I/usr/include"
GLU_LIBS="-L/usr/lib -lGLU"
fi
if [ -e "/usr/local/include/GL/glu.h" ]; then
GLU_CFLAGS="-I/usr/local/include"
GLU_LIBS="-L/usr/local/lib -lGLU"
fi
if [ -e "/usr/include/X11/GL/glu.h" ]; then
GLU_CFLAGS="-I/usr/include/X11"
GLU_LIBS="-L/usr/lib/X11 -lGLU"
fi
if [ -e "/usr/include/X11R6/GL/glu.h" ]; then
GLU_CFLAGS="-I/usr/include/X11R6"
GLU_LIBS="-L/usr/lib/X11R6 -lGLU"
fi
if [ -e "/usr/local/X11/include/GL/glu.h" ]; then
GLU_CFLAGS="-I/usr/local/X11/include"
GLU_LIBS="-L/usr/local/X11/lib -lGLU"
fi
if [ -e "/usr/local/X11R6/include/GL/glu.h" ]; then
GLU_CFLAGS="-I/usr/local/X11R6/include"
GLU_LIBS="-L/usr/local/X11R6/lib -lGLU"
fi
if [ -e "/usr/local/include/X11/GL/glu.h" ]; then
GLU_CFLAGS="-I/usr/local/include/X11"
GLU_LIBS="-L/usr/local/lib/X11 -lGLU"
fi
if [ -e "/usr/local/include/X11R6/GL/glu.h" ]; then
GLU_CFLAGS="-I/usr/local/include/X11R6"
GLU_LIBS="-L/usr/local/lib/X11R6 -lGLU"
fi
if [ -e "/usr/X11/include/GL/glu.h" ]; then
GLU_CFLAGS="-I/usr/X11/include"
GLU_LIBS="-L/usr/X11/lib -lGLU"
fi
if [ -e "/usr/X11R6/include/GL/glu.h" ]; then
GLU_CFLAGS="-I/usr/X11R6/include"
GLU_LIBS="-L/usr/X11R6/lib -lGLU"
fi
fi
;;
esac
MK_COMPILE_STATUS=OK
cat << EOT >conftest$$.c
#ifdef __APPLE__
#include <OpenGL/gl.h>
#include <OpenGL/glu.h>
#else
#include <GL/gl.h>
#include <GL/glu.h>
#endif
int main(int argc, char *argv[]) {
	GLUquadric *qd;
	qd = gluNewQuadric();
	gluDeleteQuadric(qd);
	return (0);
}
EOT
echo >>config.log
echo '# C: HAVE_GLU' >>config.log
echo "cat << EOT >conftest$$.c" >>config.log
cat conftest$$.c>>config.log
echo EOT >>config.log
echo "$CC $CFLAGS $TEST_CFLAGS ${OPENGL_CFLAGS} ${GLU_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${OPENGL_LIBS} ${GLU_LIBS} ${MATH_LIBS} 2>>config.log">>config.log
$CC $CFLAGS $TEST_CFLAGS ${OPENGL_CFLAGS} ${GLU_CFLAGS} -o $testdir/conftest$$ conftest$$.c ${OPENGL_LIBS} ${GLU_LIBS} ${MATH_LIBS} 2>>config.log
if [ "$?" != "0" ]; then
echo "# failed $?" >>config.log
MK_COMPILE_STATUS="FAIL $?"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo 'yes'
echo '# yes' >>config.log
HAVE_GLU=yes
bb_o=$bb_incdir/have_glu.h
echo '#ifndef HAVE_GLU' >$bb_o
echo "#define HAVE_GLU \"$HAVE_GLU\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"HAVE_GLU\"] = \"$HAVE_GLU\"" >>configure.lua
else
echo 'no'
echo '# no' >>config.log
HAVE_GLU=no
echo '#undef HAVE_GLU' >$bb_incdir/have_glu.h
echo 'hdefs["HAVE_GLU"] = nil' >>configure.lua
fi
if [ "${keep_conftest}" != "yes" ]; then
rm -f conftest$$.c $testdir/conftest$$$EXECSUFFIX
fi
if [ "${HAVE_GLU}" = "yes" ]; then
bb_o=$bb_incdir/glu_cflags.h
echo '#ifndef GLU_CFLAGS' >$bb_o
echo "#define GLU_CFLAGS \"$GLU_CFLAGS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"GLU_CFLAGS\"] = \"$GLU_CFLAGS\"" >>configure.lua
bb_o=$bb_incdir/glu_libs.h
echo '#ifndef GLU_LIBS' >$bb_o
echo "#define GLU_LIBS \"$GLU_LIBS\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"GLU_LIBS\"] = \"$GLU_LIBS\"" >>configure.lua
else
echo '#undef GLU_CFLAGS' >$bb_incdir/glu_cflags.h
echo 'hdefs["GLU_CFLAGS"] = nil' >>configure.lua
GLU_CFLAGS=""
echo '#undef GLU_LIBS' >$bb_incdir/glu_libs.h
echo 'hdefs["GLU_LIBS"] = nil' >>configure.lua
GLU_LIBS=""
fi
# END glu
		if [ "${HAVE_GLU}" = 'yes' ]
 then
SDL_CFLAGS="$SDL_CFLAGS $GLU_CFLAGS"
		else
			if [ "${with_glu}" = 'yes' ]
 then
				echo "*"
				echo "* --with-glu was requested, but no GLU"
				echo "* library was found."
				echo "*"
				exit 1
			fi
echo 'not enabling GLU'
echo '# not enabling GLU' >>config.log
HAVE_GLU="no"
GLU_CFLAGS=""
GLU_LIBS=""
echo '#undef HAVE_GLU' >$bb_incdir/have_glu.h
echo 'hdefs["HAVE_GLU"] = nil' >>configure.lua
echo '#undef GLU_CFLAGS' >$bb_incdir/glu_cflags.h
echo 'hdefs["GLU_CFLAGS"] = nil' >>configure.lua
echo '#undef GLU_LIBS' >$bb_incdir/glu_libs.h
echo 'hdefs["GLU_LIBS"] = nil' >>configure.lua
		fi
	else
echo 'not enabling GLU'
echo '# not enabling GLU' >>config.log
HAVE_GLU="no"
GLU_CFLAGS=""
GLU_LIBS=""
echo '#undef HAVE_GLU' >$bb_incdir/have_glu.h
echo 'hdefs["HAVE_GLU"] = nil' >>configure.lua
echo '#undef GLU_CFLAGS' >$bb_incdir/glu_cflags.h
echo 'hdefs["GLU_CFLAGS"] = nil' >>configure.lua
echo '#undef GLU_LIBS' >$bb_incdir/glu_libs.h
echo 'hdefs["GLU_LIBS"] = nil' >>configure.lua
	fi
else
echo '#undef ENABLE_SG' >$bb_incdir/enable_sg.h
echo 'hdefs["ENABLE_SG"] = nil' >>configure.lua
SUBDIR_sg=""
echo 'not enabling GLU'
echo '# not enabling GLU' >>config.log
HAVE_GLU="no"
GLU_CFLAGS=""
GLU_LIBS=""
echo '#undef HAVE_GLU' >$bb_incdir/have_glu.h
echo 'hdefs["HAVE_GLU"] = nil' >>configure.lua
echo '#undef GLU_CFLAGS' >$bb_incdir/glu_cflags.h
echo 'hdefs["GLU_CFLAGS"] = nil' >>configure.lua
echo '#undef GLU_LIBS' >$bb_incdir/glu_libs.h
echo 'hdefs["GLU_LIBS"] = nil' >>configure.lua
fi
if [ "${enable_sk}" != 'no' -a "${enable_gui}" != 'no' -a "${enable_math}" != 'no' -a "${HAVE_OPENGL}" = 'yes' ]
 then
ENABLE_SK="yes"
bb_o=$bb_incdir/enable_sk.h
echo '#ifndef ENABLE_SK' >$bb_o
echo "#define ENABLE_SK \"$ENABLE_SK\"" >>$bb_o
echo '#endif' >>$bb_o
echo "hdefs[\"ENABLE_SK\"] = \"$ENABLE_SK\"" >>configure.lua
SUBDIR_sk="sk"
else
echo '#undef ENABLE_SK' >$bb_incdir/enable_sk.h
echo 'hdefs["ENABLE_SK"] = nil' >>configure.lua
SUBDIR_sk=""
fi
SRCS_CORE=""
if [ "${HAVE_SNPRINTF}" != 'yes' ]
 then
SRCS_CORE="${SRCS_CORE} snprintf.c"
fi
if [ "${HAVE_CLOCK_WIN32}" = 'yes' ]
 then
SRCS_CORE="${SRCS_CORE} time_win32.c"
fi
if [ "${HAVE_CLOCK_GETTIME}" = 'yes' ]
 then
	if [ "${HAVE_NANOSLEEP}" = 'yes' ]
 then
SRCS_CORE="${SRCS_CORE} time_posix.c"
	fi
	if [ "${HAVE_PTHREADS}" = 'yes' ]
 then
SRCS_CORE="${SRCS_CORE} time_renderer.c"
	fi
fi
if [ "${HAVE_GETTIMEOFDAY}" = 'yes' ]
 then
	if [ "${HAVE_SELECT}" = 'yes' ]
 then
SRCS_CORE="${SRCS_CORE} time_gettimeofday.c"
	fi
fi
if [ "${HAVE_DB4}" = 'yes' -o "${HAVE_DB5}" = 'yes' ]
 then
SRCS_CORE="${SRCS_CORE} db_bdb.c"
fi
if [ "${HAVE_MYSQL}" = 'yes' ]
 then
SRCS_CORE="${SRCS_CORE} db_mysql.c"
fi
if [ "${HAVE_NETWORK}" = 'yes' ]
 then
	if [ "${HAVE_WINSOCK1}" = 'yes' ]
 then
SRCS_NET="${SRCS_NET} net_winsock1.c"
	fi
	if [ "${HAVE_WINSOCK2}" = 'yes' ]
 then
SRCS_NET="${SRCS_NET} net_winsock2.c"
	fi
	if [ "${HAVE_GETADDRINFO}" = 'yes' ]
 then
SRCS_NET="${SRCS_NET} net_bsd.c"
	fi
	if [ "${HAVE_WEB}" = 'yes' ]
 then
SRCS_NET="${SRCS_NET} web.c web_auth.c web_var.c"
	fi
fi
if [ "${HAVE_GETPWUID}" = 'yes' ]
 then
SRCS_CORE="${SRCS_CORE} user_posix.c"
fi
if [ "${HAVE_XBOX}" = 'yes' ]
 then
SRCS_CORE="${SRCS_CORE} user_xbox.c xbox.c"
fi
if [ "${HAVE_CSIDL}" = 'yes' ]
 then
SRCS_CORE="${SRCS_CORE} user_win32.c"
fi
SRCS_GUI=""
if [ "${HAVE_SDL}" = 'yes' ]
 then
SRCS_GUI="${SRCS_GUI} drv_sdl_common.c drv_sdlfb.c"
	if [ "${HAVE_OPENGL}" = 'yes' ]
 then
SRCS_GUI="${SRCS_GUI} drv_sdlgl.c"
	fi
fi
if [ "${HAVE_OPENGL}" = 'yes' ]
 then
SRCS_GUI="${SRCS_GUI} drv_gl_common.c"
	if [ "${HAVE_GLX}" = 'yes' ]
 then
SRCS_GUI="${SRCS_GUI} drv_glx.c"
	fi
	if [ "${HAVE_WGL}" = 'yes' ]
 then
SRCS_GUI="${SRCS_GUI} drv_wgl.c"
	fi
fi
if [ "${HAVE_COCOA}" = 'yes' ]
 then
SRCS_GUI="${SRCS_GUI} drv_cocoa.m"
fi
SRCS_AU=""
if [ "${AG_THREADS}" = 'yes' ]
 then
	if [ "${HAVE_SNDFILE}" = 'yes' ]
 then
SRCS_AU="${SRCS_AU} au_dev_file.c"
	fi
	if [ "${HAVE_PORTAUDIO}" = 'yes' ]
 then
SRCS_AU="${SRCS_AU} au_dev_pa.c"
	fi
fi
if [ ! -e "$BLD/include/agar" ]; then
	mkdir -p "$BLD/include/agar"
fi
if [ "${includes}" = "link" ]; then
	$ECHO_N "linking header files..."
	if [ "${SRCDIR}" != "${BLDDIR}" ]; then
		(cd ${SRCDIR} && ${PERL} mk/gen-includelinks.pl "${SRCDIR}" "$BLD/include/agar" 1>>${BLDDIR}/config.log 2>&1)
	else
		${PERL} mk/gen-includelinks.pl "${SRCDIR}" "$BLD/include/agar" 1>>config.log 2>&1
	fi
	if [ $? != 0 ]; then
		echo "${PERL} mk/gen-includelinks.pl failed"
		exit 1
	fi
	echo 'done'
else
	if [ "${PERL}" = '' ]; then
		echo '*'
		echo '* The --includes=yes option requires perl, but no perl'
		echo '* interpreter was found. If perl is unavailable, please'
		echo '* please rerun configure with --includes=link'
		echo '*'
		exit 1
	fi
	$ECHO_N "preprocessing header files..."
	if [ "${SRCDIR}" != "${BLDDIR}" ]; then
		(cd ${SRCDIR} && ${PERL} mk/gen-includes.pl "$BLD/include/agar" 1>>${BLDDIR}/config.log 2>&1)
	else
		${PERL} mk/gen-includes.pl "$BLD/include/agar" 1>>config.log 2>&1
	fi
	if [ $? != 0 ]; then
		echo "${PERL} mk/gen-includes.pl failed"
		exit 1
	fi
	echo 'done'
fi
CFLAGS="$CFLAGS -I$BLD/include"
CXXFLAGS="$CXXFLAGS -I$BLD/include"
config_script_out="agar-core-config"
config_script_cflags="-I${INCLDIR} ${GETTEXT_CFLAGS} ${DSO_CFLAGS} ${CLOCK_CFLAGS} ${ICONV_CFLAGS}"
if [ "${HAVE_CC65}" = "yes" ]; then
config_script_libs="-L${LIBDIR} -lag_core ${MATH_LIBS} ${PTHREADS_LIBS} ${DB4_LIBS} ${DB5_LIBS} ${MYSQL_LIBS} ${GETTEXT_LIBS} ${DSO_LIBS} ${CLOCK_LIBS} ${ICONV_LIBS}"
config_libs_cc65=""
bb_save_IFS=$IFS
IFS=" "
for lib in $config_script_libs; do
case "$lib" in
-l*)
lib_bare=`echo "$lib" |sed "s/^-l//"`
config_libs_cc65="${config_libs_cc65} ${prefix}/lib/${lib_bare}.lib"
;;
esac
done
IFS=$bb_save_IFS
config_script_libs="$config_libs_cc65"
else
config_script_libs="-L${LIBDIR} -lag_core ${MATH_LIBS} ${PTHREADS_LIBS} ${DB4_LIBS} ${DB5_LIBS} ${MYSQL_LIBS} ${GETTEXT_LIBS} ${DSO_LIBS} ${CLOCK_LIBS} ${ICONV_LIBS}"
fi
cat << EOT > $config_script_out
#!/bin/sh
# Generated by ${PACKAGE}'s BSDBuild configure script.
#
# BSDBuild 3.2 (https://bsdbuild.hypertriton.com/)
# ${PACKAGE} ${VERSION}

prefix='${PREFIX}'
exec_prefix='${EXEC_PREFIX}'
exec_prefix_set='no'
libdir='${LIBDIR}'

usage='\
Usage: $config_script_out [--prefix[=DIR]] [--exec-prefix[=DIR]] [--host] [--version] [--release] [--cflags] [--libs]'

if test \$# -eq 0; then
	echo "\${usage}" 1>&2
	exit 1
fi

while test \$# -gt 0; do
	case "\$1" in
	-*=*)
		optarg=\`echo "\$1" | LC_ALL='C' sed 's/[-_a-zA-Z0-9]*=//'\`
		;;
	*)
		optarg=
		;;
	esac

	case \$1 in
	--prefix=*)
		prefix=\$optarg
		if test \$exec_prefix_set = no ; then
			exec_prefix=\$optarg
		fi
		;;
	--prefix)
		echo "\$prefix"
		;;
	--exec-prefix=*)
		exec_prefix=\$optarg
		exec_prefix_set=yes
		;;
	--exec-prefix)
		echo "\$exec_prefix"
		;;
	--host)
		echo '${host}'
		;;
	--version)
		echo '${VERSION}'
		;;
	--release)
		echo '${RELEASE}'
		;;
	--cflags)
		echo '$config_script_cflags'
		;;
	--libs | --static-libs)
		echo '$config_script_libs'
		;;
	*)
		echo "\${usage}" 1>&2
		exit 1
		;;
	esac
	shift
done
EOT
AVAIL_CONFIGSCRIPTS="$AVAIL_CONFIGSCRIPTS agar-core-config"
pkgconfig_module_out="agar-core"
pkgconfig_module_desc="Agar object system and utility library"
pkgconfig_module_requires=""
pkgconfig_module_conflicts=""
pkgconfig_module_cflags="-I\${includedir}/agar ${PTHREADS_XOPEN_CFLAGS} ${ALTIVEC_CHECK_CFLAGS} ${GETTEXT_CFLAGS} ${DSO_CFLAGS} ${DB4_CFLAGS} ${DB5_CFLAGS} ${MYSQL_CFLAGS} ${CLOCK_CFLAGS}"
pkgconfig_module_libs="-L\${libdir} -lag_core"
pkgconfig_module_libs_pvt="-lag_core ${PTHREADS_XOPEN_LIBS} ${GETTEXT_LIBS} ${DSO_LIBS} ${DB4_LIBS} ${DB5_LIBS} ${MYSQL_LIBS} ${CLOCK_LIBS} ${WINSOCK1_LIBS} ${WINSOCK2_LIBS}"
cat << EOT > $pkgconfig_module_out.pc
# ${PACKAGE} pkg-config source file.
#
# Generated by ${PACKAGE}'s BSDBuild-based configure script.
# BSDBuild 3.2 (https://bsdbuild.hypertriton.com/).

prefix=${PREFIX}
exec_prefix=\${prefix}
libdir=\${exec_prefix}/lib
includedir=\${prefix}/include

Name: $pkgconfig_module_out
Description: $pkgconfig_module_desc
Version: ${VERSION}
Requires: $pkgconfig_module_requires
Conflicts: $pkgconfig_module_conflicts
Libs: $pkgconfig_module_libs
Libs.private: $pkgconfig_module_libs_pvt
Cflags: $pkgconfig_module_cflags
EOT
AVAIL_PCMODULES="$AVAIL_PCMODULES agar-core.pc"
if [ "${enable_gui}" != 'no' ]
 then
config_script_out="agar-config"
config_script_cflags="-I${INCLDIR} ${SDL_CFLAGS} ${FREETYPE_CFLAGS} ${FONTCONFIG_CFLAGS} ${OPENGL_CFLAGS} ${X11_CFLAGS} ${GLX_CFLAGS} ${XINERAMA_CFLAGS} ${COCOA_CFLAGS} ${MATH_CFLAGS} ${PNG_CFLAGS} ${PTHREADS_CFLAGS} ${DB4_CFLAGS} ${DB5_CFLAGS} ${MYSQL_CFLAGS} ${GETTEXT_CFLAGS} ${DSO_CFLAGS} ${CLOCK_CFLAGS} ${UIM_CFLAGS} ${ICONV_CFLAGS}"
if [ "${HAVE_CC65}" = "yes" ]; then
config_script_libs="-L${LIBDIR} -lag_gui -lag_core ${SDL_LIBS} ${FREETYPE_LIBS} ${FONTCONFIG_LIBS} ${OPENGL_LIBS} ${X11_LIBS} ${XINERAMA_LIBS} ${COCOA_LIBS} ${MATH_LIBS} ${JPEG_LIBS} ${PNG_LIBS} ${PTHREADS_LIBS} ${DB4_LIBS} ${DB5_LIBS} ${MYSQL_LIBS} ${GETTEXT_LIBS} ${DSO_LIBS} ${CLOCK_LIBS} ${UIM_LIBS} ${ICONV_LIBS}"
config_libs_cc65=""
bb_save_IFS=$IFS
IFS=" "
for lib in $config_script_libs; do
case "$lib" in
-l*)
lib_bare=`echo "$lib" |sed "s/^-l//"`
config_libs_cc65="${config_libs_cc65} ${prefix}/lib/${lib_bare}.lib"
;;
esac
done
IFS=$bb_save_IFS
config_script_libs="$config_libs_cc65"
else
config_script_libs="-L${LIBDIR} -lag_gui -lag_core ${SDL_LIBS} ${FREETYPE_LIBS} ${FONTCONFIG_LIBS} ${OPENGL_LIBS} ${X11_LIBS} ${XINERAMA_LIBS} ${COCOA_LIBS} ${MATH_LIBS} ${JPEG_LIBS} ${PNG_LIBS} ${PTHREADS_LIBS} ${DB4_LIBS} ${DB5_LIBS} ${MYSQL_LIBS} ${GETTEXT_LIBS} ${DSO_LIBS} ${CLOCK_LIBS} ${UIM_LIBS} ${ICONV_LIBS}"
fi
cat << EOT > $config_script_out
#!/bin/sh
# Generated by ${PACKAGE}'s BSDBuild configure script.
#
# BSDBuild 3.2 (https://bsdbuild.hypertriton.com/)
# ${PACKAGE} ${VERSION}

prefix='${PREFIX}'
exec_prefix='${EXEC_PREFIX}'
exec_prefix_set='no'
libdir='${LIBDIR}'

usage='\
Usage: $config_script_out [--prefix[=DIR]] [--exec-prefix[=DIR]] [--host] [--version] [--release] [--cflags] [--libs]'

if test \$# -eq 0; then
	echo "\${usage}" 1>&2
	exit 1
fi

while test \$# -gt 0; do
	case "\$1" in
	-*=*)
		optarg=\`echo "\$1" | LC_ALL='C' sed 's/[-_a-zA-Z0-9]*=//'\`
		;;
	*)
		optarg=
		;;
	esac

	case \$1 in
	--prefix=*)
		prefix=\$optarg
		if test \$exec_prefix_set = no ; then
			exec_prefix=\$optarg
		fi
		;;
	--prefix)
		echo "\$prefix"
		;;
	--exec-prefix=*)
		exec_prefix=\$optarg
		exec_prefix_set=yes
		;;
	--exec-prefix)
		echo "\$exec_prefix"
		;;
	--host)
		echo '${host}'
		;;
	--version)
		echo '${VERSION}'
		;;
	--release)
		echo '${RELEASE}'
		;;
	--cflags)
		echo '$config_script_cflags'
		;;
	--libs | --static-libs)
		echo '$config_script_libs'
		;;
	*)
		echo "\${usage}" 1>&2
		exit 1
		;;
	esac
	shift
done
EOT
AVAIL_CONFIGSCRIPTS="$AVAIL_CONFIGSCRIPTS agar-config"
	
pkgconfig_module_out="agar"
pkgconfig_module_desc="Agar cross-platform GUI toolkit"
pkgconfig_module_requires="${X11_PC} ${SDL_PC} ${FREETYPE_PC} ${FONTCONFIG_PC} ${OPENGL_PC} ${XINERAMA_PC} ${JPEG_PC} ${PNG_PC} ${UIM_PC}"
pkgconfig_module_conflicts=""
pkgconfig_module_cflags="-I\${includedir}/agar ${COCOA_CFLAGS} ${MATH_CFLAGS} ${PTHREADS_CFLAGS} ${DB4_CFLAGS} ${DB5_CFLAGS} ${MYSQL_CFLAGS} ${GETTEXT_CFLAGS} ${DSO_CFLAGS} ${CLOCK_CFLAGS}"
pkgconfig_module_libs="-L\${libdir} -lag_gui -lag_core"
pkgconfig_module_libs_pvt="-lag_gui -lag_core ${COCOA_LIBS} ${MATH_LIBS} ${PTHREADS_LIBS} ${DB4_LIBS} ${DB5_LIBS} ${MYSQL_LIBS} ${GETTEXT_LIBS} ${DSO_LIBS} ${CLOCK_LIBS} ${ICONV_LIBS}"
cat << EOT > $pkgconfig_module_out.pc
# ${PACKAGE} pkg-config source file.
#
# Generated by ${PACKAGE}'s BSDBuild-based configure script.
# BSDBuild 3.2 (https://bsdbuild.hypertriton.com/).

prefix=${PREFIX}
exec_prefix=\${prefix}
libdir=\${exec_prefix}/lib
includedir=\${prefix}/include

Name: $pkgconfig_module_out
Description: $pkgconfig_module_desc
Version: ${VERSION}
Requires: $pkgconfig_module_requires
Conflicts: $pkgconfig_module_conflicts
Libs: $pkgconfig_module_libs
Libs.private: $pkgconfig_module_libs_pvt
Cflags: $pkgconfig_module_cflags
EOT
AVAIL_PCMODULES="$AVAIL_PCMODULES agar.pc"
fi
if [ "${enable_micro}" = 'yes' ]
 then
config_script_out="agar-micro-config"
config_script_cflags="-I${INCLDIR}"
if [ "${HAVE_CC65}" = "yes" ]; then
config_script_libs="-L${LIBDIR} -lag_micro_gui -lag_core"
config_libs_cc65=""
bb_save_IFS=$IFS
IFS=" "
for lib in $config_script_libs; do
case "$lib" in
-l*)
lib_bare=`echo "$lib" |sed "s/^-l//"`
config_libs_cc65="${config_libs_cc65} ${prefix}/lib/${lib_bare}.lib"
;;
esac
done
IFS=$bb_save_IFS
config_script_libs="$config_libs_cc65"
else
config_script_libs="-L${LIBDIR} -lag_micro_gui -lag_core"
fi
cat << EOT > $config_script_out
#!/bin/sh
# Generated by ${PACKAGE}'s BSDBuild configure script.
#
# BSDBuild 3.2 (https://bsdbuild.hypertriton.com/)
# ${PACKAGE} ${VERSION}

prefix='${PREFIX}'
exec_prefix='${EXEC_PREFIX}'
exec_prefix_set='no'
libdir='${LIBDIR}'

usage='\
Usage: $config_script_out [--prefix[=DIR]] [--exec-prefix[=DIR]] [--host] [--version] [--release] [--cflags] [--libs]'

if test \$# -eq 0; then
	echo "\${usage}" 1>&2
	exit 1
fi

while test \$# -gt 0; do
	case "\$1" in
	-*=*)
		optarg=\`echo "\$1" | LC_ALL='C' sed 's/[-_a-zA-Z0-9]*=//'\`
		;;
	*)
		optarg=
		;;
	esac

	case \$1 in
	--prefix=*)
		prefix=\$optarg
		if test \$exec_prefix_set = no ; then
			exec_prefix=\$optarg
		fi
		;;
	--prefix)
		echo "\$prefix"
		;;
	--exec-prefix=*)
		exec_prefix=\$optarg
		exec_prefix_set=yes
		;;
	--exec-prefix)
		echo "\$exec_prefix"
		;;
	--host)
		echo '${host}'
		;;
	--version)
		echo '${VERSION}'
		;;
	--release)
		echo '${RELEASE}'
		;;
	--cflags)
		echo '$config_script_cflags'
		;;
	--libs | --static-libs)
		echo '$config_script_libs'
		;;
	*)
		echo "\${usage}" 1>&2
		exit 1
		;;
	esac
	shift
done
EOT
AVAIL_CONFIGSCRIPTS="$AVAIL_CONFIGSCRIPTS agar-micro-config"
fi
if [ "${enable_au}" = 'yes' ]
 then
config_script_out="agar-au-config"
config_script_cflags="-I${INCLDIR} ${PORTAUDIO_CFLAGS} ${SNDFILE_CFLAGS}"
if [ "${HAVE_CC65}" = "yes" ]; then
config_script_libs="-L${LIBDIR} -lag_au ${PORTAUDIO_LIBS} ${SNDFILE_LIBS}"
config_libs_cc65=""
bb_save_IFS=$IFS
IFS=" "
for lib in $config_script_libs; do
case "$lib" in
-l*)
lib_bare=`echo "$lib" |sed "s/^-l//"`
config_libs_cc65="${config_libs_cc65} ${prefix}/lib/${lib_bare}.lib"
;;
esac
done
IFS=$bb_save_IFS
config_script_libs="$config_libs_cc65"
else
config_script_libs="-L${LIBDIR} -lag_au ${PORTAUDIO_LIBS} ${SNDFILE_LIBS}"
fi
cat << EOT > $config_script_out
#!/bin/sh
# Generated by ${PACKAGE}'s BSDBuild configure script.
#
# BSDBuild 3.2 (https://bsdbuild.hypertriton.com/)
# ${PACKAGE} ${VERSION}

prefix='${PREFIX}'
exec_prefix='${EXEC_PREFIX}'
exec_prefix_set='no'
libdir='${LIBDIR}'

usage='\
Usage: $config_script_out [--prefix[=DIR]] [--exec-prefix[=DIR]] [--host] [--version] [--release] [--cflags] [--libs]'

if test \$# -eq 0; then
	echo "\${usage}" 1>&2
	exit 1
fi

while test \$# -gt 0; do
	case "\$1" in
	-*=*)
		optarg=\`echo "\$1" | LC_ALL='C' sed 's/[-_a-zA-Z0-9]*=//'\`
		;;
	*)
		optarg=
		;;
	esac

	case \$1 in
	--prefix=*)
		prefix=\$optarg
		if test \$exec_prefix_set = no ; then
			exec_prefix=\$optarg
		fi
		;;
	--prefix)
		echo "\$prefix"
		;;
	--exec-prefix=*)
		exec_prefix=\$optarg
		exec_prefix_set=yes
		;;
	--exec-prefix)
		echo "\$exec_prefix"
		;;
	--host)
		echo '${host}'
		;;
	--version)
		echo '${VERSION}'
		;;
	--release)
		echo '${RELEASE}'
		;;
	--cflags)
		echo '$config_script_cflags'
		;;
	--libs | --static-libs)
		echo '$config_script_libs'
		;;
	*)
		echo "\${usage}" 1>&2
		exit 1
		;;
	esac
	shift
done
EOT
AVAIL_CONFIGSCRIPTS="$AVAIL_CONFIGSCRIPTS agar-au-config"
pkgconfig_module_out="agar-au"
pkgconfig_module_desc="Agar audio library"
pkgconfig_module_requires="agar ${PORTAUDIO_PC} ${SNDFILE_PC}"
pkgconfig_module_conflicts=""
pkgconfig_module_cflags="-I\${includedir}/agar"
pkgconfig_module_libs="-L\${libdir} -lag_au"
pkgconfig_module_libs_pvt="-lag_au ${PORTAUDIO_LIBS} ${SNDFILE_LIBS}"
cat << EOT > $pkgconfig_module_out.pc
# ${PACKAGE} pkg-config source file.
#
# Generated by ${PACKAGE}'s BSDBuild-based configure script.
# BSDBuild 3.2 (https://bsdbuild.hypertriton.com/).

prefix=${PREFIX}
exec_prefix=\${prefix}
libdir=\${exec_prefix}/lib
includedir=\${prefix}/include

Name: $pkgconfig_module_out
Description: $pkgconfig_module_desc
Version: ${VERSION}
Requires: $pkgconfig_module_requires
Conflicts: $pkgconfig_module_conflicts
Libs: $pkgconfig_module_libs
Libs.private: $pkgconfig_module_libs_pvt
Cflags: $pkgconfig_module_cflags
EOT
AVAIL_PCMODULES="$AVAIL_PCMODULES agar-au.pc"
fi
if [ "${enable_map}" = 'yes' -a "${enable_gui}" != 'no' ]
 then
config_script_out="agar-map-config"
config_script_cflags="-I${INCLDIR}"
if [ "${HAVE_CC65}" = "yes" ]; then
config_script_libs="-L${LIBDIR} -lag_map"
config_libs_cc65=""
bb_save_IFS=$IFS
IFS=" "
for lib in $config_script_libs; do
case "$lib" in
-l*)
lib_bare=`echo "$lib" |sed "s/^-l//"`
config_libs_cc65="${config_libs_cc65} ${prefix}/lib/${lib_bare}.lib"
;;
esac
done
IFS=$bb_save_IFS
config_script_libs="$config_libs_cc65"
else
config_script_libs="-L${LIBDIR} -lag_map"
fi
cat << EOT > $config_script_out
#!/bin/sh
# Generated by ${PACKAGE}'s BSDBuild configure script.
#
# BSDBuild 3.2 (https://bsdbuild.hypertriton.com/)
# ${PACKAGE} ${VERSION}

prefix='${PREFIX}'
exec_prefix='${EXEC_PREFIX}'
exec_prefix_set='no'
libdir='${LIBDIR}'

usage='\
Usage: $config_script_out [--prefix[=DIR]] [--exec-prefix[=DIR]] [--host] [--version] [--release] [--cflags] [--libs]'

if test \$# -eq 0; then
	echo "\${usage}" 1>&2
	exit 1
fi

while test \$# -gt 0; do
	case "\$1" in
	-*=*)
		optarg=\`echo "\$1" | LC_ALL='C' sed 's/[-_a-zA-Z0-9]*=//'\`
		;;
	*)
		optarg=
		;;
	esac

	case \$1 in
	--prefix=*)
		prefix=\$optarg
		if test \$exec_prefix_set = no ; then
			exec_prefix=\$optarg
		fi
		;;
	--prefix)
		echo "\$prefix"
		;;
	--exec-prefix=*)
		exec_prefix=\$optarg
		exec_prefix_set=yes
		;;
	--exec-prefix)
		echo "\$exec_prefix"
		;;
	--host)
		echo '${host}'
		;;
	--version)
		echo '${VERSION}'
		;;
	--release)
		echo '${RELEASE}'
		;;
	--cflags)
		echo '$config_script_cflags'
		;;
	--libs | --static-libs)
		echo '$config_script_libs'
		;;
	*)
		echo "\${usage}" 1>&2
		exit 1
		;;
	esac
	shift
done
EOT
AVAIL_CONFIGSCRIPTS="$AVAIL_CONFIGSCRIPTS agar-map-config"
pkgconfig_module_out="agar-map"
pkgconfig_module_desc="Agar 2D tile engine"
pkgconfig_module_requires="agar-rg agar-math agar"
pkgconfig_module_conflicts=""
pkgconfig_module_cflags="-I\${includedir}/agar ${OPENGL_CFLAGS}"
pkgconfig_module_libs="-L\${libdir} -lag_map"
pkgconfig_module_libs_pvt="-lag_map ${OPENGL_LIBS}"
cat << EOT > $pkgconfig_module_out.pc
# ${PACKAGE} pkg-config source file.
#
# Generated by ${PACKAGE}'s BSDBuild-based configure script.
# BSDBuild 3.2 (https://bsdbuild.hypertriton.com/).

prefix=${PREFIX}
exec_prefix=\${prefix}
libdir=\${exec_prefix}/lib
includedir=\${prefix}/include

Name: $pkgconfig_module_out
Description: $pkgconfig_module_desc
Version: ${VERSION}
Requires: $pkgconfig_module_requires
Conflicts: $pkgconfig_module_conflicts
Libs: $pkgconfig_module_libs
Libs.private: $pkgconfig_module_libs_pvt
Cflags: $pkgconfig_module_cflags
EOT
AVAIL_PCMODULES="$AVAIL_PCMODULES agar-map.pc"
fi
if [ "${enable_math}" != 'no' ]
 then
config_script_out="agar-math-config"
config_script_cflags="-I${INCLDIR} ${MATH_CFLAGS} ${ALTIVEC_CFLAGS} ${SSE_CFLAGS} ${SSE2_CFLAGS} ${SSE3_CFLAGS} ${MATH_CFLAGS}"
if [ "${HAVE_CC65}" = "yes" ]; then
config_script_libs="-L${LIBDIR} -lag_math ${MATH_LIBS}"
config_libs_cc65=""
bb_save_IFS=$IFS
IFS=" "
for lib in $config_script_libs; do
case "$lib" in
-l*)
lib_bare=`echo "$lib" |sed "s/^-l//"`
config_libs_cc65="${config_libs_cc65} ${prefix}/lib/${lib_bare}.lib"
;;
esac
done
IFS=$bb_save_IFS
config_script_libs="$config_libs_cc65"
else
config_script_libs="-L${LIBDIR} -lag_math ${MATH_LIBS}"
fi
cat << EOT > $config_script_out
#!/bin/sh
# Generated by ${PACKAGE}'s BSDBuild configure script.
#
# BSDBuild 3.2 (https://bsdbuild.hypertriton.com/)
# ${PACKAGE} ${VERSION}

prefix='${PREFIX}'
exec_prefix='${EXEC_PREFIX}'
exec_prefix_set='no'
libdir='${LIBDIR}'

usage='\
Usage: $config_script_out [--prefix[=DIR]] [--exec-prefix[=DIR]] [--host] [--version] [--release] [--cflags] [--libs]'

if test \$# -eq 0; then
	echo "\${usage}" 1>&2
	exit 1
fi

while test \$# -gt 0; do
	case "\$1" in
	-*=*)
		optarg=\`echo "\$1" | LC_ALL='C' sed 's/[-_a-zA-Z0-9]*=//'\`
		;;
	*)
		optarg=
		;;
	esac

	case \$1 in
	--prefix=*)
		prefix=\$optarg
		if test \$exec_prefix_set = no ; then
			exec_prefix=\$optarg
		fi
		;;
	--prefix)
		echo "\$prefix"
		;;
	--exec-prefix=*)
		exec_prefix=\$optarg
		exec_prefix_set=yes
		;;
	--exec-prefix)
		echo "\$exec_prefix"
		;;
	--host)
		echo '${host}'
		;;
	--version)
		echo '${VERSION}'
		;;
	--release)
		echo '${RELEASE}'
		;;
	--cflags)
		echo '$config_script_cflags'
		;;
	--libs | --static-libs)
		echo '$config_script_libs'
		;;
	*)
		echo "\${usage}" 1>&2
		exit 1
		;;
	esac
	shift
done
EOT
AVAIL_CONFIGSCRIPTS="$AVAIL_CONFIGSCRIPTS agar-math-config"
	if [ "${enable_gui}" != 'no' ]
 then
		AGAR_MATH_REQUIRES="agar"
	else
		AGAR_MATH_REQUIRES="agar-core"
	fi
pkgconfig_module_out="agar-math"
pkgconfig_module_desc="Agar math library"
pkgconfig_module_requires="${AGAR_MATH_REQUIRES}"
pkgconfig_module_conflicts=""
pkgconfig_module_cflags="-I\${includedir}/agar ${ALTIVEC_CFLAGS} ${SSE_CFLAGS} ${SSE2_CFLAGS} ${SSE3_CFLAGS} ${MATH_CFLAGS}"
pkgconfig_module_libs="-L\${libdir} -lag_math"
pkgconfig_module_libs_pvt="-lag_math ${MATH_LIBS}"
cat << EOT > $pkgconfig_module_out.pc
# ${PACKAGE} pkg-config source file.
#
# Generated by ${PACKAGE}'s BSDBuild-based configure script.
# BSDBuild 3.2 (https://bsdbuild.hypertriton.com/).

prefix=${PREFIX}
exec_prefix=\${prefix}
libdir=\${exec_prefix}/lib
includedir=\${prefix}/include

Name: $pkgconfig_module_out
Description: $pkgconfig_module_desc
Version: ${VERSION}
Requires: $pkgconfig_module_requires
Conflicts: $pkgconfig_module_conflicts
Libs: $pkgconfig_module_libs
Libs.private: $pkgconfig_module_libs_pvt
Cflags: $pkgconfig_module_cflags
EOT
AVAIL_PCMODULES="$AVAIL_PCMODULES agar-math.pc"
fi
if [ "${enable_net}" != 'no' ]
 then
config_script_out="agar-net-config"
config_script_cflags="-I${INCLDIR} ${ZLIB_CFLAGS}"
if [ "${HAVE_CC65}" = "yes" ]; then
config_script_libs="-L${LIBDIR} -lag_net ${ZLIB_LIBS}"
config_libs_cc65=""
bb_save_IFS=$IFS
IFS=" "
for lib in $config_script_libs; do
case "$lib" in
-l*)
lib_bare=`echo "$lib" |sed "s/^-l//"`
config_libs_cc65="${config_libs_cc65} ${prefix}/lib/${lib_bare}.lib"
;;
esac
done
IFS=$bb_save_IFS
config_script_libs="$config_libs_cc65"
else
config_script_libs="-L${LIBDIR} -lag_net ${ZLIB_LIBS}"
fi
cat << EOT > $config_script_out
#!/bin/sh
# Generated by ${PACKAGE}'s BSDBuild configure script.
#
# BSDBuild 3.2 (https://bsdbuild.hypertriton.com/)
# ${PACKAGE} ${VERSION}

prefix='${PREFIX}'
exec_prefix='${EXEC_PREFIX}'
exec_prefix_set='no'
libdir='${LIBDIR}'

usage='\
Usage: $config_script_out [--prefix[=DIR]] [--exec-prefix[=DIR]] [--host] [--version] [--release] [--cflags] [--libs]'

if test \$# -eq 0; then
	echo "\${usage}" 1>&2
	exit 1
fi

while test \$# -gt 0; do
	case "\$1" in
	-*=*)
		optarg=\`echo "\$1" | LC_ALL='C' sed 's/[-_a-zA-Z0-9]*=//'\`
		;;
	*)
		optarg=
		;;
	esac

	case \$1 in
	--prefix=*)
		prefix=\$optarg
		if test \$exec_prefix_set = no ; then
			exec_prefix=\$optarg
		fi
		;;
	--prefix)
		echo "\$prefix"
		;;
	--exec-prefix=*)
		exec_prefix=\$optarg
		exec_prefix_set=yes
		;;
	--exec-prefix)
		echo "\$exec_prefix"
		;;
	--host)
		echo '${host}'
		;;
	--version)
		echo '${VERSION}'
		;;
	--release)
		echo '${RELEASE}'
		;;
	--cflags)
		echo '$config_script_cflags'
		;;
	--libs | --static-libs)
		echo '$config_script_libs'
		;;
	*)
		echo "\${usage}" 1>&2
		exit 1
		;;
	esac
	shift
done
EOT
AVAIL_CONFIGSCRIPTS="$AVAIL_CONFIGSCRIPTS agar-net-config"
pkgconfig_module_out="agar-net"
pkgconfig_module_desc="Agar network interface"
pkgconfig_module_requires=""
pkgconfig_module_conflicts=""
pkgconfig_module_cflags="-I\${includedir}/agar ${ZLIB_CFLAGS}"
pkgconfig_module_libs="-L\${libdir} -lag_core"
pkgconfig_module_libs_pvt="-lag_net ${WINSOCK1_LIBS} ${WINSOCK2_LIBS} ${ZLIB_LIBS}"
cat << EOT > $pkgconfig_module_out.pc
# ${PACKAGE} pkg-config source file.
#
# Generated by ${PACKAGE}'s BSDBuild-based configure script.
# BSDBuild 3.2 (https://bsdbuild.hypertriton.com/).

prefix=${PREFIX}
exec_prefix=\${prefix}
libdir=\${exec_prefix}/lib
includedir=\${prefix}/include

Name: $pkgconfig_module_out
Description: $pkgconfig_module_desc
Version: ${VERSION}
Requires: $pkgconfig_module_requires
Conflicts: $pkgconfig_module_conflicts
Libs: $pkgconfig_module_libs
Libs.private: $pkgconfig_module_libs_pvt
Cflags: $pkgconfig_module_cflags
EOT
AVAIL_PCMODULES="$AVAIL_PCMODULES agar-net.pc"
fi
if [ "${enable_sg}" != 'no' ]
 then
config_script_out="agar-sg-config"
config_script_cflags="-I${INCLDIR} ${AGAR_MATH_CFLAGS} ${GLU_CFLAGS}"
if [ "${HAVE_CC65}" = "yes" ]; then
config_script_libs="-L${LIBDIR} -lag_sg ${AGAR_MATH_LIBS} ${GLU_LIBS}"
config_libs_cc65=""
bb_save_IFS=$IFS
IFS=" "
for lib in $config_script_libs; do
case "$lib" in
-l*)
lib_bare=`echo "$lib" |sed "s/^-l//"`
config_libs_cc65="${config_libs_cc65} ${prefix}/lib/${lib_bare}.lib"
;;
esac
done
IFS=$bb_save_IFS
config_script_libs="$config_libs_cc65"
else
config_script_libs="-L${LIBDIR} -lag_sg ${AGAR_MATH_LIBS} ${GLU_LIBS}"
fi
cat << EOT > $config_script_out
#!/bin/sh
# Generated by ${PACKAGE}'s BSDBuild configure script.
#
# BSDBuild 3.2 (https://bsdbuild.hypertriton.com/)
# ${PACKAGE} ${VERSION}

prefix='${PREFIX}'
exec_prefix='${EXEC_PREFIX}'
exec_prefix_set='no'
libdir='${LIBDIR}'

usage='\
Usage: $config_script_out [--prefix[=DIR]] [--exec-prefix[=DIR]] [--host] [--version] [--release] [--cflags] [--libs]'

if test \$# -eq 0; then
	echo "\${usage}" 1>&2
	exit 1
fi

while test \$# -gt 0; do
	case "\$1" in
	-*=*)
		optarg=\`echo "\$1" | LC_ALL='C' sed 's/[-_a-zA-Z0-9]*=//'\`
		;;
	*)
		optarg=
		;;
	esac

	case \$1 in
	--prefix=*)
		prefix=\$optarg
		if test \$exec_prefix_set = no ; then
			exec_prefix=\$optarg
		fi
		;;
	--prefix)
		echo "\$prefix"
		;;
	--exec-prefix=*)
		exec_prefix=\$optarg
		exec_prefix_set=yes
		;;
	--exec-prefix)
		echo "\$exec_prefix"
		;;
	--host)
		echo '${host}'
		;;
	--version)
		echo '${VERSION}'
		;;
	--release)
		echo '${RELEASE}'
		;;
	--cflags)
		echo '$config_script_cflags'
		;;
	--libs | --static-libs)
		echo '$config_script_libs'
		;;
	*)
		echo "\${usage}" 1>&2
		exit 1
		;;
	esac
	shift
done
EOT
AVAIL_CONFIGSCRIPTS="$AVAIL_CONFIGSCRIPTS agar-sg-config"
pkgconfig_module_out="agar-sg"
pkgconfig_module_desc="Agar 3D scene graph library"
pkgconfig_module_requires="agar-math agar"
pkgconfig_module_conflicts=""
pkgconfig_module_cflags="-I\${includedir}/agar ${GLU_CFLAGS}"
pkgconfig_module_libs="-L\${libdir} -lag_sg"
pkgconfig_module_libs_pvt="-lag_sg ${AGAR_MATH_LIBS} ${GLU_LIBS}"
cat << EOT > $pkgconfig_module_out.pc
# ${PACKAGE} pkg-config source file.
#
# Generated by ${PACKAGE}'s BSDBuild-based configure script.
# BSDBuild 3.2 (https://bsdbuild.hypertriton.com/).

prefix=${PREFIX}
exec_prefix=\${prefix}
libdir=\${exec_prefix}/lib
includedir=\${prefix}/include

Name: $pkgconfig_module_out
Description: $pkgconfig_module_desc
Version: ${VERSION}
Requires: $pkgconfig_module_requires
Conflicts: $pkgconfig_module_conflicts
Libs: $pkgconfig_module_libs
Libs.private: $pkgconfig_module_libs_pvt
Cflags: $pkgconfig_module_cflags
EOT
AVAIL_PCMODULES="$AVAIL_PCMODULES agar-sg.pc"
fi
if [ "${enable_sk}" != 'no' ]
 then
config_script_out="agar-sk-config"
config_script_cflags="-I${INCLDIR} ${AGAR_MATH_CFLAGS}"
if [ "${HAVE_CC65}" = "yes" ]; then
config_script_libs="-L${LIBDIR} -lag_sk ${AGAR_MATH_LIBS}"
config_libs_cc65=""
bb_save_IFS=$IFS
IFS=" "
for lib in $config_script_libs; do
case "$lib" in
-l*)
lib_bare=`echo "$lib" |sed "s/^-l//"`
config_libs_cc65="${config_libs_cc65} ${prefix}/lib/${lib_bare}.lib"
;;
esac
done
IFS=$bb_save_IFS
config_script_libs="$config_libs_cc65"
else
config_script_libs="-L${LIBDIR} -lag_sk ${AGAR_MATH_LIBS}"
fi
cat << EOT > $config_script_out
#!/bin/sh
# Generated by ${PACKAGE}'s BSDBuild configure script.
#
# BSDBuild 3.2 (https://bsdbuild.hypertriton.com/)
# ${PACKAGE} ${VERSION}

prefix='${PREFIX}'
exec_prefix='${EXEC_PREFIX}'
exec_prefix_set='no'
libdir='${LIBDIR}'

usage='\
Usage: $config_script_out [--prefix[=DIR]] [--exec-prefix[=DIR]] [--host] [--version] [--release] [--cflags] [--libs]'

if test \$# -eq 0; then
	echo "\${usage}" 1>&2
	exit 1
fi

while test \$# -gt 0; do
	case "\$1" in
	-*=*)
		optarg=\`echo "\$1" | LC_ALL='C' sed 's/[-_a-zA-Z0-9]*=//'\`
		;;
	*)
		optarg=
		;;
	esac

	case \$1 in
	--prefix=*)
		prefix=\$optarg
		if test \$exec_prefix_set = no ; then
			exec_prefix=\$optarg
		fi
		;;
	--prefix)
		echo "\$prefix"
		;;
	--exec-prefix=*)
		exec_prefix=\$optarg
		exec_prefix_set=yes
		;;
	--exec-prefix)
		echo "\$exec_prefix"
		;;
	--host)
		echo '${host}'
		;;
	--version)
		echo '${VERSION}'
		;;
	--release)
		echo '${RELEASE}'
		;;
	--cflags)
		echo '$config_script_cflags'
		;;
	--libs | --static-libs)
		echo '$config_script_libs'
		;;
	*)
		echo "\${usage}" 1>&2
		exit 1
		;;
	esac
	shift
done
EOT
AVAIL_CONFIGSCRIPTS="$AVAIL_CONFIGSCRIPTS agar-sk-config"
pkgconfig_module_out="agar-sk"
pkgconfig_module_desc="Agar sketch engine library"
pkgconfig_module_requires="agar-math agar"
pkgconfig_module_conflicts=""
pkgconfig_module_cflags="-I\${includedir}/agar"
pkgconfig_module_libs="-L\${libdir} -lag_sk"
pkgconfig_module_libs_pvt="-lag_sk ${AGAR_MATH_LIBS}"
cat << EOT > $pkgconfig_module_out.pc
# ${PACKAGE} pkg-config source file.
#
# Generated by ${PACKAGE}'s BSDBuild-based configure script.
# BSDBuild 3.2 (https://bsdbuild.hypertriton.com/).

prefix=${PREFIX}
exec_prefix=\${prefix}
libdir=\${exec_prefix}/lib
includedir=\${prefix}/include

Name: $pkgconfig_module_out
Description: $pkgconfig_module_desc
Version: ${VERSION}
Requires: $pkgconfig_module_requires
Conflicts: $pkgconfig_module_conflicts
Libs: $pkgconfig_module_libs
Libs.private: $pkgconfig_module_libs_pvt
Cflags: $pkgconfig_module_cflags
EOT
AVAIL_PCMODULES="$AVAIL_PCMODULES agar-sk.pc"
fi
if [ "${enable_vg}" != 'no' ]
 then
config_script_out="agar-vg-config"
config_script_cflags="-I${INCLDIR}"
if [ "${HAVE_CC65}" = "yes" ]; then
config_script_libs="-L${LIBDIR} -lag_vg"
config_libs_cc65=""
bb_save_IFS=$IFS
IFS=" "
for lib in $config_script_libs; do
case "$lib" in
-l*)
lib_bare=`echo "$lib" |sed "s/^-l//"`
config_libs_cc65="${config_libs_cc65} ${prefix}/lib/${lib_bare}.lib"
;;
esac
done
IFS=$bb_save_IFS
config_script_libs="$config_libs_cc65"
else
config_script_libs="-L${LIBDIR} -lag_vg"
fi
cat << EOT > $config_script_out
#!/bin/sh
# Generated by ${PACKAGE}'s BSDBuild configure script.
#
# BSDBuild 3.2 (https://bsdbuild.hypertriton.com/)
# ${PACKAGE} ${VERSION}

prefix='${PREFIX}'
exec_prefix='${EXEC_PREFIX}'
exec_prefix_set='no'
libdir='${LIBDIR}'

usage='\
Usage: $config_script_out [--prefix[=DIR]] [--exec-prefix[=DIR]] [--host] [--version] [--release] [--cflags] [--libs]'

if test \$# -eq 0; then
	echo "\${usage}" 1>&2
	exit 1
fi

while test \$# -gt 0; do
	case "\$1" in
	-*=*)
		optarg=\`echo "\$1" | LC_ALL='C' sed 's/[-_a-zA-Z0-9]*=//'\`
		;;
	*)
		optarg=
		;;
	esac

	case \$1 in
	--prefix=*)
		prefix=\$optarg
		if test \$exec_prefix_set = no ; then
			exec_prefix=\$optarg
		fi
		;;
	--prefix)
		echo "\$prefix"
		;;
	--exec-prefix=*)
		exec_prefix=\$optarg
		exec_prefix_set=yes
		;;
	--exec-prefix)
		echo "\$exec_prefix"
		;;
	--host)
		echo '${host}'
		;;
	--version)
		echo '${VERSION}'
		;;
	--release)
		echo '${RELEASE}'
		;;
	--cflags)
		echo '$config_script_cflags'
		;;
	--libs | --static-libs)
		echo '$config_script_libs'
		;;
	*)
		echo "\${usage}" 1>&2
		exit 1
		;;
	esac
	shift
done
EOT
AVAIL_CONFIGSCRIPTS="$AVAIL_CONFIGSCRIPTS agar-vg-config"
pkgconfig_module_out="agar-vg"
pkgconfig_module_desc="Agar vector graphics library"
pkgconfig_module_requires="agar"
pkgconfig_module_conflicts=""
pkgconfig_module_cflags="-I\${includedir}/agar ${MATH_CFLAGS}"
pkgconfig_module_libs="-L\${libdir} -lag_vg"
pkgconfig_module_libs_pvt="-lag_vg ${MATH_LIBS}"
cat << EOT > $pkgconfig_module_out.pc
# ${PACKAGE} pkg-config source file.
#
# Generated by ${PACKAGE}'s BSDBuild-based configure script.
# BSDBuild 3.2 (https://bsdbuild.hypertriton.com/).

prefix=${PREFIX}
exec_prefix=\${prefix}
libdir=\${exec_prefix}/lib
includedir=\${prefix}/include

Name: $pkgconfig_module_out
Description: $pkgconfig_module_desc
Version: ${VERSION}
Requires: $pkgconfig_module_requires
Conflicts: $pkgconfig_module_conflicts
Libs: $pkgconfig_module_libs
Libs.private: $pkgconfig_module_libs_pvt
Cflags: $pkgconfig_module_cflags
EOT
AVAIL_PCMODULES="$AVAIL_PCMODULES agar-vg.pc"
fi
echo "ALTIVEC_CFLAGS=$ALTIVEC_CFLAGS" >>Makefile.config
echo "mdefs[\"ALTIVEC_CFLAGS\"] = \"$ALTIVEC_CFLAGS\"" >>configure.lua
echo "AVAIL_CONFIGSCRIPTS=$AVAIL_CONFIGSCRIPTS" >>Makefile.config
echo "mdefs[\"AVAIL_CONFIGSCRIPTS\"] = \"$AVAIL_CONFIGSCRIPTS\"" >>configure.lua
echo "AVAIL_PCMODULES=$AVAIL_PCMODULES" >>Makefile.config
echo "mdefs[\"AVAIL_PCMODULES\"] = \"$AVAIL_PCMODULES\"" >>configure.lua
echo "BINDIR=$BINDIR" >>Makefile.config
echo "mdefs[\"BINDIR\"] = \"$BINDIR\"" >>configure.lua
echo "CC=$CC" >>Makefile.config
echo "mdefs[\"CC\"] = \"$CC\"" >>configure.lua
echo "CC_COMPILE=$CC_COMPILE" >>Makefile.config
echo "mdefs[\"CC_COMPILE\"] = \"$CC_COMPILE\"" >>configure.lua
echo "CFLAGS=$CFLAGS" >>Makefile.config
echo "mdefs[\"CFLAGS\"] = \"$CFLAGS\"" >>configure.lua
echo "CLOCK_CFLAGS=$CLOCK_CFLAGS" >>Makefile.config
echo "mdefs[\"CLOCK_CFLAGS\"] = \"$CLOCK_CFLAGS\"" >>configure.lua
echo "CLOCK_LIBS=$CLOCK_LIBS" >>Makefile.config
echo "mdefs[\"CLOCK_LIBS\"] = \"$CLOCK_LIBS\"" >>configure.lua
echo "COCOA_CFLAGS=$COCOA_CFLAGS" >>Makefile.config
echo "mdefs[\"COCOA_CFLAGS\"] = \"$COCOA_CFLAGS\"" >>configure.lua
echo "COCOA_LIBS=$COCOA_LIBS" >>Makefile.config
echo "mdefs[\"COCOA_LIBS\"] = \"$COCOA_LIBS\"" >>configure.lua
echo "CXXFLAGS=$CXXFLAGS" >>Makefile.config
echo "mdefs[\"CXXFLAGS\"] = \"$CXXFLAGS\"" >>configure.lua
echo "DATADIR=$DATADIR" >>Makefile.config
echo "mdefs[\"DATADIR\"] = \"$DATADIR\"" >>configure.lua
echo "DB4_CFLAGS=$DB4_CFLAGS" >>Makefile.config
echo "mdefs[\"DB4_CFLAGS\"] = \"$DB4_CFLAGS\"" >>configure.lua
echo "DB4_LIBS=$DB4_LIBS" >>Makefile.config
echo "mdefs[\"DB4_LIBS\"] = \"$DB4_LIBS\"" >>configure.lua
echo "DB5_CFLAGS=$DB5_CFLAGS" >>Makefile.config
echo "mdefs[\"DB5_CFLAGS\"] = \"$DB5_CFLAGS\"" >>configure.lua
echo "DB5_LIBS=$DB5_LIBS" >>Makefile.config
echo "mdefs[\"DB5_LIBS\"] = \"$DB5_LIBS\"" >>configure.lua
echo "DSO_CFLAGS=$DSO_CFLAGS" >>Makefile.config
echo "mdefs[\"DSO_CFLAGS\"] = \"$DSO_CFLAGS\"" >>configure.lua
echo "DSO_LIBS=$DSO_LIBS" >>Makefile.config
echo "mdefs[\"DSO_LIBS\"] = \"$DSO_LIBS\"" >>configure.lua
echo "ENABLE_GUI_LIBS=$ENABLE_GUI_LIBS" >>Makefile.config
echo "mdefs[\"ENABLE_GUI_LIBS\"] = \"$ENABLE_GUI_LIBS\"" >>configure.lua
echo "ENABLE_MICRO_LIBS=$ENABLE_MICRO_LIBS" >>Makefile.config
echo "mdefs[\"ENABLE_MICRO_LIBS\"] = \"$ENABLE_MICRO_LIBS\"" >>configure.lua
echo "ENABLE_NLS=$ENABLE_NLS" >>Makefile.config
echo "mdefs[\"ENABLE_NLS\"] = \"$ENABLE_NLS\"" >>configure.lua
echo "EXECSUFFIX=$EXECSUFFIX" >>Makefile.config
echo "mdefs[\"EXECSUFFIX\"] = \"$EXECSUFFIX\"" >>configure.lua
echo "FONTCONFIG_CFLAGS=$FONTCONFIG_CFLAGS" >>Makefile.config
echo "mdefs[\"FONTCONFIG_CFLAGS\"] = \"$FONTCONFIG_CFLAGS\"" >>configure.lua
echo "FONTCONFIG_LIBS=$FONTCONFIG_LIBS" >>Makefile.config
echo "mdefs[\"FONTCONFIG_LIBS\"] = \"$FONTCONFIG_LIBS\"" >>configure.lua
echo "FREETYPE_CFLAGS=$FREETYPE_CFLAGS" >>Makefile.config
echo "mdefs[\"FREETYPE_CFLAGS\"] = \"$FREETYPE_CFLAGS\"" >>configure.lua
echo "FREETYPE_LIBS=$FREETYPE_LIBS" >>Makefile.config
echo "mdefs[\"FREETYPE_LIBS\"] = \"$FREETYPE_LIBS\"" >>configure.lua
echo "GETTEXT_CFLAGS=$GETTEXT_CFLAGS" >>Makefile.config
echo "mdefs[\"GETTEXT_CFLAGS\"] = \"$GETTEXT_CFLAGS\"" >>configure.lua
echo "GETTEXT_LIBS=$GETTEXT_LIBS" >>Makefile.config
echo "mdefs[\"GETTEXT_LIBS\"] = \"$GETTEXT_LIBS\"" >>configure.lua
echo "GLU_CFLAGS=$GLU_CFLAGS" >>Makefile.config
echo "mdefs[\"GLU_CFLAGS\"] = \"$GLU_CFLAGS\"" >>configure.lua
echo "GLU_LIBS=$GLU_LIBS" >>Makefile.config
echo "mdefs[\"GLU_LIBS\"] = \"$GLU_LIBS\"" >>configure.lua
echo "GLX_CFLAGS=$GLX_CFLAGS" >>Makefile.config
echo "mdefs[\"GLX_CFLAGS\"] = \"$GLX_CFLAGS\"" >>configure.lua
echo "GLX_LIBS=$GLX_LIBS" >>Makefile.config
echo "mdefs[\"GLX_LIBS\"] = \"$GLX_LIBS\"" >>configure.lua
echo "HAVE_ALIGNED_ATTRIBUTE=$HAVE_ALIGNED_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_ALIGNED_ATTRIBUTE\"] = \"$HAVE_ALIGNED_ATTRIBUTE\"" >>configure.lua
echo "HAVE_ALTIVEC=$HAVE_ALTIVEC" >>Makefile.config
echo "mdefs[\"HAVE_ALTIVEC\"] = \"$HAVE_ALTIVEC\"" >>configure.lua
echo "HAVE_ASPRINTF=$HAVE_ASPRINTF" >>Makefile.config
echo "mdefs[\"HAVE_ASPRINTF\"] = \"$HAVE_ASPRINTF\"" >>configure.lua
echo "HAVE_BOUNDED_ATTRIBUTE=$HAVE_BOUNDED_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_BOUNDED_ATTRIBUTE\"] = \"$HAVE_BOUNDED_ATTRIBUTE\"" >>configure.lua
echo "HAVE_CC=$HAVE_CC" >>Makefile.config
echo "mdefs[\"HAVE_CC\"] = \"$HAVE_CC\"" >>configure.lua
echo "HAVE_CC65=$HAVE_CC65" >>Makefile.config
echo "mdefs[\"HAVE_CC65\"] = \"$HAVE_CC65\"" >>configure.lua
echo "HAVE_CC_CLANG=$HAVE_CC_CLANG" >>Makefile.config
echo "mdefs[\"HAVE_CC_CLANG\"] = \"$HAVE_CC_CLANG\"" >>configure.lua
echo "HAVE_CC_GCC=$HAVE_CC_GCC" >>Makefile.config
echo "mdefs[\"HAVE_CC_GCC\"] = \"$HAVE_CC_GCC\"" >>configure.lua
echo "HAVE_CC_MCONSOLE=$HAVE_CC_MCONSOLE" >>Makefile.config
echo "mdefs[\"HAVE_CC_MCONSOLE\"] = \"$HAVE_CC_MCONSOLE\"" >>configure.lua
echo "HAVE_CC_MWINDOWS=$HAVE_CC_MWINDOWS" >>Makefile.config
echo "mdefs[\"HAVE_CC_MWINDOWS\"] = \"$HAVE_CC_MWINDOWS\"" >>configure.lua
echo "HAVE_CC_WARNINGS=$HAVE_CC_WARNINGS" >>Makefile.config
echo "mdefs[\"HAVE_CC_WARNINGS\"] = \"$HAVE_CC_WARNINGS\"" >>configure.lua
echo "HAVE_CLOCK_GETTIME=$HAVE_CLOCK_GETTIME" >>Makefile.config
echo "mdefs[\"HAVE_CLOCK_GETTIME\"] = \"$HAVE_CLOCK_GETTIME\"" >>configure.lua
echo "HAVE_CLOCK_WIN32=$HAVE_CLOCK_WIN32" >>Makefile.config
echo "mdefs[\"HAVE_CLOCK_WIN32\"] = \"$HAVE_CLOCK_WIN32\"" >>configure.lua
echo "HAVE_COCOA=$HAVE_COCOA" >>Makefile.config
echo "mdefs[\"HAVE_COCOA\"] = \"$HAVE_COCOA\"" >>configure.lua
echo "HAVE_CONST_ATTRIBUTE=$HAVE_CONST_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_CONST_ATTRIBUTE\"] = \"$HAVE_CONST_ATTRIBUTE\"" >>configure.lua
echo "HAVE_CSIDL=$HAVE_CSIDL" >>Makefile.config
echo "mdefs[\"HAVE_CSIDL\"] = \"$HAVE_CSIDL\"" >>configure.lua
echo "HAVE_CYGWIN=$HAVE_CYGWIN" >>Makefile.config
echo "mdefs[\"HAVE_CYGWIN\"] = \"$HAVE_CYGWIN\"" >>configure.lua
echo "HAVE_DB4=$HAVE_DB4" >>Makefile.config
echo "mdefs[\"HAVE_DB4\"] = \"$HAVE_DB4\"" >>configure.lua
echo "HAVE_DB5=$HAVE_DB5" >>Makefile.config
echo "mdefs[\"HAVE_DB5\"] = \"$HAVE_DB5\"" >>configure.lua
echo "HAVE_DEPRECATED_ATTRIBUTE=$HAVE_DEPRECATED_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_DEPRECATED_ATTRIBUTE\"] = \"$HAVE_DEPRECATED_ATTRIBUTE\"" >>configure.lua
echo "HAVE_DLOPEN=$HAVE_DLOPEN" >>Makefile.config
echo "mdefs[\"HAVE_DLOPEN\"] = \"$HAVE_DLOPEN\"" >>configure.lua
echo "HAVE_FLOAT=$HAVE_FLOAT" >>Makefile.config
echo "mdefs[\"HAVE_FLOAT\"] = \"$HAVE_FLOAT\"" >>configure.lua
echo "HAVE_FONTCONFIG=$HAVE_FONTCONFIG" >>Makefile.config
echo "mdefs[\"HAVE_FONTCONFIG\"] = \"$HAVE_FONTCONFIG\"" >>configure.lua
echo "HAVE_FORMAT_ATTRIBUTE=$HAVE_FORMAT_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_FORMAT_ATTRIBUTE\"] = \"$HAVE_FORMAT_ATTRIBUTE\"" >>configure.lua
echo "HAVE_FREETYPE=$HAVE_FREETYPE" >>Makefile.config
echo "mdefs[\"HAVE_FREETYPE\"] = \"$HAVE_FREETYPE\"" >>configure.lua
echo "HAVE_GETTEXT=$HAVE_GETTEXT" >>Makefile.config
echo "mdefs[\"HAVE_GETTEXT\"] = \"$HAVE_GETTEXT\"" >>configure.lua
echo "HAVE_GLEXT=$HAVE_GLEXT" >>Makefile.config
echo "mdefs[\"HAVE_GLEXT\"] = \"$HAVE_GLEXT\"" >>configure.lua
echo "HAVE_GLU=$HAVE_GLU" >>Makefile.config
echo "mdefs[\"HAVE_GLU\"] = \"$HAVE_GLU\"" >>configure.lua
echo "HAVE_GLX=$HAVE_GLX" >>Makefile.config
echo "mdefs[\"HAVE_GLX\"] = \"$HAVE_GLX\"" >>configure.lua
echo "HAVE_ICONV=$HAVE_ICONV" >>Makefile.config
echo "mdefs[\"HAVE_ICONV\"] = \"$HAVE_ICONV\"" >>configure.lua
echo "HAVE_INT64_T=$HAVE_INT64_T" >>Makefile.config
echo "mdefs[\"HAVE_INT64_T\"] = \"$HAVE_INT64_T\"" >>configure.lua
echo "HAVE_JPEG=$HAVE_JPEG" >>Makefile.config
echo "mdefs[\"HAVE_JPEG\"] = \"$HAVE_JPEG\"" >>configure.lua
echo "HAVE_LD_NO_UNDEFINED=$HAVE_LD_NO_UNDEFINED" >>Makefile.config
echo "mdefs[\"HAVE_LD_NO_UNDEFINED\"] = \"$HAVE_LD_NO_UNDEFINED\"" >>configure.lua
echo "HAVE_LD_STATIC_LIBGCC=$HAVE_LD_STATIC_LIBGCC" >>Makefile.config
echo "mdefs[\"HAVE_LD_STATIC_LIBGCC\"] = \"$HAVE_LD_STATIC_LIBGCC\"" >>configure.lua
echo "HAVE_LIBOPENGL32=$HAVE_LIBOPENGL32" >>Makefile.config
echo "mdefs[\"HAVE_LIBOPENGL32\"] = \"$HAVE_LIBOPENGL32\"" >>configure.lua
echo "HAVE_LIBPNG14=$HAVE_LIBPNG14" >>Makefile.config
echo "mdefs[\"HAVE_LIBPNG14\"] = \"$HAVE_LIBPNG14\"" >>configure.lua
echo "HAVE_LONG_DOUBLE=$HAVE_LONG_DOUBLE" >>Makefile.config
echo "mdefs[\"HAVE_LONG_DOUBLE\"] = \"$HAVE_LONG_DOUBLE\"" >>configure.lua
echo "HAVE_MALLOC_ATTRIBUTE=$HAVE_MALLOC_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_MALLOC_ATTRIBUTE\"] = \"$HAVE_MALLOC_ATTRIBUTE\"" >>configure.lua
echo "HAVE_MATH=$HAVE_MATH" >>Makefile.config
echo "mdefs[\"HAVE_MATH\"] = \"$HAVE_MATH\"" >>configure.lua
echo "HAVE_MATH_C99=$HAVE_MATH_C99" >>Makefile.config
echo "mdefs[\"HAVE_MATH_C99\"] = \"$HAVE_MATH_C99\"" >>configure.lua
echo "HAVE_MYSQL=$HAVE_MYSQL" >>Makefile.config
echo "mdefs[\"HAVE_MYSQL\"] = \"$HAVE_MYSQL\"" >>configure.lua
echo "HAVE_NETWORK=$HAVE_NETWORK" >>Makefile.config
echo "mdefs[\"HAVE_NETWORK\"] = \"$HAVE_NETWORK\"" >>configure.lua
echo "HAVE_NORETURN_ATTRIBUTE=$HAVE_NORETURN_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_NORETURN_ATTRIBUTE\"] = \"$HAVE_NORETURN_ATTRIBUTE\"" >>configure.lua
echo "HAVE_OBJC=$HAVE_OBJC" >>Makefile.config
echo "mdefs[\"HAVE_OBJC\"] = \"$HAVE_OBJC\"" >>configure.lua
echo "HAVE_OBJC_WARNINGS=$HAVE_OBJC_WARNINGS" >>Makefile.config
echo "mdefs[\"HAVE_OBJC_WARNINGS\"] = \"$HAVE_OBJC_WARNINGS\"" >>configure.lua
echo "HAVE_OPENGL=$HAVE_OPENGL" >>Makefile.config
echo "mdefs[\"HAVE_OPENGL\"] = \"$HAVE_OPENGL\"" >>configure.lua
echo "HAVE_PACKED_ATTRIBUTE=$HAVE_PACKED_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_PACKED_ATTRIBUTE\"] = \"$HAVE_PACKED_ATTRIBUTE\"" >>configure.lua
echo "HAVE_PNG=$HAVE_PNG" >>Makefile.config
echo "mdefs[\"HAVE_PNG\"] = \"$HAVE_PNG\"" >>configure.lua
echo "HAVE_PORTAUDIO=$HAVE_PORTAUDIO" >>Makefile.config
echo "mdefs[\"HAVE_PORTAUDIO\"] = \"$HAVE_PORTAUDIO\"" >>configure.lua
echo "HAVE_PTHREADS=$HAVE_PTHREADS" >>Makefile.config
echo "mdefs[\"HAVE_PTHREADS\"] = \"$HAVE_PTHREADS\"" >>configure.lua
echo "HAVE_PTHREADS_XOPEN=$HAVE_PTHREADS_XOPEN" >>Makefile.config
echo "mdefs[\"HAVE_PTHREADS_XOPEN\"] = \"$HAVE_PTHREADS_XOPEN\"" >>configure.lua
echo "HAVE_PTHREAD_COND_T_POINTER=$HAVE_PTHREAD_COND_T_POINTER" >>Makefile.config
echo "mdefs[\"HAVE_PTHREAD_COND_T_POINTER\"] = \"$HAVE_PTHREAD_COND_T_POINTER\"" >>configure.lua
echo "HAVE_PTHREAD_MUTEX_RECURSIVE=$HAVE_PTHREAD_MUTEX_RECURSIVE" >>Makefile.config
echo "mdefs[\"HAVE_PTHREAD_MUTEX_RECURSIVE\"] = \"$HAVE_PTHREAD_MUTEX_RECURSIVE\"" >>configure.lua
echo "HAVE_PTHREAD_MUTEX_RECURSIVE_NP=$HAVE_PTHREAD_MUTEX_RECURSIVE_NP" >>Makefile.config
echo "mdefs[\"HAVE_PTHREAD_MUTEX_RECURSIVE_NP\"] = \"$HAVE_PTHREAD_MUTEX_RECURSIVE_NP\"" >>configure.lua
echo "HAVE_PTHREAD_MUTEX_T_POINTER=$HAVE_PTHREAD_MUTEX_T_POINTER" >>Makefile.config
echo "mdefs[\"HAVE_PTHREAD_MUTEX_T_POINTER\"] = \"$HAVE_PTHREAD_MUTEX_T_POINTER\"" >>configure.lua
echo "HAVE_PTHREAD_T_POINTER=$HAVE_PTHREAD_T_POINTER" >>Makefile.config
echo "mdefs[\"HAVE_PTHREAD_T_POINTER\"] = \"$HAVE_PTHREAD_T_POINTER\"" >>configure.lua
echo "HAVE_PURE_ATTRIBUTE=$HAVE_PURE_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_PURE_ATTRIBUTE\"] = \"$HAVE_PURE_ATTRIBUTE\"" >>configure.lua
echo "HAVE_SDL=$HAVE_SDL" >>Makefile.config
echo "mdefs[\"HAVE_SDL\"] = \"$HAVE_SDL\"" >>configure.lua
echo "HAVE_SHL_LOAD=$HAVE_SHL_LOAD" >>Makefile.config
echo "mdefs[\"HAVE_SHL_LOAD\"] = \"$HAVE_SHL_LOAD\"" >>configure.lua
echo "HAVE_SNDFILE=$HAVE_SNDFILE" >>Makefile.config
echo "mdefs[\"HAVE_SNDFILE\"] = \"$HAVE_SNDFILE\"" >>configure.lua
echo "HAVE_SSE=$HAVE_SSE" >>Makefile.config
echo "mdefs[\"HAVE_SSE\"] = \"$HAVE_SSE\"" >>configure.lua
echo "HAVE_SSE2=$HAVE_SSE2" >>Makefile.config
echo "mdefs[\"HAVE_SSE2\"] = \"$HAVE_SSE2\"" >>configure.lua
echo "HAVE_SSE3=$HAVE_SSE3" >>Makefile.config
echo "mdefs[\"HAVE_SSE3\"] = \"$HAVE_SSE3\"" >>configure.lua
echo "HAVE_SYS_PARAM_H=$HAVE_SYS_PARAM_H" >>Makefile.config
echo "mdefs[\"HAVE_SYS_PARAM_H\"] = \"$HAVE_SYS_PARAM_H\"" >>configure.lua
echo "HAVE_SYS_UIO_H=$HAVE_SYS_UIO_H" >>Makefile.config
echo "mdefs[\"HAVE_SYS_UIO_H\"] = \"$HAVE_SYS_UIO_H\"" >>configure.lua
echo "HAVE_UNUSED_VARIABLE_ATTRIBUTE=$HAVE_UNUSED_VARIABLE_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_UNUSED_VARIABLE_ATTRIBUTE\"] = \"$HAVE_UNUSED_VARIABLE_ATTRIBUTE\"" >>configure.lua
echo "HAVE_VASPRINTF=$HAVE_VASPRINTF" >>Makefile.config
echo "mdefs[\"HAVE_VASPRINTF\"] = \"$HAVE_VASPRINTF\"" >>configure.lua
echo "HAVE_WARN_UNUSED_RESULT_ATTRIBUTE=$HAVE_WARN_UNUSED_RESULT_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_WARN_UNUSED_RESULT_ATTRIBUTE\"] = \"$HAVE_WARN_UNUSED_RESULT_ATTRIBUTE\"" >>configure.lua
echo "HAVE_WEB=$HAVE_WEB" >>Makefile.config
echo "mdefs[\"HAVE_WEB\"] = \"$HAVE_WEB\"" >>configure.lua
echo "HAVE_WGL=$HAVE_WGL" >>Makefile.config
echo "mdefs[\"HAVE_WGL\"] = \"$HAVE_WGL\"" >>configure.lua
echo "HAVE_X11=$HAVE_X11" >>Makefile.config
echo "mdefs[\"HAVE_X11\"] = \"$HAVE_X11\"" >>configure.lua
echo "HAVE_XF86MISC=$HAVE_XF86MISC" >>Makefile.config
echo "mdefs[\"HAVE_XF86MISC\"] = \"$HAVE_XF86MISC\"" >>configure.lua
echo "HAVE_XINERAMA=$HAVE_XINERAMA" >>Makefile.config
echo "mdefs[\"HAVE_XINERAMA\"] = \"$HAVE_XINERAMA\"" >>configure.lua
echo "HAVE_XKB=$HAVE_XKB" >>Makefile.config
echo "mdefs[\"HAVE_XKB\"] = \"$HAVE_XKB\"" >>configure.lua
echo "HAVE_ZLIB=$HAVE_ZLIB" >>Makefile.config
echo "mdefs[\"HAVE_ZLIB\"] = \"$HAVE_ZLIB\"" >>configure.lua
echo "HAVE___INT64=$HAVE___INT64" >>Makefile.config
echo "mdefs[\"HAVE___INT64\"] = \"$HAVE___INT64\"" >>configure.lua
echo "ICONV_CFLAGS=$ICONV_CFLAGS" >>Makefile.config
echo "mdefs[\"ICONV_CFLAGS\"] = \"$ICONV_CFLAGS\"" >>configure.lua
echo "ICONV_LIBS=$ICONV_LIBS" >>Makefile.config
echo "mdefs[\"ICONV_LIBS\"] = \"$ICONV_LIBS\"" >>configure.lua
echo "INCLDIR=$INCLDIR" >>Makefile.config
echo "mdefs[\"INCLDIR\"] = \"$INCLDIR\"" >>configure.lua
echo "JPEG_CFLAGS=$JPEG_CFLAGS" >>Makefile.config
echo "mdefs[\"JPEG_CFLAGS\"] = \"$JPEG_CFLAGS\"" >>configure.lua
echo "JPEG_LIBS=$JPEG_LIBS" >>Makefile.config
echo "mdefs[\"JPEG_LIBS\"] = \"$JPEG_LIBS\"" >>configure.lua
echo "LIBDIR=$LIBDIR" >>Makefile.config
echo "mdefs[\"LIBDIR\"] = \"$LIBDIR\"" >>configure.lua
echo "LIBEXECDIR=$LIBEXECDIR" >>Makefile.config
echo "mdefs[\"LIBEXECDIR\"] = \"$LIBEXECDIR\"" >>configure.lua
echo "LIBTOOLOPTS_SHARED=$LIBTOOLOPTS_SHARED" >>Makefile.config
echo "mdefs[\"LIBTOOLOPTS_SHARED\"] = \"$LIBTOOLOPTS_SHARED\"" >>configure.lua
echo "LIB_SHARED=$LIB_SHARED" >>Makefile.config
echo "mdefs[\"LIB_SHARED\"] = \"$LIB_SHARED\"" >>configure.lua
echo "LOCALEDIR=$LOCALEDIR" >>Makefile.config
echo "mdefs[\"LOCALEDIR\"] = \"$LOCALEDIR\"" >>configure.lua
echo "MANDIR=$MANDIR" >>Makefile.config
echo "mdefs[\"MANDIR\"] = \"$MANDIR\"" >>configure.lua
echo "MATH_C99_CFLAGS=$MATH_C99_CFLAGS" >>Makefile.config
echo "mdefs[\"MATH_C99_CFLAGS\"] = \"$MATH_C99_CFLAGS\"" >>configure.lua
echo "MATH_C99_LIBS=$MATH_C99_LIBS" >>Makefile.config
echo "mdefs[\"MATH_C99_LIBS\"] = \"$MATH_C99_LIBS\"" >>configure.lua
echo "MATH_CFLAGS=$MATH_CFLAGS" >>Makefile.config
echo "mdefs[\"MATH_CFLAGS\"] = \"$MATH_CFLAGS\"" >>configure.lua
echo "MATH_LIBS=$MATH_LIBS" >>Makefile.config
echo "mdefs[\"MATH_LIBS\"] = \"$MATH_LIBS\"" >>configure.lua
echo "MEMORY_MODEL=$MEMORY_MODEL" >>Makefile.config
echo "mdefs[\"MEMORY_MODEL\"] = \"$MEMORY_MODEL\"" >>configure.lua
echo "MODULEDIR=$MODULEDIR" >>Makefile.config
echo "mdefs[\"MODULEDIR\"] = \"$MODULEDIR\"" >>configure.lua
echo "MYSQL_CFLAGS=$MYSQL_CFLAGS" >>Makefile.config
echo "mdefs[\"MYSQL_CFLAGS\"] = \"$MYSQL_CFLAGS\"" >>configure.lua
echo "MYSQL_LIBS=$MYSQL_LIBS" >>Makefile.config
echo "mdefs[\"MYSQL_LIBS\"] = \"$MYSQL_LIBS\"" >>configure.lua
echo "OPENGL_CFLAGS=$OPENGL_CFLAGS" >>Makefile.config
echo "mdefs[\"OPENGL_CFLAGS\"] = \"$OPENGL_CFLAGS\"" >>configure.lua
echo "OPENGL_LIBS=$OPENGL_LIBS" >>Makefile.config
echo "mdefs[\"OPENGL_LIBS\"] = \"$OPENGL_LIBS\"" >>configure.lua
echo "PACKAGE=$PACKAGE" >>Makefile.config
echo "mdefs[\"PACKAGE\"] = \"$PACKAGE\"" >>configure.lua
echo "PATH_SEPARATOR=$PATH_SEPARATOR" >>Makefile.config
echo "mdefs[\"PATH_SEPARATOR\"] = \"$PATH_SEPARATOR\"" >>configure.lua
echo "PKGCONFIG=$PKGCONFIG" >>Makefile.config
echo "mdefs[\"PKGCONFIG\"] = \"$PKGCONFIG\"" >>configure.lua
echo "PKGCONFIG_LIBDIR=$PKGCONFIG_LIBDIR" >>Makefile.config
echo "mdefs[\"PKGCONFIG_LIBDIR\"] = \"$PKGCONFIG_LIBDIR\"" >>configure.lua
echo "PNG_CFLAGS=$PNG_CFLAGS" >>Makefile.config
echo "mdefs[\"PNG_CFLAGS\"] = \"$PNG_CFLAGS\"" >>configure.lua
echo "PNG_LIBS=$PNG_LIBS" >>Makefile.config
echo "mdefs[\"PNG_LIBS\"] = \"$PNG_LIBS\"" >>configure.lua
echo "PORTAUDIO_CFLAGS=$PORTAUDIO_CFLAGS" >>Makefile.config
echo "mdefs[\"PORTAUDIO_CFLAGS\"] = \"$PORTAUDIO_CFLAGS\"" >>configure.lua
echo "PORTAUDIO_LIBS=$PORTAUDIO_LIBS" >>Makefile.config
echo "mdefs[\"PORTAUDIO_LIBS\"] = \"$PORTAUDIO_LIBS\"" >>configure.lua
echo "PROG_BUNDLE=$PROG_BUNDLE" >>Makefile.config
echo "mdefs[\"PROG_BUNDLE\"] = \"$PROG_BUNDLE\"" >>configure.lua
echo "PROG_CLI_CFLAGS=$PROG_CLI_CFLAGS" >>Makefile.config
echo "mdefs[\"PROG_CLI_CFLAGS\"] = \"$PROG_CLI_CFLAGS\"" >>configure.lua
echo "PROG_CLI_FLAGS=$PROG_CLI_FLAGS" >>Makefile.config
echo "mdefs[\"PROG_CLI_FLAGS\"] = \"$PROG_CLI_FLAGS\"" >>configure.lua
echo "PROG_GUI_CFLAGS=$PROG_GUI_CFLAGS" >>Makefile.config
echo "mdefs[\"PROG_GUI_CFLAGS\"] = \"$PROG_GUI_CFLAGS\"" >>configure.lua
echo "PROG_GUI_FLAGS=$PROG_GUI_FLAGS" >>Makefile.config
echo "mdefs[\"PROG_GUI_FLAGS\"] = \"$PROG_GUI_FLAGS\"" >>configure.lua
echo "PROG_PREFIX=$PROG_PREFIX" >>Makefile.config
echo "mdefs[\"PROG_PREFIX\"] = \"$PROG_PREFIX\"" >>configure.lua
echo "PROG_SUFFIX=$PROG_SUFFIX" >>Makefile.config
echo "mdefs[\"PROG_SUFFIX\"] = \"$PROG_SUFFIX\"" >>configure.lua
echo "PROG_TRANSFORM=$PROG_TRANSFORM" >>Makefile.config
echo "mdefs[\"PROG_TRANSFORM\"] = \"$PROG_TRANSFORM\"" >>configure.lua
echo "PTHREADS_CFLAGS=$PTHREADS_CFLAGS" >>Makefile.config
echo "mdefs[\"PTHREADS_CFLAGS\"] = \"$PTHREADS_CFLAGS\"" >>configure.lua
echo "PTHREADS_LIBS=$PTHREADS_LIBS" >>Makefile.config
echo "mdefs[\"PTHREADS_LIBS\"] = \"$PTHREADS_LIBS\"" >>configure.lua
echo "PTHREADS_XOPEN_CFLAGS=$PTHREADS_XOPEN_CFLAGS" >>Makefile.config
echo "mdefs[\"PTHREADS_XOPEN_CFLAGS\"] = \"$PTHREADS_XOPEN_CFLAGS\"" >>configure.lua
echo "PTHREADS_XOPEN_LIBS=$PTHREADS_XOPEN_LIBS" >>Makefile.config
echo "mdefs[\"PTHREADS_XOPEN_LIBS\"] = \"$PTHREADS_XOPEN_LIBS\"" >>configure.lua
echo "RELEASE=$RELEASE" >>Makefile.config
echo "mdefs[\"RELEASE\"] = \"$RELEASE\"" >>configure.lua
echo "SDL_CFLAGS=$SDL_CFLAGS" >>Makefile.config
echo "mdefs[\"SDL_CFLAGS\"] = \"$SDL_CFLAGS\"" >>configure.lua
echo "SDL_LIBS=$SDL_LIBS" >>Makefile.config
echo "mdefs[\"SDL_LIBS\"] = \"$SDL_LIBS\"" >>configure.lua
echo "SNDFILE_CFLAGS=$SNDFILE_CFLAGS" >>Makefile.config
echo "mdefs[\"SNDFILE_CFLAGS\"] = \"$SNDFILE_CFLAGS\"" >>configure.lua
echo "SNDFILE_LIBS=$SNDFILE_LIBS" >>Makefile.config
echo "mdefs[\"SNDFILE_LIBS\"] = \"$SNDFILE_LIBS\"" >>configure.lua
echo "SRCS_AU=$SRCS_AU" >>Makefile.config
echo "mdefs[\"SRCS_AU\"] = \"$SRCS_AU\"" >>configure.lua
echo "SRCS_CORE=$SRCS_CORE" >>Makefile.config
echo "mdefs[\"SRCS_CORE\"] = \"$SRCS_CORE\"" >>configure.lua
echo "SRCS_GUI=$SRCS_GUI" >>Makefile.config
echo "mdefs[\"SRCS_GUI\"] = \"$SRCS_GUI\"" >>configure.lua
echo "SRCS_NET=$SRCS_NET" >>Makefile.config
echo "mdefs[\"SRCS_NET\"] = \"$SRCS_NET\"" >>configure.lua
echo "SSE2_CFLAGS=$SSE2_CFLAGS" >>Makefile.config
echo "mdefs[\"SSE2_CFLAGS\"] = \"$SSE2_CFLAGS\"" >>configure.lua
echo "SSE3_CFLAGS=$SSE3_CFLAGS" >>Makefile.config
echo "mdefs[\"SSE3_CFLAGS\"] = \"$SSE3_CFLAGS\"" >>configure.lua
echo "SSE_CFLAGS=$SSE_CFLAGS" >>Makefile.config
echo "mdefs[\"SSE_CFLAGS\"] = \"$SSE_CFLAGS\"" >>configure.lua
echo "STATEDIR=$STATEDIR" >>Makefile.config
echo "mdefs[\"STATEDIR\"] = \"$STATEDIR\"" >>configure.lua
echo "SUBDIR_au=$SUBDIR_au" >>Makefile.config
echo "mdefs[\"SUBDIR_au\"] = \"$SUBDIR_au\"" >>configure.lua
echo "SUBDIR_gui=$SUBDIR_gui" >>Makefile.config
echo "mdefs[\"SUBDIR_gui\"] = \"$SUBDIR_gui\"" >>configure.lua
echo "SUBDIR_map=$SUBDIR_map" >>Makefile.config
echo "mdefs[\"SUBDIR_map\"] = \"$SUBDIR_map\"" >>configure.lua
echo "SUBDIR_math=$SUBDIR_math" >>Makefile.config
echo "mdefs[\"SUBDIR_math\"] = \"$SUBDIR_math\"" >>configure.lua
echo "SUBDIR_micro=$SUBDIR_micro" >>Makefile.config
echo "mdefs[\"SUBDIR_micro\"] = \"$SUBDIR_micro\"" >>configure.lua
echo "SUBDIR_net=$SUBDIR_net" >>Makefile.config
echo "mdefs[\"SUBDIR_net\"] = \"$SUBDIR_net\"" >>configure.lua
echo "SUBDIR_sg=$SUBDIR_sg" >>Makefile.config
echo "mdefs[\"SUBDIR_sg\"] = \"$SUBDIR_sg\"" >>configure.lua
echo "SUBDIR_sk=$SUBDIR_sk" >>Makefile.config
echo "mdefs[\"SUBDIR_sk\"] = \"$SUBDIR_sk\"" >>configure.lua
echo "SUBDIR_vg=$SUBDIR_vg" >>Makefile.config
echo "mdefs[\"SUBDIR_vg\"] = \"$SUBDIR_vg\"" >>configure.lua
echo "SYSCONFDIR=$SYSCONFDIR" >>Makefile.config
echo "mdefs[\"SYSCONFDIR\"] = \"$SYSCONFDIR\"" >>configure.lua
echo "TTFDIR=$TTFDIR" >>Makefile.config
echo "mdefs[\"TTFDIR\"] = \"$TTFDIR\"" >>configure.lua
echo "VERSION=$VERSION" >>Makefile.config
echo "mdefs[\"VERSION\"] = \"$VERSION\"" >>configure.lua
echo "X11_CFLAGS=$X11_CFLAGS" >>Makefile.config
echo "mdefs[\"X11_CFLAGS\"] = \"$X11_CFLAGS\"" >>configure.lua
echo "X11_LIBS=$X11_LIBS" >>Makefile.config
echo "mdefs[\"X11_LIBS\"] = \"$X11_LIBS\"" >>configure.lua
echo "XINERAMA_CFLAGS=$XINERAMA_CFLAGS" >>Makefile.config
echo "mdefs[\"XINERAMA_CFLAGS\"] = \"$XINERAMA_CFLAGS\"" >>configure.lua
echo "XINERAMA_LIBS=$XINERAMA_LIBS" >>Makefile.config
echo "mdefs[\"XINERAMA_LIBS\"] = \"$XINERAMA_LIBS\"" >>configure.lua
echo "ZLIB_CFLAGS=$ZLIB_CFLAGS" >>Makefile.config
echo "mdefs[\"ZLIB_CFLAGS\"] = \"$ZLIB_CFLAGS\"" >>configure.lua
echo "ZLIB_LIBS=$ZLIB_LIBS" >>Makefile.config
echo "mdefs[\"ZLIB_LIBS\"] = \"$ZLIB_LIBS\"" >>configure.lua
echo "_MK_BYTE_ORDER=$_MK_BYTE_ORDER" >>Makefile.config
echo "mdefs[\"_MK_BYTE_ORDER\"] = \"$_MK_BYTE_ORDER\"" >>configure.lua
echo "_MK_HAVE_FLOAT_H=$_MK_HAVE_FLOAT_H" >>Makefile.config
echo "mdefs[\"_MK_HAVE_FLOAT_H\"] = \"$_MK_HAVE_FLOAT_H\"" >>configure.lua
echo "_MK_HAVE_LIMITS_H=$_MK_HAVE_LIMITS_H" >>Makefile.config
echo "mdefs[\"_MK_HAVE_LIMITS_H\"] = \"$_MK_HAVE_LIMITS_H\"" >>configure.lua
echo "_MK_HAVE_STDINT_H=$_MK_HAVE_STDINT_H" >>Makefile.config
echo "mdefs[\"_MK_HAVE_STDINT_H\"] = \"$_MK_HAVE_STDINT_H\"" >>configure.lua
echo "_MK_HAVE_STDLIB_H=$_MK_HAVE_STDLIB_H" >>Makefile.config
echo "mdefs[\"_MK_HAVE_STDLIB_H\"] = \"$_MK_HAVE_STDLIB_H\"" >>configure.lua
echo "_MK_HAVE_SYS_STAT_H=$_MK_HAVE_SYS_STAT_H" >>Makefile.config
echo "mdefs[\"_MK_HAVE_SYS_STAT_H\"] = \"$_MK_HAVE_SYS_STAT_H\"" >>configure.lua
echo "_MK_HAVE_SYS_TYPES_H=$_MK_HAVE_SYS_TYPES_H" >>Makefile.config
echo "mdefs[\"_MK_HAVE_SYS_TYPES_H\"] = \"$_MK_HAVE_SYS_TYPES_H\"" >>configure.lua
echo "_MK_HAVE_UNISTD_H=$_MK_HAVE_UNISTD_H" >>Makefile.config
echo "mdefs[\"_MK_HAVE_UNISTD_H\"] = \"$_MK_HAVE_UNISTD_H\"" >>configure.lua
if [ "${srcdir}" != '' ]; then
	$ECHO_N "preparing build environment (source in ${srcdir})..."
	${PERL} ${SRC}/mk/mkconcurrent.pl ${SRC}
	if [ $? != 0 ]; then
		exit 1;
	fi
	echo 'ok'
fi
echo '**'
echo '** Configuration successful!'
echo '**'
echo '** Use "make depend all" to compile. When finished,'
$ECHO_N '** run "make install" to install under '
echo "${PREFIX}."
echo '**'
