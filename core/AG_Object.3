.\" Copyright (c) 2001-2019 Julien Nadeau Carriere <vedge@csoft.net>.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistribution of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd March 17, 2002
.Dt AG_OBJECT 3
.Os
.ds vT Agar API Reference
.ds oS Agar 1.0
.Sh NAME
.Nm AG_Object
.Nd agar object system
.Sh SYNOPSIS
.Bd -literal
#include <agar/core.h>
.Ed
.Sh DESCRIPTION
The Agar object system provides object-oriented programming capabilities
including inheritance and virtual functions, as well as high-level features
such as serialization, timers, VFS and abstracted data types.
It is implemented in C and provides bindings to other languages.
.Pp
Agar objects can be organized into a tree or virtual filesystem (VFS).
Any
.Nm
can become the root of a VFS.
A VFS can be made persistent to the degree required by the application.
Object data is serialized to a machine-independent binary format (using
.Xr AG_DataSource 3
calls in their
.Fn load
and
.Fn save
operations).
While an object's metadata (including the
.Va name
field) must always remain in memory, class-specific data can be serialized
to storage and deserialized on demand.
Examples include:
.Bl -bullet
.It
Agar GUI's
.Xr AG_Window 3
is a VFS of
.Xr AG_Widget 3
instances.
.It
FreeSG (http://freesg.org/)'s scene graph
.Xr SG 3
is a VFS of
.Xr SG_Node 3 .
Non-visible nodes can be paged out, saving memory.
.It
Edacious (http://edacious.org/) represents circuits, components and simulation
data using an in-memory VFS.
Circuits are saved to a flat binary file which embeds the circuit's serialized
data with that of its sub-components (which may include third-party components,
in which case
.Nm
will autoload any required DSOs).
.El
.Sh INITIALIZATION
.nr nS 1
.Ft "AG_Object *"
.Fn AG_ObjectNew "AG_Object *parent" "const char *name" "AG_ObjectClass *classInfo"
.Pp
.Ft "void"
.Fn AG_ObjectInit "AG_Object *obj" "AG_ObjectClass *classInfo"
.Pp
.Ft "void"
.Fn AG_ObjectInitStatic "AG_Object *obj" "AG_ObjectClass *classInfo"
.Pp
.Ft "void"
.Fn AG_ObjectInitNamed "AG_Object *obj" "AG_ObjectClass *classInfo" "const char *name"
.Pp
.Ft "void"
.Fn AG_ObjectAttach "AG_Object *new_parent" "AG_Object *obj"
.Pp
.Ft "void"
.Fn AG_ObjectDetach "AG_Object *obj"
.Pp
.Ft "void"
.Fn AG_ObjectMoveToHead "AG_Object *obj"
.Pp
.Ft "void"
.Fn AG_ObjectMoveToTail "AG_Object *obj"
.Pp
.Ft "void"
.Fn AG_ObjectMoveUp "AG_Object *obj"
.Pp
.Ft "void"
.Fn AG_ObjectMoveDown "AG_Object *obj"
.Pp
.Ft "void"
.Fn AG_ObjectDelete "AG_Object *obj"
.Pp
.Ft "AG_Object *"
.Fn AG_ObjectRoot "AG_Object *obj"
.Pp
.Ft "AG_Object *"
.Fn AG_ObjectParent "AG_Object *obj"
.Pp
.Ft "AG_Object *"
.Fn AG_ObjectFind "AG_Object *vfsRoot" "const char *format" "..."
.Pp
.Ft "AG_Object *"
.Fn AG_ObjectFindS "AG_Object *vfsRoot" "const char *name"
.Pp
.Ft "AG_Object *"
.Fn AG_ObjectFindParent "AG_Object *obj" "const char *name" "const char *type"
.Pp
.Ft "AG_Object *"
.Fn AG_ObjectFindChild "AG_Object *obj" "const char *name"
.Pp
.Ft "char *"
.Fn AG_ObjectGetName "AG_Object *obj"
.Pp
.Ft "int"
.Fn AG_ObjectCopyName "AG_Object *obj" "char *pathbuf" "AG_Size pathbuf_len"
.Pp
.Ft "void"
.Fn AG_ObjectLock "AG_Object *obj"
.Pp
.Ft "void"
.Fn AG_ObjectUnlock "AG_Object *obj"
.Pp
.Ft "void"
.Fn AG_LockVFS "AG_Object *obj"
.Pp
.Ft "void"
.Fn AG_UnlockVFS "AG_Object *obj"
.Pp
.Ft "void"
.Fn AG_ObjectSetName "AG_Object *obj" "const char *fmt" "..."
.Pp
.Ft "void"
.Fn AG_ObjectSetNameS "AG_Object *obj" "const char *name"
.Pp
.Ft "void"
.Fn AG_ObjectGenName "AG_Object *obj" "AG_ObjectClass *classInfo" "char *name" "AG_Size len"
.Pp
.Ft "void"
.Fn AG_ObjectGenNamePfx "AG_Object *obj" "const char *prefix" "char *name" "AG_Size len"
.Pp
.Ft "void"
.Fn AG_ObjectSetAttachFn "AG_Object *obj" "void (*fn)(struct ag_event *)" "const char *fmt" "..."
.Pp
.Ft "void"
.Fn AG_ObjectSetDetachFn "AG_Object *obj" "void (*fn)(struct ag_event *)" "const char *fmt" "..."
.Pp
.Fn AGOBJECT_FOREACH_CHILD "AG_Object *child" "AG_Object *parent" "TYPE type"
.Pp
.nr nS 0
The
.Fn AG_ObjectNew
function allocates and initializes a new object instance of the given class.
The object is attached to
.Fa parent ,
unless the argument is NULL.
If
.Fa name
is NULL, a unique name of the form
.Dq <class-name> #<number>
is automatically generated.
If both
.Fa parent
and
.Fa name
are specified and the parent object already has a child of the given name,
.Fn AG_ObjectNew
fails and returns NULL.
.Pp
The
.Fn AG_ObjectInit
function initializes an object of the specified class.
This involves invoking the
.Fn init
operation associated with every class in the inheritance hierarchy
The
.Fa name
argument specifies a name for the object instance relative to its parent
(maximum
.Dv AG_OBJECT_NAME_MAX
bytes and must not contain
.Sq /
characters).
.Fa classInfo
should point to an initialized
.Ft AG_ObjectClass
structure (see
.Sx CLASSES
section).
The
.Fa flags
argument specifies a default set of flags (see
.Sx FLAGS
section).
.Pp
The
.Fn AG_ObjectInitStatic
variant of
.Fn AG_ObjectInit
implicitely sets the
.Dv AG_OBJECT_STATIC
flag, indicating that the object's structure statically allocated (or allocated
through a facility other than
.Xr malloc 3 ) .
The
.Fn AG_ObjectInitNamed
variant either sets the object name with
.Fn AG_ObjectSetNameS
if the
.Fa name
argument is non-NULL, or it implicitely sets the
.Dv AG_OBJECT_NAME_ONATTACH
flag if the name is NULL.
.Pp
The function
.Fn AG_ObjectAttach
attaches an object to a new parent object and
.Fn AG_ObjectDetach
detaches an object from its current parent object.
These operations raise
.Sq attached
and
.Sq detached
events.
Prior to detaching the object,
.Fn AG_ObjectDetach
cancels any scheduled
.Xr AG_Timer 3
callback execution.
If
.Fa parent
is NULL,
.Fn AG_ObjectAttach
is a no-op.
.Pp
The
.Fn AG_ObjectMoveUp ,
.Fn AG_ObjectMoveDown ,
.Fn AG_ObjectMoveToHead
and
.Fn AG_ObjectMoveToTail
functions move the object in the parent object's list of child objects.
These functions are useful when the ordering is important - when the child
objects represent a stack, for instance.
.Pp
The
.Fn AG_ObjectDelete
routine invokes
.Fn AG_ObjectDetach
if the object is attached to a parent, followed by
.Fn AG_ObjectDestroy .
.Pp
.Fn AG_ObjectRoot
returns a pointer to the root of the VFS which the given object is attached to.
.Fn AG_ObjectParent
returns the immediate parent of the given object.
.Pp
The
.Fn AG_ObjectFind
function returns the object corresponding to the specified path name.
If there is no such object, NULL is returned.
.Pp
.Fn AG_ObjectFindParent
returns the first ancestor of the object matching either the
.Fa name
or
.Fa type
string (whichever is non-NULL).
.Pp
.Fn AG_ObjectFindChild
performs a name lookup on the immediate children of the specified object.
The function returns the matching object if it was found, otherwise NULL.
.Pp
.Fn AG_ObjectGetName
returns a newly-allocated string containing the full pathname of an object.
The function returns NULL if insufficient memory is available.
The
.Fn AG_ObjectCopyName
function copies the object's pathname to a fixed-size buffer.
.Pp
.Fn AG_ObjectLock
and
.Fn AG_ObjectUnlock
acquire or release the locking device associated with the given object.
This is a mutex protecting all read/write members of the
.Nm
structure, except
.Fa parent ,
.Fa root
and the list of child objects
.Fa cobjs
which are all considered part of the virtual filesystem and are instead
protected by
.Fn AG_LockVFS .
The
.Fn AG_ObjectLock
mutex can be used as a general-purpose locking device for the object.
This mutex is guaranteed to be held during processing of all events posted to
the object, as well as during object operations such as
.Fn load
and
.Fn save .
.Pp
The
.Fn AG_LockVFS
and
.Fn AG_UnlockVFS
functions acquire or release the lock protecting the layout of the entire
virtual system which the given object is part of.
.Pp
Note that all lock/unlock routines above become no-ops if Agar is compiled
with --disable-threads.
.Pp
.Fn AG_ObjectSetName
updates the name of the given object.
If the object is attached to a VFS, the VFS must locked.
.Pp
.Fn AG_ObjectGenName
generates an object name string unique to the specified parent object
.Fa obj .
The class name is used as prefix, followed by a number.
The name is written to the fixed-size buffer
.Fa name
of the given size
.Fa len .
In a multithreaded context, the name is only guaranteed to remain unique as
long as the parent object's VFS is locked.
The
.Fn AG_ObjectGenNamePfx
variant generates a name using the specified prefix instead of the class name.
.Pp
.Fn AG_ObjectSetAttachFn
and
.Fn AG_ObjectSetDetachFn
allow custom "attach" and "detach" hooks to be registered.
This is useful where it is necessary to control the order of the child objects
(for example, in the
.Xr AG_Window 3
system of Agar-GUI, the ordering of window objects is important as it
determines the order of rendering).
The hook function must insert/remove the child object directly from the
parent's
.Va children
list.
.Pp
The
.Fn AGOBJECT_FOREACH_CHILD
macro iterates
.Fa child
over every child object of
.Fa parent .
The
.Fa child
pointer is cast to the given structure
.Fa type ,
without type checking.
Example:
.Bd -literal -offset indent
struct my_class *chld;

AGOBJECT_FOREACH_CHILD(chld, parent, my_class) {
	printf("Child object: %s\\n", AGOBJECT(chld)->name);
}
.Ed
.Sh CLASSES
.nr nS 1
.Ft "void"
.Fn AG_RegisterClass "AG_ObjectClass *classInfo"
.Pp
.Ft "void"
.Fn AG_UnregisterClass "AG_ObjectClass *classInfo"
.Pp
.Ft "void"
.Fn AG_RegisterNamespace "const char *name" "const char *prefix" "const char *url"
.Pp
.Ft "void"
.Fn AG_UnregisterNamespace "const char *name"
.Pp
.Ft "AG_ObjectClass *"
.Fn AG_LookupClass "const char *classSpec"
.Pp
.Ft "AG_ObjectClass *"
.Fn AG_LoadClass "const char *classSpec"
.Pp
.Ft "void"
.Fn AG_RegisterModuleDirectory "const char *path"
.Pp
.Ft "void"
.Fn AG_UnregisterModuleDirectory "const char *path"
.Pp
.Ft "int"
.Fn AG_OfClass "AG_Object *obj" "const char *pattern"
.Pp
.Ft "AG_ObjectClass *"
.Fn AG_ObjectSuperclass "AG_Object *obj"
.Pp
.Ft "int"
.Fn AG_ObjectGetInheritHier "AG_Object *obj" "AG_ObjectClass **pHier" "int *nHier"
.Pp
.Fn AGOBJECT_FOREACH_CLASS "AG_Object *child" "AG_Object *parent" "TYPE type" "const char *pattern"
.Pp
.nr nS 0
The
.Fn AG_RegisterClass
function registers a new object class.
.\" MANLINK(AG_ObjectClass)
.Fa classInfo
should be an initialized
.Ft AG_ObjectClass
structure:
.Bd -literal
typedef struct ag_object_class {
	char hier[AG_OBJECT_HIER_MAX];	/* Full inheritance hierarchy */
	AG_Size size;             	/* Size of instance structure */
	AG_Version ver;          	/* Version numbers */
	void (*init)(void *obj);
	void (*reset)(void *obj);
	void (*destroy)(void *obj);
	int  (*load)(void *obj, AG_DataSource *ds, const AG_Version *ver);
	int  (*save)(void *obj, AG_DataSource *ds);
	void *(*edit)(void *obj);
	/* ... */
} AG_ObjectClass;
.Ed
.Pp
For example:
.Bd -literal
AG_ObjectClass MyClass = {
	"MyClass",
	sizeof(MyClass),
	{ 0,0 },
	Init,
	NULL,	/* reset */
	NULL,	/* destroy */
	Load,
	Save,
	NULL	/* edit */
};
.Ed
.Pp
We can define new operations (or other class-specific data) by overloading
.Ft AG_ObjectClass .
The
.Ft AG_WidgetClass
class in Agar-GUI, for instance, overloads
.Ft AG_ObjectClass
and adds 3 new methods:
.Bd -literal
typedef struct ag_widget_class {
	struct ag_object_class _inherit;
	void (*draw)(void *);
	void (*size_request)(void *, AG_SizeReq *);
	int  (*size_allocate)(void *, const AG_SizeAlloc *);
} AG_WidgetClass;
.Ed
.Pp
For example:
.Bd -literal
AG_WidgetClass agButtonClass = {
	{
		"AG_Widget:AG_Button",  /* or "Agar(Widget:Button)" */
		sizeof(AG_Button),
		{ 0,0 },
		Init,
		NULL,	/* reset */
		NULL,	/* destroy */
		NULL,	/* load */
		NULL,	/* save */
		NULL	/* edit */
	},
	Draw,
	SizeRequest,
	SizeAllocate
};
.Ed
.Pp
The first field of
.Ft AG_ObjectClass ,
.Va hier ,
specifies the inheritance hierarchy.
For instance, "AG_Widget:AG_Button" indicates that
.Ft AG_Button
is a direct subclass of
.Ft AG_Widget
(and
.Ft AG_Widget
is implicitely a subclass of the base
.Ft AG_Object
class).
.Pp
Alternatively, if a namespace called "Agar" exists and is mapped to the
"AG_" prefix then the inheritance hierarchy can be also written as
"Agar(Widget:Button)".
If implementing the class requires specific libraries available as dynamically
loaded modules via
.Xr AG_DSO 3 ,
this can be indicated in the
.Va hier
string by a terminating "@" followed by one or more library names, separated
by commas.
For example:
.Bd -literal
    "AG_Widget:MY_Widget@myLib,myOtherLib"
.Ed
.Pp
The
.Va size
member specifies the size in bytes of the object instance structure.
The
.Va ver
member specifies an optional datafile version number (see
.Xr AG_Version 3 ) .
.Pp
.Fn init
initializes a new object instance.
It is called after successful allocation of a new object by
.Fn AG_ObjectNew
or
.Fn AG_ObjectInit .
.Pp
.Fn reset
restores the state of the object to an initial state.
.Fn AG_ObjectLoad
invokes
.Fn reset
implicitely prior to the
.Fn load
operation.
.Fn AG_ObjectDestroy
also invokes
.Fn reset
implicitely prior to the
.Fn destroy
operation.
.Pp
.Fn destroy
frees all resources allocated by
.Fn init
(excluding any resources already freed by
.Fn reset ) .
.Pp
.Fn load
reads the serialized state of object
.Fa obj
from data source
.Fa ds .
It must return 0 on success or -1 if an error has occurred.
See:
.Xr AG_DataSource 3
and
.Sx SERIALIZATION
section.
.Pp
.Fn save
saves the state of
.Fa obj
to data source
.Fa ds .
It must return 0 on success or -1 if an error has occurred.
See:
.Xr AG_DataSource 3
and
.Sx SERIALIZATION
section.
.Pp
.Fn edit
is a user-defined / application-specific callback.
In a typical GUI application, for example,
.Fn edit
may be expected to create and return an
.Xr AG_Window 3
or an
.Xr AG_Box 3 .
.Pp
.Fn AG_UnregisterClass
removes the specified object class.
.Pp
.Fn AG_RegisterNamespace
registers a new namespace with the specified name, prefix and informational
URL.
For example, Agar registers its own namespace using:
.Bd -literal -offset indent
AG_RegisterNamespace("Agar", "AG_", "http://libagar.org/");
.Ed
.Pp
Once the namespace is registered, it is possible to specify inheritance
hierarchies using the
.Em namespace
format:
.Bd -literal -offset indent
Agar(Widget:Button):MyLib(MyButton)
.Ed
.Pp
which is equivalent to the conventional format:
.Bd -literal -offset indent
AG_Widget:AG_Button:MY_Button
.Ed
.Pp
The
.Fn AG_UnregisterNamespace
function removes all information about the specified namespace.
.Pp
The
.Fn AG_LookupClass
function looks up the
.Ft AG_ObjectClass
structure describing the specified class (in namespace or expanded format).
If there is no currently registered class matching the specification,
.Fn AG_LookupClass
returns NULL.
.Pp
.Fn AG_LoadClass
ensures that the object class specified in
.Fa classSpec
(see
.Fn AG_RegisterClass
for details on the format) is registered, possibly loading one or more
dynamic library files if they are specified in the string.
Dynamic library dependencies are given in the form of a terminating
.Sq @lib1,lib2,...
string.
.Fn AG_LoadClass
scans the registered module directories (see
.Fn AG_RegisterModuleDirectory )
for the libraries specified in the string.
Bare library names are given (the actual filenames are platform-dependent).
Libraries that are found (and not already in memory) are loaded via
.Xr AG_DSO 3 .
The first library must define a
.Sq myFooClass
symbol (where
.Sq myFoo
is the name of the class transformed from
.Sq MY_Foo ) ,
for an
.Ft AG_ObjectClass
structure describing the class (i.e., the same structure that is passed to
.Fn AG_RegisterClass ) .
.Pp
.Fn AG_UnloadClass
unregisters the specified class and also decrements the reference count of
any dynamically-located module associated with it.
If this reference count reaches zero, the module is removed from the current
process's address space.
.Pp
The
.Fn AG_RegisterModuleDirectory
function adds the specified directory to the module search path.
.Fn AG_UnregisterModuleDirectory
removes the specified directory from the search path.
.Pp
The
.Fn AG_OfClass
function evaluates whether the given object is an instance of the
specified class.
The
.Fa pattern
string may contain wildcards such as
.Dq MyClass:*
or
.Dq MyClass:*:MySubclass:* .
.Fn AG_OfClass
returns 1 if the object's class matches the given pattern.
.Pp
The
.Fn AG_ObjectSuperclass
function returns a pointer to the
.Fa AG_ObjectClass
structure for the superclass of an object.
Exceptionally, if the object is an instance of the base class (AG_Object),
a pointer to the
.Nm
class is returned.
.Pp
The
.Fn AG_ObjectGetInheritHier
function returns into
.Fa pHier
an array of
.Ft AG_ObjectClass
pointers describing the inheritance hierarchy of an object.
The size of the array is returned into
.Fa nHier .
If the returned item count is > 0, the returned array should be freed when
no longer in use.
.Fn AG_ObjectGetInheritHier
returns 0 on success or -1 if there is insufficient memory.
.Pp
The
.Fn AGOBJECT_FOREACH_CLASS
macro iterates
.Fa child
over every child object of
.Fa parent
which is an instance of the class specified by
.Fa pattern .
.Fa child
is cast to the given structure
.Fa type .
Example:
.Bd -literal -offset indent
struct my_class *chld;

AGOBJECT_FOREACH_CLASS(chld, parent, my_class, "MyClass") {
	printf("Object %s is an instance of MyClass\\n",
	    AGOBJECT(chld)->name);
}
.Ed
.Sh DEPENDENCIES
.nr nS 1
.Ft "int"
.Fn AG_ObjectInUse "AG_Object *obj"
.Pp
.Ft "AG_ObjectDep *"
.Fn AG_ObjectAddDep "AG_Object *obj" "AG_Object *depobj" "int persistent"
.Pp
.Ft "void"
.Fn AG_ObjectDelDep "AG_Object *obj" "AG_Object *depobj"
.Pp
.Ft "Uint32"
.Fn AG_ObjectEncodeName "AG_Object *obj" "AG_Object *depobj"
.Pp
.Ft "int"
.Fn AG_ObjectFindDep "AG_Object *obj" "Uint32 ind" "AG_Object **pObject"
.Pp
.nr nS 0
.Fn AG_ObjectInUse
returns 1 if the given object is being referenced by another object instance
or 0 if it isn't.
.Pp
.Fn AG_ObjectAddDep
either creates a new dependency upon
.Fa depobj
or increments the reference count if one exists.
If the
.Fa persistent
flag is set, the reference is preserved in object archives.
.Fn AG_ObjectDelDep
decrements the reference count upon
.Fa depobj
and removes the dependency if the count reaches zero (unless the object has the
.Dv AG_OBJECT_PRESERVE_DEPS
flag set).
.Pp
.Fn AG_ObjectEncodeName
returns a serializable 32-bit handle representing the dependency between
.Fa obj
and
.Fa depobj .
It reserves the special values 0 (NULL reference) and 1 (self reference).
The value of the handle corresponds to the index of
.Fa depobj
in the dependency table of
.Fa obj
plus 2.
.Pp
.Fn AG_ObjectFindDep
resolves a dependency handle (previously generated by
.Fn AG_ObjectEncodeName ) .
On success, a pointer to the object is returned in
.Fa pObject
and the function returns 0.
.Sh RELEASING RESOURCES
.nr nS 1
.Ft "void"
.Fn AG_ObjectDestroy "AG_Object *obj"
.Pp
.Ft void
.Fn AG_ObjectReset "AG_Object *obj"
.Pp
.Ft "void"
.Fn AG_ObjectFreeEvents "AG_Object *obj"
.Pp
.Ft "void"
.Fn AG_ObjectFreeVariables "AG_Object *obj"
.Pp
.Ft "void"
.Fn AG_ObjectFreeDeps "AG_Object *obj"
.Pp
.Ft "void"
.Fn AG_ObjectFreeDummyDeps "AG_Object *obj"
.Pp
.Ft "void"
.Fn AG_ObjectFreeChildren "AG_Object *obj"
.Pp
.nr nS 0
The
.Fn AG_ObjectReset
function restores the state of an object to some initial state.
It invokes the object's
.Fn reset
method.
.Fn reset
is expected to bring the object to a consistent state prior to deserialization
(before the
.Fn load
method is invoked).
.Pp
The
.Fn AG_ObjectDestroy
function frees all resources reserved by the given object (and any of its
children that is not being referenced).
It invokes
.Fn reset
and
.Fn destroy
for each class in the inheritance hierarchy.
Note that
.Fn AG_ObjectDestroy
also cancels any
.Xr AG_Timeout 3
event scheduled for future execution.
Unless the
.Dv AG_OBJECT_STATIC
flag is set,
.Fn AG_ObjectDestroy
frees the structure with
.Xr free 3 .
.Pp
Internally,
.Fn AG_ObjectDestroy
invokes
.Fn AG_ObjectFreeEvents ,
.Fn AG_ObjectFreeVariables ,
.Fn AG_ObjectFreeDeps
and
.Fn AG_ObjectFreeChildren .
These functions may be used to explicitely reinitialize the event
handler table (cancelling any scheduled timed event), clear the
.Xr AG_Variable 3
table, or destroy all attached child objects.
.Pp
.Fn AG_ObjectFreeChildren
releases all resources allocated by the child objects of a given parent.
The assumes that none of the child objects are currently in use.
.Pp
.Fn AG_ObjectFreeDummyDeps
cleans up the dependency table, removing any entry with a reference count
of zero (which occurs in objects with
.Dv AG_OBJECT_PRESERVE_DEPS
set).
.Sh SERIALIZATION
.nr nS 1
.Ft "int"
.Fn AG_ObjectLoad "AG_Object *obj"
.Pp
.Ft "int"
.Fn AG_ObjectLoadFromFile "AG_Object *obj" "const char *file"
.Pp
.Ft "int"
.Fn AG_ObjectLoadFromDB "AG_Object *obj" "AG_Db *db" "const AG_Dbt *key"
.Pp
.Ft "int"
.Fn AG_ObjectLoadData "AG_Object *obj"
.Pp
.Ft "int"
.Fn AG_ObjectLoadDataFromFile "AG_Object *obj" "const char *file"
.Pp
.Ft "int"
.Fn AG_ObjectLoadGeneric "AG_Object *obj"
.Pp
.Ft "int"
.Fn AG_ObjectLoadGenericFromFile "AG_Object *obj" "const char *file"
.Pp
.Ft "int"
.Fn AG_ObjectSave "AG_Object *obj"
.Pp
.Ft "int"
.Fn AG_ObjectSaveAll "AG_Object *obj"
.Pp
.Ft "int"
.Fn AG_ObjectSaveToFile "AG_Object *obj" "const char *path"
.Pp
.Ft "int"
.Fn AG_ObjectSaveToDB "AG_Object *obj" "AG_Db *db" "const AG_Dbt *key"
.Pp
.Ft "int"
.Fn AG_ObjectSerialize "AG_Object *obj" "AG_DataSource *ds"
.Pp
.Ft "int"
.Fn AG_ObjectUnserialize "AG_Object *obj" "AG_DataSource *ds"
.Pp
.Ft "int"
.Fn AG_ObjectReadHeader "AG_DataSource *ds" "AG_ObjectHeader *header"
.Pp
.Ft "int"
.Fn AG_ObjectPageIn "AG_Object *obj"
.Pp
.Ft "int"
.Fn AG_ObjectPageOut "AG_Object *obj"
.Pp
.nr nS 0
These functions implement serialization, or archiving of the state of an
.Nm
to a flat, machine-independent binary format.
.Pp
The
.Fn AG_ObjectLoad*
family of functions load the state of an Agar object from some binary data
source.
The generic
.Nm
state is loaded first, followed by the object's serialized data (which is read
by invoking the
.Fn load
function of every class in the inheritance hierarchy).
The
.Fn AG_ObjectLoad ,
.Fn AG_ObjectLoadGeneric
and
.Fn AG_ObjectLoadData
functions look for an archive file in the default search path (using the
.Sq load-path
setting of
.Xr AG_Config 3 ) .
The
.Fn AG_ObjectLoadFromFile ,
.Fn AG_ObjectLoadGenericFromFile
and
.Fn AG_ObjectLoadDataFromFile
variants attempt to load the object state from a specific file.
The
.Fn AG_ObjectLoadFromDB
variant loads the object state from the given
.Xr AG_Db 3
database entry.
.Pp
The
.Fn AG_ObjectSave*
family of functions serialize and save the state of the given object.
The generic
.Nm
state is written first, followed by the object's serialized data
(which is written by invoking the
.Fn save
function of every class in the inheritance hierarchy).
The
.Fn AG_ObjectSave
function creates an archive of the given object in the default location
(i.e., the
.Sq save-path
setting of
.Xr AG_Config 3 ) .
The
.Fn AG_ObjectSaveAll
variant saves the object's children as well as the object itself.
.Fn AG_ObjectSaveToFile
archives the object to the specified file.
.Fn AG_ObjectSaveToDB
archives the object to the given
.Xr AG_Db 3
entry.
.Pp
The
.Fn AG_ObjectSerialize
function writes an archive of the given object to the specified
.Xr AG_DataSource 3 ,
and
.Fn AG_ObjectUnserialize
reads an archive of the given object.
.Pp
The
.Fn AG_ObjectReadHeader
routine attempts to read the header of a serialized Agar object from a
.Xr AG_DataSource 3
and returns 0 on success or -1 if no valid header could be read.
On success, header information is returned into the
.Fa header
structure:
.Bd -literal
typedef struct ag_object_header {
	char hier[AG_OBJECT_HIER_MAX];	    /* Inheritance hierarchy */
	char libs[AG_OBJECT_LIBS_MAX];	    /* Library list */
	char classSpec[AG_OBJECT_HIER_MAX]; /* Full class specification */
	Uint32 dataOffs;                    /* Dataset offset */
	AG_Version ver;                     /* AG_Object version */
	Uint flags;                         /* Object flags */
} AG_ObjectHeader;
.Ed
.Pp
The
.Fn AG_ObjectPageIn
function loads an object's data into memory and sets the
.Dv AG_OBJECT_RESIDENT
flag.
.Fn AG_ObjectPageOut
checks whether an object is referenced by another object and if that is
not the case, the data is serialized to permanent storage, freed from
memory and
.Dv AG_OBJECT_RESIDENT
is cleared.
Both functions return 0 on success or -1 if an error has occurred.
.Sh FLAGS
The following public
.Nm
flags are defined:
.Bl -tag -width "AG_OBJECT_NON_PERSISTENT "
.It AG_OBJECT_FLOATING_VARS
Remove all entries of the
.Xr AG_Variable 3
table in
.Fn AG_ObjectLoad .
By default, the existing table is preserved and entries are created or
replaced by items found in the archive.
.It AG_OBJECT_NON_PERSISTENT
Disables archiving of the object and its children.
If set,
.Fn AG_ObjectSave
becomes a no-op and
.Fn AG_ObjectLoad
calls will fail.
.It AG_OBJECT_INDESTRUCTIBLE
Application-specific advisory flag.
.It AG_OBJECT_RESIDENT
The object's data exists in memory.
Set by
.Fn AG_ObjectPageIn
and
.Fn AG_ObjectPageOut .
.It AG_OBJECT_PRESERVE_DEPS
Don't remove entries in the dependency table when their reference count
reaches 0.
.It AG_OBJECT_STATIC
Object is statically allocated (or allocated via a facility other than
.Xr malloc 3 ) .
Disable use of
.Xr free 3
by
.Fn AG_ObjectDestroy .
.It AG_OBJECT_READONLY
Application-specific advisory flag.
.It AG_OBJECT_REOPEN_ONLOAD
If an
.Fn edit
operation is defined, indicate that elements associated with its return
value (such as GUI windows or elements in the case of a GUI application)
should be recreated whenever
.Fn AG_ObjectLoad
is used.
.It AG_OBJECT_REMAIN_DATA
Prevent the object's data from being freed by
.Fn AG_ObjectReset
when a
.Fn AG_ObjectPageOut
call is made and the reference count reaches zero.
.It AG_OBJECT_DEBUG
Application-specific debugging flag.
.It AG_OBJECT_NAME_ONATTACH
Automatically generate a unique name for the object as soon as
.Fn AG_ObjectAttach
occurs.
.It AG_OBJECT_CHLD_AUTOSAVE
Serialize the object's children in
.Fn AG_ObjectSerialize .
.El
.Sh EVENTS
The
.Nm
mechanism generates the following events:
.Bl -tag -width 2n
.It Fn attached "void"
The object has been attached to another.
This event originates from the parent object.
The linkage lock is held during the execution of the event handler.
.It Fn detached "void"
The object has been detached from its parent.
The linkage lock is held during the execution of the event handler.
This event originates from the parent.
.It Fn child-attached "void"
Same as
.Fn attached ,
except that the event is sent from the child to the parent.
.It Fn child-detached "void"
Same as
.Fn detached ,
except that the event is sent from the child to the parent.
.It Fn renamed "void"
The object's name has changed.
.It Fn object-post-load-data "const char *path"
Invoked by
.Fn AG_ObjectLoadData ,
on success.
If the object was loaded from file,
.Fa path
is the pathname of the file.
.It Fn bound "AG_Variable *V"
A new variable binding has been created, or the value of an existing binding
has been updated; see
.Xr AG_Variable 3
for details.
.El
.Sh STRUCTURE DATA
For the
.Ft AG_ObjectClass
structure (see
.Sx CLASSES
section):
.Pp
.Bl -tag -compact -width "void (*destroy) "
.It Ft char *hier
Full inheritance hierarchy.
.It Ft AG_Size size
Size of instance structure (in bytes).
.It Ft AG_Version ver
Versioning information (see
.Xr AG_Version 3 ) .
.It Ft void (*init)
Initialization routine.
.It Ft void (*reset)
Cleanup routine (for
.Fn AG_ObjectReset ) .
.It Ft void (*destroy)
Final cleanup routine.
.It Ft int (*load)
Deserialization routine.
.It Ft int (*save)
Serialization routine.
.It Ft void *(*edit)
Application-specific entry point.
.El
.Pp
The following read-only members are initialized internally:
.Pp
.Bl -tag -compact -width "TAILQ(AG_ObjectClass) sub "
.It Ft char *name
The name for this class only.
.It Ft char *libs
Comma-separated list of DSO modules.
.It Ft AG_ObjectClass *super
Pointer to the superclass.
.It Ft TAILQ(AG_ObjectClass) sub
Direct subclasses of this class.
.El
.Pp
For the
.Ft AG_Object
structure:
.Bl -tag -width "char name[AG_OBJECT_NAME_MAX] "
.It Ft char name[AG_OBJECT_NAME_MAX]
Unique (in parent) identifier for this object instance.
May not contain
.Sq / .
.It Ft char *archivePath
Application-specific path, used to remember the last successful location for
an editor's "Save" function.
.It Ft char *save_pfx
Path name prefix when saving to disk (after
.Pa dir/
and before filename).
.It Ft AG_ObjectClass *cls
A pointer to the
.Ft AG_ObjectClass
for this object's class
(see
.Sx CLASSES
section).
.It Ft Uint flags
Option flags for this object instance (see
.Sx FLAGS
section).
.It Ft TAILQ(AG_Event) events
Table of registered event handlers (set by
.Xr AG_SetEvent 3 )
and virtual functions (set by
.Fn AG_Set<Type>Fn ) .
.It Ft TAILQ(AG_Timer) timers
List of active timers (see
.Xr AG_Timer 3 ) .
.It Ft TAILQ(AG_Variable) vars
Named variables (see
.Xr AG_Variable 3 ) .
.It Ft TAILQ(AG_ObjectDep) deps
Dependency table (see
.Sx DEPENDENCIES ) .
.It Ft TAILQ(AG_Object) children
List of child objects.
The
.Fn AGOBJECT_FOREACH_CHILD ,
.Fn AGOBJECT_FOREACH_CHILD_REVERSE ,
.Fn AGOBJECT_NEXT_CHILD ,
.Fn AGOBJECT_LAST_CHILD
and
.Fn AGOBJECT_FOREACH_CLASS
macros can be used to iterate over this list.
.El
.Sh EXAMPLES
See
.Pa core/dummy_object.[ch]
and
.Pa tests/objsystem.c
in the Agar source distribution.
.Sh SEE ALSO
.Xr AG_Event 3 ,
.Xr AG_Intro 3 ,
.Xr AG_Timeout 3 ,
.Xr AG_Variable 3
.Sh HISTORY
The
.Nm
interface appeared in Agar 1.0
