/* File generated by agar bundlecss */
const char *agStyleDefault_Data = 
	"/*\n"
	" * Default Agar Stylesheet.\n"
	" *\n"
	" * Widgets inherit the style attributes of their parents, unless overridden\n"
	" * either by an instance AG_Variable or a matching stylesheet definition.\n"
	" *\n"
	" * Agar Stylesheet definitions are blocks of attribute-value pairs which can\n"
	" * match widgets in different ways:\n"
	" *\n"
	" * - By Agar class: \"AG_Label\", \"AG_Label:*\", \"Agar(Label):My(Label)\"\n"
	" * - By \"id\" Variable: \"#mine\", \"AG_Button.#mine\"\n"
	" * - By \"class\" Variable: \".dark\", \"AG_Button.dark\"\n"
	" *\n"
	" * Agar cascading stylesheets are documented in: AG_StyleSheet(3) and\n"
	" * AG_Widget(3) (under the STYLING section).\n"
	" */\n"
	"AG_Widget {\n"
	"color: rgb(125,125,125);		/* Background primary */\n"
	"color#focused: rgb(200,0,0);\n"
	"color#disabled: rgb(160,160,160);\n"
	"color#hover: rgb(130,130,130);\n"
	"color#selected: rgb(50,50,120);\n"
	"text-color: rgb(250,250,250);		/* Foreground text primary */\n"
	"line-color: rgb(50,50,50);		/* Line primary */\n"
	"line-color#hover: rgb(70,70,70);\n"
	"shape-color: rgb(100,100,100);		/* Filled shape primary */\n"
	"border-color: rgb(100,100,100);		/* Decorative border primary */\n"
	"}\n"
	"AG_Label {\n"
	"color: rgb(0,0,0,0);			/* Disable BG */\n"
	"}\n"
	"AG_Editable {\n"
	"color: rgb(0,0,0,0);			/* Disable BG */\n"
	"color#selected: rgb(0,0,100);\n"
	"}\n"
	"AG_Titlebar {\n"
	"color: rgb(40,50,60);\n"
	"color#disabled: rgb(35,35,35);\n"
	"}\n"
	"AG_Menu {\n"
	"color: rgb(70,70,70);\n"
	"color#selected: rgb(40,40,110);\n"
	"color#disabled: rgb(40,40,110);\n"
	"text-color#selected: rgb(230,230,230);\n"
	"text-color#disabled: rgb(170,170,170);\n"
	"}\n"
	"AG_MenuView {\n"
	"color: rgb(70,70,70);\n"
	"color#selected: rgb(40,40,110);\n"
	"color#disabled: rgb(40,40,110);\n"
	"text-color#selected: rgb(230,230,230);\n"
	"text-color#disabled: rgb(170,170,170);\n"
	"}\n"
	"AG_Notebook {\n"
	"color#selected: rgb(117,117,117);\n"
	"}\n"
	"AG_Tlist {\n"
	"color: rgb(125,125,125);\n"
	"color#selected: rgb(50,50,120);\n"
	"text-color#selected: rgb(255,255,200);\n"
	"}\n"
	"AG_Console {\n"
	"font-family: Courier;\n"
	"color: rgb(0,0,30);\n"
	"color#hover: rgb(0,0,30);\n"
	"color#focused: rgb(10,10,28);\n"
	"color#selected: rgb(0,15,80);\n"
	"text-color: rgb(240,240,240);\n"
	"}\n"
	"AG_ProgressBar {\n"
	"color#selected: rgb(50,50,120);\n"
	"text-color#selected: rgb(255,255,255);\n"
	"}\n"
	"AG_FixedPlotter {\n"
	"color: rgb(50,50,50);\n"
	"line-color: rgb(70,70,70);\n"
	"}\n"
	"/*\n"
	" * TODO: We wish to be able to write rules such as this:\n"
	" *\n"
	" * AG_Console > AG_Scrollbar {\n"
	" *	color: rgb(125,125,125);\n"
	" * 	color#hover: rgb(145,145,145);\n"
	" * 	color#focused: rgb(225,225,225);\n"
	" * }\n"
	" *\n"
	" * But this is not supported yet so as a temporary workaround, we make\n"
	" * Scrollbar not inherit the reverse colors of its parent:\n"
	" */\n"
	"AG_Scrollbar {\n"
	"color: rgb(125,125,125);\n"
	"color#focused: rgb(200,0,0);\n"
	"color#disabled: rgb(160,160,160);\n"
	"color#hover: rgb(130,130,130);\n"
	"color#selected: rgb(50,50,120);\n"
	"}\n"
	"";

AG_StaticCSS agStyleDefault = {
	"agStyleDefault",
	2630,
	&agStyleDefault_Data,
	NULL
};
