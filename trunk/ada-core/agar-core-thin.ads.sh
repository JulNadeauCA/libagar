#!/bin/sh

fatal()
{
  echo "fatal: $1" 1>&2
  exit 1
}

die_spec()
{
  fatal "could not write spec file"
}

(
cat <<EOF
--
-- Auto generated by agar-core-thin.ads.sh, do not edit.
--

with C_String;
with Interfaces.C;
with Interfaces;
with System;

package Agar.Core.Thin is
  package C renames Interfaces.C;

  type Signed_8 is range -127 .. 127;
  for Signed_8'Size use 8;

  type Signed_16 is range -(2 **15) .. +(2 **15 - 1);
  for Signed_16'Size use 16;

  type Signed_32 is range -(2 **31) .. +(2 **31 - 1);
  for Signed_32'Size use 32;

  type Signed_64 is range -(2 **63) .. +(2 **63 - 1);
  for Signed_64'Size use 64;

  pragma Convention (C, Signed_8);
  pragma Convention (C, Signed_16);
  pragma Convention (C, Signed_32);
  pragma Convention (C, Signed_64);

  subtype Float_t       is Interfaces.C.C_float;
  subtype Double_t      is Interfaces.C.double;
  subtype Long_Double_t is Interfaces.C.long_double;

EOF
) || die_spec

(
cat <<EOF
  --
  -- AG_Core
  --

  package Core is

    -- type_map : AG_Version
    type Version_t is record
      Major   : C.int;
      Minor   : C.int;
      Patch   : C.int;
      Release : C_String.String_Not_Null_Ptr_t;
    end record;
    type Version_Access_t is access all Version_t;
    pragma Convention (C, Version_t);
    pragma Convention (C, Version_Access_t);

    -- proc_map : AG_GetVersion
    procedure Get_Version (Ver : Version_Access_t);
    pragma Import (C, Get_Version, "AG_GetVersion");

    AG_VERBOSE         : constant := 16#0001#;
    AG_CREATE_DATADIR  : constant := 16#0002#;
    AG_NO_CFG_AUTOLOAD : constant := 16#0004#;

    -- proc_map : AG_InitCore
    function Init_Core
      (Progname : in C_String.String_Not_Null_Ptr_t;
       Flags    : in C.unsigned) return C.int;
    pragma Import (C, Init_Core, "AG_InitCore");

    type Exit_Func_Access_t is not null access procedure;
    pragma Convention (C, Exit_Func_Access_t);

    -- proc_map : AG_AtExitFunc
    procedure At_Exit_Func
      (Func : in Exit_Func_Access_t);
    pragma Import (C, At_Exit_Func, "AG_AtExitFunc");

    -- proc_map : AG_Quit
    procedure Quit;
    pragma Import (C, Quit, "AG_Quit");

    -- proc_map : AG_Destroy
    procedure Destroy;
    pragma Import (C, Destroy, "AG_Destroy");

  end Core;

  --
  -- AG_Config
  --

  package Config is

    -- proc_map : AG_ConfigFile
    function File
      (Path_Key  : in C_String.String_Not_Null_Ptr_t;
       Name      : in C_String.String_Not_Null_Ptr_t;
       Extension : in C_String.String_Not_Null_Ptr_t;
       Dest_Path : in C_String.String_Not_Null_Ptr_t;
       Dest_Len  : in C.size_t) return C.int;
    pragma Import (C, File, "AG_ConfigFile");

    -- proc_map : AG_ConfigLoad
    function Load return C.int;
    pragma Import (C, Load, "AG_ConfigLoad");

    -- proc_map : AG_ConfigSave
    function Save return C.int;
    pragma Import (C, Save, "AG_ConfigSave");

  end Config;

  --
  -- AG_DataSource
  --

  package Data_Source is

    -- type_map : AG_DataSource
    type Data_Source_t                    is limited private;
    type Data_Source_Access_t             is access all Data_Source_t;
    subtype Data_Source_Not_Null_Access_t is not null Data_Source_Access_t;
    pragma Convention (C, Data_Source_Access_t);

    -- type_map : AG_IOStatus_t
    type IO_Status_t is
      (Success,
       EOF,
       Error,
       Unavailable);

    for IO_Status_t use
      (Success     => 0,
       EOF         => 1,
       Error       => 2,
       Unavailable => 3);

    for IO_Status_t'Size use C.unsigned'Size;
    pragma Convention (C, IO_Status_t);

    -- type_map : ag_seek_mode
    type Seek_Mode_t is
      (Seek_Set,
       Seek_Current,
       Seek_End);

    for Seek_Mode_t use
      (Seek_Set     => 0,
       Seek_Current => 1,
       Seek_End     => 2);

    for Seek_Mode_t'Size use C.unsigned'Size;
    pragma Convention (C, Seek_Mode_t);

    -- type_map : ag_byte_order
    type Byte_Order_t is
      (Big_Endian,
       Little_Endian);

    for Byte_Order_t use
      (Big_Endian    => 0,
       Little_Endian => 1);

    for Byte_Order_t'Size use C.unsigned'Size;
    pragma Convention (C, Byte_Order_t);

    -- proc_map : AG_OpenFile
    function Open_File
      (Path : in C_String.String_Not_Null_Ptr_t;
       Mode : in C_String.String_Not_Null_Ptr_t) return Data_Source_Access_t;
    pragma Import (C, Open_File, "AG_OpenFile");

    -- proc_map : AG_OpenCore
    function Open_Core
      (Core : in System.Address;
       Size : in C.size_t) return Data_Source_Access_t;
    pragma Import (C, Open_Core, "AG_OpenCore");

    -- proc_map : AG_OpenConstCore
    function Open_Constant_Core
      (Core : in System.Address;
       Size : in C.size_t) return Data_Source_Access_t;
    pragma Import (C, Open_Constant_Core, "AG_OpenConstCore");

    -- proc_map : AG_OpenAutoCore
    function Open_Data_Source return Data_Source_Access_t;
    pragma Import (C, Open_Data_Source, "AG_OpenAutoCore");

    -- proc_map : AG_CloseFile
    procedure Close_File (Source : in Data_Source_Access_t);
    pragma Import (C, Close_File, "AG_CloseFile");

    -- proc_map : AG_CloseFileHandle
    procedure Close_File_Handle (Source : in Data_Source_Access_t);
    pragma Import (C, Close_File_Handle, "AG_CloseFileHandle");

    -- proc_map : AG_CloseCore
    procedure Close_Core (Source : in Data_Source_Access_t);
    pragma Import (C, Close_Core, "AG_CloseCore");

    -- proc_map : AG_CloseConstCore
    procedure Close_Constant_Core (Source : in Data_Source_Access_t);
    pragma Import (C, Close_Constant_Core, "AG_CloseConstCore");

    -- proc_map : AG_CloseAutoCore
    procedure Close_Auto_Core (Source : in Data_Source_Access_t);
    pragma Import (C, Close_Auto_Core, "AG_CloseAutoCore");

    -- proc_map : AG_CloseDataSource
    procedure Close_Data_Source (Source : in Data_Source_Access_t);
    pragma Import (C, Close_Data_Source, "AG_CloseDataSource");

    -- proc_map : AG_Read
    function Read
      (Source  : in Data_Source_Access_t;
       Buffer  : in System.Address;
       Size    : in C.size_t;
       Members : in C.size_t) return IO_Status_t;
    pragma Import (C, Read, "AG_Read");

    -- proc_map : AG_ReadAt
    function Read_At
      (Source  : in Data_Source_Access_t;
       Buffer  : in System.Address;
       Size    : in C.size_t;
       Members : in C.size_t;
       Offset  : in C.size_t) return IO_Status_t;
    pragma Import (C, Read_At, "AG_ReadAt");

    -- proc_map : AG_Write
    function Write
      (Source  : in Data_Source_Access_t;
       Buffer  : in System.Address;
       Size    : in C.size_t;
       Members : in C.size_t) return IO_Status_t;
    pragma Import (C, Write, "AG_Write");

    -- proc_map : AG_WriteAt
    function Write_At
      (Source  : in Data_Source_Access_t;
       Buffer  : in System.Address;
       Size    : in C.size_t;
       Members : in C.size_t;
       Offset  : in C.size_t) return IO_Status_t;
    pragma Import (C, Write_At, "AG_WriteAt");

    -- proc_map : AG_Tell
    function Tell
      (Source : in Data_Source_Access_t) return C.size_t;
    pragma Import (C, Tell, "AG_Tell");

    -- proc_map : AG_Seek
    function Seek
      (Source : in Data_Source_Access_t;
       Offset : in C.size_t;
       Mode   : in Seek_Mode_t) return C.int;
    pragma Import (C, Seek, "AG_Seek");

    -- proc_map : AG_LockDataSource
    procedure Lock
      (Source : in Data_Source_Access_t);
    pragma Import (C, Lock, "AG_LockDataSource");

    -- proc_map : AG_UnlockDataSource
    procedure Unlock
      (Source : in Data_Source_Access_t);
    pragma Import (C, Unlock, "AG_UnlockDataSource");

    -- proc_map : AG_SetByteOrder
    procedure Set_Byte_Order
      (Source     : in Data_Source_Access_t;
       Byte_Order : in Byte_Order_t);
    pragma Import (C, Set_Byte_Order, "AG_SetByteOrder");

    -- proc_map : AG_SetSourceDebug
    procedure Set_Source_Debug
      (Source : in Data_Source_Access_t;
       Enable : in C.int);
    pragma Import (C, Set_Source_Debug, "AG_SetSourceDebug");

    -- proc_map : AG_DataSourceInit
    procedure Init
      (Source : in Data_Source_Access_t);
    pragma Import (C, Init, "AG_DataSourceInit");

    -- proc_map : AG_DataSourceDestroy
    procedure Destroy
      (Source : in Data_Source_Access_t);
    pragma Import (C, Destroy, "AG_DataSourceDestroy");

    -- FIXME: AG_DataSourceSetErrorFn
    -- FIXME: AG_DataSourceError

EOF
) || die_spec

for size in 8 16 32 64
do
  (cat <<EOF
    function Read_Unsigned_${size}
      (Source : in Data_Source_Access_t) return Interfaces.Unsigned_${size};
    pragma Import (C, Read_Unsigned_${size}, "AG_ReadUint${size}");

    function Read_Unsigned_${size}_Vector
      (Source : in Data_Source_Access_t;
       Vector : in System.Address) return C.int;
    pragma Import (C, Read_Unsigned_${size}_Vector, "AG_ReadUint${size}v");

    function Read_Signed_${size}
      (Source : in Data_Source_Access_t) return Signed_${size};
    pragma Import (C, Read_Signed_${size}, "AG_ReadSint${size}");

    function Read_Signed_${size}_Vector
      (Source : in Data_Source_Access_t;
       Vector : in System.Address) return C.int;
    pragma Import (C, Read_Signed_${size}_Vector, "AG_ReadSint${size}v");

    procedure Write_Unsigned_${size}
      (Source : in Data_Source_Access_t;
       Value  : in Interfaces.Unsigned_${size});
    pragma Import (C, Write_Unsigned_${size}, "AG_WriteUint${size}");

    procedure Write_Unsigned_${size}_Vector
      (Source : in Data_Source_Access_t;
       Value  : in System.Address);
    pragma Import (C, Write_Unsigned_${size}_Vector, "AG_WriteUint${size}v");

    procedure Write_Signed_${size}
      (Source : in Data_Source_Access_t;
       Value  : in Signed_${size});
    pragma Import (C, Write_Signed_${size}, "AG_WriteSint${size}");

    procedure Write_Signed_${size}_Vector
      (Source : in Data_Source_Access_t;
       Value  : in System.Address);
    pragma Import (C, Write_Signed_${size}_Vector, "AG_WriteSint${size}v");

    procedure Write_Signed_${size}_At
      (Source : in Data_Source_Access_t;
       Value  : in Signed_${size};
       Offset : in C.size_t);
    pragma Import (C, Write_Signed_${size}_At, "AG_WriteSint${size}At");

    procedure Write_Unsigned_${size}_At
      (Source : in Data_Source_Access_t;
       Value  : in Interfaces.Unsigned_${size};
       Offset : in C.size_t);
    pragma Import (C, Write_Unsigned_${size}_At, "AG_WriteUint${size}At");

EOF
) || die_spec
done

for size in Float Double Long_Double
do
  c_type=`echo ${size} | tr -d '_'` || die_spec

  (cat <<EOF
    function Read_${size}
      (Source : in Data_Source_Access_t) return ${size}_t;
    pragma Import (C, Read_${size}, "AG_Read${c_type}");

    function Read_${size}_Vector
      (Source : in Data_Source_Access_t;
       Vector : in System.Address) return C.int;
    pragma Import (C, Read_${size}_Vector, "AG_Read${c_type}v");

    procedure Write_${size}
      (Source : in Data_Source_Access_t;
       Value  : in ${size}_t);
    pragma Import (C, Write_${size}, "AG_Write${c_type}");

    procedure Write_${size}_Vector
      (Source : in Data_Source_Access_t;
       Value  : in System.Address);
    pragma Import (C, Write_${size}_Vector, "AG_Write${c_type}v");

    procedure Write_${size}_At
      (Source : in Data_Source_Access_t;
       Value  : in ${size}_t;
       Offset : in C.size_t);
    pragma Import (C, Write_${size}_At, "AG_Write${c_type}At");

EOF
) || die_spec
done

(
cat <<EOF
    function Read_String_Length
      (Source : in Data_Source_Access_t;
       Max_Size : in C.size_t) return C_String.String_Ptr_t;
    pragma Import (C, Read_String_Length, "AG_ReadStringLen");

    -- FIXME : AG_ReadStringLenv

    function Read_String
      (Source : in Data_Source_Access_t) return C_String.String_Ptr_t;
    pragma Import (C, Read_String, "AG_ReadString");

    -- FIXME : AG_ReadStringv

    function Read_Null_String_Length
      (Source : in Data_Source_Access_t;
       Max_Size : in C.size_t) return C_String.String_Ptr_t;
    pragma Import (C, Read_Null_String_Length, "AG_ReadNulStringLen");

    function Read_Null_String
      (Source : in Data_Source_Access_t) return C_String.String_Ptr_t;
    pragma Import (C, Read_Null_String, "AG_ReadNulString");

    function Copy_String
      (Buffer : in C_String.String_Not_Null_Ptr_t;
       Source : in Data_Source_Access_t;
       Size   : in C.size_t) return C.size_t;
    pragma Import (C, Copy_String, "AG_CopyString");

    function Copy_Null_String
      (Buffer : in C_String.String_Not_Null_Ptr_t;
       Source : in Data_Source_Access_t;
       Size   : in C.size_t) return C.size_t;
    pragma Import (C, Copy_Null_String, "AG_CopyNulString");

    procedure Skip_String
      (Source : in Data_Source_Access_t);
    pragma Import (C, Skip_String, "AG_SkipString");

    procedure Write_String
      (Source : in Data_Source_Access_t;
       Data   : in C_String.String_Not_Null_Ptr_t);
    pragma Import (C, Write_String, "AG_WriteString");

    -- FIXME : AG_WriteStringv

  private
EOF
) || die_spec

./type-make AG_DataSource Data_Source_t || exit 1

(
cat <<EOF

  end Data_Source;

  package List is

    -- type_map : AG_List
    type List_t                    is limited private;
    type List_Access_t             is access all List_t;
    subtype List_Not_Null_Access_t is not null List_Access_t;

    -- proc_map : AG_ListNew
    function New_List return List_Access_t;
    pragma Import (C, New_List, "agar_core_thin_list_new");

    -- proc_map : AG_ListDup
    function Duplicate (List : in List_Not_Null_Access_t) return List_Access_t;
    pragma Import (C, Duplicate, "agar_core_thin_list_dup");

    -- FIXME : AG_ListPrepend
    -- FIXME : AG_ListInsert
    -- FIXME : AG_ListAppend

    -- proc_map : AG_ListClear
    procedure Clear (List : in List_Not_Null_Access_t);
    pragma Import (C, Clear, "agar_core_thin_list_clear");

    -- proc_map : AG_ListDestroy
    procedure Destroy (List : in out List_Access_t);
    pragma Import (C, Destroy, "agar_core_thin_list_destroy");

  private

EOF
) || die_spec

./type-make AG_List List_t || exit 1

(
cat <<EOF
  end List;

  package DB is

    -- type_map : AG_Db
    type DB_t                    is private;
    type DB_Access_t             is access all DB_t;
    subtype DB_Not_Null_Access_t is not null DB_Access_t;

    -- type_map : ag_db_type
    type Type_t is (Dummy, DB4);
    for Type_t use (Dummy => 0, DB4 => 1);
    for Type_t'Size use C.unsigned'Size;

    -- type_map : AG_DbEntry
    type Entry_t is record
      DB        : DB_Not_Null_Access_t;
      Key       : System.Address;
      Data      : System.Address;
      Key_Size  : C.size_t;
      Data_Size : C.size_t;
    end record;
    type Entry_Access_t             is access all Entry_t;
    subtype Entry_Not_Null_Access_t is not null Entry_Access_t;
    pragma Convention (C, Entry_t);
    pragma Convention (C, Entry_Access_t);

    -- proc_map : AG_DbNew
    function New_DB (DB_Type : in Type_t) return DB_Access_t;
    pragma Import (C, New_DB, "AG_DbNew");

    -- proc_map : AG_DbListKeys
    function List_Keys (DB : DB_Not_Null_Access_t) return List.List_Access_t;
    pragma Import (C, List_Keys, "AG_DbListKeys");

    -- proc_map : AG_DbExists
    function Exists
      (DB  : in DB_Not_Null_Access_t;
       Key : in C_String.String_Not_Null_Ptr_t) return C.int;
    pragma Import (C, Exists, "AG_DbExists");

    -- proc_map : AG_DbExistsDK
    function Exists_Binary_Key
      (DB       : in DB_Not_Null_Access_t;
       Key_Data : in System.Address;
       Key_Size : in C.size_t) return C.int;
    pragma Import (C, Exists_Binary_Key, "AG_DbExistsDK");

    -- proc_map : AG_DbLookup
    function Lookup
      (DB       : in DB_Not_Null_Access_t;
       DB_Entry : in Entry_Access_t;
       Key      : in C_String.String_Not_Null_Ptr_t) return C.int;
    pragma Import (C, Lookup, "AG_DbLookup");

    -- proc_map : AG_DbLookupDK
    function Lookup_Binary_Key
      (DB       : in DB_Not_Null_Access_t;
       DB_Entry : in Entry_Access_t;
       Key_Data : in System.Address;
       Key_Size : in C.size_t) return C.int;
    pragma Import (C, Lookup_Binary_Key, "AG_DbLookupDK");

    -- proc_map : AG_DbDelete
    function Delete
      (DB  : in DB_Not_Null_Access_t;
       Key : in C_String.String_Not_Null_Ptr_t) return C.int;
    pragma Import (C, Delete, "AG_DbDelete");

    -- proc_map : AG_DbDeleteDK
    function Delete_Binary_Key
      (DB       : in DB_Not_Null_Access_t;
       Key_Data : in System.Address;
       Key_Size : in C.size_t) return C.int;
    pragma Import (C, Delete_Binary_Key, "AG_DbDeleteDK");

    -- proc_map : AG_DbPut
    function Put
      (DB       : in DB_Not_Null_Access_t;
       DB_Entry : in Entry_Not_Null_Access_t) return C.int;
    pragma Import (C, Put, "AG_DbPut");

    -- proc_map : AG_DbSync
    procedure Sync (DB : in DB_Not_Null_Access_t);
    pragma Import (C, Sync, "AG_DbSync");

  private
EOF
) || die_spec

./type-make AG_Db DB_t || exit 1

(
cat <<EOF
  end DB;

  package DSO is

    -- type_map : AG_DSO
    type DSO_t                    is limited private;
    type DSO_Access_t             is access all DSO_t;
    subtype DSO_Not_Null_Access_t is not null DSO_Access_t;
    pragma Convention (C, DSO_Access_t);

    type Symbol_Access_t is access all System.Address;
    pragma Convention (C, Symbol_Access_t);

    -- proc_map : AG_LoadDSO
    function Load
      (Name  : in C_String.String_Not_Null_Ptr_t;
       Path  : in C_String.String_Not_Null_Ptr_t;
       Flags : C.unsigned) return DSO_Access_t;
    pragma Import (C, Load, "AG_LoadDSO");

    -- proc_map : AG_SymDSO
    function Symbol
      (DSO   : in DSO_Not_Null_Access_t;
       Name  : in C_String.String_Not_Null_Ptr_t;
       Value : in Symbol_Access_t) return C.int;
    pragma Import (C, Symbol, "AG_LoadDSO");

    -- proc_map : AG_LockDSO
    procedure Lock;
    pragma Import (C, Lock, "agar_dso_lock");

    -- proc_map : AG_UnlockDSO
    procedure Unlock;
    pragma Import (C, Unlock, "agar_dso_lock");

    -- proc_map : AG_UnloadDSO
    function Unload
      (DSO : in DSO_Not_Null_Access_t) return C.int;
    pragma Import (C, Unload, "AG_UnloadDSO");

    -- proc_map : AG_LookupDSO
    function Lookup
      (Name : in C_String.String_Not_Null_Ptr_t) return DSO_Access_t;
    pragma Import (C, Lookup, "AG_LookupDSO");

  private
EOF
) || die_spec

./type-make AG_DSO DSO_t || exit 1

(
cat <<EOF

  end DSO;

  package Error is

    type Callback_t is not null access procedure
      (Message : in C_String.String_Not_Null_Ptr_t);
    pragma Convention (C, Callback_t);

    -- proc_map : AG_SetError
    procedure Set_Error
      (Format : in C_String.String_Not_Null_Ptr_t;
       Data   : in C_String.String_Not_Null_Ptr_t);
    pragma Import (C, Set_Error, "AG_SetError");

    -- proc_map : AG_FatalError
    procedure Fatal_Error
      (Format : in C_String.String_Not_Null_Ptr_t;
       Data   : in C_String.String_Not_Null_Ptr_t);
    pragma Import (C, Fatal_Error, "AG_FatalError");

    -- proc_map : AG_GetError
    function Get_Error return C_String.String_Not_Null_Ptr_t;
    pragma Import (C, Get_Error, "AG_GetError");

    -- proc_map : AG_SetFatalCallback
    procedure Set_Fatal_Callback
      (Callback : Callback_t);
    pragma Import (C, Set_Fatal_Callback, "AG_SetFatalCallback");

    -- FIXME : AG_Verbose
    -- FIXME : AG_Debug

  end Error;

  package File is
    -- Not required
  end File;

  package Object is

    -- type_map : AG_Object
    type Object_t                    is limited private;
    type Object_Access_t             is access all Object_t;
    subtype Object_Not_Null_Access_t is not null Object_Access_t;

    -- type_map : AG_ObjectHeader
    type Object_Header_t                    is limited private;
    type Object_Header_Access_t             is access all Object_Header_t;
    subtype Object_Header_Not_Null_Access_t is not null Object_Header_Access_t;

    -- type_map : AG_ObjectClass
    type Class_t                    is limited private;
    type Class_Access_t             is access all Class_t;
    subtype Class_Not_Null_Access_t is not null Class_Access_t;

    -- type_map : AG_ObjectDep
    type Dependency_t                    is limited private;
    type Dependency_Access_t             is access all Dependency_t;
    subtype Dependency_Not_Null_Access_t is not null Dependency_Access_t;

    -- proc_map : AG_ObjectNew
    function New_Object
      (Parent       : in Object_Access_t;
       Name         : in C_String.String_Ptr_t;
       Object_Class : in Class_Not_Null_Access_t) return Object_Access_t;
    pragma Import (C, New_Object, "AG_ObjectNew");

    -- proc_map : AG_ObjectInit
    procedure Init
      (Object       : in Object_Not_Null_Access_t;
       Object_Class : in Class_Not_Null_Access_t);
    pragma Import (C, Init, "AG_ObjectInit");

    -- proc_map : AG_ObjectInitStatic
    procedure Init_Static
      (Object       : in Object_Not_Null_Access_t;
       Object_Class : in Class_Not_Null_Access_t);
    pragma Import (C, Init_Static, "AG_ObjectInitStatic");

    -- proc_map : AG_ObjectAttach
    procedure Attach
      (New_Parent : in Object_Access_t;
       Object     : in Object_Not_Null_Access_t);
    pragma Import (C, Attach, "AG_ObjectAttach");

    -- proc_map : AG_ObjectAttachToNamed
    procedure Attach_To_Named
      (VFS_Root   : in Object_Not_Null_Access_t;
       Path       : in C_String.String_Not_Null_Ptr_t;
       Child      : in Object_Access_t);
    pragma Import (C, Attach_To_Named, "AG_ObjectAttachToNamed");

    -- proc_map : AG_ObjectDetach
    procedure Detach
      (Object : in Object_Not_Null_Access_t);
    pragma Import (C, Detach, "AG_ObjectDetach");

    -- proc_map : AG_ObjectMoveToHead
    procedure Move_To_Head
      (Object : in Object_Not_Null_Access_t);
    pragma Import (C, Move_To_Head, "AG_ObjectMoveToHead");

    -- proc_map : AG_ObjectMoveToTail
    procedure Move_To_Tail
      (Object : in Object_Not_Null_Access_t);
    pragma Import (C, Move_To_Tail, "AG_ObjectMoveToTail");

    -- proc_map : AG_ObjectMoveUp
    procedure Move_Up
      (Object : in Object_Not_Null_Access_t);
    pragma Import (C, Move_Up, "AG_ObjectMoveUp");

    -- proc_map : AG_ObjectMoveDown
    procedure Move_Down
      (Object : in Object_Not_Null_Access_t);
    pragma Import (C, Move_Down, "AG_ObjectMoveDown");

    -- proc_map : AG_ObjectDelete
    procedure Delete
      (Object : in Object_Not_Null_Access_t);
    pragma Import (C, Delete, "AG_ObjectDelete");

    -- proc_map : AG_ObjectRoot
    function Root (Object : in Object_Not_Null_Access_t) return Object_Not_Null_Access_t;
    pragma Import (C, Root, "AG_ObjectRoot");

    -- proc_map : AG_ObjectParent
    function Parent (Object : in Object_Not_Null_Access_t) return Object_Access_t;
    pragma Import (C, Parent, "AG_ObjectParent");

    -- proc_map : AG_ObjectFind
    function Find
      (VFS_Root : in Object_Not_Null_Access_t;
       Format   : in C_String.String_Not_Null_Ptr_t;
       Data     : in C_String.String_Not_Null_Ptr_t) return Object_Access_t;
    pragma Import (C, Find, "AG_ObjectFind");

    -- proc_map : AG_ObjectFindParent
    function Find_Parent
      (VFS_Root    : in Object_Not_Null_Access_t;
       Name        : in C_String.String_Not_Null_Ptr_t;
       Object_Type : in C_String.String_Not_Null_Ptr_t) return Object_Access_t;
    pragma Import (C, Find_Parent, "AG_ObjectFindParent");

    -- proc_map : AG_ObjectFindChild
    function Find_Child
      (VFS_Root : in Object_Not_Null_Access_t;
       Name     : in C_String.String_Not_Null_Ptr_t) return Object_Access_t;
    pragma Import (C, Find_Child, "AG_ObjectFindChild");

    -- proc_map : AG_ObjectCopyName
    function Copy_Name
      (Object : in Object_Not_Null_Access_t;
       Path   : in C_String.Char_Array_Not_Null_Ptr_t;
       Size   : in C.size_t) return C.int;
    pragma Import (C, Copy_Name, "AG_ObjectCopyName");

    -- proc_map : AG_ObjectLock
    procedure Lock (Object : in Object_Not_Null_Access_t);
    pragma Import (C, Lock, "AG_ObjectLock");

    -- proc_map : AG_ObjectUnlock
    procedure Unlock (Object : in Object_Not_Null_Access_t);
    pragma Import (C, Unlock, "AG_ObjectUnlock");

    -- proc_map : AG_ObjectLockVFS
    procedure Lock_VFS (Object : in Object_Not_Null_Access_t);
    pragma Import (C, Lock_VFS, "AG_ObjectLockVFS");

    -- proc_map : AG_ObjectUnlockVFS
    procedure Unlock_VFS (Object : in Object_Not_Null_Access_t);
    pragma Import (C, Unlock_VFS, "AG_ObjectUnlockVFS");

    -- proc_map : AG_ObjectSetName
    procedure Set_Name
      (Object   : in Object_Not_Null_Access_t;
       Format   : in C_String.String_Not_Null_Ptr_t;
       Data     : in C_String.String_Not_Null_Ptr_t);
    pragma Import (C, Set_Name, "AG_ObjectSetName");

    -- proc_map : AG_ObjectGenName
    function Generate_Name
      (Object       : in Object_Not_Null_Access_t;
       Object_Class : in Class_Not_Null_Access_t;
       Buffer       : in C_String.Char_Array_Not_Null_Ptr_t;
       Size         : in C.size_t) return C.int;
    pragma Import (C, Generate_Name, "AG_ObjectGenName");

    -- proc_map : AG_ObjectGenNamePfx
    function Generate_Name_Prefixed
      (Object : in Object_Not_Null_Access_t;
       Prefix : in C_String.String_Not_Null_Ptr_t;
       Buffer : in C_String.Char_Array_Not_Null_Ptr_t;
       Size   : in C.size_t) return C.int;
    pragma Import (C, Generate_Name_Prefixed, "AG_ObjectGenNamePfx");

    -- FIXME : AG_ObjectSetDebugFn

    -- proc_map : AG_RegisterClass
    procedure Register_Class
      (Object_Class : Class_Not_Null_Access_t);
    pragma Import (C, Register_Class, "AG_RegisterClass");

    -- proc_map : AG_UnregisterClass
    procedure Unregister_Class
      (Object_Class : Class_Not_Null_Access_t);
    pragma Import (C, Unregister_Class, "AG_UnregisterClass");

    -- proc_map : AG_RegisterNamespace
    procedure Register_Namespace
      (Name   : in C_String.String_Not_Null_Ptr_t;
       Prefix : in C_String.String_Not_Null_Ptr_t;
       URL    : in C_String.String_Not_Null_Ptr_t);
    pragma Import (C, Register_Namespace, "AG_RegisterNamespace");

    -- proc_map : AG_UnregisterNamespace
    procedure Unregister_Namespace
      (Name   : in C_String.String_Not_Null_Ptr_t);
    pragma Import (C, Unregister_Namespace, "AG_UnregisterNamespace");

    -- proc_map : AG_LookupClass
    function Lookup_Class
      (Spec : in C_String.String_Not_Null_Ptr_t) return Class_Access_t;
    pragma Import (C, Lookup_Class, "AG_LookupClass");

    -- proc_map : AG_LoadClass
    function Load_Class
      (Spec : in C_String.String_Not_Null_Ptr_t) return Class_Access_t;
    pragma Import (C, Load_Class, "AG_LoadClass");

    -- proc_map : AG_RegisterModuleDirectory
    procedure Register_Module_Directory
      (Path : in C_String.String_Not_Null_Ptr_t);
    pragma Import (C, Register_Module_Directory, "AG_RegisterModuleDirectory");

    -- proc_map : AG_UnregisterModuleDirectory
    procedure Unregister_Module_Directory
      (Path : in C_String.String_Not_Null_Ptr_t);
    pragma Import (C, Unregister_Module_Directory, "AG_UnregisterModuleDirectory");

    -- proc_map : AG_OfClass
    function Is_Of_Class
      (Object  : in Object_Not_Null_Access_t;
       Pattern : in C_String.String_Not_Null_Ptr_t) return C.int;
    pragma Import (C, Is_Of_Class, "AG_OfClass");

    -- proc_map : AG_ObjectSuperclass
    function Superclass
      (Object  : in Object_Not_Null_Access_t) return Object_Access_t;
    pragma Import (C, Superclass, "AG_ObjectSuperclass");

    -- proc_map : AG_ObjectInUse
    function In_Use
      (Object  : in Object_Not_Null_Access_t) return C.int;
    pragma Import (C, In_Use, "AG_ObjectInUse");

    -- proc_map : AG_ObjectAddDep
    function Add_Dependency
      (Object     : in Object_Not_Null_Access_t;
       Dependency : in Object_Not_Null_Access_t;
       Persistent : in C.int) return Dependency_Access_t;
    pragma Import (C, Add_Dependency, "AG_ObjectAddDep");

    -- proc_map : AG_ObjectDelDep
    procedure Delete_Dependency
      (Object     : in Object_Not_Null_Access_t;
       Dependency : in Object_Not_Null_Access_t);
    pragma Import (C, Delete_Dependency, "AG_ObjectDelDep");

    -- proc_map : AG_ObjectEncodeName
    function Encode_Name
      (Object     : in Object_Not_Null_Access_t;
       Dependency : in Object_Not_Null_Access_t) return Interfaces.Unsigned_32;
    pragma Import (C, Encode_Name, "AG_ObjectEncodeName");

    -- proc_map : AG_ObjectFindDep
    function Find_Dependency
      (Object     : in Object_Not_Null_Access_t;
       Index      : in Interfaces.Unsigned_32;
       Pointer    : access Object_Not_Null_Access_t) return C.int;
    pragma Import (C, Find_Dependency, "AG_ObjectFindDep");

    -- proc_map : AG_ObjectDestroy
    procedure Destroy (Object : in Object_Not_Null_Access_t);
    pragma Import (C, Destroy, "AG_ObjectDestroy");

    -- proc_map : AG_ObjectFreeDataset
    procedure Free_Dataset (Object : in Object_Not_Null_Access_t);
    pragma Import (C, Free_Dataset, "AG_ObjectFreeDataset");

    -- proc_map : AG_ObjectFreeEvents
    procedure Free_Events (Object : in Object_Not_Null_Access_t);
    pragma Import (C, Free_Events, "AG_ObjectFreeEvents");

    -- proc_map : AG_ObjectFreeVariables
    procedure Free_Variables (Object : in Object_Not_Null_Access_t);
    pragma Import (C, Free_Variables, "AG_ObjectFreeVariables");

    -- proc_map : AG_ObjectFreeDeps
    procedure Free_Dependencies (Object : in Object_Not_Null_Access_t);
    pragma Import (C, Free_Dependencies, "AG_ObjectFreeDeps");

    -- proc_map : AG_ObjectFreeDummyDeps
    procedure Free_Dummy_Dependencies (Object : in Object_Not_Null_Access_t);
    pragma Import (C, Free_Dummy_Dependencies, "AG_ObjectFreeDummyDeps");

    -- proc_map : AG_ObjectFreeChildren
    procedure Free_Children (Object : in Object_Not_Null_Access_t);
    pragma Import (C, Free_Children, "AG_ObjectFreeChildren");

    -- proc_map : AG_ObjectLoad
    function Load (Object : in Object_Not_Null_Access_t) return C.int;
    pragma Import (C, Load, "AG_ObjectLoad");

    -- proc_map : AG_ObjectLoadFromFile
    function Load_From_File
      (Object : in Object_Not_Null_Access_t;
       File   : in C_String.String_Not_Null_Ptr_t) return C.int;
    pragma Import (C, Load_From_File, "AG_ObjectLoadFromFile");

    -- proc_map : AG_ObjectLoadData
    function Load_Data (Object : in Object_Not_Null_Access_t) return C.int;
    pragma Import (C, Load_Data, "AG_ObjectLoadData");

    -- proc_map : AG_ObjectLoadDataFromFile
    function Load_Data_From_File
      (Object : in Object_Not_Null_Access_t;
       File   : in C_String.String_Not_Null_Ptr_t) return C.int;
    pragma Import (C, Load_Data_From_File, "AG_ObjectLoadDataFromFile");

    -- proc_map : AG_ObjectLoadGeneric
    function Load_Generic (Object : in Object_Not_Null_Access_t) return C.int;
    pragma Import (C, Load_Generic, "AG_ObjectLoadGeneric");

    -- proc_map : AG_ObjectLoadGenericFromFile
    function Load_Generic_From_File
      (Object : in Object_Not_Null_Access_t;
       File   : in C_String.String_Not_Null_Ptr_t) return C.int;
    pragma Import (C, Load_Generic_From_File, "AG_ObjectLoadGenericFromFile");

    -- proc_map : AG_ObjectSave
    function Save (Object : in Object_Not_Null_Access_t) return C.int;
    pragma Import (C, Save, "AG_ObjectSave");

    -- proc_map : AG_ObjectSaveAll
    function Save_All (Object : in Object_Not_Null_Access_t) return C.int;
    pragma Import (C, Save_All, "AG_ObjectSaveAll");

    -- proc_map : AG_ObjectSaveToFile
    function Save_To_File
      (Object : in Object_Not_Null_Access_t;
       File   : in C_String.String_Not_Null_Ptr_t) return C.int;
    pragma Import (C, Save_To_File, "AG_ObjectSaveToFile");

    -- proc_map : AG_ObjectSerialize
    function Serialize
      (Object : in Object_Not_Null_Access_t;
       Source : in Data_Source.Data_Source_Not_Null_Access_t) return C.int;
    pragma Import (C, Serialize, "AG_ObjectSerialize");

    -- proc_map : AG_ObjectUnserialize
    function Unserialize
      (Object : in Object_Not_Null_Access_t;
       Source : in Data_Source.Data_Source_Not_Null_Access_t) return C.int;
    pragma Import (C, Unserialize, "AG_ObjectUnserialize");

    -- proc_map : AG_ObjectReadHeader
    function Read_Header
      (Object : in Object_Not_Null_Access_t;
       Header : in Object_Header_Access_t) return C.int;
    pragma Import (C, Read_Header, "AG_ObjectReadHeader");

    -- proc_map : AG_ObjectPageIn
    function Page_In (Object : in Object_Not_Null_Access_t) return C.int;
    pragma Import (C, Page_In, "AG_ObjectPageIn");

    -- proc_map : AG_ObjectPageOut
    function Page_Out (Object : in Object_Not_Null_Access_t) return C.int;
    pragma Import (C, Page_Out, "AG_ObjectPageOut");

  private

EOF
) || die_spec

./type-make AG_Object       Object_t        || exit 1
./type-make AG_ObjectHeader Object_Header_t || exit 1
./type-make AG_ObjectClass  Class_t         || exit 1
./type-make AG_ObjectDep    Dependency_t    || exit 1

(
cat <<EOF

  end Object;

  package Event is

    -- proc_map : AG_Event
    type    Event_t                 is limited private;
    type    Event_Access_t          is access all Event_t;
    subtype Event_Not_Null_Access_t is not null Event_Access_t;
    pragma Convention (C, Event_Access_t);

    -- FIXME : Format strings?

    -- proc_map : AG_EventInit
    procedure Init
      (Event : in Event_Not_Null_Access_t);
    pragma Import (C, Init, "AG_EventInit");

    -- proc_map : AG_EventPushPointer
    procedure Push_Pointer
      (Event : in Event_Not_Null_Access_t;
       Key   : in C_String.String_Not_Null_Ptr_t;
       Value : in System.Address);
    pragma Import (C, Push_Pointer, "agar_event_push_pointer");

    -- proc_map : AG_EventPushString
    procedure Push_String
      (Event : in Event_Not_Null_Access_t;
       Key   : in C_String.String_Not_Null_Ptr_t;
       Value : in C_String.String_Not_Null_Ptr_t);
    pragma Import (C, Push_String, "agar_event_push_string");

    -- proc_map : AG_EventPushInt
    procedure Push_Integer
      (Event : in Event_Not_Null_Access_t;
       Key   : in C_String.String_Not_Null_Ptr_t;
       Value : in C.int);
    pragma Import (C, Push_Integer, "agar_event_push_int");

    -- proc_map : AG_EventPushUint
    procedure Push_Unsigned_Integer
      (Event : in Event_Not_Null_Access_t;
       Key   : in C_String.String_Not_Null_Ptr_t;
       Value : in C.unsigned);
    pragma Import (C, Push_Unsigned_Integer, "agar_event_push_unsigned_int");

    -- proc_map : AG_EventPushLong
    procedure Push_Long
      (Event : in Event_Not_Null_Access_t;
       Key   : in C_String.String_Not_Null_Ptr_t;
       Value : in C.long);
    pragma Import (C, Push_Long, "agar_event_push_long");

    -- proc_map : AG_EventPushULong
    procedure Push_Unsigned_Long
      (Event : in Event_Not_Null_Access_t;
       Key   : in C_String.String_Not_Null_Ptr_t;
       Value : in C.unsigned_long);
    pragma Import (C, Push_Unsigned_Long, "agar_event_push_unsigned_long");

    -- proc_map : AG_EventPushFloat
    procedure Push_Float
      (Event : in Event_Not_Null_Access_t;
       Key   : in C_String.String_Not_Null_Ptr_t;
       Value : in C.C_float);
    pragma Import (C, Push_Float, "agar_event_push_float");

    -- proc_map : AG_EventPushDouble
    procedure Push_Double
      (Event : in Event_Not_Null_Access_t;
       Key   : in C_String.String_Not_Null_Ptr_t;
       Value : in C.double);
    pragma Import (C, Push_Double, "agar_event_push_double");

    -- proc_map : AG_EventPopArgument
    procedure Pop_Argument
      (Event : in Event_Not_Null_Access_t);
    pragma Import (C, Pop_Argument, "AG_EventPopArgument");

  private

EOF
) || die_spec

./type-make AG_Event Event_t || exit 1

(
cat <<EOF

  end Event;

  package Variable is

    type Variable_t                    is limited private;
    type Variable_Access_t             is access all Variable_t;
    subtype Variable_Not_Null_Access_t is not null Variable_Access_t;
    pragma Convention (C, Variable_Access_t);

    -- proc_map : AG_Defined
    function Defined
      (Object : in Thin.Object.Object_Not_Null_Access_t;
       Name   : in C_String.String_Not_Null_Ptr_t) return C.int;
    pragma Import (C, Defined, "AG_Defined");

    -- proc_map : AG_GetVariable
    function Get_Variable
      (Object : in Thin.Object.Object_Not_Null_Access_t;
       Name   : in C_String.String_Not_Null_Ptr_t;
       Data   : access System.Address) return Variable_Access_t;
    pragma Import (C, Get_Variable, "AG_GetVariable");

    -- proc_map : AG_GetVariableVFS
    function Get_Variable_VFS
      (Object : in Thin.Object.Object_Not_Null_Access_t;
       Name   : in C_String.String_Not_Null_Ptr_t) return Variable_Access_t;
    pragma Import (C, Get_Variable_VFS, "AG_GetVariableVFS");

    -- proc_map : AG_EvalVariable
    function Evaluate_Variable
      (Object   : in Thin.Object.Object_Not_Null_Access_t;
       Variable : in Variable_Access_t) return C.int;
    pragma Import (C, Evaluate_Variable, "AG_EvalVariable");

    -- proc_map : AG_CopyVariable
    procedure Copy_Variable
      (Destination : in Variable_Not_Null_Access_t;
       Source      : in Variable_Not_Null_Access_t);
    pragma Import (C, Copy_Variable, "AG_CopyVariable");

    -- FIXME : AG_Set

    -- proc_map : AG_Unset
    procedure Unset
      (Object : in Thin.Object.Object_Not_Null_Access_t;
       Name   : in C_String.String_Not_Null_Ptr_t);
    pragma Import (C, Unset, "AG_Unset");

EOF
) || die_spec

for size in 8 16 32 64
do
  (cat <<EOF
    type Callback_Unsigned_${size}_t is access function
      (Event : Thin.Event.Event_Not_Null_Access_t) return Interfaces.Unsigned_${size};
    pragma Convention (C, Callback_Unsigned_${size}_t);

    type Callback_Signed_${size}_t is access function
      (Event : Thin.Event.Event_Not_Null_Access_t) return Signed_${size};
    pragma Convention (C, Callback_Signed_${size}_t);

    -- proc_map : AG_GetUint${size}
    procedure Get_Unsigned_${size}
      (Object : in Thin.Object.Object_Not_Null_Access_t;
       Name   : in C_String.String_Not_Null_Ptr_t);
    pragma Import (C, Get_Unsigned_${size}, "AG_GetUint${size}");

    -- proc_map : AG_InitUint${size}
    procedure Init_Unsigned_${size}
      (Variable : in Variable_Not_Null_Access_t;
       Value    : in Interfaces.Unsigned_${size});
    pragma Import (C, Init_Unsigned_${size}, "AG_InitUint${size}");

    -- proc_map : AG_SetUint${size}
    function Set_Unsigned_${size}
      (Object : in Thin.Object.Object_Not_Null_Access_t;
       Name   : in C_String.String_Not_Null_Ptr_t;
       Value  : in Interfaces.Unsigned_${size}) return Variable_Not_Null_Access_t;
    pragma Import (C, Set_Unsigned_${size}, "AG_SetUint${size}");

    -- proc_map : AG_BindUint${size}
    function Bind_Unsigned_${size}
      (Object : in Thin.Object.Object_Not_Null_Access_t;
       Name   : in C_String.String_Not_Null_Ptr_t;
       Value  : access Interfaces.Unsigned_${size}) return Variable_Not_Null_Access_t;
    pragma Import (C, Bind_Unsigned_${size}, "AG_BindUint${size}");

    -- proc_map : AG_BindUint${size}Fn
    function Bind_Unsigned_${size}_Function
      (Object : in Thin.Object.Object_Not_Null_Access_t;
       Name   : in C_String.String_Not_Null_Ptr_t;
       Value  : Callback_Unsigned_${size}_t) return Variable_Not_Null_Access_t;
    pragma Import (C, Bind_Unsigned_${size}_Function, "AG_BindUint${size}Fn");

    -- proc_map : AG_GetSint${size}
    function Get_Signed_${size}
      (Object : in Thin.Object.Object_Not_Null_Access_t;
       Name   : in C_String.String_Not_Null_Ptr_t) return Variable_Not_Null_Access_t;
    pragma Import (C, Get_Signed_${size}, "AG_GetSint${size}");

    -- proc_map : AG_InitSint${size}
    procedure Init_Signed_${size}
      (Variable : in Variable_Not_Null_Access_t;
       Value    : in Signed_${size});
    pragma Import (C, Init_Signed_${size}, "AG_InitSint${size}");

    -- proc_map : AG_SetSint${size}
    function Set_Signed_${size}
      (Object : in Thin.Object.Object_Not_Null_Access_t;
       Name   : in C_String.String_Not_Null_Ptr_t;
       Value  : in Signed_${size}) return Variable_Not_Null_Access_t;
    pragma Import (C, Set_Signed_${size}, "AG_SetSint${size}");

    -- proc_map : AG_BindSint${size}
    function Bind_Signed_${size}
      (Object : in Thin.Object.Object_Not_Null_Access_t;
       Name   : in C_String.String_Not_Null_Ptr_t;
       Value  : access Signed_${size}) return Variable_Not_Null_Access_t;
    pragma Import (C, Bind_Signed_${size}, "AG_BindSint${size}");

    -- proc_map : AG_BindSint${size}Fn
    function Bind_Signed_${size}_Function
      (Object : in Thin.Object.Object_Not_Null_Access_t;
       Name   : in C_String.String_Not_Null_Ptr_t;
       Value  : Callback_Signed_${size}_t) return Variable_Not_Null_Access_t;
    pragma Import (C, Bind_Signed_${size}_Function, "AG_BindSint${size}Fn");

EOF
) || die_spec
done

for size in Float Double
do
  c_type=`echo ${size} | tr -d '_'` || die_spec

  (cat <<EOF
    type Callback_${size}_t is access function
      (Event : Thin.Event.Event_Not_Null_Access_t) return ${size}_t;
    pragma Convention (C, Callback_${size}_t);

    -- proc_map : AG_Get${c_type}
    function Get_${size}
      (Object : in Thin.Object.Object_Not_Null_Access_t;
       Name   : in C_String.String_Not_Null_Ptr_t) return Variable_Not_Null_Access_t;
    pragma Import (C, Get_${size}, "AG_Get${c_type}");

    -- proc_map : AG_Init${c_type}
    procedure Init_${size}
      (Variable : in Variable_Not_Null_Access_t;
       Value    : in ${size}_t);
    pragma Import (C, Init_${size}, "AG_Init${c_type}");

    -- proc_map : AG_Set${c_type}
    function Set_${size}
      (Object : in Thin.Object.Object_Not_Null_Access_t;
       Name   : in C_String.String_Not_Null_Ptr_t;
       Value  : in ${size}_t) return Variable_Not_Null_Access_t;
    pragma Import (C, Set_${size}, "AG_Set${c_type}");

    -- proc_map : AG_Bind${c_type}
    function Bind_${size}
      (Object : in Thin.Object.Object_Not_Null_Access_t;
       Name   : in C_String.String_Not_Null_Ptr_t;
       Value  : access ${size}_t) return Variable_Not_Null_Access_t;
    pragma Import (C, Bind_${size}, "AG_Bind${c_type}");

    -- proc_map : AG_BindSint${c_type}Fn
    function Bind_${size}_Function
      (Object : in Thin.Object.Object_Not_Null_Access_t;
       Name   : in C_String.String_Not_Null_Ptr_t;
       Value  : Callback_${size}_t) return Variable_Not_Null_Access_t;
    pragma Import (C, Bind_${size}_Function, "AG_BindSint${size}Fn");

EOF
) || die_spec
done

(
cat <<EOF
    type Callback_String_t is access function
      (Event : in Thin.Event.Event_Not_Null_Access_t;
       Data  : in C_String.Char_Array_Not_Null_Ptr_t;
       Size  : in C.size_t) return C.size_t;
    pragma Convention (C, Callback_String_t);

    -- proc_map : AG_GetString
    function Get_String
      (Object : in Thin.Object.Object_Not_Null_Access_t;
       Name   : in C_String.String_Not_Null_Ptr_t;
       Buffer : in C_String.Char_Array_Not_Null_Ptr_t;
       Size   : in C.size_t) return C.size_t;
    pragma Import (C, Get_String, "AG_GetString");

    -- proc_map : AG_GetStringDup
    function Get_String_Duplicate
      (Object : in Thin.Object.Object_Not_Null_Access_t;
       Name   : in C_String.String_Not_Null_Ptr_t) return C_String.String_Ptr_t;
    pragma Import (C, Get_String_Duplicate, "AG_GetStringDup");

    -- proc_map : AG_InitString
    procedure Init_String
      (Variable : in Variable_Not_Null_Access_t;
       Data     : in C_String.String_Not_Null_Ptr_t);
    pragma Import (C, Init_String, "AG_InitString");

    -- proc_map : AG_InitStringNODUP
    procedure Init_String_Not_Duplicated
      (Variable : in Variable_Not_Null_Access_t;
       Data     : in C_String.String_Not_Null_Ptr_t);
    pragma Import (C, Init_String_Not_Duplicated, "AG_InitStringNODUP");

    -- proc_map : AG_InitStringFixed
    procedure Init_String_Fixed
      (Variable : in Variable_Not_Null_Access_t;
       Data     : in C_String.Char_Array_Not_Null_Ptr_t;
       Size     : in C.size_t);
    pragma Import (C, Init_String_Fixed, "AG_InitStringFixed");

    -- proc_map : AG_SetString
    function Set_String
      (Variable : in Variable_Not_Null_Access_t;
       Name     : in C_String.String_Not_Null_Ptr_t;
       Data     : in C_String.String_Not_Null_Ptr_t) return Variable_Access_t;
    pragma Import (C, Set_String, "AG_SetString");

    -- proc_map : AG_SetStringNODUP
    function Set_String_Not_Duplicated
      (Variable : in Variable_Not_Null_Access_t;
       Name     : in C_String.String_Not_Null_Ptr_t;
       Data     : in C_String.String_Not_Null_Ptr_t) return Variable_Access_t;
    pragma Import (C, Set_String_Not_Duplicated, "AG_SetStringNODUP");

    -- proc_map : AG_SetStringFixed
    function Set_String_Fixed
      (Variable : in Variable_Not_Null_Access_t;
       Name     : in C_String.String_Not_Null_Ptr_t;
       Data     : in C_String.Char_Array_Not_Null_Ptr_t;
       Size     : in C.size_t) return Variable_Access_t;
    pragma Import (C, Set_String_Fixed, "AG_SetStringFixed");

    -- proc_map : AG_BindString
    function Bind_String
      (Variable : in Variable_Not_Null_Access_t;
       Name     : in C_String.String_Not_Null_Ptr_t;
       Data     : in C_String.Char_Array_Not_Null_Ptr_t;
       Size     : in C.size_t) return Variable_Access_t;
    pragma Import (C, Bind_String, "AG_BindString");

    -- proc_map : AG_BindStringFn
    function Bind_String_Function
      (Variable : in Variable_Not_Null_Access_t;
       Name     : in C_String.String_Not_Null_Ptr_t;
       Callback : in Callback_String_t) return Variable_Access_t;
    pragma Import (C, Bind_String_Function, "AG_BindStringFn");

    type Callback_Pointer_t is access function
      (Event : in Thin.Event.Event_Not_Null_Access_t) return System.Address;
    pragma Convention (C, Callback_Pointer_t);

    -- proc_map : AG_GetPointer
    function Get_Pointer
      (Object : in Thin.Object.Object_Not_Null_Access_t;
       Name   : in C_String.String_Not_Null_Ptr_t) return System.Address;
    pragma Import (C, Get_Pointer, "AG_GetPointer");

    -- proc_map : AG_InitPointer
    procedure Init_Pointer
      (Variable : in Variable_Not_Null_Access_t;
       Data     : in System.Address);
    pragma Import (C, Init_Pointer, "AG_InitPointer");

    -- proc_map : AG_SetPointer
    function Set_Pointer
      (Variable : in Variable_Not_Null_Access_t;
       Name     : in C_String.String_Not_Null_Ptr_t;
       Data     : in System.Address) return Variable_Access_t;
    pragma Import (C, Set_Pointer, "AG_SetPointer");

    -- proc_map : AG_BindPointer
    function Bind_Pointer
      (Variable : in Variable_Not_Null_Access_t;
       Name     : in C_String.String_Not_Null_Ptr_t;
       Data     : access System.Address) return Variable_Access_t;
    pragma Import (C, Bind_Pointer, "AG_BindPointer");

    -- proc_map : AG_BindPointerFn
    function Bind_Pointer_Function
      (Variable : in Variable_Not_Null_Access_t;
       Name     : in C_String.String_Not_Null_Ptr_t;
       Callback : in Callback_Pointer_t) return Variable_Access_t;
    pragma Import (C, Bind_Pointer_Function, "AG_BindPointerFn");

  private
EOF
) || die_spec

./type-make AG_Variable Variable_t || exit 1

(
cat <<EOF
  end Variable;

end Agar.Core.Thin;
EOF
) || die_spec

