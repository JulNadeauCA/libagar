#!/bin/sh
#
# Do not edit!
# This file was generated from configure.in by BSDbuild 2.1.
#
# To regenerate this file, get the latest BSDbuild release from
# http://hypertriton.com/bsdbuild/, and use the command:
#
#     $ cat configure.in | mkconfigure > configure
#
# Copyright (c) 2001-2007 Hypertriton, Inc. <http://hypertriton.com/>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
# USE OF THIS SOFTWARE EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

optarg=
for arg
do
	case "$arg" in
	-*=*)
	    optarg=`echo "$arg" | sed 's/[-_a-zA-Z0-9]*=//'`
	    ;;
	*)
	    optarg=
	    ;;
	esac

	case "$arg" in
	--prefix=*)
	    prefix=$optarg
	    ;;
	--sysconfdir=*)
	    sysconfdir=$optarg
	    ;;
	--sharedir=*)
	    sharedir=$optarg
	    ;;
	--localedir=*)
	    localedir=$optarg
	    ;;
	--enable-*)
	    option=`echo $arg | sed -e 's/--enable-//' -e 's/=.*//'`
	    option=`echo $option | sed 's/-/_/g'`
	    case "$arg" in
	        *=*)
	            eval "enable_${option}='$optarg'"
		    ;;
		*)
	            eval "enable_${option}=yes"
		    ;;
	    esac
	    ;;
	--disable-*)
	    option=`echo $arg | sed -e 's/--disable-//'`;
	    option=`echo $option | sed 's/-/_/g'`
	    eval "enable_${option}=no"
	    ;;
	--with-*)
	    option=`echo $arg | sed -e 's/--with-//' -e 's/=.*//'`
	    option=`echo $option | sed 's/-/_/g'`
	    case "$arg" in
	        *=*)
	            eval "with_${option}='$optarg'"
		    ;;
		*)
	            eval "with_${option}=yes"
		    ;;
	    esac
	    ;;
	--without-*)
	    option=`echo $arg | sed -e 's/--without-//'`;
	    option=`echo $option | sed 's/-/_/g'`
	    eval "with_${option}=no"
	    ;;
	--help)
	    help=yes
	    ;;
	--srcdir=*)
	    srcdir=$optarg
	    ;;
	*)
	    echo "invalid argument: $arg"
	    echo "try ./configure --help"
	    exit 1
	    ;;
	esac
done

if [ "${prefix}" != "" ]; then
    PREFIX="$prefix"
else
    PREFIX="/usr/local"
fi

if [ "${srcdir}" != "" ]; then
	echo "concurrent build (source in ${srcdir})"
	SRC=${srcdir}
	perl ${SRC}/mk/mkconcurrent.pl ${SRC}
	if [ $? != 0 ]; then
		exit 1;
	fi
else
	SRC=`pwd`
fi
if [ "${help}" = "yes" ]; then
echo "Usage: ./configure [args]"
echo "    --prefix                       Installation prefix [/usr/local]"
echo "    --sysconfdir                   System-wide configuration prefix [/etc]"
echo "    --sharedir                     Share prefix [$PREFIX/share]"
echo "    --localedir                    Locale prefix [$PREFIX/share/locale]"
echo "    --srcdir                       Source tree for concurrent build [.]"
echo "    --help                         Display this message"
echo "    --enable-nls                   Native Language Support [no]"
echo "    --with-gettext                 Use gettext tools (msgmerge, ...) [check]"
echo "    --with-manpages                Manual pages (-mdoc) [yes]"
echo "    --with-docs                    Printable docs (-me/tbl/eqn/pic/refer) [no]"
echo "    --enable-debug                 Include debugging code [no]"
echo "    --with-gl                      OpenGL rendering support [default: check]"
echo "    --with-jpeg                    JPEG screenshot support [default: no]"
echo "    --with-freetype                GUI: Enable FreeType support [default: check]"
echo "    --with-ode                     SG: ODE physics interface [default: check]"
echo "    --with-cg                      SG: CG shader support [default: check]"
echo "    --with-sse                     SSE/SSE2/SSE3 optimizations [default: check]"
echo "    --with-sse-inline              Inline SSE operations [default: no]"
echo "    --with-sse2-inline             Inline SSE2 operations [default: no]"
echo "    --with-sse3-inline             Inline SSE3 operations [default: no]"
echo "    --with-altivec                 AltiVec optimizations [default: check]"
echo "    --with-altivec-inline          Inline AltiVec operations [default: no]"
echo "    --enable-threads               Thread safety [default: no]"
echo "    --enable-utf8                  Unicode text/input support [default: yes]"
echo "    --enable-8bpp                  Support for 8 bpp display [default: yes]"
echo "    --enable-16bpp                 Support for 16 bpp display [default: yes]"
echo "    --enable-24bpp                 Support for 24 bpp display [default: yes]"
echo "    --enable-32bpp                 Support for 32 bpp display [default: yes]"
echo "    --enable-warnings              Suggested compiler warnings [default: no]"
echo "    --enable-network               Build network client library [default: check]"
echo "    --enable-server                Build network server library [default: no]"
exit 1
fi

MACHINE=`uname -m 2>/dev/null` || MACHINE=unknown
OSRELEASE=`uname -r 2>/dev/null` || OSRELEASE=unknown
SYSTEM=`uname -s 2>/dev/null` || SYSTEM=unknown
HOST="$SYSTEM-$OSRELEASE-$MACHINE"
echo "Host: $HOST"

echo "# File generated by configure script (BSDbuild 2.1)." > Makefile.config
echo "Machine: $MACHINE" > config.log
echo "Release: $OSRELEASE" >> config.log
echo "System: $SYSTEM" >> config.log
for arg
do
	echo "Argument: $arg" >> config.log
done
mkdir config 1>/dev/null 2>&1

HAVE_MANDOC="no"
NROFF=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/nroff" ]; then
		NROFF="${path}/nroff"
	fi
done
if [ "${NROFF}" != "" ]; then
	echo | ${NROFF} -Tmandoc >/dev/null
	if [ $? == 0 ]; then
		HAVE_MANDOC="yes"
	fi
fi
if [ "${HAVE_MANDOC}" = "no" ]; then
	if [ "${with_manpages}" = "yes" ]; then
		echo "*"
		echo "* --with-manpages requested, but nroff/mandoc not found."
		echo "*"
		exit 1
	fi
	echo "HAVE_MANDOC=no" >> Makefile.config
	echo "NOMAN=yes" >> Makefile.config
	echo "NOMANLINKS=yes" >> Makefile.config
else
	echo "HAVE_MANDOC=yes" >> Makefile.config
	if [ "${with_manpages}" = "no" ]; then
		echo "NOMAN=yes" >> Makefile.config
		echo "NOMANLINKS=yes" >> Makefile.config
	fi
fi

if [ "${with_docs}" = "no" ]; then
	echo "NODOC=yes" >> Makefile.config
fi
if [ "${enable_debug}" = "yes" ]; then
	echo "LDFLAGS+=-g" >> Makefile.config
	echo "#ifndef DEBUG" > config/debug.h
	echo "#define DEBUG 1" >> config/debug.h
	echo "#endif /* DEBUG */" >> config/debug.h
else
	echo "#undef DEBUG" > config/debug.h
fi

if [ "${enable_nls}" = "yes" ]; then
	ENABLE_NLS="yes"
	echo "#ifndef ENABLE_NLS" > config/enable_nls.h
	echo "#define ENABLE_NLS 1" >> config/enable_nls.h
	echo "#endif /* ENABLE_NLS */" >> config/enable_nls.h
	msgfmt=""
	for path in `echo $PATH | sed 's/:/ /g'`; do
		if [ -x "${path}/msgfmt" ]; then
			msgfmt=${path}/msgfmt
		fi
	done
	if [ "${msgfmt}" != "" ]; then
		HAVE_GETTEXT="yes"
	else
		HAVE_GETTEXT="no"
	fi
else
	ENABLE_NLS="no"
	HAVE_GETTEXT="no"
	echo "#undef ENABLE_NLS" > config/enable_nls.h
fi
echo "ENABLE_NLS=${ENABLE_NLS}" >> Makefile.config
echo "HAVE_GETTEXT=${HAVE_GETTEXT}" >> Makefile.config

echo "PREFIX?=${PREFIX}" >> Makefile.config
echo "#ifndef PREFIX" > config/prefix.h
echo "#define PREFIX \"${PREFIX}\"" >> config/prefix.h
echo "#endif /* PREFIX */" >> config/prefix.h

if [ "${sharedir}" != "" ]; then
	echo "SHAREDIR=${sharedir}" >> Makefile.config
	echo "#ifndef SHAREDIR" > config/sharedir.h
	echo "#define SHAREDIR \"${sharedir}\"" >> config/sharedir.h
	echo "#endif /* SHAREDIR */" >> config/sharedir.h
	SHAREDIR="${sharedir}"
else
	echo "SHAREDIR=\${PREFIX}/share" >> Makefile.config
	echo "#ifndef SHAREDIR" > config/sharedir.h
	echo "#define SHAREDIR \"${SHAREDIR}\"" >> config/sharedir.h
	echo "#endif /* SHAREDIR */" >> config/sharedir.h
	SHAREDIR="${PREFIX}/share"
fi

if [ "${localedir}" != "" ]; then
	LOCALEDIR="${localedir}"
	echo "LOCALEDIR=${LOCALEDIR}" >> Makefile.config
	echo "#ifndef LOCALEDIR" > config/localedir.h
	echo "#define LOCALEDIR \"${LOCALEDIR}\"" >> config/localedir.h
	echo "#endif /* LOCALEDIR */" >> config/localedir.h
else
	LOCALEDIR="${SHAREDIR}/locale"
	echo "LOCALEDIR=\${SHAREDIR}/locale" >> Makefile.config
	echo "#ifndef LOCALEDIR" > config/localedir.h
	echo "#define LOCALEDIR \"${LOCALEDIR}\"" >> config/localedir.h
	echo "#endif /* LOCALEDIR */" >> config/localedir.h
fi

if [ "${sysconfdir}" != "" ]; then
	SYSCONFDIR="${sysconfdir}"
	echo "SYSCONFDIR=${sysconfdir}" >> Makefile.config
	echo "#ifndef SYSCONFDIR" > config/sysconfdir.h
	echo "#define SYSCONFDIR \"${SYSCONFDIR}\"" >> config/sysconfdir.h
	echo "#endif /* SYSCONFDIR */" >> config/sysconfdir.h
else
	SYSCONFDIR="${PREFIX}/etc"
	echo "SYSCONFDIR=\${PREFIX}/etc" >> Makefile.config
	echo "#ifndef SYSCONFDIR" > config/sysconfdir.h
	echo "#define SYSCONFDIR \"${SYSCONFDIR}\"" >> config/sysconfdir.h
	echo "#endif /* SYSCONFDIR */" >> config/sysconfdir.h
fi

VERSION="09292007"
echo "#ifndef VERSION" > config/version.h
echo "#define VERSION \"$VERSION\"" >> config/version.h
echo "#endif" >> config/version.h
RELEASE="The Birth Of An Era Obscured By Sulfur And Flames"
echo "#ifndef RELEASE" > config/release.h
echo "#define RELEASE \"$RELEASE\"" >> config/release.h
echo "#endif" >> config/release.h
SHAREDIR="\${PREFIX}/share/agar"
echo "SHAREDIR=$SHAREDIR" >> Makefile.config
SHAREDIR="$PREFIX/share/agar"
echo "#ifndef SHAREDIR" > config/sharedir.h
echo "#define SHAREDIR \"$SHAREDIR\"" >> config/sharedir.h
echo "#endif" >> config/sharedir.h
LOCALEDIR="\${PREFIX}/share/agar/locale"
echo "LOCALEDIR=$LOCALEDIR" >> Makefile.config
LOCALEDIR="$PREFIX/share/agar/locale"
echo "#ifndef LOCALEDIR" > config/localedir.h
echo "#define LOCALEDIR \"$LOCALEDIR\"" >> config/localedir.h
echo "#endif" >> config/localedir.h
TTFDIR="\${PREFIX}/share/agar/fonts"
echo "TTFDIR=$TTFDIR" >> Makefile.config
TTFDIR="$PREFIX/share/agar/fonts"
echo "#ifndef TTFDIR" > config/ttfdir.h
echo "#define TTFDIR \"$TTFDIR\"" >> config/ttfdir.h
echo "#endif" >> config/ttfdir.h
LIBDIR="\${PREFIX}/lib"
echo "LIBDIR=$LIBDIR" >> Makefile.config
LIBDIR="$PREFIX/lib"
echo "#ifndef LIBDIR" > config/libdir.h
echo "#define LIBDIR \"$LIBDIR\"" >> config/libdir.h
echo "#endif" >> config/libdir.h
INCLDIR="\${PREFIX}/include/agar"
echo "INCLDIR=$INCLDIR" >> Makefile.config
INCLDIR="$PREFIX/include/agar"
echo "#ifndef INCLDIR" > config/incldir.h
echo "#define INCLDIR \"$INCLDIR\"" >> config/incldir.h
echo "#endif" >> config/incldir.h
MANDIR="\${PREFIX}/share/man"
echo "MANDIR=$MANDIR" >> Makefile.config
PSDIR="\${PREFIX}/share/agar/doc"
echo "PSDIR=$PSDIR" >> Makefile.config
echo -n "checking for a usable C compiler..."
echo -n "checking for a usable C compiler..." >> config.log
if [ "$CC" = "" ]; then
	for i in `echo $PATH |sed 's/:/ /g'`; do
		if [ -x "${i}/cc" ]; then
			CC="${i}/cc"
		elif [ -x "${i}/gcc" ]; then
			CC="${i}/gcc"
		fi
	done
	if [ "$CC" = "" ]; then
		echo "Could not find a C compiler, try setting CC."
		echo "CC is unset and cc/gcc is not in PATH." >> config.log
		exit 1
	fi
fi

cat << 'EOT' > cc-test.c
int
main(int argc, char *argv[])
{
	return (0);
}
EOT

$CC -o cc-test cc-test.c 2>>config.log
if [ $? != 0 ]; then
    echo "no"
	echo "The test C program failed to compile."
	rm -f cc-test cc-test.c
    exit 1
fi
echo "yes"
rm -f cc-test cc-test.c
TEST_CFLAGS=""
echo -n "checking for compiler warnings..."
echo -n "checking for compiler warnings..." >> config.log
cat << EOT > conftest.c
int main(int argc, char *argv[]) { return (0); }

EOT
echo "$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o conftest conftest.c " >>config.log
$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o conftest conftest.c  2>>config.log
if [ $? == 0 ]; then
echo "yes"
echo "yes" >> config.log
compile="ok"
HAVE_CC_WARNINGS="yes"
echo "HAVE_CC_WARNINGS=$HAVE_CC_WARNINGS" >> Makefile.config
echo "#ifndef HAVE_CC_WARNINGS" > config/have_cc_warnings.h
echo "#define HAVE_CC_WARNINGS \"$HAVE_CC_WARNINGS\"" >> config/have_cc_warnings.h
echo "#endif" >> config/have_cc_warnings.h
else
echo "no"
echo "no" >> config.log
compile="failed"
HAVE_CC_WARNINGS="no"
echo "HAVE_CC_WARNINGS=$HAVE_CC_WARNINGS" >> Makefile.config
echo "#undef HAVE_CC_WARNINGS" > config/have_cc_warnings.h
fi;
rm -f conftest conftest.c
if [ "${HAVE_CC_WARNINGS}" = "yes" ]; then
TEST_CFLAGS="-Wall -Werror"
fi;
echo -n "checking for floating point types..."
echo -n "checking for floating point types..." >> config.log
cat << EOT > conftest.c
int
main(int argc, char *argv[])
{
	float f = 1.5;
	double d = 2.5;

	f = 0;
	d = 0;
	return (0);
}

EOT
echo "$CC $CFLAGS $TEST_CFLAGS  -o conftest conftest.c " >>config.log
$CC $CFLAGS $TEST_CFLAGS  -o conftest conftest.c  2>>config.log
if [ $? == 0 ]; then
echo "yes"
echo "yes" >> config.log
compile="ok"
HAVE_IEEE754="yes"
echo "HAVE_IEEE754=$HAVE_IEEE754" >> Makefile.config
echo "#ifndef HAVE_IEEE754" > config/have_ieee754.h
echo "#define HAVE_IEEE754 \"$HAVE_IEEE754\"" >> config/have_ieee754.h
echo "#endif" >> config/have_ieee754.h
else
echo "no"
echo "no" >> config.log
compile="failed"
HAVE_IEEE754="no"
echo "HAVE_IEEE754=$HAVE_IEEE754" >> Makefile.config
echo "#undef HAVE_IEEE754" > config/have_ieee754.h
fi;
rm -f conftest conftest.c
echo -n "checking __bounded__ attribute..."
echo -n "checking __bounded__ attribute..." >> config.log
cat << EOT > conftest.c
void foo(char *, int) __attribute__ ((__bounded__(__string__,1,2)));
void foo(char *a, int c) { }
int main(int argc, char *argv[])
{
	char buf[32];
	foo(buf, sizeof(buf));
	return (0);
}

EOT
echo "$CC $CFLAGS $TEST_CFLAGS  -o conftest conftest.c " >>config.log
$CC $CFLAGS $TEST_CFLAGS  -o conftest conftest.c  2>>config.log
if [ $? == 0 ]; then
echo "yes"
echo "yes" >> config.log
compile="ok"
HAVE_BOUNDED_ATTRIBUTE="yes"
echo "HAVE_BOUNDED_ATTRIBUTE=$HAVE_BOUNDED_ATTRIBUTE" >> Makefile.config
echo "#ifndef HAVE_BOUNDED_ATTRIBUTE" > config/have_bounded_attribute.h
echo "#define HAVE_BOUNDED_ATTRIBUTE \"$HAVE_BOUNDED_ATTRIBUTE\"" >> config/have_bounded_attribute.h
echo "#endif" >> config/have_bounded_attribute.h
else
echo "no"
echo "no" >> config.log
compile="failed"
HAVE_BOUNDED_ATTRIBUTE="no"
echo "HAVE_BOUNDED_ATTRIBUTE=$HAVE_BOUNDED_ATTRIBUTE" >> Makefile.config
echo "#undef HAVE_BOUNDED_ATTRIBUTE" > config/have_bounded_attribute.h
fi;
rm -f conftest conftest.c
echo -n "checking __format__ attribute..."
echo -n "checking __format__ attribute..." >> config.log
cat << EOT > conftest.c
#include <stdarg.h>
void foo1(char *, ...)
     __attribute__((__format__ (printf, 1, 2)));
void foo2(char *, ...)
     __attribute__((__format__ (__printf__, 1, 2)))
     __attribute__((__nonnull__ (1)));
void foo1(char *a, ...) {}
void foo2(char *a, ...) {}
int main(int argc, char *argv[])
{
	foo1("foo %s", "bar");
	foo2("foo %d", 1);
	return (0);
}

EOT
echo "$CC $CFLAGS $TEST_CFLAGS  -o conftest conftest.c " >>config.log
$CC $CFLAGS $TEST_CFLAGS  -o conftest conftest.c  2>>config.log
if [ $? == 0 ]; then
echo "yes"
echo "yes" >> config.log
compile="ok"
HAVE_FORMAT_ATTRIBUTE="yes"
echo "HAVE_FORMAT_ATTRIBUTE=$HAVE_FORMAT_ATTRIBUTE" >> Makefile.config
echo "#ifndef HAVE_FORMAT_ATTRIBUTE" > config/have_format_attribute.h
echo "#define HAVE_FORMAT_ATTRIBUTE \"$HAVE_FORMAT_ATTRIBUTE\"" >> config/have_format_attribute.h
echo "#endif" >> config/have_format_attribute.h
else
echo "no"
echo "no" >> config.log
compile="failed"
HAVE_FORMAT_ATTRIBUTE="no"
echo "HAVE_FORMAT_ATTRIBUTE=$HAVE_FORMAT_ATTRIBUTE" >> Makefile.config
echo "#undef HAVE_FORMAT_ATTRIBUTE" > config/have_format_attribute.h
fi;
rm -f conftest conftest.c
echo -n "checking __nonnull__ attribute..."
echo -n "checking __nonnull__ attribute..." >> config.log
cat << EOT > conftest.c
void foo(char *) __attribute__((__nonnull__ (1)));
void foo(char *a) { }
int main(int argc, char *argv[])
{
	foo("foo");
	return (0);
}

EOT
compile="ok"
echo "$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o conftest conftest.c" >>config.log
$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_NONNULL_ATTRIBUTE="yes"
echo "HAVE_NONNULL_ATTRIBUTE=$HAVE_NONNULL_ATTRIBUTE" >> Makefile.config
echo "#ifndef HAVE_NONNULL_ATTRIBUTE" > config/have_nonnull_attribute.h
echo "#define HAVE_NONNULL_ATTRIBUTE \"$HAVE_NONNULL_ATTRIBUTE\"" >> config/have_nonnull_attribute.h
echo "#endif" >> config/have_nonnull_attribute.h
else
echo "no"
echo "no" >> config.log
HAVE_NONNULL_ATTRIBUTE="no"
echo "HAVE_NONNULL_ATTRIBUTE=$HAVE_NONNULL_ATTRIBUTE" >> Makefile.config
echo "#undef HAVE_NONNULL_ATTRIBUTE" > config/have_nonnull_attribute.h
fi;
echo -n "checking __aligned__ attribute..."
echo -n "checking __aligned__ attribute..." >> config.log
cat << EOT > conftest.c
int main(int argc, char *argv[])
{
	struct s1 { int x,y,z; } __attribute__ ((aligned(16)));
	return (0);
}

EOT
compile="ok"
echo "$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o conftest conftest.c" >>config.log
$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_ALIGNED_ATTRIBUTE="yes"
echo "HAVE_ALIGNED_ATTRIBUTE=$HAVE_ALIGNED_ATTRIBUTE" >> Makefile.config
echo "#ifndef HAVE_ALIGNED_ATTRIBUTE" > config/have_aligned_attribute.h
echo "#define HAVE_ALIGNED_ATTRIBUTE \"$HAVE_ALIGNED_ATTRIBUTE\"" >> config/have_aligned_attribute.h
echo "#endif" >> config/have_aligned_attribute.h
else
echo "no"
echo "no" >> config.log
HAVE_ALIGNED_ATTRIBUTE="no"
echo "HAVE_ALIGNED_ATTRIBUTE=$HAVE_ALIGNED_ATTRIBUTE" >> Makefile.config
echo "#undef HAVE_ALIGNED_ATTRIBUTE" > config/have_aligned_attribute.h
fi;
echo -n "checking __packed__ attribute..."
echo -n "checking __packed__ attribute..." >> config.log
cat << EOT > conftest.c
int main(int argc, char *argv[])
{
	struct s1 { char c; int x,y,z; } __attribute__ ((packed));
	return (0);
}

EOT
compile="ok"
echo "$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o conftest conftest.c" >>config.log
$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_PACKED_ATTRIBUTE="yes"
echo "HAVE_PACKED_ATTRIBUTE=$HAVE_PACKED_ATTRIBUTE" >> Makefile.config
echo "#ifndef HAVE_PACKED_ATTRIBUTE" > config/have_packed_attribute.h
echo "#define HAVE_PACKED_ATTRIBUTE \"$HAVE_PACKED_ATTRIBUTE\"" >> config/have_packed_attribute.h
echo "#endif" >> config/have_packed_attribute.h
else
echo "no"
echo "no" >> config.log
HAVE_PACKED_ATTRIBUTE="no"
echo "HAVE_PACKED_ATTRIBUTE=$HAVE_PACKED_ATTRIBUTE" >> Makefile.config
echo "#undef HAVE_PACKED_ATTRIBUTE" > config/have_packed_attribute.h
fi;
echo -n "checking for long double..."
echo -n "checking for long double..." >> config.log
cat << EOT > conftest.c
int
main(int argc, char *argv[])
{
	long double ld = 0.1;

	ld = 0;
	return (0);
}

EOT
compile="ok"
echo "$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c" >>config.log
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_LONG_DOUBLE="yes"
echo "#ifndef HAVE_LONG_DOUBLE" > config/have_long_double.h
echo "#define HAVE_LONG_DOUBLE \"$HAVE_LONG_DOUBLE\"" >> config/have_long_double.h
echo "#endif" >> config/have_long_double.h
else
echo "no"
echo "no" >> config.log
HAVE_LONG_DOUBLE="no"
echo "#undef HAVE_LONG_DOUBLE" > config/have_long_double.h
fi;
echo -n "checking for cygwin environment..."
echo -n "checking for cygwin environment..." >> config.log
cat << EOT > conftest.c
#include <sys/types.h>
#include <sys/stat.h>
#include <windows.h>

int
main(int argc, char *argv[]) {
	struct stat sb;
	DWORD rv;
	rv = GetFileAttributes("foo");
	stat("foo", &sb);
	return (0);
}

EOT
compile="ok"
echo "$CC $CFLAGS $TEST_CFLAGS -mcygwin -o conftest conftest.c" >>config.log
$CC $CFLAGS $TEST_CFLAGS -mcygwin -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_CYGWIN="yes"
echo "HAVE_CYGWIN=$HAVE_CYGWIN" >> Makefile.config
echo "#ifndef HAVE_CYGWIN" > config/have_cygwin.h
echo "#define HAVE_CYGWIN \"$HAVE_CYGWIN\"" >> config/have_cygwin.h
echo "#endif" >> config/have_cygwin.h
else
echo "no"
echo "no" >> config.log
HAVE_CYGWIN="no"
echo "HAVE_CYGWIN=$HAVE_CYGWIN" >> Makefile.config
echo "#undef HAVE_CYGWIN" > config/have_cygwin.h
fi;
echo -n "checking for mingw environment..."
echo -n "checking for mingw environment..." >> config.log
cat << EOT > conftest.c
#include <sys/types.h>
#include <sys/stat.h>
#include <windows.h>

int
main(int argc, char *argv[]) {
	struct stat sb;
	DWORD rv;
	rv = GetFileAttributes("foo");
	stat("foo", &sb);
	return (0);
}

EOT
compile="ok"
echo "$CC $CFLAGS $TEST_CFLAGS  -o conftest conftest.c" >>config.log
$CC $CFLAGS $TEST_CFLAGS  -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_MINGW="yes"
echo "HAVE_MINGW=$HAVE_MINGW" >> Makefile.config
echo "#ifndef HAVE_MINGW" > config/have_mingw.h
echo "#define HAVE_MINGW \"$HAVE_MINGW\"" >> config/have_mingw.h
echo "#endif" >> config/have_mingw.h
else
echo "no"
echo "no" >> config.log
HAVE_MINGW="no"
echo "HAVE_MINGW=$HAVE_MINGW" >> Makefile.config
echo "#undef HAVE_MINGW" > config/have_mingw.h
fi;
if [ "${compile}" = "ok" ]; then
	CFLAGS="$CFLAGS -mno-cygwin"
	echo "CFLAGS=$CFLAGS" >> Makefile.config
fi
echo -n "checking for <sys/types.h>..."
echo -n "checking for <sys/types.h>..." >> config.log
cat << EOT > conftest.c
#include <sys/types.h>
int main(int argc, char *argv[]) {
	size_t len = 1;
	ssize_t slen = 1;
	return (len>1?len:slen);
}

EOT
echo "$CC $CFLAGS $TEST_CFLAGS  -o conftest conftest.c " >>config.log
$CC $CFLAGS $TEST_CFLAGS  -o conftest conftest.c  2>>config.log
if [ $? == 0 ]; then
echo "yes"
echo "yes" >> config.log
compile="ok"
_MK_HAVE_SYS_TYPES_H="yes"
echo "_MK_HAVE_SYS_TYPES_H=$_MK_HAVE_SYS_TYPES_H" >> Makefile.config
echo "#ifndef _MK_HAVE_SYS_TYPES_H" > config/_mk_have_sys_types_h.h
echo "#define _MK_HAVE_SYS_TYPES_H \"$_MK_HAVE_SYS_TYPES_H\"" >> config/_mk_have_sys_types_h.h
echo "#endif" >> config/_mk_have_sys_types_h.h
else
echo "no"
echo "no" >> config.log
compile="failed"
_MK_HAVE_SYS_TYPES_H="no"
echo "_MK_HAVE_SYS_TYPES_H=$_MK_HAVE_SYS_TYPES_H" >> Makefile.config
echo "#undef _MK_HAVE_SYS_TYPES_H" > config/_mk_have_sys_types_h.h
fi;
rm -f conftest conftest.c
if [ "${_MK_HAVE_SYS_TYPES_H}" = "yes" ]; then
echo -n "checking for unsigned typedefs..."
echo -n "checking for unsigned typedefs..." >> config.log
cat << EOT > conftest.c
#include <sys/types.h>
int main(int argc, char *argv[]) {
	Uchar foo = 0;
	Uint bar = 0;
	Ulong baz = 0;
	foo = 1; bar = 2; baz = 3;
	return (0);
}

EOT
echo "$CC $CFLAGS $TEST_CFLAGS  -o conftest conftest.c " >>config.log
$CC $CFLAGS $TEST_CFLAGS  -o conftest conftest.c  2>>config.log
if [ $? == 0 ]; then
echo "yes"
echo "yes" >> config.log
compile="ok"
_MK_HAVE_UNSIGNED_TYPEDEFS="yes"
echo "_MK_HAVE_UNSIGNED_TYPEDEFS=$_MK_HAVE_UNSIGNED_TYPEDEFS" >> Makefile.config
echo "#ifndef _MK_HAVE_UNSIGNED_TYPEDEFS" > config/_mk_have_unsigned_typedefs.h
echo "#define _MK_HAVE_UNSIGNED_TYPEDEFS \"$_MK_HAVE_UNSIGNED_TYPEDEFS\"" >> config/_mk_have_unsigned_typedefs.h
echo "#endif" >> config/_mk_have_unsigned_typedefs.h
else
echo "no"
echo "no" >> config.log
compile="failed"
_MK_HAVE_UNSIGNED_TYPEDEFS="no"
echo "_MK_HAVE_UNSIGNED_TYPEDEFS=$_MK_HAVE_UNSIGNED_TYPEDEFS" >> Makefile.config
echo "#undef _MK_HAVE_UNSIGNED_TYPEDEFS" > config/_mk_have_unsigned_typedefs.h
fi;
rm -f conftest conftest.c
else
echo -n "checking for unsigned typedefs..."
echo -n "checking for unsigned typedefs..." >> config.log
cat << EOT > conftest.c
int main(int argc, char *argv[]) {
	Uchar foo = 0;
	Uint bar = 0;
	Ulong baz = 0;
	foo = 1; bar = 2; baz = 3;
	return (0);
}

EOT
echo "$CC $CFLAGS $TEST_CFLAGS  -o conftest conftest.c " >>config.log
$CC $CFLAGS $TEST_CFLAGS  -o conftest conftest.c  2>>config.log
if [ $? == 0 ]; then
echo "yes"
echo "yes" >> config.log
compile="ok"
_MK_HAVE_UNSIGNED_TYPEDEFS="yes"
echo "_MK_HAVE_UNSIGNED_TYPEDEFS=$_MK_HAVE_UNSIGNED_TYPEDEFS" >> Makefile.config
echo "#ifndef _MK_HAVE_UNSIGNED_TYPEDEFS" > config/_mk_have_unsigned_typedefs.h
echo "#define _MK_HAVE_UNSIGNED_TYPEDEFS \"$_MK_HAVE_UNSIGNED_TYPEDEFS\"" >> config/_mk_have_unsigned_typedefs.h
echo "#endif" >> config/_mk_have_unsigned_typedefs.h
else
echo "no"
echo "no" >> config.log
compile="failed"
_MK_HAVE_UNSIGNED_TYPEDEFS="no"
echo "_MK_HAVE_UNSIGNED_TYPEDEFS=$_MK_HAVE_UNSIGNED_TYPEDEFS" >> Makefile.config
echo "#undef _MK_HAVE_UNSIGNED_TYPEDEFS" > config/_mk_have_unsigned_typedefs.h
fi;
rm -f conftest conftest.c
fi;
echo -n "checking for a compatible <sys/queue.h>..."
echo -n "checking for a compatible <sys/queue.h>..." >> config.log
cat << EOT > conftest.c
#include <sys/queue.h>
#include <stdio.h>

struct foo { TAILQ_ENTRY(foo) foos; };
struct bar { CIRCLEQ_ENTRY(bar) bars; };
TAILQ_HEAD(fooqname,foo) fooq = TAILQ_HEAD_INITIALIZER(fooq);
CIRCLEQ_HEAD(,bar) barq = CIRCLEQ_HEAD_INITIALIZER(barq);

int main(int argc, char *argv[])
{
	struct foo foo1;
	struct bar bar1;
	struct foo *pfoo, *pfoo_next;
	struct bar *pbar;
	
	TAILQ_INIT(&fooq);
	TAILQ_INSERT_HEAD(&fooq, &foo1, foos);
	TAILQ_FOREACH(pfoo, &fooq, foos) { }
	TAILQ_FOREACH_REVERSE(pfoo, &fooq, fooqname, foos) { }
	for (pfoo = TAILQ_FIRST(&foo1);
	     pfoo != TAILQ_END(&foo1);
		 pfoo = pfoo_next) {
		pfoo_next = TAILQ_NEXT(pfoo,foos);
	}
	TAILQ_REMOVE(&fooq, &foo1, foos);

	CIRCLEQ_INIT(&barq);
	CIRCLEQ_INSERT_HEAD(&barq, &bar1, bars);
	CIRCLEQ_FOREACH(pbar, &barq, bars) { }
	CIRCLEQ_REMOVE(&barq, &bar1, bars);

	return (0);
}

EOT
echo "$CC $CFLAGS $TEST_CFLAGS  -o conftest conftest.c " >>config.log
$CC $CFLAGS $TEST_CFLAGS  -o conftest conftest.c  2>>config.log
if [ $? == 0 ]; then
echo "yes"
echo "yes" >> config.log
compile="ok"
_MK_HAVE_SYS_QUEUE_H="yes"
echo "_MK_HAVE_SYS_QUEUE_H=$_MK_HAVE_SYS_QUEUE_H" >> Makefile.config
echo "#ifndef _MK_HAVE_SYS_QUEUE_H" > config/_mk_have_sys_queue_h.h
echo "#define _MK_HAVE_SYS_QUEUE_H \"$_MK_HAVE_SYS_QUEUE_H\"" >> config/_mk_have_sys_queue_h.h
echo "#endif" >> config/_mk_have_sys_queue_h.h
else
echo "no"
echo "no" >> config.log
compile="failed"
_MK_HAVE_SYS_QUEUE_H="no"
echo "_MK_HAVE_SYS_QUEUE_H=$_MK_HAVE_SYS_QUEUE_H" >> Makefile.config
echo "#undef _MK_HAVE_SYS_QUEUE_H" > config/_mk_have_sys_queue_h.h
fi;
rm -f conftest conftest.c
echo -n "checking for BSD-style __progname..."
echo -n "checking for BSD-style __progname..." >> config.log
cat << EOT > conftest.c
#include <stdio.h>
int
main(int argc, char *argv[])
{
	extern char *__progname;
	printf("%s\n", __progname);
	return (0);
}

EOT
compile="ok"
echo "$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c" >>config.log
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_PROGNAME="yes"
echo "#ifndef HAVE_PROGNAME" > config/have_progname.h
echo "#define HAVE_PROGNAME \"$HAVE_PROGNAME\"" >> config/have_progname.h
echo "#endif" >> config/have_progname.h
else
echo "no"
echo "no" >> config.log
HAVE_PROGNAME="no"
echo "#undef HAVE_PROGNAME" > config/have_progname.h
fi;
echo -n "checking for free(NULL) is a no-op..."
echo -n "checking for free(NULL) is a no-op..." >> config.log
cat << EOT > conftest.c
#include <stdlib.h>
int main(int argc, char *argv[]) {
	free(NULL);
	return (0);
}

EOT
echo "$CC $CFLAGS $TEST_CFLAGS  -o conftest conftest.c " >>config.log
$CC $CFLAGS $TEST_CFLAGS  -o conftest conftest.c  2>>config.log
if [ $? != 0 ]; then
echo "no (compile failed)"
echo "no (compile failed)" >> config.log
compile="failed"
free_null_noop="no"
echo "free_null_noop=$free_null_noop" >> Makefile.config
echo "#undef free_null_noop" > config/free_null_noop.h
else
compile="ok"
./conftest >> config.log
if [ $? == 0 ]; then
echo "yes"
echo "yes" >> config.log
free_null_noop="yes"
echo "free_null_noop=$free_null_noop" >> Makefile.config
echo "#ifndef free_null_noop" > config/free_null_noop.h
echo "#define free_null_noop \"$free_null_noop\"" >> config/free_null_noop.h
echo "#endif" >> config/free_null_noop.h
else
echo "no (exec failed)"
echo "no (exec failed)" >> config.log
free_null_noop="no"
echo "free_null_noop=$free_null_noop" >> Makefile.config
echo "#undef free_null_noop" > config/free_null_noop.h
fi;
fi;
rm -f conftest conftest.c
if [ "${free_null_noop}" = "yes" ]; then
echo "#ifndef FREE_NULL_IS_A_NOOP" > config/free_null_is_a_noop.h
echo "#define FREE_NULL_IS_A_NOOP \"$FREE_NULL_IS_A_NOOP\"" >> config/free_null_is_a_noop.h
echo "#endif" >> config/free_null_is_a_noop.h
else
echo "#undef FREE_NULL_IS_A_NOOP" > config/free_null_is_a_noop.h
fi;
echo -n "checking for the C math library..."
echo -n "checking for the C math library..." >> config.log
MATH_LIBS="-lm"
MATH_CFLAGS=""
cat << EOT > conftest.c
#include <math.h>

int
main(int argc, char *argv[])
{
	float f = 1.0;
	double d = 1.0;

	d = fabs(d);
	f = fabsf(f);
	return (0);
}

EOT
echo "$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} ${MATH_CFLAGS} -o conftest conftest.c ${MATH_LIBS}" >>config.log
$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} ${MATH_CFLAGS} -o conftest conftest.c ${MATH_LIBS} 2>>config.log
if [ $? == 0 ]; then
echo "yes"
echo "yes" >> config.log
compile="ok"
HAVE_MATH="yes"
echo "HAVE_MATH=$HAVE_MATH" >> Makefile.config
echo "#ifndef HAVE_MATH" > config/have_math.h
echo "#define HAVE_MATH \"$HAVE_MATH\"" >> config/have_math.h
echo "#endif" >> config/have_math.h
else
echo "no"
echo "no" >> config.log
compile="failed"
HAVE_MATH="no"
echo "HAVE_MATH=$HAVE_MATH" >> Makefile.config
echo "#undef HAVE_MATH" > config/have_math.h
fi;
rm -f conftest conftest.c
if [ "${HAVE_MATH}" = "yes" ]; then
echo "MATH_CFLAGS=$MATH_CFLAGS" >> Makefile.config
echo "MATH_LIBS=$MATH_LIBS" >> Makefile.config
echo "#ifndef MATH_CFLAGS" > config/math_cflags.h
echo "#define MATH_CFLAGS \"$MATH_CFLAGS\"" >> config/math_cflags.h
echo "#endif" >> config/math_cflags.h
echo "#ifndef MATH_LIBS" > config/math_libs.h
echo "#define MATH_LIBS \"$MATH_LIBS\"" >> config/math_libs.h
echo "#endif" >> config/math_libs.h
else
echo "#undef MATH_LIBS" > config/math_libs.h
fi;
echo -n "checking for a gethostname() function..."
echo -n "checking for a gethostname() function..." >> config.log
cat << EOT > conftest.c
#include <sys/types.h>
#include <unistd.h>

int
main(int argc, char *argv[])
{
	char hostname[64];
	int rv;

	rv = gethostname(hostname, sizeof(hostname));
	return (0);
}

EOT
compile="ok"
echo "$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c" >>config.log
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_GETHOSTNAME="yes"
echo "#ifndef HAVE_GETHOSTNAME" > config/have_gethostname.h
echo "#define HAVE_GETHOSTNAME \"$HAVE_GETHOSTNAME\"" >> config/have_gethostname.h
echo "#endif" >> config/have_gethostname.h
else
echo "no"
echo "no" >> config.log
HAVE_GETHOSTNAME="no"
echo "#undef HAVE_GETHOSTNAME" > config/have_gethostname.h
fi;
echo -n "checking for a getpwuid() function..."
echo -n "checking for a getpwuid() function..." >> config.log
cat << EOT > conftest.c
#include <sys/types.h>
#include <pwd.h>

int
main(int argc, char *argv[])
{
	struct passwd *pwd;
	uid_t uid = 0;

	pwd = getpwuid(uid);
	return (0);
}

EOT
compile="ok"
echo "$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c" >>config.log
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_GETPWUID="yes"
echo "#ifndef HAVE_GETPWUID" > config/have_getpwuid.h
echo "#define HAVE_GETPWUID \"$HAVE_GETPWUID\"" >> config/have_getpwuid.h
echo "#endif" >> config/have_getpwuid.h
else
echo "no"
echo "no" >> config.log
HAVE_GETPWUID="no"
echo "#undef HAVE_GETPWUID" > config/have_getpwuid.h
fi;
echo -n "checking for a getuid() function..."
echo -n "checking for a getuid() function..." >> config.log
cat << EOT > conftest.c
#include <sys/types.h>
#include <unistd.h>

int
main(int argc, char *argv[])
{
	uid_t uid;

	uid = getuid();
	return (0);
}

EOT
compile="ok"
echo "$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c" >>config.log
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_GETUID="yes"
echo "#ifndef HAVE_GETUID" > config/have_getuid.h
echo "#define HAVE_GETUID \"$HAVE_GETUID\"" >> config/have_getuid.h
echo "#endif" >> config/have_getuid.h
else
echo "no"
echo "no" >> config.log
HAVE_GETUID="no"
echo "#undef HAVE_GETUID" > config/have_getuid.h
fi;
echo -n "checking for a getenv() function..."
echo -n "checking for a getenv() function..." >> config.log
cat << EOT > conftest.c
#include <stdlib.h>
int
main(int argc, char *argv[])
{
	(void)getenv("PATH");
	return (0);
}

EOT
compile="ok"
echo "$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c" >>config.log
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_GETENV="yes"
echo "#ifndef HAVE_GETENV" > config/have_getenv.h
echo "#define HAVE_GETENV \"$HAVE_GETENV\"" >> config/have_getenv.h
echo "#endif" >> config/have_getenv.h
else
echo "no"
echo "no" >> config.log
HAVE_GETENV="no"
echo "#undef HAVE_GETENV" > config/have_getenv.h
fi;
echo -n "checking for setenv() and unsetenv() functions..."
echo -n "checking for setenv() and unsetenv() functions..." >> config.log
cat << EOT > conftest.c
#include <stdlib.h>
int
main(int argc, char *argv[])
{
	(void)setenv("BSDBUILD_SETENV_TEST", "foo", 1);
	unsetenv("BSDBUILD_SETENV_TEST");

	return (0);
}

EOT
compile="ok"
echo "$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c" >>config.log
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_SETENV="yes"
echo "#ifndef HAVE_SETENV" > config/have_setenv.h
echo "#define HAVE_SETENV \"$HAVE_SETENV\"" >> config/have_setenv.h
echo "#endif" >> config/have_setenv.h
else
echo "no"
echo "no" >> config.log
HAVE_SETENV="no"
echo "#undef HAVE_SETENV" > config/have_setenv.h
fi;
echo -n "checking for a strsep() function..."
echo -n "checking for a strsep() function..." >> config.log
cat << EOT > conftest.c
#include <string.h>
int
main(int argc, char *argv[])
{
	(void)strsep(NULL, NULL);
	return (0);
}

EOT
compile="ok"
echo "$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c" >>config.log
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_STRSEP="yes"
echo "#ifndef HAVE_STRSEP" > config/have_strsep.h
echo "#define HAVE_STRSEP \"$HAVE_STRSEP\"" >> config/have_strsep.h
echo "#endif" >> config/have_strsep.h
else
echo "no"
echo "no" >> config.log
HAVE_STRSEP="no"
echo "#undef HAVE_STRSEP" > config/have_strsep.h
fi;
echo -n "checking for a strlcat() function..."
echo -n "checking for a strlcat() function..." >> config.log
cat << EOT > conftest.c
#include <string.h>
int
main(int argc, char *argv[])
{
	(void)strlcat(NULL, NULL, 0);
	return (0);
}

EOT
compile="ok"
echo "$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c" >>config.log
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_STRLCAT="yes"
echo "#ifndef HAVE_STRLCAT" > config/have_strlcat.h
echo "#define HAVE_STRLCAT \"$HAVE_STRLCAT\"" >> config/have_strlcat.h
echo "#endif" >> config/have_strlcat.h
else
echo "no"
echo "no" >> config.log
HAVE_STRLCAT="no"
echo "#undef HAVE_STRLCAT" > config/have_strlcat.h
fi;
echo -n "checking for a strlcpy() function..."
echo -n "checking for a strlcpy() function..." >> config.log
cat << EOT > conftest.c
#include <string.h>
int
main(int argc, char *argv[])
{
	(void)strlcpy(NULL, NULL, 0);
	return (0);
}

EOT
compile="ok"
echo "$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c" >>config.log
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_STRLCPY="yes"
echo "#ifndef HAVE_STRLCPY" > config/have_strlcpy.h
echo "#define HAVE_STRLCPY \"$HAVE_STRLCPY\"" >> config/have_strlcpy.h
echo "#endif" >> config/have_strlcpy.h
else
echo "no"
echo "no" >> config.log
HAVE_STRLCPY="no"
echo "#undef HAVE_STRLCPY" > config/have_strlcpy.h
fi;
echo -n "checking for an asprintf() function..."
echo -n "checking for an asprintf() function..." >> config.log
cat << EOT > conftest.c
#include <stdio.h>

int
main(int argc, char *argv[])
{
	char *buf;

	if (asprintf(&buf, "foo %s", "bar") == 0) {
		free(buf);
	    return (0);
	}
	return (1);
}

EOT
compile="ok"
echo "$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c" >>config.log
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_ASPRINTF="yes"
echo "#ifndef HAVE_ASPRINTF" > config/have_asprintf.h
echo "#define HAVE_ASPRINTF \"$HAVE_ASPRINTF\"" >> config/have_asprintf.h
echo "#endif" >> config/have_asprintf.h
else
echo "no"
echo "no" >> config.log
HAVE_ASPRINTF="no"
echo "#undef HAVE_ASPRINTF" > config/have_asprintf.h
fi;
echo -n "checking for a vasprintf() function..."
echo -n "checking for a vasprintf() function..." >> config.log
cat << EOT > conftest.c
#include <stdio.h>
#include <stdarg.h>

int
testprintf(const char *fmt, ...)
{
	va_list args;
	char *buf;

	va_start(args, fmt);
	if (vasprintf(&buf, "%s", args) == -1) {
		return (-1);
	}
	va_end(args);

	free(buf);
	return (0);
}

int
main(int argc, char *argv[])
{
	return (testprintf("foo %s", "bar"));
}

EOT
compile="ok"
echo "$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c" >>config.log
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_VASPRINTF="yes"
echo "#ifndef HAVE_VASPRINTF" > config/have_vasprintf.h
echo "#define HAVE_VASPRINTF \"$HAVE_VASPRINTF\"" >> config/have_vasprintf.h
echo "#endif" >> config/have_vasprintf.h
else
echo "no"
echo "no" >> config.log
HAVE_VASPRINTF="no"
echo "#undef HAVE_VASPRINTF" > config/have_vasprintf.h
fi;
echo -n "checking for a snprintf() function..."
echo -n "checking for a snprintf() function..." >> config.log
cat << EOT > conftest.c
#include <stdio.h>

int
main(int argc, char *argv[])
{
	char buf[16];

	(void)snprintf(buf, sizeof(buf), "foo");
	return (0);
}

EOT
compile="ok"
echo "$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c" >>config.log
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_SNPRINTF="yes"
echo "#ifndef HAVE_SNPRINTF" > config/have_snprintf.h
echo "#define HAVE_SNPRINTF \"$HAVE_SNPRINTF\"" >> config/have_snprintf.h
echo "#endif" >> config/have_snprintf.h
else
echo "no"
echo "no" >> config.log
HAVE_SNPRINTF="no"
echo "#undef HAVE_SNPRINTF" > config/have_snprintf.h
fi;
echo -n "checking for a vsnprintf() function..."
echo -n "checking for a vsnprintf() function..." >> config.log
cat << EOT > conftest.c
#include <stdio.h>
#include <stdarg.h>

static void
testfmt(const char *fmt, ...)
{
	char buf[16];
	va_list ap;
	
	va_start(ap, fmt);
	(void)vsnprintf(buf, sizeof(buf), fmt, ap);
	va_end(ap);
}

int
main(int argc, char *argv[])
{
	testfmt("foo", 1, 2, 3);
	return (0);
}

EOT
compile="ok"
echo "$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c" >>config.log
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_VSNPRINTF="yes"
echo "#ifndef HAVE_VSNPRINTF" > config/have_vsnprintf.h
echo "#define HAVE_VSNPRINTF \"$HAVE_VSNPRINTF\"" >> config/have_vsnprintf.h
echo "#endif" >> config/have_vsnprintf.h
else
echo "no"
echo "no" >> config.log
HAVE_VSNPRINTF="no"
echo "#undef HAVE_VSNPRINTF" > config/have_vsnprintf.h
fi;
echo -n "checking for a setlocale() function..."
echo -n "checking for a setlocale() function..." >> config.log
cat << EOT > conftest.c
#include <locale.h>

int
main(int argc, char *argv[])
{
	setlocale(LC_ALL, "");
	return (0);
}

EOT
compile="ok"
echo "$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c" >>config.log
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_SETLOCALE="yes"
echo "#ifndef HAVE_SETLOCALE" > config/have_setlocale.h
echo "#define HAVE_SETLOCALE \"$HAVE_SETLOCALE\"" >> config/have_setlocale.h
echo "#endif" >> config/have_setlocale.h
else
echo "no"
echo "no" >> config.log
HAVE_SETLOCALE="no"
echo "#undef HAVE_SETLOCALE" > config/have_setlocale.h
fi;
echo -n "checking for the arc4random() random number generator..."
echo -n "checking for the arc4random() random number generator..." >> config.log
cat << EOT > conftest.c
#include <sys/types.h>
#include <stdlib.h>
int
main(int argc, char *argv[])
{
	u_int32_t i;

	i = arc4random();
	return (0);
}

EOT
compile="ok"
echo "$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c" >>config.log
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_ARC4RANDOM="yes"
echo "#ifndef HAVE_ARC4RANDOM" > config/have_arc4random.h
echo "#define HAVE_ARC4RANDOM \"$HAVE_ARC4RANDOM\"" >> config/have_arc4random.h
echo "#endif" >> config/have_arc4random.h
else
echo "no"
echo "no" >> config.log
HAVE_ARC4RANDOM="no"
echo "#undef HAVE_ARC4RANDOM" > config/have_arc4random.h
fi;
echo -n "checking for MD5 functions..."
echo -n "checking for MD5 functions..." >> config.log
cat << EOT > conftest.c
#include <sys/types.h>
#include <md5.h>

int
main(int argc, char *argv[])
{
	MD5_CTX md5;

	MD5Init(&md5);
	return (0);
}

EOT
compile="ok"
echo "$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c" >>config.log
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_MD5="yes"
echo "#ifndef HAVE_MD5" > config/have_md5.h
echo "#define HAVE_MD5 \"$HAVE_MD5\"" >> config/have_md5.h
echo "#endif" >> config/have_md5.h
else
echo "no"
echo "no" >> config.log
HAVE_MD5="no"
echo "#undef HAVE_MD5" > config/have_md5.h
fi;
echo -n "checking for SHA1 functions..."
echo -n "checking for SHA1 functions..." >> config.log
cat << EOT > conftest.c
#include <sys/types.h>
#include <sha1.h>

int
main(int argc, char *argv[])
{
	SHA1_CTX sha1;

	SHA1Init(&sha1);
	return (0);
}

EOT
compile="ok"
echo "$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c" >>config.log
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_SHA1="yes"
echo "#ifndef HAVE_SHA1" > config/have_sha1.h
echo "#define HAVE_SHA1 \"$HAVE_SHA1\"" >> config/have_sha1.h
echo "#endif" >> config/have_sha1.h
else
echo "no"
echo "no" >> config.log
HAVE_SHA1="no"
echo "#undef HAVE_SHA1" > config/have_sha1.h
fi;
echo -n "checking for RMD160 functions..."
echo -n "checking for RMD160 functions..." >> config.log
cat << EOT > conftest.c
#include <sys/types.h>
#include <rmd160.h>

int
main(int argc, char *argv[])
{
	RMD160_CTX rmd160;

	RMD160Init(&rmd160);
	return (0);
}

EOT
compile="ok"
echo "$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c" >>config.log
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_RMD160="yes"
echo "#ifndef HAVE_RMD160" > config/have_rmd160.h
echo "#define HAVE_RMD160 \"$HAVE_RMD160\"" >> config/have_rmd160.h
echo "#endif" >> config/have_rmd160.h
else
echo "no"
echo "no" >> config.log
HAVE_RMD160="no"
echo "#undef HAVE_RMD160" > config/have_rmd160.h
fi;
echo -n "checking for POSIX threads..."
echo -n "checking for POSIX threads..." >> config.log
PTHREADS_CFLAGS=""
PTHREADS_LIBS="-lpthread"
cat << EOT > conftest.c
#include <pthread.h>
#include <signal.h>
void *start_routine(void *arg) { return (NULL); }
int main(int argc, char *argv[])
{
	pthread_mutex_t mutex;
	pthread_t thread;
	pthread_mutex_init(&mutex, NULL);
	pthread_mutex_lock(&mutex);
	pthread_mutex_unlock(&mutex);
	pthread_mutex_destroy(&mutex);
	pthread_create(&thread, NULL, start_routine, NULL);
	return (0);
}

EOT
echo "$CC $CFLAGS $TEST_CFLAGS  -o conftest conftest.c ${PTHREADS_LIBS}" >>config.log
$CC $CFLAGS $TEST_CFLAGS  -o conftest conftest.c ${PTHREADS_LIBS} 2>>config.log
if [ $? == 0 ]; then
echo "yes"
echo "yes" >> config.log
compile="ok"
HAVE_PTHREADS="yes"
echo "HAVE_PTHREADS=$HAVE_PTHREADS" >> Makefile.config
echo "#ifndef HAVE_PTHREADS" > config/have_pthreads.h
echo "#define HAVE_PTHREADS \"$HAVE_PTHREADS\"" >> config/have_pthreads.h
echo "#endif" >> config/have_pthreads.h
else
echo "no"
echo "no" >> config.log
compile="failed"
HAVE_PTHREADS="no"
echo "HAVE_PTHREADS=$HAVE_PTHREADS" >> Makefile.config
echo "#undef HAVE_PTHREADS" > config/have_pthreads.h
fi;
rm -f conftest conftest.c
if [ "${HAVE_PTHREADS}" = "yes" ]; then
CFLAGS="${CFLAGS} ${PTHREADS_CFLAGS}"
echo "CFLAGS=$CFLAGS" >> Makefile.config
echo "PTHREADS_CFLAGS=$PTHREADS_CFLAGS" >> Makefile.config
echo "PTHREADS_LIBS=$PTHREADS_LIBS" >> Makefile.config
echo "#ifndef PTHREADS_CFLAGS" > config/pthreads_cflags.h
echo "#define PTHREADS_CFLAGS \"$PTHREADS_CFLAGS\"" >> config/pthreads_cflags.h
echo "#endif" >> config/pthreads_cflags.h
echo "#ifndef PTHREADS_LIBS" > config/pthreads_libs.h
echo "#define PTHREADS_LIBS \"$PTHREADS_LIBS\"" >> config/pthreads_libs.h
echo "#endif" >> config/pthreads_libs.h
else
echo -n "checking for -pthread..."
echo -n "checking for -pthread..." >> config.log
PTHREADS_LIBS="-pthread"
cat << EOT > conftest.c
#include <pthread.h>
#include <signal.h>
void *start_routine(void *arg) { return (NULL); }
int main(int argc, char *argv[])
{
	pthread_mutex_t mutex;
	pthread_t thread;
	pthread_mutex_init(&mutex, NULL);
	pthread_mutex_lock(&mutex);
	pthread_mutex_unlock(&mutex);
	pthread_mutex_destroy(&mutex);
	pthread_create(&thread, NULL, start_routine, NULL);
	return (0);
}

EOT
echo "$CC $CFLAGS $TEST_CFLAGS  -o conftest conftest.c ${PTHREADS_LIBS}" >>config.log
$CC $CFLAGS $TEST_CFLAGS  -o conftest conftest.c ${PTHREADS_LIBS} 2>>config.log
if [ $? == 0 ]; then
echo "yes"
echo "yes" >> config.log
compile="ok"
HAVE_PTHREADS="yes"
echo "HAVE_PTHREADS=$HAVE_PTHREADS" >> Makefile.config
echo "#ifndef HAVE_PTHREADS" > config/have_pthreads.h
echo "#define HAVE_PTHREADS \"$HAVE_PTHREADS\"" >> config/have_pthreads.h
echo "#endif" >> config/have_pthreads.h
else
echo "no"
echo "no" >> config.log
compile="failed"
HAVE_PTHREADS="no"
echo "HAVE_PTHREADS=$HAVE_PTHREADS" >> Makefile.config
echo "#undef HAVE_PTHREADS" > config/have_pthreads.h
fi;
rm -f conftest conftest.c
if [ "${HAVE_PTHREADS}" = "yes" ]; then
CFLAGS="${CFLAGS} ${PTHREADS_CFLAGS}"
echo "CFLAGS=$CFLAGS" >> Makefile.config
echo "PTHREADS_CFLAGS=$PTHREADS_CFLAGS" >> Makefile.config
echo "PTHREADS_LIBS=$PTHREADS_LIBS" >> Makefile.config
echo "#ifndef PTHREADS_CFLAGS" > config/pthreads_cflags.h
echo "#define PTHREADS_CFLAGS \"$PTHREADS_CFLAGS\"" >> config/pthreads_cflags.h
echo "#endif" >> config/pthreads_cflags.h
echo "#ifndef PTHREADS_LIBS" > config/pthreads_libs.h
echo "#define PTHREADS_LIBS \"$PTHREADS_LIBS\"" >> config/pthreads_libs.h
echo "#endif" >> config/pthreads_libs.h
fi;
fi;
echo -n "checking for the X/Open Threads Extension..."
echo -n "checking for the X/Open Threads Extension..." >> config.log
if [ "${SYSTEM}" = "FreeBSD" ]; then
PTHREADS_XOPEN_CFLAGS=""
else
PTHREADS_XOPEN_CFLAGS="-U_XOPEN_SOURCE -D_XOPEN_SOURCE=600"
fi;
PTHREADS_XOPEN_LIBS="-lpthread"
cat << EOT > conftest.c
#include <pthread.h>
#include <signal.h>

int main(int argc, char *argv[])
{
	pthread_mutex_t mutex;
	pthread_mutexattr_t mutexattr;
	pthread_mutexattr_settype(&mutexattr, PTHREAD_MUTEX_RECURSIVE);
	pthread_mutex_init(&mutex, &mutexattr);
	return (0);
}

EOT
echo "$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_XOPEN_CFLAGS} -o conftest conftest.c ${PTHREADS_XOPEN_LIBS}" >>config.log
$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_XOPEN_CFLAGS} -o conftest conftest.c ${PTHREADS_XOPEN_LIBS} 2>>config.log
if [ $? == 0 ]; then
echo "yes"
echo "yes" >> config.log
compile="ok"
HAVE_PTHREADS_XOPEN="yes"
echo "HAVE_PTHREADS_XOPEN=$HAVE_PTHREADS_XOPEN" >> Makefile.config
echo "#ifndef HAVE_PTHREADS_XOPEN" > config/have_pthreads_xopen.h
echo "#define HAVE_PTHREADS_XOPEN \"$HAVE_PTHREADS_XOPEN\"" >> config/have_pthreads_xopen.h
echo "#endif" >> config/have_pthreads_xopen.h
else
echo "no"
echo "no" >> config.log
compile="failed"
HAVE_PTHREADS_XOPEN="no"
echo "HAVE_PTHREADS_XOPEN=$HAVE_PTHREADS_XOPEN" >> Makefile.config
echo "#undef HAVE_PTHREADS_XOPEN" > config/have_pthreads_xopen.h
fi;
rm -f conftest conftest.c
if [ "${HAVE_PTHREADS_XOPEN}" = "yes" ]; then
echo "PTHREADS_XOPEN_CFLAGS=$PTHREADS_XOPEN_CFLAGS" >> Makefile.config
echo "PTHREADS_XOPEN_LIBS=$PTHREADS_XOPEN_LIBS" >> Makefile.config
echo "#ifndef HAVE_PTHREADS_XOPEN" > config/have_pthreads_xopen.h
echo "#define HAVE_PTHREADS_XOPEN \"$HAVE_PTHREADS_XOPEN\"" >> config/have_pthreads_xopen.h
echo "#endif" >> config/have_pthreads_xopen.h
echo "#ifndef PTHREADS_XOPEN_CFLAGS" > config/pthreads_xopen_cflags.h
echo "#define PTHREADS_XOPEN_CFLAGS \"$PTHREADS_XOPEN_CFLAGS\"" >> config/pthreads_xopen_cflags.h
echo "#endif" >> config/pthreads_xopen_cflags.h
echo "#ifndef PTHREADS_XOPEN_LIBS" > config/pthreads_xopen_libs.h
echo "#define PTHREADS_XOPEN_LIBS \"$PTHREADS_XOPEN_LIBS\"" >> config/pthreads_xopen_libs.h
echo "#endif" >> config/pthreads_xopen_libs.h
else
echo "#undef HAVE_PTHREADS_XOPEN" > config/have_pthreads_xopen.h
fi;
echo -n "checking for PTHREAD_MUTEX_RECURSIVE..."
echo -n "checking for PTHREAD_MUTEX_RECURSIVE..." >> config.log
cat << EOT > conftest.c
#include <pthread.h>
#include <signal.h>
int main(int argc, char *argv[])
{
	pthread_mutex_t mutex;
	pthread_mutexattr_t mutexattr;
	pthread_mutexattr_settype(&mutexattr, PTHREAD_MUTEX_RECURSIVE);
	pthread_mutex_init(&mutex, &mutexattr);
	return (0);
}

EOT
echo "$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o conftest conftest.c ${PTHREADS_LIBS}" >>config.log
$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o conftest conftest.c ${PTHREADS_LIBS} 2>>config.log
if [ $? == 0 ]; then
echo "yes"
echo "yes" >> config.log
compile="ok"
HAVE_PTHREAD_MUTEX_RECURSIVE="yes"
echo "HAVE_PTHREAD_MUTEX_RECURSIVE=$HAVE_PTHREAD_MUTEX_RECURSIVE" >> Makefile.config
echo "#ifndef HAVE_PTHREAD_MUTEX_RECURSIVE" > config/have_pthread_mutex_recursive.h
echo "#define HAVE_PTHREAD_MUTEX_RECURSIVE \"$HAVE_PTHREAD_MUTEX_RECURSIVE\"" >> config/have_pthread_mutex_recursive.h
echo "#endif" >> config/have_pthread_mutex_recursive.h
else
echo "no"
echo "no" >> config.log
compile="failed"
HAVE_PTHREAD_MUTEX_RECURSIVE="no"
echo "HAVE_PTHREAD_MUTEX_RECURSIVE=$HAVE_PTHREAD_MUTEX_RECURSIVE" >> Makefile.config
echo "#undef HAVE_PTHREAD_MUTEX_RECURSIVE" > config/have_pthread_mutex_recursive.h
fi;
rm -f conftest conftest.c
if [ "${HAVE_PTHREAD_MUTEX_RECURSIVE}" = "yes" ]; then
echo "#ifndef HAVE_PTHREAD_MUTEX_RECURSIVE" > config/have_pthread_mutex_recursive.h
echo "#define HAVE_PTHREAD_MUTEX_RECURSIVE \"$HAVE_PTHREAD_MUTEX_RECURSIVE\"" >> config/have_pthread_mutex_recursive.h
echo "#endif" >> config/have_pthread_mutex_recursive.h
else
echo "#undef HAVE_PTHREAD_MUTEX_RECURSIVE" > config/have_pthread_mutex_recursive.h
fi;
echo -n "checking for PTHREAD_MUTEX_RECURSIVE_NP..."
echo -n "checking for PTHREAD_MUTEX_RECURSIVE_NP..." >> config.log
cat << EOT > conftest.c
#include <pthread.h>
#include <signal.h>
int main(int argc, char *argv[])
{
	pthread_mutex_t mutex;
	pthread_mutexattr_t mutexattr;
	pthread_mutexattr_settype(&mutexattr, PTHREAD_MUTEX_RECURSIVE_NP);
	pthread_mutex_init(&mutex, &mutexattr);
	return (0);
}

EOT
echo "$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o conftest conftest.c ${PTHREADS_LIBS}" >>config.log
$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o conftest conftest.c ${PTHREADS_LIBS} 2>>config.log
if [ $? == 0 ]; then
echo "yes"
echo "yes" >> config.log
compile="ok"
HAVE_PTHREAD_MUTEX_RECURSIVE_NP="yes"
echo "HAVE_PTHREAD_MUTEX_RECURSIVE_NP=$HAVE_PTHREAD_MUTEX_RECURSIVE_NP" >> Makefile.config
echo "#ifndef HAVE_PTHREAD_MUTEX_RECURSIVE_NP" > config/have_pthread_mutex_recursive_np.h
echo "#define HAVE_PTHREAD_MUTEX_RECURSIVE_NP \"$HAVE_PTHREAD_MUTEX_RECURSIVE_NP\"" >> config/have_pthread_mutex_recursive_np.h
echo "#endif" >> config/have_pthread_mutex_recursive_np.h
else
echo "no"
echo "no" >> config.log
compile="failed"
HAVE_PTHREAD_MUTEX_RECURSIVE_NP="no"
echo "HAVE_PTHREAD_MUTEX_RECURSIVE_NP=$HAVE_PTHREAD_MUTEX_RECURSIVE_NP" >> Makefile.config
echo "#undef HAVE_PTHREAD_MUTEX_RECURSIVE_NP" > config/have_pthread_mutex_recursive_np.h
fi;
rm -f conftest conftest.c
if [ "${HAVE_PTHREAD_MUTEX_RECURSIVE_NP}" = "yes" ]; then
echo "#ifndef HAVE_PTHREAD_MUTEX_RECURSIVE_NP" > config/have_pthread_mutex_recursive_np.h
echo "#define HAVE_PTHREAD_MUTEX_RECURSIVE_NP \"$HAVE_PTHREAD_MUTEX_RECURSIVE_NP\"" >> config/have_pthread_mutex_recursive_np.h
echo "#endif" >> config/have_pthread_mutex_recursive_np.h
else
echo "#undef HAVE_PTHREAD_MUTEX_RECURSIVE_NP" > config/have_pthread_mutex_recursive_np.h
fi;
echo -n "checking for the X window system..."
echo -n "checking for the X window system..." >> config.log
x11_found_includes="no"
x11_found_libs="no"
if [ -d /usr/include/X11/X11 ]; then
X11_CFLAGS=""-I/usr/include/X11""
x11_found_includes="yes"
fi;
if [ -d /usr/include/X11R6/X11 ]; then
X11_CFLAGS=""-I/usr/include/X11R6""
x11_found_includes="yes"
fi;
if [ -d /usr/local/X11/include/X11 ]; then
X11_CFLAGS=""-I/usr/local/X11/include""
x11_found_includes="yes"
fi;
if [ -d /usr/local/X11R6/include/X11 ]; then
X11_CFLAGS=""-I/usr/local/X11R6/include""
x11_found_includes="yes"
fi;
if [ -d /usr/local/include/X11/X11 ]; then
X11_CFLAGS=""-I/usr/local/include/X11""
x11_found_includes="yes"
fi;
if [ -d /usr/local/include/X11R6/X11 ]; then
X11_CFLAGS=""-I/usr/local/include/X11R6""
x11_found_includes="yes"
fi;
if [ -d /usr/X11/include/X11 ]; then
X11_CFLAGS=""-I/usr/X11/include""
x11_found_includes="yes"
fi;
if [ -d /usr/X11R6/include/X11 ]; then
X11_CFLAGS=""-I/usr/X11R6/include""
x11_found_includes="yes"
fi;
if [ -d /usr/local/X11/lib ]; then
X11_LIBS=""-L/usr/local/X11/lib""
x11_found_libs="yes"
fi;
if [ -d /usr/local/X11R6/lib ]; then
X11_LIBS=""-L/usr/local/X11R6/lib""
x11_found_libs="yes"
fi;
if [ -d /usr/X11/lib ]; then
X11_LIBS=""-L/usr/X11/lib""
x11_found_libs="yes"
fi;
if [ -d /usr/X11R6/lib ]; then
X11_LIBS=""-L/usr/X11R6/lib""
x11_found_libs="yes"
fi;
cat << EOT > conftest.c
#include <X11/Xlib.h>
int main(int argc, char *argv[])
{
	Display *disp;
	disp = XOpenDisplay(NULL);
	XCloseDisplay(disp);
	return (0);
}

EOT
echo "$CC $CFLAGS $TEST_CFLAGS ${X11_CFLAGS} -o conftest conftest.c ${X11_LIBS} -lX11" >>config.log
$CC $CFLAGS $TEST_CFLAGS ${X11_CFLAGS} -o conftest conftest.c ${X11_LIBS} -lX11 2>>config.log
if [ $? == 0 ]; then
echo "yes"
echo "yes" >> config.log
compile="ok"
HAVE_X11="yes"
echo "HAVE_X11=$HAVE_X11" >> Makefile.config
echo "#ifndef HAVE_X11" > config/have_x11.h
echo "#define HAVE_X11 \"$HAVE_X11\"" >> config/have_x11.h
echo "#endif" >> config/have_x11.h
else
echo "no"
echo "no" >> config.log
compile="failed"
HAVE_X11="no"
echo "HAVE_X11=$HAVE_X11" >> Makefile.config
echo "#undef HAVE_X11" > config/have_x11.h
fi;
rm -f conftest conftest.c
if [ "${HAVE_X11}" != "" ]; then
echo "#ifndef X11_CFLAGS" > config/x11_cflags.h
echo "#define X11_CFLAGS \"$X11_CFLAGS\"" >> config/x11_cflags.h
echo "#endif" >> config/x11_cflags.h
echo "#ifndef X11_LIBS" > config/x11_libs.h
echo "#define X11_LIBS \"$X11_LIBS\"" >> config/x11_libs.h
echo "#endif" >> config/x11_libs.h
echo "X11_CFLAGS=$X11_CFLAGS" >> Makefile.config
echo "X11_LIBS=$X11_LIBS" >> Makefile.config
else
echo "#undef X11_CFLAGS" > config/x11_cflags.h
echo "#undef X11_LIBS" > config/x11_libs.h
fi;
echo -n "checking for the signal() function..."
echo -n "checking for the signal() function..." >> config.log
cat << EOT > conftest.c
#include <signal.h>

void
sighandler(int sig)
{
}

int
main(int argc, char *argv[])
{
	signal(SIGTERM, sighandler);
	signal(SIGILL, sighandler);
	return (0);
}

EOT
compile="ok"
echo "$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c" >>config.log
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
echo "yes"
echo "yes" >> config.log
_MK_HAVE_SIGNAL="yes"
echo "#ifndef _MK_HAVE_SIGNAL" > config/_mk_have_signal.h
echo "#define _MK_HAVE_SIGNAL \"$_MK_HAVE_SIGNAL\"" >> config/_mk_have_signal.h
echo "#endif" >> config/_mk_have_signal.h
else
echo "no"
echo "no" >> config.log
_MK_HAVE_SIGNAL="no"
echo "#undef _MK_HAVE_SIGNAL" > config/_mk_have_signal.h
fi;
echo -n "checking for setjmp() and longjmp()..."
echo -n "checking for setjmp() and longjmp()..." >> config.log
cat << EOT > conftest.c
#include <setjmp.h>

jmp_buf jmpbuf;

int
main(int argc, char *argv[])
{
	longjmp(jmpbuf, 1);
	setjmp(jmpbuf);
	return (0);
}

EOT
compile="ok"
echo "$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c" >>config.log
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
echo "yes"
echo "yes" >> config.log
_MK_HAVE_SETJMP="yes"
echo "#ifndef _MK_HAVE_SETJMP" > config/_mk_have_setjmp.h
echo "#define _MK_HAVE_SETJMP \"$_MK_HAVE_SETJMP\"" >> config/_mk_have_setjmp.h
echo "#endif" >> config/_mk_have_setjmp.h
else
echo "no"
echo "no" >> config.log
_MK_HAVE_SETJMP="no"
echo "#undef _MK_HAVE_SETJMP" > config/_mk_have_setjmp.h
fi;
CFLAGS="$CFLAGS -D_AGAR_INTERNAL"
CXXFLAGS="$CXXFLAGS -D_AGAR_INTERNAL"
echo "CFLAGS=$CFLAGS" >> Makefile.config
echo "CXXFLAGS=$CXXFLAGS" >> Makefile.config
CFLAGS="$CFLAGS -D_BSD_SOURCE"
CXXFLAGS="$CXXFLAGS -D_BSD_SOURCE"
echo "CFLAGS=$CFLAGS" >> Makefile.config
echo "CXXFLAGS=$CXXFLAGS" >> Makefile.config
CFLAGS="$CFLAGS -I$SRC"
CXXFLAGS="$CXXFLAGS -I$SRC"
echo "CFLAGS=$CFLAGS" >> Makefile.config
echo "CXXFLAGS=$CXXFLAGS" >> Makefile.config
if [ "${enable_warnings}" = "yes" ]
 then
CFLAGS="$CFLAGS -Wall"
CXXFLAGS="$CXXFLAGS -Wall"
echo "CFLAGS=$CFLAGS" >> Makefile.config
echo "CXXFLAGS=$CXXFLAGS" >> Makefile.config
CFLAGS="$CFLAGS -Werror"
CXXFLAGS="$CXXFLAGS -Werror"
echo "CFLAGS=$CFLAGS" >> Makefile.config
echo "CXXFLAGS=$CXXFLAGS" >> Makefile.config
CFLAGS="$CFLAGS -Wmissing-prototypes"
CXXFLAGS="$CXXFLAGS -Wmissing-prototypes"
echo "CFLAGS=$CFLAGS" >> Makefile.config
echo "CXXFLAGS=$CXXFLAGS" >> Makefile.config
CFLAGS="$CFLAGS -Wno-unused"
CXXFLAGS="$CXXFLAGS -Wno-unused"
echo "CFLAGS=$CFLAGS" >> Makefile.config
echo "CXXFLAGS=$CXXFLAGS" >> Makefile.config
WNO_UNINITIALIZED="-Wno-uninitialized"
echo "WNO_UNINITIALIZED=$WNO_UNINITIALIZED" >> Makefile.config
else
WNO_UNINITIALIZED=""""
echo "WNO_UNINITIALIZED=$WNO_UNINITIALIZED" >> Makefile.config
fi
echo -n "checking for SDL (http://www.libsdl.org)..."
echo -n "checking for SDL (http://www.libsdl.org)..." >> config.log
if [ "${SYSTEM}" = "Darwin" ]; then
SDL_VERSION=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/sdl-config" ]; then
		SDL_VERSION=`${path}/sdl-config --version`
	fi
done
SDL_CFLAGS=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/sdl-config" ]; then
		SDL_CFLAGS=`${path}/sdl-config --cflags`
	fi
done
SDL_LIBS=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/sdl-config" ]; then
		SDL_LIBS=`${path}/sdl-config --libs`
	fi
done
elif [ "${SYSTEM}" = "FreeBSD" ]; then
SDL_VERSION=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/sdl11-config" ]; then
		SDL_VERSION=`${path}/sdl11-config --version`
	fi
done
if [ "${SDL_VERSION}" != "" ]; then
SDL_CFLAGS=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/sdl11-config" ]; then
		SDL_CFLAGS=`${path}/sdl11-config --cflags`
	fi
done
SDL_LIBS=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/sdl11-config" ]; then
		SDL_LIBS=`${path}/sdl11-config --libs`
	fi
done
else
SDL_VERSION=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/sdl-config" ]; then
		SDL_VERSION=`${path}/sdl-config --version`
	fi
done
SDL_CFLAGS=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/sdl-config" ]; then
		SDL_CFLAGS=`${path}/sdl-config --cflags`
	fi
done
SDL_LIBS=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/sdl-config" ]; then
		SDL_LIBS=`${path}/sdl-config --libs`
	fi
done
fi;
else
SDL_VERSION=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/sdl-config" ]; then
		SDL_VERSION=`${path}/sdl-config --version`
	fi
done
SDL_CFLAGS=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/sdl-config" ]; then
		SDL_CFLAGS=`${path}/sdl-config --cflags`
	fi
done
SDL_LIBS=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/sdl-config" ]; then
		SDL_LIBS=`${path}/sdl-config --libs`
	fi
done
fi;
if [ "${SDL_VERSION}" != "" ]; then
echo "yes"
echo "yes" >> config.log
echo -n "checking whether SDL works..."
echo -n "checking whether SDL works..." >> config.log
cat << EOT > conftest.c
#include <stdio.h>
#include <SDL.h>
int main(int argc, char *argv[]) {
	SDL_Surface *su;
	if (SDL_Init(SDL_INIT_TIMER|SDL_INIT_NOPARACHUTE) != 0) {
		return (1);
	}
	su = SDL_CreateRGBSurface(0, 16, 16, 32, 0, 0, 0, 0);
	SDL_FreeSurface(su);
	SDL_Quit();
	return (0);
}

EOT
echo "$CC $CFLAGS $TEST_CFLAGS ${SDL_CFLAGS} -o conftest conftest.c ${SDL_LIBS}" >>config.log
$CC $CFLAGS $TEST_CFLAGS ${SDL_CFLAGS} -o conftest conftest.c ${SDL_LIBS} 2>>config.log
if [ $? == 0 ]; then
echo "yes"
echo "yes" >> config.log
compile="ok"
HAVE_SDL="yes"
echo "HAVE_SDL=$HAVE_SDL" >> Makefile.config
echo "#ifndef HAVE_SDL" > config/have_sdl.h
echo "#define HAVE_SDL \"$HAVE_SDL\"" >> config/have_sdl.h
echo "#endif" >> config/have_sdl.h
else
echo "no"
echo "no" >> config.log
compile="failed"
HAVE_SDL="no"
echo "HAVE_SDL=$HAVE_SDL" >> Makefile.config
echo "#undef HAVE_SDL" > config/have_sdl.h
fi;
rm -f conftest conftest.c
if [ "${HAVE_SDL}" != "no" ]; then
echo "SDL_CFLAGS=$SDL_CFLAGS" >> Makefile.config
echo "SDL_LIBS=$SDL_LIBS" >> Makefile.config
echo "#ifndef SDL_CFLAGS" > config/sdl_cflags.h
echo "#define SDL_CFLAGS \"$SDL_CFLAGS\"" >> config/sdl_cflags.h
echo "#endif" >> config/sdl_cflags.h
echo "#ifndef SDL_LIBS" > config/sdl_libs.h
echo "#define SDL_LIBS \"$SDL_LIBS\"" >> config/sdl_libs.h
echo "#endif" >> config/sdl_libs.h
else
echo -n "checking whether SDL works (with X11 libs)..."
echo -n "checking whether SDL works (with X11 libs)..." >> config.log
SDL_LIBS="${SDL_LIBS} -L/usr/X11R6/lib -lX11 -lXext -lXrandr -lXrender"
cat << EOT > conftest.c
#include <stdio.h>
#include <SDL.h>
int main(int argc, char *argv[]) {
	SDL_Surface *su;
	if (SDL_Init(SDL_INIT_TIMER|SDL_INIT_NOPARACHUTE) != 0) {
		return (1);
	}
	su = SDL_CreateRGBSurface(0, 16, 16, 32, 0, 0, 0, 0);
	SDL_FreeSurface(su);
	SDL_Quit();
	return (0);
}

EOT
echo "$CC $CFLAGS $TEST_CFLAGS ${SDL_CFLAGS} -o conftest conftest.c ${SDL_LIBS}" >>config.log
$CC $CFLAGS $TEST_CFLAGS ${SDL_CFLAGS} -o conftest conftest.c ${SDL_LIBS} 2>>config.log
if [ $? == 0 ]; then
echo "yes"
echo "yes" >> config.log
compile="ok"
HAVE_SDL="yes"
echo "HAVE_SDL=$HAVE_SDL" >> Makefile.config
echo "#ifndef HAVE_SDL" > config/have_sdl.h
echo "#define HAVE_SDL \"$HAVE_SDL\"" >> config/have_sdl.h
echo "#endif" >> config/have_sdl.h
else
echo "no"
echo "no" >> config.log
compile="failed"
HAVE_SDL="no"
echo "HAVE_SDL=$HAVE_SDL" >> Makefile.config
echo "#undef HAVE_SDL" > config/have_sdl.h
fi;
rm -f conftest conftest.c
if [ "${HAVE_SDL}" != "no" ]; then
echo "SDL_CFLAGS=$SDL_CFLAGS" >> Makefile.config
echo "SDL_LIBS=$SDL_LIBS" >> Makefile.config
echo "#ifndef SDL_CFLAGS" > config/sdl_cflags.h
echo "#define SDL_CFLAGS \"$SDL_CFLAGS\"" >> config/sdl_cflags.h
echo "#endif" >> config/sdl_cflags.h
echo "#ifndef SDL_LIBS" > config/sdl_libs.h
echo "#define SDL_LIBS \"$SDL_LIBS\"" >> config/sdl_libs.h
echo "#endif" >> config/sdl_libs.h
else
echo "#undef SDL_CFLAGS" > config/sdl_cflags.h
echo "#undef SDL_LIBS" > config/sdl_libs.h
fi;
fi;
else
echo "no"
echo "no" >> config.log
echo "#undef HAVE_SDL" > config/have_sdl.h
echo "#undef SDL_CFLAGS" > config/sdl_cflags.h
echo "#undef SDL_LIBS" > config/sdl_libs.h
fi;
if [ "${HAVE_SDL}" != "yes" ]
 then
	echo "*"
	echo "* Agar requires the SDL library. Please install it and try again."
	echo "* You can download SDL from: http://www.libsdl.org/."
	echo "*"
	exit 1
fi
if [ "${with_freetype}" != "no" ]
 then
echo -n "checking for FreeType (http://www.freetype.org)..."
echo -n "checking for FreeType (http://www.freetype.org)..." >> config.log
FREETYPE_VERSION=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/freetype-config" ]; then
		FREETYPE_VERSION=`${path}/freetype-config --version`
	fi
done
FREETYPE_CFLAGS=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/freetype-config" ]; then
		FREETYPE_CFLAGS=`${path}/freetype-config --cflags`
	fi
done
FREETYPE_LIBS=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/freetype-config" ]; then
		FREETYPE_LIBS=`${path}/freetype-config --libs`
	fi
done
if [ -d /usr/freeware/include ]; then
FREETYPE_CFLAGS="${FREETYPE_CFLAGS} -I/usr/freeware/include"
fi;
if [ "${FREETYPE_VERSION}" != "" ]; then
echo "yes"
echo "yes" >> config.log
echo -n "checking whether FreeType works..."
echo -n "checking whether FreeType works..." >> config.log
cat << EOT > conftest.c
#include <ft2build.h>
#include FT_FREETYPE_H
#include FT_OUTLINE_H
int
main(int argc, char *argv[])
{
	FT_Library library;
	FT_Face face;
	FT_Init_FreeType(&library);
	FT_New_Face(library, "foo", 0, &face);
	return (0);
}

EOT
echo "$CC $CFLAGS $TEST_CFLAGS ${FREETYPE_CFLAGS} -o conftest conftest.c ${FREETYPE_LIBS}" >>config.log
$CC $CFLAGS $TEST_CFLAGS ${FREETYPE_CFLAGS} -o conftest conftest.c ${FREETYPE_LIBS} 2>>config.log
if [ $? == 0 ]; then
echo "yes"
echo "yes" >> config.log
compile="ok"
HAVE_FREETYPE="yes"
echo "HAVE_FREETYPE=$HAVE_FREETYPE" >> Makefile.config
echo "#ifndef HAVE_FREETYPE" > config/have_freetype.h
echo "#define HAVE_FREETYPE \"$HAVE_FREETYPE\"" >> config/have_freetype.h
echo "#endif" >> config/have_freetype.h
else
echo "no"
echo "no" >> config.log
compile="failed"
HAVE_FREETYPE="no"
echo "HAVE_FREETYPE=$HAVE_FREETYPE" >> Makefile.config
echo "#undef HAVE_FREETYPE" > config/have_freetype.h
fi;
rm -f conftest conftest.c
if [ "${HAVE_FREETYPE}" = "yes" ]; then
echo "#ifndef FREETYPE_CFLAGS" > config/freetype_cflags.h
echo "#define FREETYPE_CFLAGS \"$FREETYPE_CFLAGS\"" >> config/freetype_cflags.h
echo "#endif" >> config/freetype_cflags.h
echo "#ifndef FREETYPE_LIBS" > config/freetype_libs.h
echo "#define FREETYPE_LIBS \"$FREETYPE_LIBS\"" >> config/freetype_libs.h
echo "#endif" >> config/freetype_libs.h
echo "FREETYPE_CFLAGS=$FREETYPE_CFLAGS" >> Makefile.config
echo "FREETYPE_LIBS=$FREETYPE_LIBS" >> Makefile.config
else
echo "#undef FREETYPE_CFLAGS" > config/freetype_cflags.h
echo "#undef FREETYPE_LIBS" > config/freetype_libs.h
fi;
else
echo "#undef HAVE_FREETYPE" > config/have_freetype.h
echo "no"
echo "no" >> config.log
fi;
	if [ "${HAVE_FREETYPE}" != "yes" ]
 then
		echo "*"
		echo "* Agar needs FreeType in order to display vector-based"
		echo "* fonts. If you would like to use Agar's bitmap font, "
		echo "* rerun configure with the --without-freetype option."
		echo "* (note that the bundled bitmap font can only display"
		echo "* ASCII characters)."
		echo "*"
		exit 1
	fi
else
echo "#undef HAVE_FREETYPE" > config/have_freetype.h
fi
if [ "${with_gl}" != "no" ]
 then
echo -n "checking for OpenGL (http://www.opengl.org)..."
echo -n "checking for OpenGL (http://www.opengl.org)..." >> config.log
GL_CFLAGS=""
GL_LIBS=""
if [ -d "/usr/include/X11/GL" ]; then
GL_CFLAGS="-I/usr/include/X11"
fi;
if [ -d "/usr/include/X11R6/GL" ]; then
GL_CFLAGS="-I/usr/include/X11R6"
fi;
if [ -d "/usr/local/X11/include/GL" ]; then
GL_CFLAGS="-I/usr/local/X11/include"
fi;
if [ -d "/usr/local/X11R6/include/GL" ]; then
GL_CFLAGS="-I/usr/local/X11R6/include"
fi;
if [ -d "/usr/local/include/X11/GL" ]; then
GL_CFLAGS="-I/usr/local/include/X11"
fi;
if [ -d "/usr/local/include/X11R6/GL" ]; then
GL_CFLAGS="-I/usr/local/include/X11R6"
fi;
if [ -d "/usr/X11/include/GL" ]; then
GL_CFLAGS="-I/usr/X11/include"
fi;
if [ -d "/usr/X11R6/include/GL" ]; then
GL_CFLAGS="-I/usr/X11R6/include"
fi;
if [ -d "/usr/local/X11/lib" ]; then
GL_LIBS="-L/usr/local/X11/lib"
fi;
if [ -d "/usr/local/X11R6/lib" ]; then
GL_LIBS="-L/usr/local/X11R6/lib"
fi;
if [ -d "/usr/X11/lib" ]; then
GL_LIBS="-L/usr/X11/lib"
fi;
if [ -d "/usr/X11R6/lib" ]; then
GL_LIBS="-L/usr/X11R6/lib"
fi;
if [ "$SYSTEM" = "Darwin" ]; then
OPENGL_CFLAGS=""
OPENGL_LIBS="-framework OpenGL"
else
OPENGL_CFLAGS="${GL_CFLAGS}"
OPENGL_LIBS="${GL_LIBS} -lGL"
fi;
cat << EOT > conftest.c
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
int main(int argc, char *argv[]) {
	glFlush();
	glLoadIdentity();
	return (0);
}

EOT
echo "$CC $CFLAGS $TEST_CFLAGS ${OPENGL_CFLAGS} -o conftest conftest.c ${OPENGL_LIBS}" >>config.log
$CC $CFLAGS $TEST_CFLAGS ${OPENGL_CFLAGS} -o conftest conftest.c ${OPENGL_LIBS} 2>>config.log
if [ $? == 0 ]; then
echo "yes"
echo "yes" >> config.log
compile="ok"
HAVE_OPENGL="yes"
echo "HAVE_OPENGL=$HAVE_OPENGL" >> Makefile.config
echo "#ifndef HAVE_OPENGL" > config/have_opengl.h
echo "#define HAVE_OPENGL \"$HAVE_OPENGL\"" >> config/have_opengl.h
echo "#endif" >> config/have_opengl.h
else
echo "no"
echo "no" >> config.log
compile="failed"
HAVE_OPENGL="no"
echo "HAVE_OPENGL=$HAVE_OPENGL" >> Makefile.config
echo "#undef HAVE_OPENGL" > config/have_opengl.h
fi;
rm -f conftest conftest.c
if [ "${HAVE_OPENGL}" = "yes" ]; then
echo "OPENGL_CFLAGS=$OPENGL_CFLAGS" >> Makefile.config
echo "OPENGL_LIBS=$OPENGL_LIBS" >> Makefile.config
echo "#ifndef OPENGL_CFLAGS" > config/opengl_cflags.h
echo "#define OPENGL_CFLAGS \"$OPENGL_CFLAGS\"" >> config/opengl_cflags.h
echo "#endif" >> config/opengl_cflags.h
echo "#ifndef OPENGL_LIBS" > config/opengl_libs.h
echo "#define OPENGL_LIBS \"$OPENGL_LIBS\"" >> config/opengl_libs.h
echo "#endif" >> config/opengl_libs.h
else
echo "#undef OPENGL_CFLAGS" > config/opengl_cflags.h
echo "#undef OPENGL_LIBS" > config/opengl_libs.h
fi;
echo -n "checking for GLU (http://www.opengl.org)..."
echo -n "checking for GLU (http://www.opengl.org)..." >> config.log
if [ "$SYSTEM" = "Darwin" ]; then
GLU_CFLAGS=""
GLU_LIBS=""
else
GLU_CFLAGS=""
if [ -d "/usr/include/X11/GL/glu.h" ]; then
GLU_CFLAGS="-I/usr/include/X11"
fi;
if [ -d "/usr/include/X11R6/GL/glu.h" ]; then
GLU_CFLAGS="-I/usr/include/X11R6"
fi;
if [ -d "/usr/local/X11/include/GL/glu.h" ]; then
GLU_CFLAGS="-I/usr/local/X11/include"
fi;
if [ -d "/usr/local/X11R6/include/GL/glu.h" ]; then
GLU_CFLAGS="-I/usr/local/X11R6/include"
fi;
if [ -d "/usr/local/include/X11/GL/glu.h" ]; then
GLU_CFLAGS="-I/usr/local/include/X11"
fi;
if [ -d "/usr/local/include/X11R6/GL/glu.h" ]; then
GLU_CFLAGS="-I/usr/local/include/X11R6"
fi;
if [ -d "/usr/X11/include/GL/glu.h" ]; then
GLU_CFLAGS="-I/usr/X11/include"
fi;
if [ -d "/usr/X11R6/include/GL/glu.h" ]; then
GLU_CFLAGS="-I/usr/X11R6/include"
fi;
GLU_LIBS="${GLU_LIBS} -lGLU"
fi;
cat << EOT > conftest.c
#ifdef __APPLE__
#include <OpenGL/gl.h>
#include <OpenGL/glu.h>
#else
#include <GL/gl.h>
#include <GL/glu.h>
#endif
int main(int argc, char *argv[]) {
	GLUquadric *qd;
	qd = gluNewQuadric();
	return (0);
}

EOT
echo "$CC $CFLAGS $TEST_CFLAGS ${OPENGL_CFLAGS} ${GLU_CFLAGS} -o conftest conftest.c ${OPENGL_LIBS} ${GLU_LIBS} ${MATH_LIBS}" >>config.log
$CC $CFLAGS $TEST_CFLAGS ${OPENGL_CFLAGS} ${GLU_CFLAGS} -o conftest conftest.c ${OPENGL_LIBS} ${GLU_LIBS} ${MATH_LIBS} 2>>config.log
if [ $? == 0 ]; then
echo "yes"
echo "yes" >> config.log
compile="ok"
HAVE_GLU="yes"
echo "HAVE_GLU=$HAVE_GLU" >> Makefile.config
echo "#ifndef HAVE_GLU" > config/have_glu.h
echo "#define HAVE_GLU \"$HAVE_GLU\"" >> config/have_glu.h
echo "#endif" >> config/have_glu.h
else
echo "no"
echo "no" >> config.log
compile="failed"
HAVE_GLU="no"
echo "HAVE_GLU=$HAVE_GLU" >> Makefile.config
echo "#undef HAVE_GLU" > config/have_glu.h
fi;
rm -f conftest conftest.c
if [ "${HAVE_GLU}" = "yes" ]; then
echo "GLU_CFLAGS=$GLU_CFLAGS" >> Makefile.config
echo "GLU_LIBS=$GLU_LIBS" >> Makefile.config
echo "#ifndef GLU_CFLAGS" > config/glu_cflags.h
echo "#define GLU_CFLAGS \"$GLU_CFLAGS\"" >> config/glu_cflags.h
echo "#endif" >> config/glu_cflags.h
echo "#ifndef GLU_LIBS" > config/glu_libs.h
echo "#define GLU_LIBS \"$GLU_LIBS\"" >> config/glu_libs.h
echo "#endif" >> config/glu_libs.h
else
echo "#undef GLU_CFLAGS" > config/glu_cflags.h
echo "#undef GLU_LIBS" > config/glu_libs.h
fi;
	if [ "${HAVE_OPENGL}" = "yes" ]
 then
SDL_CFLAGS="$SDL_CFLAGS $OPENGL_CFLAGS $GLU_CFLAGS"
echo "SDL_CFLAGS=$SDL_CFLAGS" >> Makefile.config
	else
		if [ "${with_gl}" = "yes" ]
 then
			echo "*"
			echo "* --with-gl was requested, but OpenGL was not"
			echo "* found on this system."
			echo "*"
			exit 1
		else
echo "#undef HAVE_OPENGL" > config/have_opengl.h
echo "#undef HAVE_GLU" > config/have_glu.h
		fi
	fi
else
echo "#undef HAVE_OPENGL" > config/have_opengl.h
echo "#undef HAVE_GLU" > config/have_glu.h
fi
if [ "${with_jpeg}" != "no" ]
 then
echo -n "checking for libjpeg (ftp://ftp.uu.net/graphics/jpeg/)..."
echo -n "checking for libjpeg (ftp://ftp.uu.net/graphics/jpeg/)..." >> config.log
JPEG_CFLAGS=""
if [ -f "/usr/local/include/jpeglib.h" ]; then
JPEG_CFLAGS="-I/usr/local/include"
JPEG_LIBS="-L/usr/local/lib -ljpeg"
fi;
if [ -f "/usr/X11R6/include/jpeglib.h" ]; then
JPEG_CFLAGS="-I/usr/X11R6/include"
JPEG_LIBS="-L/usr/X11R6/lib -ljpeg"
fi;
if [ -f "/usr/include/jpeglib.h" ]; then
JPEG_CFLAGS="-I/usr/include"
JPEG_LIBS="-L/usr/lib -ljpeg"
fi;
if [ -f "/opt/local/include/jpeglib.h" ]; then
JPEG_CFLAGS="-I/opt/local/include"
JPEG_LIBS="-L/opt/local/lib -ljpeg"
fi;
if [ -f "/opt/include/jpeglib.h" ]; then
JPEG_CFLAGS="-I/opt/include"
JPEG_LIBS="-L/opt/lib -ljpeg"
fi;
if [ "${JPEG_CFLAGS}" != "" ]; then
echo "ok"
echo "ok" >> config.log
echo -n "checking whether libjpeg works..."
echo -n "checking whether libjpeg works..." >> config.log
cat << EOT > conftest.c
#include <stdio.h>
#include <jpeglib.h>

struct jpeg_error_mgr		jerr;
struct jpeg_compress_struct	jcomp;

int
main(int argc, char *argv[])
{
	jcomp.err = jpeg_std_error(&jerr);

	jpeg_create_compress(&jcomp);
	jcomp.image_width = 32;
	jcomp.image_height = 32;
	jcomp.input_components = 3;
	jcomp.in_color_space = JCS_RGB;

	jpeg_set_defaults(&jcomp);
	jpeg_set_quality(&jcomp, 75, TRUE);

	jpeg_destroy_compress(&jcomp);
	return (0);
}

EOT
echo "$CC $CFLAGS $TEST_CFLAGS ${JPEG_CFLAGS} -o conftest conftest.c ${JPEG_LIBS}" >>config.log
$CC $CFLAGS $TEST_CFLAGS ${JPEG_CFLAGS} -o conftest conftest.c ${JPEG_LIBS} 2>>config.log
if [ $? == 0 ]; then
echo "yes"
echo "yes" >> config.log
compile="ok"
HAVE_JPEG="yes"
echo "HAVE_JPEG=$HAVE_JPEG" >> Makefile.config
echo "#ifndef HAVE_JPEG" > config/have_jpeg.h
echo "#define HAVE_JPEG \"$HAVE_JPEG\"" >> config/have_jpeg.h
echo "#endif" >> config/have_jpeg.h
else
echo "no"
echo "no" >> config.log
compile="failed"
HAVE_JPEG="no"
echo "HAVE_JPEG=$HAVE_JPEG" >> Makefile.config
echo "#undef HAVE_JPEG" > config/have_jpeg.h
fi;
rm -f conftest conftest.c
if [ "${HAVE_JPEG}" != "" ]; then
echo "JPEG_CFLAGS=$JPEG_CFLAGS" >> Makefile.config
echo "JPEG_LIBS=$JPEG_LIBS" >> Makefile.config
echo "#ifndef JPEG_CFLAGS" > config/jpeg_cflags.h
echo "#define JPEG_CFLAGS \"$JPEG_CFLAGS\"" >> config/jpeg_cflags.h
echo "#endif" >> config/jpeg_cflags.h
echo "#ifndef JPEG_LIBS" > config/jpeg_libs.h
echo "#define JPEG_LIBS \"$JPEG_LIBS\"" >> config/jpeg_libs.h
echo "#endif" >> config/jpeg_libs.h
else
echo "#undef JPEG_CFLAGS" > config/jpeg_cflags.h
echo "#undef JPEG_LIBS" > config/jpeg_libs.h
fi;
else
echo "#undef HAVE_JPEG" > config/have_jpeg.h
echo "no"
echo "no" >> config.log
fi;
	if [ "${HAVE_JPEG}" != "yes" ]
 then
		if [ "${with_jpeg}" = "yes" ]
 then
			echo "*"
			echo "* --with-jpeg was requested, but libjpeg was not"
			echo "* found on this system."
			echo "*"
			exit 1
		else
echo "#undef HAVE_JPEG" > config/have_jpeg.h
		fi
	fi
else
echo "#undef HAVE_JPEG" > config/have_jpeg.h
fi
if [ "${with_ode}" != "no" ]
 then
echo -n "checking for ODE (http://www.ode.org/)..."
echo -n "checking for ODE (http://www.ode.org/)..." >> config.log
ODE_VERSION=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/ode-config" ]; then
		ODE_VERSION=`${path}/ode-config --version`
	fi
done
ODE_CFLAGS=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/ode-config" ]; then
		ODE_CFLAGS=`${path}/ode-config --cflags`
	fi
done
ODE_LIBS=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/ode-config" ]; then
		ODE_LIBS=`${path}/ode-config --libs`
	fi
done
if [ "${ODE_VERSION}" != "" ]; then
echo "yes"
echo "yes" >> config.log
echo -n "checking whether ODE works..."
echo -n "checking whether ODE works..." >> config.log
cat << EOT > conftest.c
#include <ode/ode.h>

int main(int argc, char *argv[]) {
	dWorldID world;
	dJointGroupID jgroup;

	world = dWorldCreate();
	jgroup = dJointGroupCreate(10000);
	dWorldSetGravity(world, 0, 0, -0.5);

	dJointGroupDestroy(jgroup);
	dWorldDestroy(world);
	return (0);
}

EOT
echo "$CC $CFLAGS $TEST_CFLAGS ${ODE_CFLAGS} -o conftest conftest.c ${ODE_LIBS}" >>config.log
$CC $CFLAGS $TEST_CFLAGS ${ODE_CFLAGS} -o conftest conftest.c ${ODE_LIBS} 2>>config.log
if [ $? == 0 ]; then
echo "yes"
echo "yes" >> config.log
compile="ok"
HAVE_ODE="yes"
echo "HAVE_ODE=$HAVE_ODE" >> Makefile.config
echo "#ifndef HAVE_ODE" > config/have_ode.h
echo "#define HAVE_ODE \"$HAVE_ODE\"" >> config/have_ode.h
echo "#endif" >> config/have_ode.h
else
echo "no"
echo "no" >> config.log
compile="failed"
HAVE_ODE="no"
echo "HAVE_ODE=$HAVE_ODE" >> Makefile.config
echo "#undef HAVE_ODE" > config/have_ode.h
fi;
rm -f conftest conftest.c
if [ "${HAVE_ODE}" != "no" ]; then
echo "ODE_CFLAGS=$ODE_CFLAGS" >> Makefile.config
echo "ODE_LIBS=$ODE_LIBS" >> Makefile.config
echo "#ifndef ODE_CFLAGS" > config/ode_cflags.h
echo "#define ODE_CFLAGS \"$ODE_CFLAGS\"" >> config/ode_cflags.h
echo "#endif" >> config/ode_cflags.h
echo "#ifndef ODE_LIBS" > config/ode_libs.h
echo "#define ODE_LIBS \"$ODE_LIBS\"" >> config/ode_libs.h
echo "#endif" >> config/ode_libs.h
fi;
else
echo "no"
echo "no" >> config.log
echo "#undef HAVE_ODE" > config/have_ode.h
fi;
	if [ "${HAVE_ODE}" != "yes" ]
 then
		if [ "${with_ode}" = "yes" ]
 then
			echo "*"
			echo "* --with-ode was requested, but ODE was not"
			echo "* found on this system."
			echo "*"
			exit 1
		else
echo "#undef HAVE_ODE" > config/have_ode.h
		fi
	fi
else
echo "#undef HAVE_ODE" > config/have_ode.h
fi
if [ "${with_cg}" != "no" ]
 then
echo -n "checking for Cg (http://developer.nvidia.com/object/cg_toolkit.html)..."
echo -n "checking for Cg (http://developer.nvidia.com/object/cg_toolkit.html)..." >> config.log
CG_CFLAGS=""
CG_LIBS=""
if [ -d "/usr/include/Cg" ]; then
CG_CFLAGS="-I/usr/include"
fi;
if [ -d "/usr/local/include/Cg" ]; then
CG_CFLAGS="-I/usr/local/include"
fi;
if [ -d "/usr/Cg/include/Cg" ]; then
CG_CFLAGS="-I/usr/Cg/include"
fi;
if [ -d "/usr/local/Cg/include/Cg" ]; then
CG_CFLAGS="-I/usr/local/Cg/include"
fi;
if [ -d "/usr/X11R6/include/Cg" ]; then
CG_CFLAGS="-I/usr/X11R6/include"
fi;
if [ -d "/usr/X11R6/Cg/include/Cg" ]; then
CG_CFLAGS="-I/usr/X11R6/Cg/include"
fi;
if [ "$SYSTEM" = "Darwin" ]; then
CG_LIBS="-F/System/Library/Frameworks -framework Cg"
elif [ "$SYSTEM" = "Linux" ]; then
if [ "$MACHINE" = "x86_64" ]; then
CG_LIBS="-L/usr/X11R6/lib64 -L/usr/lib64"
else
CG_LIBS="-L/usr/X11R6/lib"
fi;
CG_LIBS="${CG_LIBS} -lCgGL -lCg -lstdc++"
else
CG_LIBS="-lCgGL -lCg -lstdc++"
fi;
cat << EOT > conftest.c
#include <Cg/cg.h>
#include <Cg/cgGL.h>

CGcontext context;
CGeffect effect;
CGtechnique technique;

int main(int argc, char *argv[]) {
	context = cgCreateContext();
	return (0);
}

EOT
echo "$CC $CFLAGS $TEST_CFLAGS ${CG_CFLAGS} ${OPENGL_CFLAGS} ${PTHREADS_CFLAGS} -o conftest conftest.c ${CG_LIBS} ${OPENGL_LIBS} ${PTHREADS_LIBS}" >>config.log
$CC $CFLAGS $TEST_CFLAGS ${CG_CFLAGS} ${OPENGL_CFLAGS} ${PTHREADS_CFLAGS} -o conftest conftest.c ${CG_LIBS} ${OPENGL_LIBS} ${PTHREADS_LIBS} 2>>config.log
if [ $? == 0 ]; then
echo "yes"
echo "yes" >> config.log
compile="ok"
HAVE_CG="yes"
echo "HAVE_CG=$HAVE_CG" >> Makefile.config
echo "#ifndef HAVE_CG" > config/have_cg.h
echo "#define HAVE_CG \"$HAVE_CG\"" >> config/have_cg.h
echo "#endif" >> config/have_cg.h
else
echo "no"
echo "no" >> config.log
compile="failed"
HAVE_CG="no"
echo "HAVE_CG=$HAVE_CG" >> Makefile.config
echo "#undef HAVE_CG" > config/have_cg.h
fi;
rm -f conftest conftest.c
if [ "${HAVE_CG}" = "yes" ]; then
echo "CG_CFLAGS=$CG_CFLAGS" >> Makefile.config
echo "CG_LIBS=$CG_LIBS" >> Makefile.config
echo "#ifndef CG_CFLAGS" > config/cg_cflags.h
echo "#define CG_CFLAGS \"$CG_CFLAGS\"" >> config/cg_cflags.h
echo "#endif" >> config/cg_cflags.h
echo "#ifndef CG_LIBS" > config/cg_libs.h
echo "#define CG_LIBS \"$CG_LIBS\"" >> config/cg_libs.h
echo "#endif" >> config/cg_libs.h
fi;
	if [ "${HAVE_CG}" != "yes" ]
 then
		if [ "${with_cg}" = "yes" ]
 then
			echo "*"
			echo "* --with-cg was requested, but Cg was not"
			echo "* found on this system."
			echo "*"
			exit 1
		else
echo "#undef HAVE_CG" > config/have_cg.h
		fi
	fi
else
echo "#undef HAVE_CG" > config/have_cg.h
fi
if [ "${with_sse}" = "yes" ]
 then
echo -n "checking for SSE extensions..."
echo -n "checking for SSE extensions..." >> config.log
SSE_CFLAGS="-msse"
cat << EOT > conftest.c
#include <xmmintrin.h>
#include <stdio.h>

#define MAXERR 1e-4

typedef union vec {
	float v[4];
	__m128 m128;
	struct { float x, y, z, pad; };
} Vector __attribute__ ((aligned(16)));

const float testVals[4][7] = {
	{ 0.076003,0.559770,0.163680, 1.0,	0.076003,0.559770,0.163680 },
	{ 0.076003,0.559770,0.163680, 0.20485,	0.015569,0.114667,0.033529 },
	{ 0.668390,0.929890,0.382710, 1.0,	0.668390,0.929890,0.382710 },
	{ 0.668390,0.929890,0.382710, 0.95831,	0.640530,0.891120,0.366760 },
};

static Vector
Scale(Vector a, float c)
{
	Vector b;
	__m128 v;

	v = _mm_set1_ps(c);
	b.m128 = _mm_mul_ps(a.m128, v);
	return (b);
}

int
main(int argc, char *argv[])
{
	Vector a, b;
	float dx, dy, dz;
	int i, j;

	for (i = 0; i < 10000; i++) {
		for (j = 0; j < 4; j++) {
			a.x = testVals[j][0];
			a.y = testVals[j][1];
			a.z = testVals[j][2];
			b = Scale(a, testVals[j][3]);
			dx = b.x - testVals[j][4];
			dy = b.y - testVals[j][5];
			dz = b.z - testVals[j][6];
			if ((dx > 0.0 && dx >  MAXERR) ||
			    (dx < 0.0 && dx < -MAXERR) ||
			    (dy > 0.0 && dy >  MAXERR) ||
			    (dy < 0.0 && dz < -MAXERR) ||
			    (dz > 0.0 && dz >  MAXERR) ||
			    (dz < 0.0 && dz < -MAXERR)) {
				printf("results inaccurate [%f,%f,%f]\n",
				    dx, dy, dz);
				return (1);
			}
		}
	}
	return (0);
}

EOT
echo "$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} ${SSE_CFLAGS} -o conftest conftest.c " >>config.log
$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} ${SSE_CFLAGS} -o conftest conftest.c  2>>config.log
if [ $? != 0 ]; then
echo "no (compile failed)"
echo "no (compile failed)" >> config.log
compile="failed"
HAVE_SSE="no"
echo "HAVE_SSE=$HAVE_SSE" >> Makefile.config
echo "#undef HAVE_SSE" > config/have_sse.h
else
compile="ok"
./conftest >> config.log
if [ $? == 0 ]; then
echo "yes"
echo "yes" >> config.log
HAVE_SSE="yes"
echo "HAVE_SSE=$HAVE_SSE" >> Makefile.config
echo "#ifndef HAVE_SSE" > config/have_sse.h
echo "#define HAVE_SSE \"$HAVE_SSE\"" >> config/have_sse.h
echo "#endif" >> config/have_sse.h
else
echo "no (exec failed)"
echo "no (exec failed)" >> config.log
HAVE_SSE="no"
echo "HAVE_SSE=$HAVE_SSE" >> Makefile.config
echo "#undef HAVE_SSE" > config/have_sse.h
fi;
fi;
rm -f conftest conftest.c
if [ "${HAVE_SSE}" = "yes" ]; then
echo "#ifndef SSE_CFLAGS" > config/sse_cflags.h
echo "#define SSE_CFLAGS \"$SSE_CFLAGS\"" >> config/sse_cflags.h
echo "#endif" >> config/sse_cflags.h
else
echo "#undef SSE_CFLAGS" > config/sse_cflags.h
SSE_CFLAGS=""
fi;
echo "SSE_CFLAGS=$SSE_CFLAGS" >> Makefile.config
echo -n "checking for SSE2 extensions..."
echo -n "checking for SSE2 extensions..." >> config.log
SSE2_CFLAGS="-msse2"
cat << EOT > conftest.c
#include <emmintrin.h>

int
main(int argc, char *argv[])
{
	double a[4] __attribute__ ((aligned(16)));
	double b[4] __attribute__ ((aligned(16)));
	double rv;
	__m128d vec1, vec2;

	vec1 = _mm_load_pd(a);
	vec2 = _mm_load_pd(b);
	vec1 = _mm_xor_pd(vec1, vec2);
	_mm_store_sd(&rv, vec1);
	return (0);
}

EOT
echo "$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} ${SSE2_CFLAGS} -o conftest conftest.c " >>config.log
$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} ${SSE2_CFLAGS} -o conftest conftest.c  2>>config.log
if [ $? != 0 ]; then
echo "no (compile failed)"
echo "no (compile failed)" >> config.log
compile="failed"
HAVE_SSE2="no"
echo "HAVE_SSE2=$HAVE_SSE2" >> Makefile.config
echo "#undef HAVE_SSE2" > config/have_sse2.h
else
compile="ok"
./conftest >> config.log
if [ $? == 0 ]; then
echo "yes"
echo "yes" >> config.log
HAVE_SSE2="yes"
echo "HAVE_SSE2=$HAVE_SSE2" >> Makefile.config
echo "#ifndef HAVE_SSE2" > config/have_sse2.h
echo "#define HAVE_SSE2 \"$HAVE_SSE2\"" >> config/have_sse2.h
echo "#endif" >> config/have_sse2.h
else
echo "no (exec failed)"
echo "no (exec failed)" >> config.log
HAVE_SSE2="no"
echo "HAVE_SSE2=$HAVE_SSE2" >> Makefile.config
echo "#undef HAVE_SSE2" > config/have_sse2.h
fi;
fi;
rm -f conftest conftest.c
if [ "${HAVE_SSE2}" = "yes" ]; then
echo "#ifndef SSE2_CFLAGS" > config/sse2_cflags.h
echo "#define SSE2_CFLAGS \"$SSE2_CFLAGS\"" >> config/sse2_cflags.h
echo "#endif" >> config/sse2_cflags.h
else
echo "#undef SSE2_CFLAGS" > config/sse2_cflags.h
SSE2_CFLAGS=""
fi;
echo "SSE2_CFLAGS=$SSE2_CFLAGS" >> Makefile.config
echo -n "checking for SSE3 extensions..."
echo -n "checking for SSE3 extensions..." >> config.log
SSE3_CFLAGS="-msse3"
cat << EOT > conftest.c
#include <pmmintrin.h>

int
main(int argc, char *argv[])
{
	float a[4] __attribute__ ((aligned(16)));
	float b[4] __attribute__ ((aligned(16)));
	__m128 vec1, vec2;
	float rv;

	vec1 = _mm_load_ps(a);
	vec2 = _mm_load_ps(b);
	vec1 = _mm_mul_ps(vec1, vec2);
	vec1 = _mm_hadd_ps(vec1, vec1);
	vec1 = _mm_hadd_ps(vec1, vec1);
	_mm_store_ss(&rv, vec1);
	return (0);
}

EOT
echo "$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} ${SSE3_CFLAGS} -o conftest conftest.c " >>config.log
$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} ${SSE3_CFLAGS} -o conftest conftest.c  2>>config.log
if [ $? != 0 ]; then
echo "no (compile failed)"
echo "no (compile failed)" >> config.log
compile="failed"
HAVE_SSE3="no"
echo "HAVE_SSE3=$HAVE_SSE3" >> Makefile.config
echo "#undef HAVE_SSE3" > config/have_sse3.h
else
compile="ok"
./conftest >> config.log
if [ $? == 0 ]; then
echo "yes"
echo "yes" >> config.log
HAVE_SSE3="yes"
echo "HAVE_SSE3=$HAVE_SSE3" >> Makefile.config
echo "#ifndef HAVE_SSE3" > config/have_sse3.h
echo "#define HAVE_SSE3 \"$HAVE_SSE3\"" >> config/have_sse3.h
echo "#endif" >> config/have_sse3.h
else
echo "no (exec failed)"
echo "no (exec failed)" >> config.log
HAVE_SSE3="no"
echo "HAVE_SSE3=$HAVE_SSE3" >> Makefile.config
echo "#undef HAVE_SSE3" > config/have_sse3.h
fi;
fi;
rm -f conftest conftest.c
if [ "${HAVE_SSE3}" = "yes" ]; then
echo "#ifndef SSE3_CFLAGS" > config/sse3_cflags.h
echo "#define SSE3_CFLAGS \"$SSE3_CFLAGS\"" >> config/sse3_cflags.h
echo "#endif" >> config/sse3_cflags.h
else
echo "#undef SSE3_CFLAGS" > config/sse3_cflags.h
SSE3_CFLAGS=""
fi;
echo "SSE3_CFLAGS=$SSE3_CFLAGS" >> Makefile.config
	if [ "${HAVE_SSE}" != "yes" ]
 then
		if [ "${with_sse}" = "yes" ]
 then
			echo "*"
			echo "* --with-sse was requested, but SSE intrinsics"
			echo "* not supported by compiler"
			echo "*"
			exit 1
		else
echo "#undef HAVE_SSE" > config/have_sse.h
echo "#undef INLINE_SSE" > config/inline_sse.h
echo "#undef INLINE_SSE2" > config/inline_sse2.h
echo "#undef INLINE_SSE3" > config/inline_sse3.h
		fi
	else
		if [ "${with_sse_inline}" = "yes" ]
 then
INLINE_SSE="1"
echo "#ifndef INLINE_SSE" > config/inline_sse.h
echo "#define INLINE_SSE \"$INLINE_SSE\"" >> config/inline_sse.h
echo "#endif" >> config/inline_sse.h
		else
echo "#undef INLINE_SSE" > config/inline_sse.h
		fi
		if [ "${HAVE_SSE2}" = "yes" ]
 then
			if [ "${with_sse2_inline}" = "yes" ]
 then
INLINE_SSE2="1"
echo "#ifndef INLINE_SSE2" > config/inline_sse2.h
echo "#define INLINE_SSE2 \"$INLINE_SSE2\"" >> config/inline_sse2.h
echo "#endif" >> config/inline_sse2.h
			else
echo "#undef INLINE_SSE2" > config/inline_sse2.h
			fi
		else
echo "#undef INLINE_SSE2" > config/inline_sse2.h
		fi
		if [ "${HAVE_SSE3}" = "yes" ]
 then
			if [ "${with_sse3_inline}" = "yes" ]
 then
INLINE_SSE3="1"
echo "#ifndef INLINE_SSE3" > config/inline_sse3.h
echo "#define INLINE_SSE3 \"$INLINE_SSE3\"" >> config/inline_sse3.h
echo "#endif" >> config/inline_sse3.h
			else
echo "#undef INLINE_SSE3" > config/inline_sse3.h
			fi
		else
echo "#undef INLINE_SSE3" > config/inline_sse3.h
		fi
	fi
else
echo "#undef HAVE_SSE" > config/have_sse.h
echo "#undef HAVE_SSE2" > config/have_sse2.h
echo "#undef HAVE_SSE3" > config/have_sse3.h
echo "#undef INLINE_SSE" > config/inline_sse.h
echo "#undef INLINE_SSE2" > config/inline_sse2.h
echo "#undef INLINE_SSE3" > config/inline_sse3.h
fi
if [ "${with_altivec}" = "yes" ]
 then
echo -n "checking for AltiVec (with <altivec.h>)..."
echo -n "checking for AltiVec (with <altivec.h>)..." >> config.log
if [ "$SYSTEM" = "Darwin" ]; then
ALTIVEC_CFLAGS="-faltivec -maltivec"
else
ALTIVEC_CFLAGS="-mabi=altivec -maltivec"
fi;
cat << EOT > conftest.c
#include <altivec.h>
float a[4] = { 1,2,3,4 };
float b[4] = { 5,6,7,8 };
float c[4];

int
main(int argc, char *argv[])
{
	vector float *va = (vector float *)a;
	vector float *vb = (vector float *)b;
	vector float *vc = (vector float *)c;

	*vc = vec_add(*va, *vb);
	return (0);
}

EOT
echo "$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} ${ALTIVEC_CFLAGS} -o conftest conftest.c " >>config.log
$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} ${ALTIVEC_CFLAGS} -o conftest conftest.c  2>>config.log
if [ $? == 0 ]; then
echo "yes"
echo "yes" >> config.log
compile="ok"
HAVE_ALTIVEC="yes"
echo "HAVE_ALTIVEC=$HAVE_ALTIVEC" >> Makefile.config
echo "#ifndef HAVE_ALTIVEC" > config/have_altivec.h
echo "#define HAVE_ALTIVEC \"$HAVE_ALTIVEC\"" >> config/have_altivec.h
echo "#endif" >> config/have_altivec.h
else
echo "no"
echo "no" >> config.log
compile="failed"
HAVE_ALTIVEC="no"
echo "HAVE_ALTIVEC=$HAVE_ALTIVEC" >> Makefile.config
echo "#undef HAVE_ALTIVEC" > config/have_altivec.h
fi;
rm -f conftest conftest.c
if [ "${HAVE_ALTIVEC}" = "yes" ]; then
echo "ALTIVEC_CFLAGS=$ALTIVEC_CFLAGS" >> Makefile.config
HAVE_ALTIVEC_H=""
echo "#ifndef ALTIVEC_CFLAGS" > config/altivec_cflags.h
echo "#define ALTIVEC_CFLAGS \"$ALTIVEC_CFLAGS\"" >> config/altivec_cflags.h
echo "#endif" >> config/altivec_cflags.h
echo "#ifndef HAVE_ALTIVEC_H" > config/have_altivec_h.h
echo "#define HAVE_ALTIVEC_H \"$HAVE_ALTIVEC_H\"" >> config/have_altivec_h.h
echo "#endif" >> config/have_altivec_h.h
else
echo -n "checking for AltiVec (without <altivec.h>)..."
echo -n "checking for AltiVec (without <altivec.h>)..." >> config.log
cat << EOT > conftest.c
float a[4] = { 1,2,3,4 };
float b[4] = { 5,6,7,8 };
float c[4];

int
main(int argc, char *argv[])
{
	vector float *va = (vector float *)a;
	vector float *vb = (vector float *)b;
	vector float *vc = (vector float *)c;

	*vc = vec_add(*va, *vb);
	return (0);
}

EOT
echo "$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} ${ALTIVEC_CFLAGS} -o conftest conftest.c " >>config.log
$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} ${ALTIVEC_CFLAGS} -o conftest conftest.c  2>>config.log
if [ $? == 0 ]; then
echo "yes"
echo "yes" >> config.log
compile="ok"
HAVE_ALTIVEC="yes"
echo "HAVE_ALTIVEC=$HAVE_ALTIVEC" >> Makefile.config
echo "#ifndef HAVE_ALTIVEC" > config/have_altivec.h
echo "#define HAVE_ALTIVEC \"$HAVE_ALTIVEC\"" >> config/have_altivec.h
echo "#endif" >> config/have_altivec.h
else
echo "no"
echo "no" >> config.log
compile="failed"
HAVE_ALTIVEC="no"
echo "HAVE_ALTIVEC=$HAVE_ALTIVEC" >> Makefile.config
echo "#undef HAVE_ALTIVEC" > config/have_altivec.h
fi;
rm -f conftest conftest.c
if [ "${HAVE_ALTIVEC}" = "yes" ]; then
echo "ALTIVEC_CFLAGS=$ALTIVEC_CFLAGS" >> Makefile.config
echo "#ifndef ALTIVEC_CFLAGS" > config/altivec_cflags.h
echo "#define ALTIVEC_CFLAGS \"$ALTIVEC_CFLAGS\"" >> config/altivec_cflags.h
echo "#endif" >> config/altivec_cflags.h
else
echo "#undef ALTIVEC_CFLAGS" > config/altivec_cflags.h
ALTIVEC_CFLAGS=""
echo "ALTIVEC_CFLAGS=$ALTIVEC_CFLAGS" >> Makefile.config
fi;
echo "#undef HAVE_ALTIVEC_H" > config/have_altivec_h.h
fi;
	if [ "${HAVE_ALTIVEC}" != "yes" ]
 then
		if [ "${with_altivec}" = "yes" ]
 then
			echo "*"
			echo "* --with-altivec was requested, but AltiVec"
			echo "* is not supported by compiler"
			echo "*"
			exit 1
		else
echo "#undef HAVE_ALTIVEC" > config/have_altivec.h
echo "#undef HAVE_ALTIVEC_H" > config/have_altivec_h.h
echo "#undef INLINE_ALTIVEC" > config/inline_altivec.h
		fi
	else
		if [ "${with_altivec_inline}" = "yes" ]
 then
INLINE_ALTIVEC="1"
echo "#ifndef INLINE_ALTIVEC" > config/inline_altivec.h
echo "#define INLINE_ALTIVEC \"$INLINE_ALTIVEC\"" >> config/inline_altivec.h
echo "#endif" >> config/inline_altivec.h
		else
echo "#undef INLINE_ALTIVEC" > config/inline_altivec.h
		fi
	fi
else
echo "#undef HAVE_ALTIVEC" > config/have_altivec.h
echo "#undef HAVE_ALTIVEC_H" > config/have_altivec_h.h
echo "#undef INLINE_ALTIVEC" > config/inline_altivec.h
fi
if [ "${enable_network}" = "yes" ]
 then
echo -n "checking for a getaddrinfo() function..."
echo -n "checking for a getaddrinfo() function..." >> config.log
cat << EOT > conftest.c
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>

int
main(int argc, char *argv[])
{
	struct addrinfo hints, *res0;
	const char *s;
	int rv;

	hints.ai_family = PF_UNSPEC;
	hints.ai_socktype = SOCK_STREAM;
	hints.ai_flags = AI_PASSIVE;
	rv = getaddrinfo("hostname", "port", &hints, &res0);
	s = gai_strerror(rv);
	freeaddrinfo(res0);
	return (0);
}

EOT
compile="ok"
echo "$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c" >>config.log
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_GETADDRINFO="yes"
echo "#ifndef HAVE_GETADDRINFO" > config/have_getaddrinfo.h
echo "#define HAVE_GETADDRINFO \"$HAVE_GETADDRINFO\"" >> config/have_getaddrinfo.h
echo "#endif" >> config/have_getaddrinfo.h
else
echo "no"
echo "no" >> config.log
HAVE_GETADDRINFO="no"
echo "#undef HAVE_GETADDRINFO" > config/have_getaddrinfo.h
fi;
	if [ "${HAVE_GETADDRINFO}" = "yes" ]
 then
NETWORK="1"
echo "#ifndef NETWORK" > config/network.h
echo "#define NETWORK \"$NETWORK\"" >> config/network.h
echo "#endif" >> config/network.h
	else
		if [ "${enable_network}" = "yes" ]
 then
			echo "*"
			echo "* --enable-network was requested, but this system"
			echo "* does not support getaddrinfo()."
			echo "*"
			exit 1
		else
echo "#undef NETWORK" > config/network.h
		fi
	fi
else
echo "#undef NETWORK" > config/network.h
fi
if [ "${enable_server}" = "yes" ]
 then
	if [ "${HAVE_GETADDRINFO}" = "yes" ]
 then
SERVER="1"
echo "#ifndef SERVER" > config/server.h
echo "#define SERVER \"$SERVER\"" >> config/server.h
echo "#endif" >> config/server.h
	else
		if [ "${enable_server}" = "yes" ]
 then
			echo "*"
			echo "* --enable-server was requested, but this system"
			echo "* does not support getaddrinfo()."
			echo "*"
			exit 1
		else
echo "#undef SERVER" > config/server.h
		fi
	fi
else
echo "#undef SERVER" > config/server.h
fi
if [ "${enable_threads}" = "yes" ]
 then
	if [ "${HAVE_PTHREADS}" = "yes" ]
 then
THREADS="1"
echo "#ifndef THREADS" > config/threads.h
echo "#define THREADS \"$THREADS\"" >> config/threads.h
echo "#endif" >> config/threads.h
	else
		echo "*"
		echo "* --enable-threads was requested, but a POSIX threads"
		echo "* library was not found."
		echo "*"
		exit 1
	fi
else
echo "#undef THREADS" > config/threads.h
fi
if [ "${enable_utf8}" != "no" ]
 then
UTF8="1"
echo "#ifndef UTF8" > config/utf8.h
echo "#define UTF8 \"$UTF8\"" >> config/utf8.h
echo "#endif" >> config/utf8.h
else
echo "#undef UTF8" > config/utf8.h
fi
echo "#undef ASTRONOMICAL_UNITS" > config/astronomical_units.h
HISTORICAL_UNITS="1"
echo "#ifndef HISTORICAL_UNITS" > config/historical_units.h
echo "#define HISTORICAL_UNITS \"$HISTORICAL_UNITS\"" >> config/historical_units.h
echo "#endif" >> config/historical_units.h
EDITION="1"
echo "#ifndef EDITION" > config/edition.h
echo "#define EDITION \"$EDITION\"" >> config/edition.h
echo "#endif" >> config/edition.h
if [ "${enable_8bpp}" != "no" ]
 then
VIEW_8BPP="1"
echo "#ifndef VIEW_8BPP" > config/view_8bpp.h
echo "#define VIEW_8BPP \"$VIEW_8BPP\"" >> config/view_8bpp.h
echo "#endif" >> config/view_8bpp.h
else
echo "#undef VIEW_8BPP" > config/view_8bpp.h
fi
if [ "${enable_16bpp}" != "no" ]
 then
VIEW_16BPP="1"
echo "#ifndef VIEW_16BPP" > config/view_16bpp.h
echo "#define VIEW_16BPP \"$VIEW_16BPP\"" >> config/view_16bpp.h
echo "#endif" >> config/view_16bpp.h
else
echo "#undef VIEW_16BPP" > config/view_16bpp.h
fi
if [ "${enable_24bpp}" != "no" ]
 then
VIEW_24BPP="1"
echo "#ifndef VIEW_24BPP" > config/view_24bpp.h
echo "#define VIEW_24BPP \"$VIEW_24BPP\"" >> config/view_24bpp.h
echo "#endif" >> config/view_24bpp.h
else
echo "#undef VIEW_24BPP" > config/view_24bpp.h
fi
if [ "${enable_32bpp}" != "no" ]
 then
VIEW_32BPP="1"
echo "#ifndef VIEW_32BPP" > config/view_32bpp.h
echo "#define VIEW_32BPP \"$VIEW_32BPP\"" >> config/view_32bpp.h
echo "#endif" >> config/view_32bpp.h
else
echo "#undef VIEW_32BPP" > config/view_32bpp.h
fi
echo "Don't forget to run \"make depend\"."
echo "Don't forget to run \"make depend\"." >> config.log
