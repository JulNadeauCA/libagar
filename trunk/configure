#!/bin/sh
#
# Do not edit!
# File generated from configure.in by csoft-mk 2.0.
#
# Copyright (c) 2001, 2002, 2003, 2004 CubeSoft Communications, Inc.
# <http://www.csoft.org>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
# USE OF THIS SOFTWARE EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

optarg=
for arg
do
	case "$arg" in
	-*=*)
	    optarg=`echo "$arg" | sed 's/[-_a-zA-Z0-9]*=//'`
	    ;;
	*)
	    optarg=
	    ;;
	esac

	case "$arg" in
	--prefix=*)
	    prefix=$optarg
	    ;;
	--sysconfdir=*)
	    sysconfdir=$optarg
	    ;;
	--sharedir=*)
	    sharedir=$optarg
	    ;;
	--localedir=*)
	    localedir=$optarg
	    ;;
	--enable-*)
	    option=`echo $arg | sed -e 's/--enable-//' -e 's/=.*//'`
	    option=`echo $option | sed 's/-/_/g'`
	    case "$option" in
	        *=*)
	            eval "enable_${option}='$optarg'"
		    ;;
		*)
	            eval "enable_${option}=yes"
		    ;;
	    esac
	    ;;
	--disable-*)
	    option=`echo $arg | sed -e 's/--disable-//'`;
	    option=`echo $option | sed 's/-/_/g'`
	    eval "enable_${option}=no"
	    ;;
	--with-*)
	    option=`echo $arg | sed -e 's/--with-//' -e 's/=.*//'`
	    option=`echo $option | sed 's/-/_/g'`
	    case "$option" in
	        *=*)
	            eval "with_${option}='$optarg'"
		    ;;
		*)
	            eval "with_${option}=yes"
		    ;;
	    esac
	    ;;
	--without-*)
	    option=`echo $arg | sed -e 's/--without-//'`;
	    option=`echo $option | sed 's/-/_/g'`
	    eval "with_${option}=no"
	    ;;
	--help)
	    help=yes
	    ;;
	--srcdir=*)
	    srcdir=$optarg
	    ;;
	*)
	    echo "invalid argument: $arg"
	    echo "try ./configure --help"
	    exit 1
	    ;;
	esac
done

if [ "${prefix}" != "" ]; then
    PREFIX="$prefix"
else
    PREFIX="/usr/local"
fi

if [ "${srcdir}" != "" ]; then
	echo "concurrent build (source in ${srcdir})"
#	if [ ! -e "${srcdir}" ]; then
#		echo "Cannot find source directory: ${srcdir}"
#		exit 1
#	fi
#	if [ ! -e "${srcdir}/configure.in" ]; then
#		echo "Invalid source directory: ${srcdir}"
#		exit 1
#	fi
#	if [ -e "${srcdir}/config" ]; then
#		echo "Source directory is already configured: ${srcdir}"
#		exit 1
#	fi
	SRC=${srcdir}

	perl ${SRC}/mk/mkconcurrent.pl ${SRC}
	if [ $? != 0 ]; then
		exit 1;
	fi
else
	SRC=`pwd`
fi
if [ "${help}" = "yes" ]; then
echo "Usage: ./configure [args]"
echo "    --prefix                       Installation prefix [/usr/local]"
echo "    --sysconfdir                   System-wide configuration prefix [/etc]"
echo "    --sharedir                     Share prefix [$PREFIX/share]"
echo "    --localedir                    Locale prefix [$PREFIX/share/locale]"
echo "    --srcdir                       Source tree for concurrent build [.]"
echo "    --help                         Display this message"
echo "    --enable-nls                   Native Language Support [no]"
echo "    --with-gettext                 Use gettext tools (msgmerge, ...) [check]"
echo "    --with-manpages                Manual pages (-mdoc) [yes]"
echo "    --with-docs                    Printable docs (-me/tbl/eqn/pic/refer) [no]"
echo "    --enable-debug                 Include debugging code [no]"
echo "    --with-freetype                Use FreeType font engine [default: check]"
echo "    --with-gl                      OpenGL rendering support [default: check]"
echo "    --with-jpeg                    JPEG screenshot support [default: no]"
echo "    --with-libqnet                 Network support [default: check]"
echo "    --enable-edition               Graphical editors [default: yes]"
echo "    --enable-network               Network support [default: no]"
echo "    --enable-threads               Thread safety [default: no]"
echo "    --enable-map                   Enable maps in Agar-Game [default: yes]"
echo "    --enable-utf8                  Unicode text/input support [default: no]"
echo "    --enable-astro-units           Include astronomical units [default: no]"
echo "    --enable-histo-units           Include historical units [default: no]"
echo "    --enable-floating-point        Floating point operations [default: yes]"
echo "    --enable-8bpp                  Support for 8 bpp display [default: yes]"
echo "    --enable-16bpp                 Support for 16 bpp display [default: yes]"
echo "    --enable-24bpp                 Support for 24 bpp display [default: yes]"
echo "    --enable-32bpp                 Support for 32 bpp display [default: yes]"
echo "    --enable-warnings              Suggested compiler warnings [default: no]"
exit 1
fi

MACHINE=`uname -m 2>/dev/null` || MACHINE=unknown
RELEASE=`uname -r 2>/dev/null` || RELEASE=unknown
SYSTEM=`uname -s 2>/dev/null` || SYSTEM=unknown
HOST="$SYSTEM-$RELEASE-$MACHINE"
echo "Host: $HOST"

echo "# File generated by csoft-mk 2.0." > Makefile.config
echo "Machine: $MACHINE" > config.log
echo "Release: $RELEASE" >> config.log
echo "System: $SYSTEM" >> config.log
mkdir config 1>/dev/null 2>&1

if [ "${with_manpages}" = "no" ]; then
    echo "NOMAN=yes" >> Makefile.config
fi
if [ "${with_docs}" = "no" ]; then
    echo "NODOC=yes" >> Makefile.config
fi
if [ "${enable_debug}" = "yes" ]; then
	echo "LDFLAGS+=-g" >> Makefile.config
	echo "#ifndef DEBUG" > config/debug.h
	echo "#define DEBUG 1" >> config/debug.h
	echo "#endif /* DEBUG */" >> config/debug.h
else
	echo "#undef DEBUG" > config/debug.h
fi

if [ "${enable_nls}" = "yes" ]; then
	ENABLE_NLS="yes"
	echo "#ifndef ENABLE_NLS" > config/enable_nls.h
	echo "#define ENABLE_NLS 1" >> config/enable_nls.h
	echo "#endif /* ENABLE_NLS */" >> config/enable_nls.h
	msgfmt=""
	for path in `echo $PATH | sed 's/:/ /g'`; do
		if [ -x "${path}/msgfmt" ]; then
			msgfmt=${path}/msgfmt
		fi
	done
	if [ "${msgfmt}" != "" ]; then
		HAVE_GETTEXT="yes"
	else
		HAVE_GETTEXT="no"
	fi
else
	ENABLE_NLS="no"
	HAVE_GETTEXT="no"
	echo "#undef ENABLE_NLS" > config/enable_nls.h
fi
echo "ENABLE_NLS=${ENABLE_NLS}" >> Makefile.config
echo "HAVE_GETTEXT=${HAVE_GETTEXT}" >> Makefile.config

echo "PREFIX?=${PREFIX}" >> Makefile.config
echo "#ifndef PREFIX" > config/prefix.h
echo "#define PREFIX \"${PREFIX}\"" >> config/prefix.h
echo "#endif /* PREFIX */" >> config/prefix.h

if [ "${sharedir}" != "" ]; then
	echo "SHAREDIR=${sharedir}" >> Makefile.config
	echo "#ifndef SHAREDIR" > config/sharedir.h
	echo "#define SHAREDIR \"${sharedir}\"" >> config/sharedir.h
	echo "#endif /* SHAREDIR */" >> config/sharedir.h
	SHAREDIR="${sharedir}"
else
	echo "SHAREDIR=\${PREFIX}/share" >> Makefile.config
	echo "#ifndef SHAREDIR" > config/sharedir.h
	echo "#define SHAREDIR \"${SHAREDIR}\"" >> config/sharedir.h
	echo "#endif /* SHAREDIR */" >> config/sharedir.h
	SHAREDIR="${PREFIX}/share"
fi

if [ "${localedir}" != "" ]; then
	LOCALEDIR="${localedir}"
	echo "LOCALEDIR=${LOCALEDIR}" >> Makefile.config
	echo "#ifndef LOCALEDIR" > config/localedir.h
	echo "#define LOCALEDIR \"${LOCALEDIR}\"" >> config/localedir.h
	echo "#endif /* LOCALEDIR */" >> config/localedir.h
else
	LOCALEDIR="${SHAREDIR}/locale"
	echo "LOCALEDIR=\${SHAREDIR}/locale" >> Makefile.config
	echo "#ifndef LOCALEDIR" > config/localedir.h
	echo "#define LOCALEDIR \"${LOCALEDIR}\"" >> config/localedir.h
	echo "#endif /* LOCALEDIR */" >> config/localedir.h
fi

if [ "${sysconfdir}" != "" ]; then
	SYSCONFDIR="${sysconfdir}"
	echo "SYSCONFDIR=${sysconfdir}" >> Makefile.config
	echo "#ifndef SYSCONFDIR" > config/sysconfdir.h
	echo "#define SYSCONFDIR \"${SYSCONFDIR}\"" >> config/sysconfdir.h
	echo "#endif /* SYSCONFDIR */" >> config/sysconfdir.h
else
	SYSCONFDIR="${PREFIX}/etc"
	echo "SYSCONFDIR=\${PREFIX}/etc" >> Makefile.config
	echo "#ifndef SYSCONFDIR" > config/sysconfdir.h
	echo "#define SYSCONFDIR \"${SYSCONFDIR}\"" >> config/sysconfdir.h
	echo "#endif /* SYSCONFDIR */" >> config/sysconfdir.h
fi

VERSION="\"1.0rc1\""
echo "#ifndef VERSION" > config/version.h
echo "#define VERSION" $VERSION >> config/version.h
echo "#endif" >> config/version.h
SHAREDIR="\${PREFIX}/share/agar"
echo "SHAREDIR=$SHAREDIR" >> Makefile.config
SHAREDIR="\"$PREFIX/share/agar\""
echo "#ifndef SHAREDIR" > config/sharedir.h
echo "#define SHAREDIR" $SHAREDIR >> config/sharedir.h
echo "#endif" >> config/sharedir.h
LOCALEDIR="\${PREFIX}/share/agar/locale"
echo "LOCALEDIR=$LOCALEDIR" >> Makefile.config
LOCALEDIR="\"$PREFIX/share/agar/locale\""
echo "#ifndef LOCALEDIR" > config/localedir.h
echo "#define LOCALEDIR" $LOCALEDIR >> config/localedir.h
echo "#endif" >> config/localedir.h
TTFDIR="\${PREFIX}/share/agar/fonts"
echo "TTFDIR=$TTFDIR" >> Makefile.config
TTFDIR="\"$PREFIX/share/agar/fonts\""
echo "#ifndef TTFDIR" > config/ttfdir.h
echo "#define TTFDIR" $TTFDIR >> config/ttfdir.h
echo "#endif" >> config/ttfdir.h
LIBDIR="\${PREFIX}/lib"
echo "LIBDIR=$LIBDIR" >> Makefile.config
LIBDIR="\"$PREFIX/lib\""
echo "#ifndef LIBDIR" > config/libdir.h
echo "#define LIBDIR" $LIBDIR >> config/libdir.h
echo "#endif" >> config/libdir.h
INCLDIR="\${PREFIX}/include/agar"
echo "INCLDIR=$INCLDIR" >> Makefile.config
INCLDIR="\"$PREFIX/include/agar\""
echo "#ifndef INCLDIR" > config/incldir.h
echo "#define INCLDIR" $INCLDIR >> config/incldir.h
echo "#endif" >> config/incldir.h
MANDIR="\${PREFIX}/share/agar/man"
echo "MANDIR=$MANDIR" >> Makefile.config
PSDIR="\${PREFIX}/share/agar/ps"
echo "PSDIR=$PSDIR" >> Makefile.config
echo -n "checking for a usable C compiler..."
echo -n "checking for a usable C compiler..." >> config.log
if [ "$CC" = "" ]; then
	for i in `echo $PATH |sed 's/:/ /g'`; do
		if [ -x "${i}/cc" ]; then
			CC="${i}/cc"
		elif [ -x "${i}/gcc" ]; then
			CC="${i}/gcc"
		fi
	done
	if [ "$CC" = "" ]; then
		echo "Could not find a C compiler, try setting CC."
		echo "CC is unset and cc/gcc is not in PATH." >> config.log
		exit 1
	fi
fi

cat << 'EOT' > cc-test.c
int
main(int argc, char *argv[])
{
	return (0);
}
EOT

$CC -o cc-test cc-test.c 2>>config.log
if [ $? != 0 ]; then
    echo "no"
	echo "The test C program failed to compile."
	rm -f cc-test cc-test.c
    exit 1
fi
echo "yes"
rm -f cc-test cc-test.c
TEST_CFLAGS=""
echo -n "checking for compiler warnings..."
echo -n "checking for compiler warnings..." >> config.log
cat << EOT > conftest.c
int main(int argc, char *argv[]) { return (0); }

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o conftest conftest.c  2>>config.log
if [ $? != 0 ]; then
	echo "failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_CC_WARNINGS" > config/have_cc_warnings.h
echo "#define HAVE_CC_WARNINGS" $HAVE_CC_WARNINGS >> config/have_cc_warnings.h
echo "#endif" >> config/have_cc_warnings.h

	HAVE_CC_WARNINGS=yes

	echo "yes"
else
	echo "#undef HAVE_CC_WARNINGS" > config/have_cc_warnings.h

	echo "no"
fi
if [ "${HAVE_CC_WARNINGS}" = "yes" ]; then
TEST_CFLAGS="-Wall -Werror"
fi;
echo -n "checking for floating point types..."
echo -n "checking for floating point types..." >> config.log
cat << EOT > conftest.c
int
main(int argc, char *argv[])
{
	float f = 1.5;
	double d = 2.5;

	f = 0;
	d = 0;
	return (0);
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS  -o conftest conftest.c  2>>config.log
if [ $? != 0 ]; then
	echo "failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_IEEE754" > config/have_ieee754.h
echo "#define HAVE_IEEE754" $HAVE_IEEE754 >> config/have_ieee754.h
echo "#endif" >> config/have_ieee754.h

	HAVE_IEEE754=yes

	echo "yes"
else
	echo "#undef HAVE_IEEE754" > config/have_ieee754.h

	echo "no"
fi
echo -n "checking __bounded__ attribute..."
echo -n "checking __bounded__ attribute..." >> config.log
cat << EOT > conftest.c
void foo(char *, int) __attribute__ ((__bounded__(__string__,1,2)));
void foo(char *a, int c) { }
int main(int argc, char *argv[])
{
	char buf[32];
	foo(buf, sizeof(buf));
	return (0);
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS  -o conftest conftest.c  2>>config.log
if [ $? != 0 ]; then
	echo "failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_BOUNDED_ATTRIBUTE" > config/have_bounded_attribute.h
echo "#define HAVE_BOUNDED_ATTRIBUTE" $HAVE_BOUNDED_ATTRIBUTE >> config/have_bounded_attribute.h
echo "#endif" >> config/have_bounded_attribute.h

	HAVE_BOUNDED_ATTRIBUTE=yes

	echo "yes"
else
	echo "#undef HAVE_BOUNDED_ATTRIBUTE" > config/have_bounded_attribute.h

	echo "no"
fi
echo -n "checking __format__ attribute..."
echo -n "checking __format__ attribute..." >> config.log
cat << EOT > conftest.c
#include <stdarg.h>
void foo1(char *, ...)
     __attribute__((__format__ (printf, 1, 2)));
void foo2(char *, ...)
     __attribute__((__format__ (__printf__, 1, 2)))
     __attribute__((__nonnull__ (1)));
void foo1(char *a, ...) {}
void foo2(char *a, ...) {}
int main(int argc, char *argv[])
{
	foo1("foo %s", "bar");
	foo2("foo %d", 1);
	return (0);
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS  -o conftest conftest.c  2>>config.log
if [ $? != 0 ]; then
	echo "failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_FORMAT_ATTRIBUTE" > config/have_format_attribute.h
echo "#define HAVE_FORMAT_ATTRIBUTE" $HAVE_FORMAT_ATTRIBUTE >> config/have_format_attribute.h
echo "#endif" >> config/have_format_attribute.h

	HAVE_FORMAT_ATTRIBUTE=yes

	echo "yes"
else
	echo "#undef HAVE_FORMAT_ATTRIBUTE" > config/have_format_attribute.h

	echo "no"
fi
echo -n "checking __nonnull__ attribute..."
echo -n "checking __nonnull__ attribute..." >> config.log
cat << EOT > conftest.c
void foo(char *) __attribute__((__nonnull__ (1)));
void foo(char *a) { }
int main(int argc, char *argv[])
{
	foo("foo");
	return (0);
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_NONNULL_ATTRIBUTE" > config/have_nonnull_attribute.h
echo "#define HAVE_NONNULL_ATTRIBUTE" $HAVE_NONNULL_ATTRIBUTE >> config/have_nonnull_attribute.h
echo "#endif" >> config/have_nonnull_attribute.h

	echo "yes"
else
    echo "#undef HAVE_NONNULL_ATTRIBUTE" > config/have_nonnull_attribute.h

	echo "no"
fi
echo -n "checking for long double..."
echo -n "checking for long double..." >> config.log
cat << EOT > conftest.c
int
main(int argc, char *argv[])
{
	long double ld = 0.1;

	ld = 0;
	return (0);
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_LONG_DOUBLE" > config/have_long_double.h
echo "#define HAVE_LONG_DOUBLE" $HAVE_LONG_DOUBLE >> config/have_long_double.h
echo "#endif" >> config/have_long_double.h

	echo "yes"
else
    echo "#undef HAVE_LONG_DOUBLE" > config/have_long_double.h

	echo "no"
fi
echo -n "checking for cygwin environment..."
echo -n "checking for cygwin environment..." >> config.log
cat << EOT > conftest.c
#include <sys/types.h>
#include <sys/stat.h>
#include <windows.h>

int
main(int argc, char *argv[]) {
	struct stat sb;
	DWORD rv;
	rv = GetFileAttributes("foo");
	stat("foo", &sb);
	return (0);
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS -mcygwin -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_CYGWIN" > config/have_cygwin.h
echo "#define HAVE_CYGWIN" $HAVE_CYGWIN >> config/have_cygwin.h
echo "#endif" >> config/have_cygwin.h

	echo "yes"
else
    echo "#undef HAVE_CYGWIN" > config/have_cygwin.h

	echo "no"
fi
echo -n "checking for mingw environment..."
echo -n "checking for mingw environment..." >> config.log
cat << EOT > conftest.c
#include <sys/types.h>
#include <sys/stat.h>
#include <windows.h>

int
main(int argc, char *argv[]) {
	struct stat sb;
	DWORD rv;
	rv = GetFileAttributes("foo");
	stat("foo", &sb);
	return (0);
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS  -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_MINGW" > config/have_mingw.h
echo "#define HAVE_MINGW" $HAVE_MINGW >> config/have_mingw.h
echo "#endif" >> config/have_mingw.h

	echo "yes"
else
    echo "#undef HAVE_MINGW" > config/have_mingw.h

	echo "no"
fi
if [ "${compile}" = "ok" ]; then
	CFLAGS="$CFLAGS -mno-cygwin"
	echo "CFLAGS=$CFLAGS" >> Makefile.config
fi
echo -n "checking for <sys/types.h>..."
echo -n "checking for <sys/types.h>..." >> config.log
cat << EOT > conftest.c
#include <sys/types.h>
int main(int argc, char *argv[]) {
	size_t len = 1;
	ssize_t slen = 1;
	return (len>1?len:slen);
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS  -o conftest conftest.c  2>>config.log
if [ $? != 0 ]; then
	echo "failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_SYS_TYPES_H" > config/have_sys_types_h.h
echo "#define HAVE_SYS_TYPES_H" $HAVE_SYS_TYPES_H >> config/have_sys_types_h.h
echo "#endif" >> config/have_sys_types_h.h

	HAVE_SYS_TYPES_H=yes

	echo "yes"
else
	echo "#undef HAVE_SYS_TYPES_H" > config/have_sys_types_h.h

	echo "no"
fi
echo -n "checking for BSD types..."
echo -n "checking for BSD types..." >> config.log
cat << EOT > conftest.c
#include <stdio.h>
int main(int argc, char *argv[]) {
	u_int foo = 0;
	u_long bar = 0;
	u_char baz = 0;
	return (0);
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS  -o conftest conftest.c  2>>config.log
if [ $? != 0 ]; then
	echo "failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_BSD_TYPES" > config/have_bsd_types.h
echo "#define HAVE_BSD_TYPES" $HAVE_BSD_TYPES >> config/have_bsd_types.h
echo "#endif" >> config/have_bsd_types.h

	HAVE_BSD_TYPES=yes

	echo "yes"
else
	echo "#undef HAVE_BSD_TYPES" > config/have_bsd_types.h

	echo "no"
fi
if [ "${HAVE_BSD_TYPES}" != "yes" ]; then
echo -n "checking whether _BSD_SOURCE is needed..."
echo -n "checking whether _BSD_SOURCE is needed..." >> config.log
cat << EOT > conftest.c
#include <stdio.h>
int main(int argc, char *argv[]) {
	u_int foo = 0;
	u_long bar = 0;
	u_char baz = 0;
	return (0);
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS -D_BSD_SOURCE -o conftest conftest.c  2>>config.log
if [ $? != 0 ]; then
	echo "failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef BSD_SOURCE_NEEDED" > config/bsd_source_needed.h
echo "#define BSD_SOURCE_NEEDED" $BSD_SOURCE_NEEDED >> config/bsd_source_needed.h
echo "#endif" >> config/bsd_source_needed.h

	BSD_SOURCE_NEEDED=yes

	echo "yes"
else
	echo "#undef BSD_SOURCE_NEEDED" > config/bsd_source_needed.h

	echo "no"
fi
if [ "${BSD_SOURCE_NEEDED}" != "yes" ]; then
echo "#undef BSD_SOURCE_NEEDED" > config/bsd_source_needed.h
echo "#ifndef BSD_TYPES_NEEDED" > config/bsd_types_needed.h
echo "#define BSD_TYPES_NEEDED \"$BSD_TYPES_NEEDED\"" >> config/bsd_types_needed.h
echo "#endif" >> config/bsd_types_needed.h
else
CFLAGS="${CFLAGS} -D_BSD_SOURCE"
echo "CFLAGS=$CFLAGS" >> Makefile.config
echo "#undef BSD_TYPES_NEEDED" > config/bsd_types_needed.h
fi;
else
echo "#undef BSD_SOURCE_NEEDED" > config/bsd_source_needed.h
echo "#undef BSD_TYPES_NEEDED" > config/bsd_types_needed.h
fi;
echo -n "checking for BSD-style __progname..."
echo -n "checking for BSD-style __progname..." >> config.log
cat << EOT > conftest.c
#include <stdio.h>
int
main(int argc, char *argv[])
{
	extern char *__progname;
	printf("%s\n", __progname);
	return (0);
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_PROGNAME" > config/have_progname.h
echo "#define HAVE_PROGNAME" $HAVE_PROGNAME >> config/have_progname.h
echo "#endif" >> config/have_progname.h

	echo "yes"
else
    echo "#undef HAVE_PROGNAME" > config/have_progname.h

	echo "no"
fi
echo -n "checking for free(NULL) is a no-op..."
echo -n "checking for free(NULL) is a no-op..." >> config.log
cat << EOT > conftest.c
#include <stdlib.h>
int main(int argc, char *argv[]) {
	free(NULL);
	return (0);
}

EOT
$CC $CFLAGS $TEST_CFLAGS  -o conftest conftest.c  2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
else
	compile="ok"
	./conftest >> config.log
	if [ $? != 0 ]; then
		echo "-> exec failed ($?)" >> config.log
		free_null_noop="no"
	else
		free_null_noop="yes"
	fi
fi
rm -f conftest conftest.c
if [ "${free_null_noop}" = "yes" ]; then
echo "yes"
echo "yes" >> config.log
echo "#ifndef FREE_NULL_IS_A_NOOP" > config/free_null_is_a_noop.h
echo "#define FREE_NULL_IS_A_NOOP \"$FREE_NULL_IS_A_NOOP\"" >> config/free_null_is_a_noop.h
echo "#endif" >> config/free_null_is_a_noop.h
else
echo "no"
echo "no" >> config.log
echo "#undef FREE_NULL_IS_A_NOOP" > config/free_null_is_a_noop.h
fi;
echo -n "checking for the C math library..."
echo -n "checking for the C math library..." >> config.log
MATH_LIBS=-lm
cat << EOT > conftest.c
#include <math.h>

int
main(int argc, char *argv[])
{
	float f = 1.0;
	double d = 1.0;

	d = fabs(d);
	f = fabsf(f);
	return (0);
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} -o conftest conftest.c ${MATH_LIBS} 2>>config.log
if [ $? != 0 ]; then
	echo "failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_MATH" > config/have_math.h
echo "#define HAVE_MATH" $HAVE_MATH >> config/have_math.h
echo "#endif" >> config/have_math.h

	HAVE_MATH=yes

	echo "yes"
else
	echo "#undef HAVE_MATH" > config/have_math.h

	echo "no"
fi
if [ "${HAVE_MATH}" = "yes" ]; then
echo "MATH_LIBS=$MATH_LIBS" >> Makefile.config
echo "#ifndef MATH_LIBS" > config/math_libs.h
echo "#define MATH_LIBS \"$MATH_LIBS\"" >> config/math_libs.h
echo "#endif" >> config/math_libs.h
else
echo "#undef MATH_LIBS" > config/math_libs.h
fi
echo -n "checking for a gethostname() function..."
echo -n "checking for a gethostname() function..." >> config.log
cat << EOT > conftest.c
#include <sys/types.h>
#include <unistd.h>

int
main(int argc, char *argv[])
{
	char hostname[64];
	int rv;

	rv = gethostname(hostname, sizeof(hostname));
	return (0);
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_GETHOSTNAME" > config/have_gethostname.h
echo "#define HAVE_GETHOSTNAME" $HAVE_GETHOSTNAME >> config/have_gethostname.h
echo "#endif" >> config/have_gethostname.h

	echo "yes"
else
    echo "#undef HAVE_GETHOSTNAME" > config/have_gethostname.h

	echo "no"
fi
echo -n "checking for a getpwuid() function..."
echo -n "checking for a getpwuid() function..." >> config.log
cat << EOT > conftest.c
#include <sys/types.h>
#include <pwd.h>

int
main(int argc, char *argv[])
{
	struct passwd *pwd;
	uid_t uid = 0;

	pwd = getpwuid(uid);
	return (0);
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_GETPWUID" > config/have_getpwuid.h
echo "#define HAVE_GETPWUID" $HAVE_GETPWUID >> config/have_getpwuid.h
echo "#endif" >> config/have_getpwuid.h

	echo "yes"
else
    echo "#undef HAVE_GETPWUID" > config/have_getpwuid.h

	echo "no"
fi
echo -n "checking for a getuid() function..."
echo -n "checking for a getuid() function..." >> config.log
cat << EOT > conftest.c
#include <sys/types.h>
#include <unistd.h>

int
main(int argc, char *argv[])
{
	uid_t uid;

	uid = getuid();
	return (0);
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_GETUID" > config/have_getuid.h
echo "#define HAVE_GETUID" $HAVE_GETUID >> config/have_getuid.h
echo "#endif" >> config/have_getuid.h

	echo "yes"
else
    echo "#undef HAVE_GETUID" > config/have_getuid.h

	echo "no"
fi
echo -n "checking for a strsep() function..."
echo -n "checking for a strsep() function..." >> config.log
cat << EOT > conftest.c
#include <string.h>
int
main(int argc, char *argv[])
{
	(void)strsep(NULL, NULL);
	return (0);
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_STRSEP" > config/have_strsep.h
echo "#define HAVE_STRSEP" $HAVE_STRSEP >> config/have_strsep.h
echo "#endif" >> config/have_strsep.h

	echo "yes"
else
    echo "#undef HAVE_STRSEP" > config/have_strsep.h

	echo "no"
fi
echo -n "checking for a getenv() function..."
echo -n "checking for a getenv() function..." >> config.log
cat << EOT > conftest.c
#include <stdlib.h>
int
main(int argc, char *argv[])
{
	(void)getenv("PATH");
	return (0);
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_GETENV" > config/have_getenv.h
echo "#define HAVE_GETENV" $HAVE_GETENV >> config/have_getenv.h
echo "#endif" >> config/have_getenv.h

	echo "yes"
else
    echo "#undef HAVE_GETENV" > config/have_getenv.h

	echo "no"
fi
echo -n "checking for setenv() and unsetenv() functions..."
echo -n "checking for setenv() and unsetenv() functions..." >> config.log
cat << EOT > conftest.c
#include <stdlib.h>
int
main(int argc, char *argv[])
{
	(void)setenv("MANUCONF_SETENV_TEST", "foo", 1);
	unsetenv("MANUCONF_SETENV_TEST");

	return (0);
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_SETENV" > config/have_setenv.h
echo "#define HAVE_SETENV" $HAVE_SETENV >> config/have_setenv.h
echo "#endif" >> config/have_setenv.h

	echo "yes"
else
    echo "#undef HAVE_SETENV" > config/have_setenv.h

	echo "no"
fi
echo -n "checking for a strsep() function..."
echo -n "checking for a strsep() function..." >> config.log
cat << EOT > conftest.c
#include <string.h>
int
main(int argc, char *argv[])
{
	(void)strsep(NULL, NULL);
	return (0);
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_STRSEP" > config/have_strsep.h
echo "#define HAVE_STRSEP" $HAVE_STRSEP >> config/have_strsep.h
echo "#endif" >> config/have_strsep.h

	echo "yes"
else
    echo "#undef HAVE_STRSEP" > config/have_strsep.h

	echo "no"
fi
echo -n "checking for a strlcat() function..."
echo -n "checking for a strlcat() function..." >> config.log
cat << EOT > conftest.c
#include <string.h>
int
main(int argc, char *argv[])
{
	(void)strlcat(NULL, NULL, 0);
	return (0);
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_STRLCAT" > config/have_strlcat.h
echo "#define HAVE_STRLCAT" $HAVE_STRLCAT >> config/have_strlcat.h
echo "#endif" >> config/have_strlcat.h

	echo "yes"
else
    echo "#undef HAVE_STRLCAT" > config/have_strlcat.h

	echo "no"
fi
echo -n "checking for a strlcpy() function..."
echo -n "checking for a strlcpy() function..." >> config.log
cat << EOT > conftest.c
#include <string.h>
int
main(int argc, char *argv[])
{
	(void)strlcpy(NULL, NULL, 0);
	return (0);
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_STRLCPY" > config/have_strlcpy.h
echo "#define HAVE_STRLCPY" $HAVE_STRLCPY >> config/have_strlcpy.h
echo "#endif" >> config/have_strlcpy.h

	echo "yes"
else
    echo "#undef HAVE_STRLCPY" > config/have_strlcpy.h

	echo "no"
fi
echo -n "checking for an asprintf() function..."
echo -n "checking for an asprintf() function..." >> config.log
cat << EOT > conftest.c
#include <stdio.h>

int
main(int argc, char *argv[])
{
	char *buf;

	if (asprintf(&buf, "foo %s", "bar") == 0) {
		free(buf);
	    return (0);
	}
	return (1);
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_ASPRINTF" > config/have_asprintf.h
echo "#define HAVE_ASPRINTF" $HAVE_ASPRINTF >> config/have_asprintf.h
echo "#endif" >> config/have_asprintf.h

	echo "yes"
else
    echo "#undef HAVE_ASPRINTF" > config/have_asprintf.h

	echo "no"
fi
echo -n "checking for a vasprintf() function..."
echo -n "checking for a vasprintf() function..." >> config.log
cat << EOT > conftest.c
#include <stdio.h>
#include <stdarg.h>

int
testprintf(const char *fmt, ...)
{
	va_list args;
	char *buf;

	va_start(args, fmt);
	if (vasprintf(&buf, "%s", args) == -1) {
		return (-1);
	}
	va_end(args);

	free(buf);
	return (0);
}

int
main(int argc, char *argv[])
{
	return (testprintf("foo %s", "bar"));
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_VASPRINTF" > config/have_vasprintf.h
echo "#define HAVE_VASPRINTF" $HAVE_VASPRINTF >> config/have_vasprintf.h
echo "#endif" >> config/have_vasprintf.h

	echo "yes"
else
    echo "#undef HAVE_VASPRINTF" > config/have_vasprintf.h

	echo "no"
fi
echo -n "checking for a snprintf() function..."
echo -n "checking for a snprintf() function..." >> config.log
cat << EOT > conftest.c
#include <stdio.h>

int
main(int argc, char *argv[])
{
	char buf[16];

	(void)snprintf(buf, sizeof(buf), "foo");
	return (0);
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_SNPRINTF" > config/have_snprintf.h
echo "#define HAVE_SNPRINTF" $HAVE_SNPRINTF >> config/have_snprintf.h
echo "#endif" >> config/have_snprintf.h

	echo "yes"
else
    echo "#undef HAVE_SNPRINTF" > config/have_snprintf.h

	echo "no"
fi
echo -n "checking for a vsnprintf() function..."
echo -n "checking for a vsnprintf() function..." >> config.log
cat << EOT > conftest.c
#include <stdio.h>
#include <stdarg.h>

static void
testfmt(const char *fmt, ...)
{
	char buf[16];
	va_list ap;
	
	va_start(ap, fmt);
	(void)vsnprintf(buf, sizeof(buf), fmt, ap);
	va_end(ap);
}

int
main(int argc, char *argv[])
{
	testfmt("foo", 1, 2, 3);
	return (0);
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_VSNPRINTF" > config/have_vsnprintf.h
echo "#define HAVE_VSNPRINTF" $HAVE_VSNPRINTF >> config/have_vsnprintf.h
echo "#endif" >> config/have_vsnprintf.h

	echo "yes"
else
    echo "#undef HAVE_VSNPRINTF" > config/have_vsnprintf.h

	echo "no"
fi
echo -n "checking for a setlocale() function..."
echo -n "checking for a setlocale() function..." >> config.log
cat << EOT > conftest.c
#include <locale.h>

int
main(int argc, char *argv[])
{
	setlocale(LC_ALL, "");
	return (0);
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_SETLOCALE" > config/have_setlocale.h
echo "#define HAVE_SETLOCALE" $HAVE_SETLOCALE >> config/have_setlocale.h
echo "#endif" >> config/have_setlocale.h

	echo "yes"
else
    echo "#undef HAVE_SETLOCALE" > config/have_setlocale.h

	echo "no"
fi
echo -n "checking for the arc4random() random number generator..."
echo -n "checking for the arc4random() random number generator..." >> config.log
cat << EOT > conftest.c
#include <sys/types.h>
#include <stdlib.h>
int
main(int argc, char *argv[])
{
	u_int32_t i;

	i = arc4random();
	return (0);
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_ARC4RANDOM" > config/have_arc4random.h
echo "#define HAVE_ARC4RANDOM" $HAVE_ARC4RANDOM >> config/have_arc4random.h
echo "#endif" >> config/have_arc4random.h

	echo "yes"
else
    echo "#undef HAVE_ARC4RANDOM" > config/have_arc4random.h

	echo "no"
fi
echo -n "checking for MD5 functions..."
echo -n "checking for MD5 functions..." >> config.log
cat << EOT > conftest.c
#include <sys/types.h>
#include <md5.h>

int
main(int argc, char *argv[])
{
	MD5_CTX md5;

	MD5Init(&md5);
	return (0);
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_MD5" > config/have_md5.h
echo "#define HAVE_MD5" $HAVE_MD5 >> config/have_md5.h
echo "#endif" >> config/have_md5.h

	echo "yes"
else
    echo "#undef HAVE_MD5" > config/have_md5.h

	echo "no"
fi
echo -n "checking for SHA1 functions..."
echo -n "checking for SHA1 functions..." >> config.log
cat << EOT > conftest.c
#include <sys/types.h>
#include <sha1.h>

int
main(int argc, char *argv[])
{
	SHA1_CTX sha1;

	SHA1Init(&sha1);
	return (0);
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_SHA1" > config/have_sha1.h
echo "#define HAVE_SHA1" $HAVE_SHA1 >> config/have_sha1.h
echo "#endif" >> config/have_sha1.h

	echo "yes"
else
    echo "#undef HAVE_SHA1" > config/have_sha1.h

	echo "no"
fi
echo -n "checking for RMD160 functions..."
echo -n "checking for RMD160 functions..." >> config.log
cat << EOT > conftest.c
#include <sys/types.h>
#include <rmd160.h>

int
main(int argc, char *argv[])
{
	RMD160_CTX rmd160;

	RMD160Init(&rmd160);
	return (0);
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_RMD160" > config/have_rmd160.h
echo "#define HAVE_RMD160" $HAVE_RMD160 >> config/have_rmd160.h
echo "#endif" >> config/have_rmd160.h

	echo "yes"
else
    echo "#undef HAVE_RMD160" > config/have_rmd160.h

	echo "no"
fi
echo -n "checking for POSIX threads..."
echo -n "checking for POSIX threads..." >> config.log
PTHREADS_CFLAGS=""
PTHREADS_LIBS="-pthread"
cat << EOT > conftest.c
#include <pthread.h>
#include <signal.h>

void *start_routine(void *arg) { return (NULL); }
int main(int argc, char *argv[])
{
	pthread_mutex_t mutex;
	pthread_t thread;

	pthread_mutex_init(&mutex, NULL);
	pthread_mutex_lock(&mutex);
	pthread_mutex_unlock(&mutex);
	pthread_mutex_destroy(&mutex);
	pthread_create(&thread, NULL, start_routine, NULL);
	return (0);
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS  -o conftest conftest.c ${PTHREADS_LIBS} 2>>config.log
if [ $? != 0 ]; then
	echo "failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_PTHREADS" > config/have_pthreads.h
echo "#define HAVE_PTHREADS" $HAVE_PTHREADS >> config/have_pthreads.h
echo "#endif" >> config/have_pthreads.h

	HAVE_PTHREADS=yes

	echo "yes"
else
	echo "#undef HAVE_PTHREADS" > config/have_pthreads.h

	echo "no"
fi
if [ "${HAVE_PTHREADS}" = "yes" ]; then
echo "PTHREADS_CFLAGS=$PTHREADS_CFLAGS" >> Makefile.config
echo "PTHREADS_LIBS=$PTHREADS_LIBS" >> Makefile.config
echo "#ifndef PTHREADS_CFLAGS" > config/pthreads_cflags.h
echo "#define PTHREADS_CFLAGS \"$PTHREADS_CFLAGS\"" >> config/pthreads_cflags.h
echo "#endif" >> config/pthreads_cflags.h
echo "#ifndef PTHREADS_LIBS" > config/pthreads_libs.h
echo "#define PTHREADS_LIBS \"$PTHREADS_LIBS\"" >> config/pthreads_libs.h
echo "#endif" >> config/pthreads_libs.h
else
PTHREADS_LIBS="-lpthread"
cat << EOT > conftest.c
#include <pthread.h>
#include <signal.h>

void *start_routine(void *arg) { return (NULL); }
int main(int argc, char *argv[])
{
	pthread_mutex_t mutex;
	pthread_t thread;

	pthread_mutex_init(&mutex, NULL);
	pthread_mutex_lock(&mutex);
	pthread_mutex_unlock(&mutex);
	pthread_mutex_destroy(&mutex);
	pthread_create(&thread, NULL, start_routine, NULL);
	return (0);
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS  -o conftest conftest.c ${PTHREADS_LIBS} 2>>config.log
if [ $? != 0 ]; then
	echo "failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_PTHREADS" > config/have_pthreads.h
echo "#define HAVE_PTHREADS" $HAVE_PTHREADS >> config/have_pthreads.h
echo "#endif" >> config/have_pthreads.h

	HAVE_PTHREADS=yes

	echo "yes"
else
	echo "#undef HAVE_PTHREADS" > config/have_pthreads.h

	echo "no"
fi
if [ "${HAVE_PTHREADS}" = "yes" ]; then
echo "PTHREADS_CFLAGS=$PTHREADS_CFLAGS" >> Makefile.config
echo "PTHREADS_LIBS=$PTHREADS_LIBS" >> Makefile.config
echo "#ifndef PTHREADS_CFLAGS" > config/pthreads_cflags.h
echo "#define PTHREADS_CFLAGS \"$PTHREADS_CFLAGS\"" >> config/pthreads_cflags.h
echo "#endif" >> config/pthreads_cflags.h
echo "#ifndef PTHREADS_LIBS" > config/pthreads_libs.h
echo "#define PTHREADS_LIBS \"$PTHREADS_LIBS\"" >> config/pthreads_libs.h
echo "#endif" >> config/pthreads_libs.h
else
echo "#undef PTHREADS_CFLAGS" > config/pthreads_cflags.h
echo "#undef PTHREADS_LIBS" > config/pthreads_libs.h
fi;
fi;
echo -n "checking for the X/Open Threads Extension..."
echo -n "checking for the X/Open Threads Extension..." >> config.log
cat << EOT > conftest.c
#define _XOPEN_SOURCE 500
#include <pthread.h>
#include <signal.h>
#undef _XOPEN_SOURCE

int
main(int argc, char *argv[])
{
	pthread_mutex_t mutex;
	pthread_mutexattr_t mutexattr;

	pthread_mutexattr_settype(&mutexattr, PTHREAD_MUTEX_RECURSIVE);
	pthread_mutex_init(&mutex, &mutexattr);
	return (0);
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o conftest conftest.c ${PTHREADS_LIBS} 2>>config.log
if [ $? != 0 ]; then
	echo "failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_PTHREADS_XOPEN" > config/have_pthreads_xopen.h
echo "#define HAVE_PTHREADS_XOPEN" $HAVE_PTHREADS_XOPEN >> config/have_pthreads_xopen.h
echo "#endif" >> config/have_pthreads_xopen.h

	HAVE_PTHREADS_XOPEN=yes

	echo "yes"
else
	echo "#undef HAVE_PTHREADS_XOPEN" > config/have_pthreads_xopen.h

	echo "no"
fi
if [ "${HAVE_PTHREADS_XOPEN}" = "yes" ]; then
echo "#ifndef HAVE_PTHREADS_XOPEN" > config/have_pthreads_xopen.h
echo "#define HAVE_PTHREADS_XOPEN 1" >> config/have_pthreads_xopen.h
echo "#endif" >> config/have_pthreads_xopen.h
echo "#ifndef HAVE_PTHREADS_XOPEN" > config/have_pthreads_xopen.h
echo "#define HAVE_PTHREADS_XOPEN 1" >> config/have_pthreads_xopen.h
echo "#endif" >> config/have_pthreads_xopen.h
else
echo "#undef HAVE_PTHREADS_XOPEN" > config/have_pthreads_xopen.h
echo "#undef HAVE_PTHREADS_XOPEN" > config/have_pthreads_xopen.h
fi
echo -n "checking for PTHREAD_MUTEX_RECURSIVE..."
echo -n "checking for PTHREAD_MUTEX_RECURSIVE..." >> config.log
cat << EOT > conftest.c
#include <pthread.h>
#include <signal.h>

int
main(int argc, char *argv[])
{
	pthread_mutex_t mutex;
	pthread_mutexattr_t mutexattr;

	pthread_mutexattr_settype(&mutexattr, PTHREAD_MUTEX_RECURSIVE);
	pthread_mutex_init(&mutex, &mutexattr);
	return (0);
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o conftest conftest.c ${PTHREADS_LIBS} 2>>config.log
if [ $? != 0 ]; then
	echo "failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_PTHREAD_MUTEX_RECURSIVE" > config/have_pthread_mutex_recursive.h
echo "#define HAVE_PTHREAD_MUTEX_RECURSIVE" $HAVE_PTHREAD_MUTEX_RECURSIVE >> config/have_pthread_mutex_recursive.h
echo "#endif" >> config/have_pthread_mutex_recursive.h

	HAVE_PTHREAD_MUTEX_RECURSIVE=yes

	echo "yes"
else
	echo "#undef HAVE_PTHREAD_MUTEX_RECURSIVE" > config/have_pthread_mutex_recursive.h

	echo "no"
fi
if [ "${HAVE_PTHREAD_MUTEX_RECURSIVE}" = "yes" ]; then
echo "#ifndef HAVE_PTHREAD_MUTEX_RECURSIVE" > config/have_pthread_mutex_recursive.h
echo "#define HAVE_PTHREAD_MUTEX_RECURSIVE 1" >> config/have_pthread_mutex_recursive.h
echo "#endif" >> config/have_pthread_mutex_recursive.h
echo "#ifndef HAVE_PTHREAD_MUTEX_RECURSIVE" > config/have_pthread_mutex_recursive.h
echo "#define HAVE_PTHREAD_MUTEX_RECURSIVE 1" >> config/have_pthread_mutex_recursive.h
echo "#endif" >> config/have_pthread_mutex_recursive.h
else
echo "#undef HAVE_PTHREAD_MUTEX_RECURSIVE" > config/have_pthread_mutex_recursive.h
echo "#undef HAVE_PTHREAD_MUTEX_RECURSIVE" > config/have_pthread_mutex_recursive.h
fi
echo -n "checking for PTHREAD_MUTEX_RECURSIVE_NP..."
echo -n "checking for PTHREAD_MUTEX_RECURSIVE_NP..." >> config.log
cat << EOT > conftest.c
#include <pthread.h>
#include <signal.h>

int
main(int argc, char *argv[])
{
	pthread_mutex_t mutex;
	pthread_mutexattr_t mutexattr;

	pthread_mutexattr_settype(&mutexattr, PTHREAD_MUTEX_RECURSIVE_NP);
	pthread_mutex_init(&mutex, &mutexattr);
	return (0);
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o conftest conftest.c ${PTHREADS_LIBS} 2>>config.log
if [ $? != 0 ]; then
	echo "failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_PTHREAD_MUTEX_RECURSIVE_NP" > config/have_pthread_mutex_recursive_np.h
echo "#define HAVE_PTHREAD_MUTEX_RECURSIVE_NP" $HAVE_PTHREAD_MUTEX_RECURSIVE_NP >> config/have_pthread_mutex_recursive_np.h
echo "#endif" >> config/have_pthread_mutex_recursive_np.h

	HAVE_PTHREAD_MUTEX_RECURSIVE_NP=yes

	echo "yes"
else
	echo "#undef HAVE_PTHREAD_MUTEX_RECURSIVE_NP" > config/have_pthread_mutex_recursive_np.h

	echo "no"
fi
if [ "${HAVE_PTHREAD_MUTEX_RECURSIVE_NP}" = "yes" ]; then
echo "#ifndef HAVE_PTHREAD_MUTEX_RECURSIVE_NP" > config/have_pthread_mutex_recursive_np.h
echo "#define HAVE_PTHREAD_MUTEX_RECURSIVE_NP 1" >> config/have_pthread_mutex_recursive_np.h
echo "#endif" >> config/have_pthread_mutex_recursive_np.h
echo "#ifndef HAVE_PTHREAD_MUTEX_RECURSIVE_NP" > config/have_pthread_mutex_recursive_np.h
echo "#define HAVE_PTHREAD_MUTEX_RECURSIVE_NP 1" >> config/have_pthread_mutex_recursive_np.h
echo "#endif" >> config/have_pthread_mutex_recursive_np.h
else
echo "#undef HAVE_PTHREAD_MUTEX_RECURSIVE_NP" > config/have_pthread_mutex_recursive_np.h
echo "#undef HAVE_PTHREAD_MUTEX_RECURSIVE_NP" > config/have_pthread_mutex_recursive_np.h
fi
CFLAGS="$CFLAGS -I$SRC"
echo "CFLAGS=$CFLAGS" >> Makefile.config
if [ "${enable_warnings}" = "yes" ]
 then
CFLAGS="$CFLAGS -Wall -Werror -Wmissing-prototypes"
echo "CFLAGS=$CFLAGS" >> Makefile.config
CFLAGS="$CFLAGS -Wno-unused"
echo "CFLAGS=$CFLAGS" >> Makefile.config
fi
echo -n "checking for SDL (http://www.libsdl.org)..."
echo -n "checking for SDL (http://www.libsdl.org)..." >> config.log
if [ "${SYSTEM}" = "Darwin" ]; then
SDL_VERSION=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/sdl-config" ]; then
		SDL_VERSION=`${path}/sdl-config --version`
	fi
done
SDL_CFLAGS=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/sdl-config" ]; then
		SDL_CFLAGS=`${path}/sdl-config --cflags`
	fi
done
SDL_LIBS=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/sdl-config" ]; then
		SDL_LIBS=`${path}/sdl-config --libs`
	fi
done
elif [ "${SYSTEM}" = "FreeBSD" ]; then
SDL_VERSION=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/sdl11-config" ]; then
		SDL_VERSION=`${path}/sdl11-config --version`
	fi
done
if [ "${SDL_VERSION}" != "" ]; then
SDL_CFLAGS=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/sdl11-config" ]; then
		SDL_CFLAGS=`${path}/sdl11-config --cflags`
	fi
done
SDL_LIBS=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/sdl11-config" ]; then
		SDL_LIBS=`${path}/sdl11-config --static-libs`
	fi
done
else
SDL_VERSION=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/sdl-config" ]; then
		SDL_VERSION=`${path}/sdl-config --version`
	fi
done
SDL_CFLAGS=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/sdl-config" ]; then
		SDL_CFLAGS=`${path}/sdl-config --cflags`
	fi
done
SDL_LIBS=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/sdl-config" ]; then
		SDL_LIBS=`${path}/sdl-config --static-libs`
	fi
done
fi;
else
SDL_VERSION=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/sdl-config" ]; then
		SDL_VERSION=`${path}/sdl-config --version`
	fi
done
SDL_CFLAGS=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/sdl-config" ]; then
		SDL_CFLAGS=`${path}/sdl-config --cflags`
	fi
done
SDL_LIBS=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/sdl-config" ]; then
		SDL_LIBS=`${path}/sdl-config --static-libs`
	fi
done
fi;
if [ "${SDL_VERSION}" != "" ]; then
echo "yes"
echo "yes" >> config.log
echo -n "checking whether SDL works..."
echo -n "checking whether SDL works..." >> config.log
cat << EOT > conftest.c
#include <stdio.h>
#include <SDL.h>
int main(int argc, char *argv[]) {
	SDL_Surface *su;
	if (SDL_Init(SDL_INIT_TIMER|SDL_INIT_NOPARACHUTE) != 0) {
		return (1);
	}
	su = SDL_CreateRGBSurface(0, 16, 16, 32, 0, 0, 0, 0);
	SDL_FreeSurface(su);
	SDL_Quit();
	return (0);
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS ${SDL_CFLAGS} -o conftest conftest.c ${SDL_LIBS} 2>>config.log
if [ $? != 0 ]; then
	echo "failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_SDL" > config/have_sdl.h
echo "#define HAVE_SDL" $HAVE_SDL >> config/have_sdl.h
echo "#endif" >> config/have_sdl.h

	HAVE_SDL=yes

	echo "yes"
else
	echo "#undef HAVE_SDL" > config/have_sdl.h

	echo "no"
fi
if [ "${HAVE_SDL}" != "" ]; then
echo "SDL_CFLAGS=$SDL_CFLAGS" >> Makefile.config
echo "SDL_LIBS=$SDL_LIBS" >> Makefile.config
echo "#ifndef SDL_CFLAGS" > config/sdl_cflags.h
echo "#define SDL_CFLAGS \"$SDL_CFLAGS\"" >> config/sdl_cflags.h
echo "#endif" >> config/sdl_cflags.h
echo "#ifndef SDL_LIBS" > config/sdl_libs.h
echo "#define SDL_LIBS \"$SDL_LIBS\"" >> config/sdl_libs.h
echo "#endif" >> config/sdl_libs.h
fi;
echo -n "checking for SDL cpuinfo functions..."
echo -n "checking for SDL cpuinfo functions..." >> config.log
cat << EOT > conftest.c
#include <SDL.h>
#include <SDL_cpuinfo.h>
int main(int argc, char *argv[]) {
	SDL_HasRDTSC();
	SDL_HasMMX();
	SDL_HasMMXExt();
	SDL_Has3DNow();
	SDL_Has3DNowExt();
	SDL_HasSSE();
	SDL_HasSSE2();
	SDL_HasAltiVec();
	return (0);
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS ${SDL_CFLAGS} -o conftest conftest.c ${SDL_LIBS} 2>>config.log
if [ $? != 0 ]; then
	echo "failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_SDL_CPUINFO" > config/have_sdl_cpuinfo.h
echo "#define HAVE_SDL_CPUINFO" $HAVE_SDL_CPUINFO >> config/have_sdl_cpuinfo.h
echo "#endif" >> config/have_sdl_cpuinfo.h

	HAVE_SDL_CPUINFO=yes

	echo "yes"
else
	echo "#undef HAVE_SDL_CPUINFO" > config/have_sdl_cpuinfo.h

	echo "no"
fi
else
echo "no"
echo "no" >> config.log
echo "#undef HAVE_SDL" > config/have_sdl.h
fi;
if [ "${HAVE_SDL}" != "yes" ]
 then
	echo "*"
	echo "* Agar requires the SDL library. Please install it and try again."
	echo "* You can download SDL from: http://www.libsdl.org/."
	echo "*"
	exit 1
fi
if [ "${with_freetype}" != "no" ]
 then
echo -n "checking for FreeType (http://www.freetype.org)..."
echo -n "checking for FreeType (http://www.freetype.org)..." >> config.log
FREETYPE_VERSION=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/freetype-config" ]; then
		FREETYPE_VERSION=`${path}/freetype-config --version`
	fi
done
FREETYPE_CFLAGS=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/freetype-config" ]; then
		FREETYPE_CFLAGS=`${path}/freetype-config --cflags`
	fi
done
FREETYPE_LIBS=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/freetype-config" ]; then
		FREETYPE_LIBS=`${path}/freetype-config --libs`
	fi
done
if [ -d /usr/freeware/include ]; then
FREETYPE_CFLAGS="${FREETYPE_CFLAGS} -I/usr/freeware/include"
else
NONE=1
fi
if [ "${FREETYPE_VERSION}" != "" ]; then
freetype_found=yes
echo "FREETYPE_CFLAGS=$FREETYPE_CFLAGS" >> Makefile.config
echo "FREETYPE_LIBS=$FREETYPE_LIBS" >> Makefile.config
echo "yes"
echo "yes" >> config.log
else
echo "no"
echo "no" >> config.log
fi
echo -n "checking whether FreeType works..."
echo -n "checking whether FreeType works..." >> config.log
cat << EOT > conftest.c
#include <ft2build.h>
#include FT_FREETYPE_H
#include FT_OUTLINE_H

int
main(int argc, char *argv[])
{
	FT_Library library;
	FT_Init_FreeType(&library);
	return (0);
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS ${FREETYPE_CFLAGS} -o conftest conftest.c ${FREETYPE_LIBS} 2>>config.log
if [ $? != 0 ]; then
	echo "failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_FREETYPE" > config/have_freetype.h
echo "#define HAVE_FREETYPE" $HAVE_FREETYPE >> config/have_freetype.h
echo "#endif" >> config/have_freetype.h

	HAVE_FREETYPE=yes

	echo "yes"
else
	echo "#undef HAVE_FREETYPE" > config/have_freetype.h

	echo "no"
fi
if [ "${HAVE_FREETYPE}" = "yes" ]; then
echo "#ifndef FREETYPE_LIBS" > config/freetype_libs.h
echo "#define FREETYPE_LIBS \"$FREETYPE_LIBS\"" >> config/freetype_libs.h
echo "#endif" >> config/freetype_libs.h
echo "#ifndef FREETYPE_CFLAGS" > config/freetype_cflags.h
echo "#define FREETYPE_CFLAGS \"$FREETYPE_CFLAGS\"" >> config/freetype_cflags.h
echo "#endif" >> config/freetype_cflags.h
else
echo "#undef FREETYPE_LIBS" > config/freetype_libs.h
echo "#undef FREETYPE_CFLAGS" > config/freetype_cflags.h
NONE=1
fi
	if [ "${HAVE_FREETYPE}" != "yes" ]
 then
		echo "*"
		echo "* Agar needs FreeType in order to display vector-based"
		echo "* fonts. If you would like to use Agar's bitmap font, "
		echo "* rerun configure with the --without-freetype option."
		echo "* (note that the bundled bitmap font can only display"
		echo "* ASCII characters)."
		echo "*"
		exit 1
	fi
else
echo "#undef HAVE_FREETYPE" > config/have_freetype.h
fi
if [ "${with_gl}" != "no" ]
 then
echo -n "checking for OpenGL (http://www.opengl.org)..."
echo -n "checking for OpenGL (http://www.opengl.org)..." >> config.log
GL_CFLAGS=""
GL_LIBS=""
if [ -d "/usr/include/X11/GL" ]; then
GL_CFLAGS="-I/usr/include/X11"
fi;
if [ -d "/usr/include/X11R6/GL" ]; then
GL_CFLAGS="-I/usr/include/X11R6"
fi;
if [ -d "/usr/local/X11/include/GL" ]; then
GL_CFLAGS="-I/usr/local/X11/include"
fi;
if [ -d "/usr/local/X11R6/include/GL" ]; then
GL_CFLAGS="-I/usr/local/X11R6/include"
fi;
if [ -d "/usr/local/include/X11/GL" ]; then
GL_CFLAGS="-I/usr/local/include/X11"
fi;
if [ -d "/usr/local/include/X11R6/GL" ]; then
GL_CFLAGS="-I/usr/local/include/X11R6"
fi;
if [ -d "/usr/X11/include/GL" ]; then
GL_CFLAGS="-I/usr/X11/include"
fi;
if [ -d "/usr/X11R6/include/GL" ]; then
GL_CFLAGS="-I/usr/X11R6/include"
fi;
if [ -d "/usr/local/X11/lib" ]; then
GL_LIBS="-L/usr/local/X11/lib"
fi;
if [ -d "/usr/local/X11R6/lib" ]; then
GL_LIBS="-L/usr/local/X11R6/lib"
fi;
if [ -d "/usr/X11/lib" ]; then
GL_LIBS="-L/usr/X11/lib"
fi;
if [ -d "/usr/X11R6/lib" ]; then
GL_LIBS="-L/usr/X11R6/lib"
fi;
if [ "$SYSTEM" = "Darwin" ]; then
OPENGL_CFLAGS=""
OPENGL_LIBS="-framework OpenGL"
else
OPENGL_CFLAGS="${GL_CFLAGS}"
OPENGL_LIBS="${GL_LIBS} -lGL"
fi;
cat << EOT > conftest.c
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
int main(int argc, char *argv[]) {
	glFlush();
	glLoadIdentity();
	return (0);
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS ${OPENGL_CFLAGS} -o conftest conftest.c ${OPENGL_LIBS} 2>>config.log
if [ $? != 0 ]; then
	echo "failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_OPENGL" > config/have_opengl.h
echo "#define HAVE_OPENGL" $HAVE_OPENGL >> config/have_opengl.h
echo "#endif" >> config/have_opengl.h

	HAVE_OPENGL=yes

	echo "yes"
else
	echo "#undef HAVE_OPENGL" > config/have_opengl.h

	echo "no"
fi
if [ "${HAVE_OPENGL}" = "yes" ]; then
echo "OPENGL_CFLAGS=$OPENGL_CFLAGS" >> Makefile.config
echo "OPENGL_LIBS=$OPENGL_LIBS" >> Makefile.config
echo "#ifndef OPENGL_CFLAGS" > config/opengl_cflags.h
echo "#define OPENGL_CFLAGS \"$OPENGL_CFLAGS\"" >> config/opengl_cflags.h
echo "#endif" >> config/opengl_cflags.h
echo "#ifndef OPENGL_LIBS" > config/opengl_libs.h
echo "#define OPENGL_LIBS \"$OPENGL_LIBS\"" >> config/opengl_libs.h
echo "#endif" >> config/opengl_libs.h
else
echo "#undef OPENGL_CFLAGS" > config/opengl_cflags.h
echo "#undef OPENGL_LIBS" > config/opengl_libs.h
fi;
	if [ "${HAVE_OPENGL}" = "yes" ]
 then
SDL_CFLAGS="$SDL_CFLAGS $OPENGL_CFLAGS"
echo "SDL_CFLAGS=$SDL_CFLAGS" >> Makefile.config
	fi
else
echo "#undef HAVE_OPENGL" > config/have_opengl.h
fi
if [ "${with_jpeg}" != "no" ]
 then
echo -n "checking for libjpeg (ftp://ftp.uu.net/graphics/jpeg/)..."
echo -n "checking for libjpeg (ftp://ftp.uu.net/graphics/jpeg/)..." >> config.log
JPEG_CFLAGS=""
if [ -d "/usr/local/include/jpeglib.h" ]; then
JPEG_CFLAGS="-I/usr/local/include"
JPEG_LIBS="-L/usr/local/lib -ljpeg"
fi;
if [ -d "/usr/X11R6/include/jpeglib.h" ]; then
JPEG_CFLAGS="-I/usr/X11R6/include"
JPEG_LIBS="-L/usr/X11R6/lib -ljpeg"
fi;
if [ -d "/usr/include/jpeglib.h" ]; then
JPEG_CFLAGS="-I/usr/include"
JPEG_LIBS="-L/usr/lib -ljpeg"
fi;
if [ -d "/opt/local/include/jpeglib.h" ]; then
JPEG_CFLAGS="-I/opt/local/include"
JPEG_LIBS="-L/opt/local/lib -ljpeg"
fi;
if [ -d "/opt/include/jpeglib.h" ]; then
JPEG_CFLAGS="-I/opt/include"
JPEG_LIBS="-L/opt/lib -ljpeg"
fi;
if [ "${JPEG_CFLAGS}" != "" ]; then
echo "ok"
echo "ok" >> config.log
echo "checking whether libjpeg works..."
echo "checking whether libjpeg works..." >> config.log
cat << EOT > conftest.c
#include <stdio.h>
#include <jpeglib.h>

struct jpeg_error_mgr		jerr;
struct jpeg_compress_struct	jcomp;

int
main(int argc, char *argv[])
{
	jcomp.err = jpeg_std_error(&jerr);

	jpeg_create_compress(&jcomp);
	jcomp.image_width = 32;
	jcomp.image_height = 32;
	jcomp.input_components = 3;
	jcomp.in_color_space = JCS_RGB;

	jpeg_set_defaults(&jcomp);
	jpeg_set_quality(&jcomp, 75, TRUE);

	jpeg_destroy_compress(&jcomp);
	return (0);
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS ${JPEG_CFLAGS} -o conftest conftest.c ${JPEG_LIBS} 2>>config.log
if [ $? != 0 ]; then
	echo "failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_JPEG" > config/have_jpeg.h
echo "#define HAVE_JPEG" $HAVE_JPEG >> config/have_jpeg.h
echo "#endif" >> config/have_jpeg.h

	HAVE_JPEG=yes

	echo "yes"
else
	echo "#undef HAVE_JPEG" > config/have_jpeg.h

	echo "no"
fi
if [ "${HAVE_JPEG}" != "" ]; then
echo "JPEG_CFLAGS=$JPEG_CFLAGS" >> Makefile.config
echo "JPEG_LIBS=$JPEG_LIBS" >> Makefile.config
echo "#ifndef JPEG_CFLAGS" > config/jpeg_cflags.h
echo "#define JPEG_CFLAGS \"$JPEG_CFLAGS\"" >> config/jpeg_cflags.h
echo "#endif" >> config/jpeg_cflags.h
echo "#ifndef JPEG_LIBS" > config/jpeg_libs.h
echo "#define JPEG_LIBS \"$JPEG_LIBS\"" >> config/jpeg_libs.h
echo "#endif" >> config/jpeg_libs.h
else
echo "#undef JPEG_CFLAGS" > config/jpeg_cflags.h
echo "#undef JPEG_LIBS" > config/jpeg_libs.h
fi;
else
echo "#undef HAVE_JPEG" > config/have_jpeg.h
echo "no"
echo "no" >> config.log
fi;
else
echo "#undef HAVE_JPEG" > config/have_jpeg.h
fi
if [ "${with_libqnet}" != "no" ]
 then
echo -n "checking for libqnet (http://libqnet.csoft.org/)..."
echo -n "checking for libqnet (http://libqnet.csoft.org/)..." >> config.log
libqnet_version=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/qnet-config" ]; then
		libqnet_version=`${path}/qnet-config --version`
	fi
done
if [ "${libqnet_version}" != "" ]; then
echo "yes"
echo "yes" >> config.log
LIBQNET_CFLAGS=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/qnet-config" ]; then
		LIBQNET_CFLAGS=`${path}/qnet-config --cflags`
	fi
done
LIBQNET_LIBS=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/qnet-config" ]; then
		LIBQNET_LIBS=`${path}/qnet-config --libs`
	fi
done
echo "checking whether libqnet works..."
echo "checking whether libqnet works..." >> config.log
cat << EOT > conftest.c
#include <sys/param.h>
#include <qnet/qnet.h>
#include <qnet/server.h>
int main(int argc, char *argv[]) {
	server_regcmd("foo", NULL, NULL);
	server_listen("foo", "1.0", NULL, NULL);
	return (0);
}

EOT
compile="ok"
$CC $CFLAGS $TEST_CFLAGS ${LIBQNET_CFLAGS} -o conftest conftest.c ${LIBQNET_LIBS} 2>>config.log
if [ $? != 0 ]; then
	echo "failed ($?)" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "ok" >> config.log
	echo "#ifndef HAVE_LIBQNET" > config/have_libqnet.h
echo "#define HAVE_LIBQNET" $HAVE_LIBQNET >> config/have_libqnet.h
echo "#endif" >> config/have_libqnet.h

	HAVE_LIBQNET=yes

	echo "yes"
else
	echo "#undef HAVE_LIBQNET" > config/have_libqnet.h

	echo "no"
fi
if [ ${HAVE_LIBQNET} = "yes" ]; then
echo "LIBQNET_CFLAGS=$LIBQNET_CFLAGS" >> Makefile.config
echo "LIBQNET_LIBS=$LIBQNET_LIBS" >> Makefile.config
echo "#ifndef LIBQNET_CFLAGS" > config/libqnet_cflags.h
echo "#define LIBQNET_CFLAGS \"$LIBQNET_CFLAGS\"" >> config/libqnet_cflags.h
echo "#endif" >> config/libqnet_cflags.h
echo "#ifndef LIBQNET_LIBS" > config/libqnet_libs.h
echo "#define LIBQNET_LIBS \"$LIBQNET_LIBS\"" >> config/libqnet_libs.h
echo "#endif" >> config/libqnet_libs.h
else
echo "#undef LIBQNET_CFLAGS" > config/libqnet_cflags.h
echo "#undef LIBQNET_LIBS" > config/libqnet_libs.h
fi;
else
echo "#undef HAVE_LIBQNET" > config/have_libqnet.h
echo "no"
echo "no" >> config.log
fi;
else
echo "#undef HAVE_LIBQNET" > config/have_libqnet.h
fi
if [ "${enable_threads}" = "yes" ]
 then
THREADS=1
echo "#ifndef THREADS" > config/threads.h
echo "#define THREADS" $THREADS >> config/threads.h
echo "#endif" >> config/threads.h
else
echo "#undef THREADS" > config/threads.h
fi
if [ "${enable_utf8}" = "yes" ]
 then
UTF8=1
echo "#ifndef UTF8" > config/utf8.h
echo "#define UTF8" $UTF8 >> config/utf8.h
echo "#endif" >> config/utf8.h
else
echo "#undef UTF8" > config/utf8.h
fi
if [ "${enable_astro_units}" = "yes" ]
 then
ASTRONOMICAL_UNITS=1
echo "#ifndef ASTRONOMICAL_UNITS" > config/astronomical_units.h
echo "#define ASTRONOMICAL_UNITS" $ASTRONOMICAL_UNITS >> config/astronomical_units.h
echo "#endif" >> config/astronomical_units.h
else
echo "#undef ASTRONOMICAL_UNITS" > config/astronomical_units.h
fi
if [ "${enable_histo_units}" = "yes" ]
 then
HISTORICAL_UNITS=1
echo "#ifndef HISTORICAL_UNITS" > config/historical_units.h
echo "#define HISTORICAL_UNITS" $HISTORICAL_UNITS >> config/historical_units.h
echo "#endif" >> config/historical_units.h
else
echo "#undef HISTORICAL_UNITS" > config/historical_units.h
fi
if [ "${enable_floating_point}" != "no" ]
 then
FLOATING_POINT=1
echo "#ifndef FLOATING_POINT" > config/floating_point.h
echo "#define FLOATING_POINT" $FLOATING_POINT >> config/floating_point.h
echo "#endif" >> config/floating_point.h
else
echo "#undef FLOATING_POINT" > config/floating_point.h
fi
if [ "${enable_edition}" != "no" ]
 then
EDITION=1
echo "#ifndef EDITION" > config/edition.h
echo "#define EDITION" $EDITION >> config/edition.h
echo "#endif" >> config/edition.h
else
echo "#undef EDITION" > config/edition.h
fi
if [ "${enable_network}" = "yes" ]
 then
NETWORK=1
echo "#ifndef NETWORK" > config/network.h
echo "#define NETWORK" $NETWORK >> config/network.h
echo "#endif" >> config/network.h
else
echo "#undef NETWORK" > config/network.h
fi
if [ "${enable_map}" != "no" ]
 then
MAP=1
echo "#ifndef MAP" > config/map.h
echo "#define MAP" $MAP >> config/map.h
echo "#endif" >> config/map.h
else
echo "#undef MAP" > config/map.h
fi
if [ "${enable_8bpp}" != "no" ]
 then
VIEW_8BPP=1
echo "#ifndef VIEW_8BPP" > config/view_8bpp.h
echo "#define VIEW_8BPP" $VIEW_8BPP >> config/view_8bpp.h
echo "#endif" >> config/view_8bpp.h
else
echo "#undef VIEW_8BPP" > config/view_8bpp.h
fi
if [ "${enable_16bpp}" != "no" ]
 then
VIEW_16BPP=1
echo "#ifndef VIEW_16BPP" > config/view_16bpp.h
echo "#define VIEW_16BPP" $VIEW_16BPP >> config/view_16bpp.h
echo "#endif" >> config/view_16bpp.h
else
echo "#undef VIEW_16BPP" > config/view_16bpp.h
fi
if [ "${enable_24bpp}" != "no" ]
 then
VIEW_24BPP=1
echo "#ifndef VIEW_24BPP" > config/view_24bpp.h
echo "#define VIEW_24BPP" $VIEW_24BPP >> config/view_24bpp.h
echo "#endif" >> config/view_24bpp.h
else
echo "#undef VIEW_24BPP" > config/view_24bpp.h
fi
if [ "${enable_32bpp}" != "no" ]
 then
VIEW_32BPP=1
echo "#ifndef VIEW_32BPP" > config/view_32bpp.h
echo "#define VIEW_32BPP" $VIEW_32BPP >> config/view_32bpp.h
echo "#endif" >> config/view_32bpp.h
else
echo "#undef VIEW_32BPP" > config/view_32bpp.h
fi
echo "Don't forget to run \"make depend\"."
echo "Don't forget to run \"make depend\"." >> config.log
