#!/bin/sh
#
# Do not edit!
# This file was generated from configure.in by BSDBuild 2.8.
#
# To regenerate this file, get the latest BSDBuild release from
# http://hypertriton.com/bsdbuild/, and use the command:
#
#     $ cat configure.in | mkconfigure > configure
#
# Copyright (c) 2001-2010 Hypertriton, Inc. <http://hypertriton.com/>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
# USE OF THIS SOFTWARE EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
PACKAGE="Untitled"
VERSION=""
RELEASE=""

optarg=
for arg
do
	case "$arg" in
	-*=*)
	    optarg=`echo "$arg" | sed 's/[-_a-zA-Z0-9]*=//'`
	    ;;
	*)
	    optarg=
	    ;;
	esac

	case "$arg" in
	--build=*)
	    build_arg=$optarg
	    ;;
	--host=*)
	    host_arg=$optarg
	    ;;
	--target=*)
	    target=$optarg
	    ;;
	--byte-order=*)
	    byte_order=$optarg
	    ;;
	--prefix=*)
	    prefix=$optarg
	    ;;
	--exec-prefix=*)
	    exec_prefix=$optarg
	    ;;
	--sysconfdir=*)
	    sysconfdir=$optarg
	    ;;
	--bindir=*)
	    bindir=$optarg
	    ;;
	--libdir=*)
	    libdir=$optarg
	    ;;
	--datadir=*)
	    datadir=$optarg
	    ;;
	--sharedir=*)
	    datadir=$optarg
	    ;;
	--localedir=*)
	    localedir=$optarg
	    ;;
	--mandir=*)
	    mandir=$optarg
	    ;;
	--infodir=*)
	    infodir=$optarg
	    ;;
	--enable-*)
	    option=`echo $arg | sed -e 's/--enable-//' -e 's/=.*//'`
	    option=`echo $option | sed 's/-/_/g'`
	    case "$arg" in
	        *=*)
	            eval "enable_${option}='$optarg'"
	            eval "prefix_${option}='$optarg'"
		    ;;
		*)
	            eval "enable_${option}=yes"
		    ;;
	    esac
	    ;;
	--disable-*)
	    option=`echo $arg | sed -e 's/--disable-//'`;
	    option=`echo $option | sed 's/-/_/g'`
	    eval "enable_${option}=no"
	    ;;
	--with-*)
	    option=`echo $arg | sed -e 's/--with-//' -e 's/=.*//'`
	    option=`echo $option | sed 's/-/_/g'`
	    case "$arg" in
	        *=*)
	            eval "with_${option}='$optarg'"
	            eval "prefix_${option}='$optarg'"
		    ;;
		*)
	            eval "with_${option}=yes"
		    ;;
	    esac
	    ;;
	--without-*)
	    option=`echo $arg | sed -e 's/--without-//'`;
	    option=`echo $option | sed 's/-/_/g'`
	    eval "with_${option}=no"
	    ;;
	--help)
	    show_help=yes
	    ;;
	--version)
	    show_version=yes
	    ;;
	--srcdir=*)
	    srcdir=$optarg
	    ;;
	--testdir=*)
	    testdir=$optarg
	    ;;
	--cache=*)
	    cache=$optarg
	    ;;
	--includes=*)
	    includes=$optarg
	    ;;
	--cache-file=*)
	    ;;
	--config-cache | -C)
	    ;;
	*)
	    echo "invalid argument: $arg"
	    echo "try ./configure --help"
	    exit 1
	    ;;
	esac
done
if [ -e "/bin/echo" ]; then
    /bin/echo -n ""
    if [ $? = 0 ]; then
    	ECHO_N="/bin/echo -n"
    else
    	ECHO_N="echo -n"
    fi
else
    ECHO_N="echo -n"
fi
PERL=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}" ]; then
		if [ -e "${path}/perl" ]; then
			PERL="${path}/perl"
			break
		fi
	fi
done
if [ "${prefix}" != "" ]; then
    PREFIX="$prefix"
else
    PREFIX="/usr/local"
fi
if [ "${exec_prefix}" != "" ]; then
    EXEC_PREFIX="$exec_prefix"
else
    EXEC_PREFIX="${PREFIX}"
fi
if [ "${srcdir}" != "" ]; then
	if [ "${PERL}" = "" ]; then
		echo "*"
		echo "* Separate build (--srcdir) requires perl, but there is"
		echo "* no perl interpreter to be found in your PATH."
		echo "*"
		exit 1
	fi
	echo "* Separate build (source in ${srcdir})"
	SRC=${srcdir}
	${PERL} ${SRC}/mk/mkconcurrent.pl ${SRC}
	if [ $? != 0 ]; then
		exit 1;
	fi
else
	SRC=`pwd`
fi
BLD=`pwd`
SRCDIR="${SRC}"
BLDDIR="${BLD}"

if [ "${testdir}" != "" ]; then
	echo "Configure tests will be executed in ${testdir}"
	if [ ! -e "${testdir}" ]; then
		echo "Creating ${testdir}"
		mkdir ${testdir}
	fi
else
	testdir="."
fi
if [ "${includes}" = "" ]; then
	includes="yes"
fi
case "${includes}" in
yes|no)
	;;
link)
	if [ "${with_proj_generation}" ]; then
		echo "Cannot use --includes=link with --with-proj-generation!"
		exit 1
	fi
	;;
*)
	echo "Usage: --includes [yes|no|link]"
	exit 1
	;;
esac
if [ "${srcdir}" = "" ]; then
	cat << EOT > configure.dep.pl
#!/usr/bin/perl
# Public domain.
# Scan Makefiles for "include .depend" and generate empty ".depend" files,
# such that make can be run prior to an initial "make depend".
#

my %V = ();

sub MakefileIncludesDepend (\$\$)
{
	my \$path = shift;
	my \$cwd = shift;

	if (!open(MF, \$path)) {
		return (0);
	}
	my @lines = ();
	foreach \$_ (<MF>) {
		chop;

		if (/^(.+)\\\\\$/) {			# Expansion
			\$line .= \$1;
		} else {				# New line
			if (\$line) {
				push @lines, \$line . \$_;
				\$line = '';
			} else {
				push @lines, \$_;
			}
		}
	}
	foreach \$_ (@lines) {
		if (/^\\s*#/) { next; }
		if (/^\\t/) { next; }
		s/\\\$\\{(\\w+)\\}/\$V{\$1}/g;
		if (/^\\s*(\\w+)\\s*=\\s*"(.+)"\$/ ||
		    /^\\s*(\\w+)\\s*=\\s*(.+)\$/) {
			\$V{\$1} = \$2;
		} elsif (/^\\s*(\\w+)\\s*\\+=\\s*"(.+)"\$/ ||
		         /^\\s*(\\w+)\\s*\\+=\\s*(.+)\$/) {
			if (exists(\$V{\$1}) && \$V{\$1} ne '') {
				\$V{\$1} .= ' '.\$2;
			} else {
				\$V{\$1} = \$2;
			}
		}
		if (/^\\s*include\\s+(.+)\$/) {
			if (\$1 eq '.depend' ||
			    MakefileIncludesDepend(\$cwd.'/'.\$1, \$cwd)) {
				return (1);
			}
		}
	}
	close(MF);
	return (0);
}

sub Scan (\$)
{
	my \$dir = shift;

	unless (opendir(CWD, \$dir)) {
		print STDERR "\$dir: opendir: \$!; ignoring\\n";
		return;
	}
	%V = ();
	if (-e \$dir.'/Makefile' &&
	    MakefileIncludesDepend("\$dir/Makefile", \$dir)) {
		if (open(OUT, ">\$dir/.depend")) {
			close(OUT);
		} else {
			print STDERR "\$dir/.depend: \$!; ignoring\\n";
		}
	}
	foreach my \$ent (readdir(CWD)) {
		my \$file = \$dir.'/'.\$ent;

		if (\$ent =~ /^\\./) {
			next;
		}
		if (-d \$file) {
			Scan(\$file);
			next;
		}
	}
	closedir(CWD);
}
if (@ARGV < 1) {
	print STDERR "Usage: gen-dotdepend.pl [directory]\\n";
	exit(1);
}
Scan(\$ARGV[0]);
EOT
	if [ "${PERL}" != "" ]; then
		${PERL} configure.dep.pl .
		rm -f configure.dep.pl
	else
		echo "*"
		echo "* Warning: No perl was found. Perl is required for automatic"
		echo "* generation of .depend files. You may need to create empty"
		echo "* .depend files where it is required."
		echo "*"
	fi
fi
if [ "${show_help}" = "yes" ]; then
echo "This configure script was generated by BSDBuild 2.8."
echo "<http://bsdbuild.hypertriton.com/>"
echo ""
echo "Usage: ./configure [options]"
echo ""
echo "Standard build options:"
echo "    --bindir=DIR              Executables (for common users) [PREFIX/bin]"
echo "    --build=STRING            Host environment for build [auto-detect]"
echo "    --cache=DIR               Cache ./configure results in directory [none]"
echo "    --datadir=DIR             Data files (for programs) [PREFIX/share]"
echo "    --enable-nls              Multi-language support [no]"
echo "    --exec-prefix=DIR         Installation base (MD files) [PREFIX]"
echo "    --host=STRING             Cross-compile for target environment [BUILD]"
echo "    --includes=STRING         Preprocess C headers (yes|no|link) [yes]"
echo "    --infodir=DIR             Texinfo documentation [SHAREDIR/info]"
echo "    --libdir=DIR              System libraries [PREFIX/lib]"
echo "    --libexecdir=DIR          Executables (for programs) [PREFIX/libexec]"
echo "    --localedir=DIR           Multi-language support locales [SHAREDIR/locale]"
echo "    --mandir=DIR              Manual page documentation [PREFIX/man]"
echo "    --prefix=DIR              Installation base (MI files) [/usr/local]"
echo "    --sbindir=DIR             Executables (for administrator) [PREFIX/sbin]"
echo "    --srcdir=DIR              Source directory for concurrent build [.]"
echo "    --sysconfdir=DIR          System configuration files [PREFIX/etc]"
echo "    --testdir=DIR             Execute ./configure tests in directory [.]"
echo "    --with-catman             Install cat files for manual pages [auto-detect]"
echo "    --with-ctags              Generate ctags(1) tag files [no]"
echo "    --with-docs               Generate printable documentation [no]"
echo "    --with-gettext            Use gettext for multi-language [auto-detect]"
echo "    --with-libtool            Specify path to libtool [auto-detect]"
echo "    --with-manlinks           Add manual entries for every function [no]"
echo "    --with-manpages           Generate Unix manual pages [yes]"
echo ""
echo "Options specific to Agar:"
echo "    --enable-<library>        Build libraries (gui|vg|rg|math|dev) [all]"
echo "    --enable-debug            General debugging [no]"
echo "    --enable-legacy           Deprecated interfaces [yes]"
echo "    --enable-network          Network I/O support in Agar-Core [check]"
echo "    --enable-objdebug         Object system debugging [no]"
echo "    --enable-threads          Thread safety [check]"
echo "    --enable-warnings         Suggested compiler warnings [no]"
echo "    --with-db4[=PREFIX]       Berkeley DB support in Agar-Core [check]"
echo "    --with-pthreads[=PREFIX]  Specify libpthreads location [check]"
echo ""
echo "Options specific to Agar-GUI (ag_gui):"
echo "    --with-freetype[=PREFIX]  Enable FreeType support [check]"
echo "    --with-gl[=PREFIX]        OpenGL rendering support [check]"
echo "    --with-glx[=PREFIX]       GL rendering via GLX [check]"
echo "    --with-jpeg[=PREFIX]      Built-in JPEG image support [check]"
echo "    --with-png[=PREFIX]       Built-in PNG image support [check]"
echo "    --with-sdl[=PREFIX]       SDL rendering support [check]"
echo "    --with-x[=PREFIX]         X Windows driver support [check]"
echo "    --with-wgl                GL rendering via WGL [check]"
echo ""
echo "Options specific to Agar-MATH (ag_math):"
echo "    --with-altivec            AltiVec optimizations [check]"
echo "    --with-sse                SSE[123] optimizations [no]"
echo "    --with-<mode>-fp          Precision (single|double|quad) [double]"
echo "    --with-<opt>-inline       Inline ops (sse2|sse3|altivec) [no]"
exit 1
fi;
if [ "${show_version}" = "yes" ]; then
echo "BSDBuild 2.8"
exit 0
fi;
if [ "${srcdir}" != "" ]; then
	build_guessed=`sh ${srcdir}/mk/config.guess`
else
	build_guessed=`sh mk/config.guess`
fi
if [ $? != 0 ]; then
	echo "mk/config.guess failed"
	exit 1
fi
if [ "${build_arg}" != "" ]; then
	build="${build_arg}"
else
	build="${build_guessed}"
fi
if [ "${host_arg}" != "" ]; then
	host="${host_arg}"
else
	host="${build}"
fi
if [ "${host}" != "${build_guessed}" ]; then
	CROSS_COMPILING="yes"
else
	CROSS_COMPILING="no"
fi
echo "BSDBuild 2.8 (host: $host)"

if [ -e "Makefile.config" ]; then
	echo "* Overwriting existing Makefile.config"
fi
echo "# Generated by configure script (BSDBuild 2.8)." > Makefile.config
echo "" >> Makefile.config
echo "BUILD=${build}" >> Makefile.config
echo "HOST=${host}" >> Makefile.config
echo "CROSS_COMPILING=${CROSS_COMPILING}" >> Makefile.config
echo "SRCDIR=${SRC}" >> Makefile.config
echo "BLDDIR=${BLD}" >> Makefile.config

echo "Generated by configure script" > config.log
echo "BSDBuild Version: 2.8" >> config.log
echo "Host: $host" >> config.log

for arg
do
	echo "Argument: $arg" >> config.log
done
if [ -e "$BLD/include/agar/config" ]; then
	echo "* Overwriting $BLD/include/agar/config directory"
	rm -fR "$BLD/include/agar/config"
fi
mkdir -p "$BLD/include/agar/config"
if [ $? != 0 ]; then
	echo "Could not create $BLD/include/agar/config directory."
	exit 1
fi
HAVE_MANDOC="no"
NROFF=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/nroff" ]; then
		NROFF="${path}/nroff"
	fi
done
if [ "${NROFF}" != "" ]; then
	echo | ${NROFF} -Tmandoc >/dev/null
	if [ "$?" = "0" ]; then
		HAVE_MANDOC="yes"
	fi
fi
if [ "${HAVE_MANDOC}" = "no" ]; then
	if [ "${with_manpages}" = "yes" ]; then
		echo "*"
		echo "* --with-manpages was requested, but either the nroff(1)"
		echo "* utility or the mdoc(7) macro package was not found."
		echo "*"
		exit 1
	fi
	echo "HAVE_MANDOC=no" >> Makefile.config
	echo "NOMAN=yes" >> Makefile.config
	echo "NOMANLINKS=yes" >> Makefile.config
else
	echo "HAVE_MANDOC=yes" >> Makefile.config
	if [ "${with_catman}" = "no" ]; then
		echo "NOCATMAN=yes" >> Makefile.config
	else
		if [ "${with_catman}" = "yes" ]; then
			echo "NOCATMAN=no" >> Makefile.config
		else
			case "${host}" in
			*-*-freebsd*)
				echo "NOCATMAN=yes" >> Makefile.config
				;;
			*)
				echo "NOCATMAN=no" >> Makefile.config
				;;
			esac
		fi
	fi
	if [ "${with_manpages}" = "no" ]; then
		echo "NOMAN=yes" >> Makefile.config
		echo "NOMANLINKS=yes" >> Makefile.config
	else
		if [ "${with_manlinks}" != "yes" ]; then
			echo "NOMANLINKS=yes" >> Makefile.config
		fi
	fi
fi
if [ "${with_docs}" = "no" ]; then
	echo "NODOC=yes" >> Makefile.config
fi
if [ "${enable_nls}" = "yes" ]; then
ENABLE_NLS="yes"
echo "#ifndef ENABLE_NLS" > $BLD/include/agar/config/enable_nls.h
echo "#define ENABLE_NLS \"$ENABLE_NLS\"" >> $BLD/include/agar/config/enable_nls.h
echo "#endif" >> $BLD/include/agar/config/enable_nls.h
echo "hdefs[\"ENABLE_NLS\"] = \"$ENABLE_NLS\"" >>configure.lua
msgfmt=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/msgfmt" ]; then
		msgfmt=${path}/msgfmt
	fi
done
if [ "${msgfmt}" != "" ]; then
	HAVE_GETTEXT="yes"
else
	HAVE_GETTEXT="no"
fi
echo "#ifndef ENABLE_NLS" > $BLD/include/agar/config/enable_nls.h
echo "#define ENABLE_NLS \"$ENABLE_NLS\"" >> $BLD/include/agar/config/enable_nls.h
echo "#endif" >> $BLD/include/agar/config/enable_nls.h
echo "hdefs[\"ENABLE_NLS\"] = \"$ENABLE_NLS\"" >>configure.lua
else
ENABLE_NLS="no"
HAVE_GETTEXT="no"
echo "#undef ENABLE_NLS" >$BLD/include/agar/config/enable_nls.h
echo "hdefs[\"ENABLE_NLS\"] = nil" >>configure.lua
fi;
echo "ENABLE_NLS=$ENABLE_NLS" >>Makefile.config
echo "mdefs[\"ENABLE_NLS\"] = \"$ENABLE_NLS\"" >>configure.lua
echo "HAVE_GETTEXT=$HAVE_GETTEXT" >>Makefile.config
echo "mdefs[\"HAVE_GETTEXT\"] = \"$HAVE_GETTEXT\"" >>configure.lua
CTAGS=""
if [ "${with_ctags}" = "yes" ]; then
	for path in `echo $PATH | sed 's/:/ /g'`; do
		if [ -x "${path}/ectags" ]; then
			CTAGS="${path}/ectags"
		fi
	done
	if [ "${CTAGS}" = "" ]; then
		for path in `echo $PATH | sed 's/:/ /g'`; do
			if [ -x "${path}/ctags" ]; then
				CTAGS="${path}/ctags"
			fi
		done
	fi
fi
echo "CTAGS=${CTAGS}" >> Makefile.config
LIBTOOL_BUNDLED="yes"
LIBTOOL=\${TOP}/mk/libtool/libtool
echo "LIBTOOL=${LIBTOOL}" >> Makefile.config
echo "PREFIX?=${PREFIX}" >> Makefile.config
echo "#ifndef PREFIX" > $BLD/include/agar/config/prefix.h
echo "#define PREFIX \"$PREFIX\"" >> $BLD/include/agar/config/prefix.h
echo "#endif" >> $BLD/include/agar/config/prefix.h
echo "hdefs[\"PREFIX\"] = \"$PREFIX\"" >>configure.lua
if [ "${localedir}" != "" ]; then
	LOCALEDIR="${localedir}"
else
	LOCALEDIR="${SHAREDIR}/locale"
fi
echo "#ifndef LOCALEDIR" > $BLD/include/agar/config/localedir.h
echo "#define LOCALEDIR \"$LOCALEDIR\"" >> $BLD/include/agar/config/localedir.h
echo "#endif" >> $BLD/include/agar/config/localedir.h
echo "hdefs[\"LOCALEDIR\"] = \"$LOCALEDIR\"" >>configure.lua
if [ "${mandir}" != "" ]; then
	MANDIR="${mandir}"
else
	MANDIR="${PREFIX}/man"
fi
echo "#ifndef MANDIR" > $BLD/include/agar/config/mandir.h
echo "#define MANDIR \"$MANDIR\"" >> $BLD/include/agar/config/mandir.h
echo "#endif" >> $BLD/include/agar/config/mandir.h
echo "hdefs[\"MANDIR\"] = \"$MANDIR\"" >>configure.lua
if [ "${sharedir}" != "" ]; then
	SHAREDIR="${sharedir}"
else
	SHAREDIR="${PREFIX}/share"
fi
echo "#ifndef SHAREDIR" > $BLD/include/agar/config/sharedir.h
echo "#define SHAREDIR \"$SHAREDIR\"" >> $BLD/include/agar/config/sharedir.h
echo "#endif" >> $BLD/include/agar/config/sharedir.h
echo "hdefs[\"SHAREDIR\"] = \"$SHAREDIR\"" >>configure.lua
if [ "${datadir}" != "" ]; then
	DATADIR="${datadir}"
else
	DATADIR="${PREFIX}/share"
fi
echo "#ifndef DATADIR" > $BLD/include/agar/config/datadir.h
echo "#define DATADIR \"$DATADIR\"" >> $BLD/include/agar/config/datadir.h
echo "#endif" >> $BLD/include/agar/config/datadir.h
echo "hdefs[\"DATADIR\"] = \"$DATADIR\"" >>configure.lua
if [ "${libdir}" != "" ]; then
	LIBDIR="${libdir}"
else
	LIBDIR="${PREFIX}/lib"
fi
echo "#ifndef LIBDIR" > $BLD/include/agar/config/libdir.h
echo "#define LIBDIR \"$LIBDIR\"" >> $BLD/include/agar/config/libdir.h
echo "#endif" >> $BLD/include/agar/config/libdir.h
echo "hdefs[\"LIBDIR\"] = \"$LIBDIR\"" >>configure.lua
if [ "${sbindir}" != "" ]; then
	SBINDIR="${sbindir}"
else
	SBINDIR="${PREFIX}/sbin"
fi
echo "#ifndef SBINDIR" > $BLD/include/agar/config/sbindir.h
echo "#define SBINDIR \"$SBINDIR\"" >> $BLD/include/agar/config/sbindir.h
echo "#endif" >> $BLD/include/agar/config/sbindir.h
echo "hdefs[\"SBINDIR\"] = \"$SBINDIR\"" >>configure.lua
if [ "${infodir}" != "" ]; then
	INFODIR="${infodir}"
else
	INFODIR="${SHAREDIR}/info"
fi
echo "#ifndef INFODIR" > $BLD/include/agar/config/infodir.h
echo "#define INFODIR \"$INFODIR\"" >> $BLD/include/agar/config/infodir.h
echo "#endif" >> $BLD/include/agar/config/infodir.h
echo "hdefs[\"INFODIR\"] = \"$INFODIR\"" >>configure.lua
if [ "${sysconfdir}" != "" ]; then
	SYSCONFDIR="${sysconfdir}"
else
	SYSCONFDIR="${PREFIX}/etc"
fi
echo "#ifndef SYSCONFDIR" > $BLD/include/agar/config/sysconfdir.h
echo "#define SYSCONFDIR \"$SYSCONFDIR\"" >> $BLD/include/agar/config/sysconfdir.h
echo "#endif" >> $BLD/include/agar/config/sysconfdir.h
echo "hdefs[\"SYSCONFDIR\"] = \"$SYSCONFDIR\"" >>configure.lua
if [ "${bindir}" != "" ]; then
	BINDIR="${bindir}"
else
	BINDIR="${PREFIX}/bin"
fi
echo "#ifndef BINDIR" > $BLD/include/agar/config/bindir.h
echo "#define BINDIR \"$BINDIR\"" >> $BLD/include/agar/config/bindir.h
echo "#endif" >> $BLD/include/agar/config/bindir.h
echo "hdefs[\"BINDIR\"] = \"$BINDIR\"" >>configure.lua
if [ "${libexecdir}" != "" ]; then
	LIBEXECDIR="${libexecdir}"
else
	LIBEXECDIR="${PREFIX}/libexec"
fi
echo "#ifndef LIBEXECDIR" > $BLD/include/agar/config/libexecdir.h
echo "#define LIBEXECDIR \"$LIBEXECDIR\"" >> $BLD/include/agar/config/libexecdir.h
echo "#endif" >> $BLD/include/agar/config/libexecdir.h
echo "hdefs[\"LIBEXECDIR\"] = \"$LIBEXECDIR\"" >>configure.lua
if [ "${localstatedir}" != "" ]; then
	LOCALSTATEDIR="${localstatedir}"
else
	LOCALSTATEDIR="${PREFIX}/var"
fi
echo "#ifndef LOCALSTATEDIR" > $BLD/include/agar/config/localstatedir.h
echo "#define LOCALSTATEDIR \"$LOCALSTATEDIR\"" >> $BLD/include/agar/config/localstatedir.h
echo "#endif" >> $BLD/include/agar/config/localstatedir.h
echo "hdefs[\"LOCALSTATEDIR\"] = \"$LOCALSTATEDIR\"" >>configure.lua
PACKAGE="Agar"
echo "PACKAGE=$PACKAGE" >>Makefile.config
echo "mdefs[\"PACKAGE\"] = \"$PACKAGE\"" >>configure.lua
echo "#ifndef PACKAGE" > $BLD/include/agar/config/package.h
echo "#define PACKAGE \"$PACKAGE\"" >> $BLD/include/agar/config/package.h
echo "#endif" >> $BLD/include/agar/config/package.h
echo "hdefs[\"PACKAGE\"] = \"$PACKAGE\"" >>configure.lua
VERSION="1.4.1"
echo "VERSION=$VERSION" >>Makefile.config
echo "mdefs[\"VERSION\"] = \"$VERSION\"" >>configure.lua
echo "#ifndef VERSION" > $BLD/include/agar/config/version.h
echo "#define VERSION \"$VERSION\"" >> $BLD/include/agar/config/version.h
echo "#endif" >> $BLD/include/agar/config/version.h
echo "hdefs[\"VERSION\"] = \"$VERSION\"" >>configure.lua
RELEASE="Landscapes of Frozen Methane"
echo "RELEASE=$RELEASE" >>Makefile.config
echo "mdefs[\"RELEASE\"] = \"$RELEASE\"" >>configure.lua
echo "#ifndef RELEASE" > $BLD/include/agar/config/release.h
echo "#define RELEASE \"$RELEASE\"" >> $BLD/include/agar/config/release.h
echo "#endif" >> $BLD/include/agar/config/release.h
echo "hdefs[\"RELEASE\"] = \"$RELEASE\"" >>configure.lua
SHAREDIR="\${PREFIX}/share/agar"
echo "SHAREDIR=$SHAREDIR" >>Makefile.config
echo "mdefs[\"SHAREDIR\"] = \"$SHAREDIR\"" >>configure.lua
SHAREDIR="$PREFIX/share/agar"
echo "#ifndef SHAREDIR" > $BLD/include/agar/config/sharedir.h
echo "#define SHAREDIR \"$SHAREDIR\"" >> $BLD/include/agar/config/sharedir.h
echo "#endif" >> $BLD/include/agar/config/sharedir.h
echo "hdefs[\"SHAREDIR\"] = \"$SHAREDIR\"" >>configure.lua
LOCALEDIR="\${PREFIX}/share/agar/locale"
echo "LOCALEDIR=$LOCALEDIR" >>Makefile.config
echo "mdefs[\"LOCALEDIR\"] = \"$LOCALEDIR\"" >>configure.lua
LOCALEDIR="$PREFIX/share/agar/locale"
echo "#ifndef LOCALEDIR" > $BLD/include/agar/config/localedir.h
echo "#define LOCALEDIR \"$LOCALEDIR\"" >> $BLD/include/agar/config/localedir.h
echo "#endif" >> $BLD/include/agar/config/localedir.h
echo "hdefs[\"LOCALEDIR\"] = \"$LOCALEDIR\"" >>configure.lua
TTFDIR="\${PREFIX}/share/agar/fonts"
echo "TTFDIR=$TTFDIR" >>Makefile.config
echo "mdefs[\"TTFDIR\"] = \"$TTFDIR\"" >>configure.lua
TTFDIR="$PREFIX/share/agar/fonts"
echo "#ifndef TTFDIR" > $BLD/include/agar/config/ttfdir.h
echo "#define TTFDIR \"$TTFDIR\"" >> $BLD/include/agar/config/ttfdir.h
echo "#endif" >> $BLD/include/agar/config/ttfdir.h
echo "hdefs[\"TTFDIR\"] = \"$TTFDIR\"" >>configure.lua
INCLDIR="\${PREFIX}/include/agar"
echo "INCLDIR=$INCLDIR" >>Makefile.config
echo "mdefs[\"INCLDIR\"] = \"$INCLDIR\"" >>configure.lua
INCLDIR="$PREFIX/include/agar"
echo "#ifndef INCLDIR" > $BLD/include/agar/config/incldir.h
echo "#define INCLDIR \"$INCLDIR\"" >> $BLD/include/agar/config/incldir.h
echo "#endif" >> $BLD/include/agar/config/incldir.h
echo "hdefs[\"INCLDIR\"] = \"$INCLDIR\"" >>configure.lua
$ECHO_N "checking for a C compiler..."
$ECHO_N "checking for a C compiler..." >> config.log
if [ "$CC" = "" ]; then
	for i in `echo $PATH |sed 's/:/ /g'`; do
		if [ -x "${i}/cc" ]; then
			if [ -f "${i}/cc" ]; then
				CC="${i}/cc"
				break
			fi
		elif [ -x "${i}/gcc" ]; then
			if [ -f "${i}/gcc" ]; then
				CC="${i}/gcc"
				break
			fi
		fi
	done
	if [ "$CC" = "" ]; then
		echo "*"
		echo "* Unable to find a standard C compiler in PATH. You may need"
		echo "* to set the CC environment variable."
		echo "*"
		echo "Unable to find a C compiler in PATH." >> config.log
		HAVE_CC="no"
		echo "no"
	else
		HAVE_CC="yes"
		echo "yes, ${CC}"
		echo "yes, ${CC}" >> config.log
	fi
else
	HAVE_CC="yes"
	echo "using ${CC}"
fi

if [ "${HAVE_CC}" = "yes" ]; then
	$ECHO_N "checking whether the C compiler works..."
	$ECHO_N "checking whether the C compiler works..." >> config.log
	cat << 'EOT' > conftest.c
int main(int argc, char *argv[]) { return (0); }
EOT
	$CC -o conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
	    echo "no, the test failed to compile"
	    echo "no, the test failed to compile" >> config.log
		HAVE_CC="no"
	else
		echo "yes"
		echo "yes" >> config.log
		HAVE_CC="yes"
	fi

	if [ "${EXECSUFFIX}" = "" ]; then
		EXECSUFFIX=""
		for OUTFILE in conftest.exe conftest conftest.*; do
			if [ -f $OUTFILE ]; then
				case $OUTFILE in
				*.c | *.o | *.obj | *.bb | *.bbg | *.d | *.pdb | *.tds | *.xcoff | *.dSYM | *.xSYM )
					;;
				*.* )
					EXECSUFFIX=`expr "$OUTFILE" : '[^.]*\(\..*\)'`
					break ;;
				* )
					break ;;
				esac;
		    fi
		done
		if [ "$EXECSUFFIX" != "" ]; then
			echo "Detected executable suffix: $EXECSUFFIX" >> config.log
		fi
echo "EXECSUFFIX=$EXECSUFFIX" >>Makefile.config
echo "mdefs[\"EXECSUFFIX\"] = \"$EXECSUFFIX\"" >>configure.lua
echo "#ifndef EXECSUFFIX" > $BLD/include/agar/config/execsuffix.h
echo "#define EXECSUFFIX \"$EXECSUFFIX\"" >> $BLD/include/agar/config/execsuffix.h
echo "#endif" >> $BLD/include/agar/config/execsuffix.h
echo "hdefs[\"EXECSUFFIX\"] = \"$EXECSUFFIX\"" >>configure.lua
	fi
	rm -f conftest.c conftest$EXECSUFFIX
	TEST_CFLAGS=""
fi
$ECHO_N "checking for compiler warning options..."
$ECHO_N "checking for compiler warning options..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_CC_WARNINGS" ]; then
		HAVE_CC_WARNINGS=`cat ${cache}/ctest-HAVE_CC_WARNINGS`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_CC_WARNINGS`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
int main(int argc, char *argv[]) { return (0); }

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o $testdir/conftest conftest.c " >>config.log
	$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o $testdir/conftest conftest.c  2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_CC_WARNINGS="yes"
echo "HAVE_CC_WARNINGS=$HAVE_CC_WARNINGS" >>Makefile.config
echo "mdefs[\"HAVE_CC_WARNINGS\"] = \"$HAVE_CC_WARNINGS\"" >>configure.lua
echo "#ifndef HAVE_CC_WARNINGS" > $BLD/include/agar/config/have_cc_warnings.h
echo "#define HAVE_CC_WARNINGS \"$HAVE_CC_WARNINGS\"" >> $BLD/include/agar/config/have_cc_warnings.h
echo "#endif" >> $BLD/include/agar/config/have_cc_warnings.h
echo "hdefs[\"HAVE_CC_WARNINGS\"] = \"$HAVE_CC_WARNINGS\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_CC_WARNINGS="no"
echo "HAVE_CC_WARNINGS=$HAVE_CC_WARNINGS" >>Makefile.config
echo "mdefs[\"HAVE_CC_WARNINGS\"] = \"$HAVE_CC_WARNINGS\"" >>configure.lua
echo "#undef HAVE_CC_WARNINGS" >$BLD/include/agar/config/have_cc_warnings.h
echo "hdefs[\"HAVE_CC_WARNINGS\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_CC_WARNINGS" > ${cache}/ctest-HAVE_CC_WARNINGS
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_CC_WARNINGS
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_CC_WARNINGS}" = "yes" ]; then
TEST_CFLAGS="-Wall -Werror"
fi;
$ECHO_N "checking for gcc..."
$ECHO_N "checking for gcc..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_GCC" ]; then
		HAVE_GCC=`cat ${cache}/ctest-HAVE_GCC`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_GCC`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
int main(int argc, char *argv[]) {
#if !defined(__GNUC__)
# error "Not GCC"
#endif
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c " >>config.log
	$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c  2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_GCC="yes"
echo "HAVE_GCC=$HAVE_GCC" >>Makefile.config
echo "mdefs[\"HAVE_GCC\"] = \"$HAVE_GCC\"" >>configure.lua
echo "#ifndef HAVE_GCC" > $BLD/include/agar/config/have_gcc.h
echo "#define HAVE_GCC \"$HAVE_GCC\"" >> $BLD/include/agar/config/have_gcc.h
echo "#endif" >> $BLD/include/agar/config/have_gcc.h
echo "hdefs[\"HAVE_GCC\"] = \"$HAVE_GCC\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_GCC="no"
echo "HAVE_GCC=$HAVE_GCC" >>Makefile.config
echo "mdefs[\"HAVE_GCC\"] = \"$HAVE_GCC\"" >>configure.lua
echo "#undef HAVE_GCC" >$BLD/include/agar/config/have_gcc.h
echo "hdefs[\"HAVE_GCC\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_GCC" > ${cache}/ctest-HAVE_GCC
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_GCC
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
$ECHO_N "checking for IEEE754 floating point..."
$ECHO_N "checking for IEEE754 floating point..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_IEEE754" ]; then
		HAVE_IEEE754=`cat ${cache}/ctest-HAVE_IEEE754`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_IEEE754`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
int
main(int argc, char *argv[])
{
	float f = 1.5;
	double d = 2.5;
	f = 0;
	d = 0;
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c " >>config.log
	$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c  2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_IEEE754="yes"
echo "HAVE_IEEE754=$HAVE_IEEE754" >>Makefile.config
echo "mdefs[\"HAVE_IEEE754\"] = \"$HAVE_IEEE754\"" >>configure.lua
echo "#ifndef HAVE_IEEE754" > $BLD/include/agar/config/have_ieee754.h
echo "#define HAVE_IEEE754 \"$HAVE_IEEE754\"" >> $BLD/include/agar/config/have_ieee754.h
echo "#endif" >> $BLD/include/agar/config/have_ieee754.h
echo "hdefs[\"HAVE_IEEE754\"] = \"$HAVE_IEEE754\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_IEEE754="no"
echo "HAVE_IEEE754=$HAVE_IEEE754" >>Makefile.config
echo "mdefs[\"HAVE_IEEE754\"] = \"$HAVE_IEEE754\"" >>configure.lua
echo "#undef HAVE_IEEE754" >$BLD/include/agar/config/have_ieee754.h
echo "hdefs[\"HAVE_IEEE754\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_IEEE754" > ${cache}/ctest-HAVE_IEEE754
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_IEEE754
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
$ECHO_N "checking aligned attribute..."
$ECHO_N "checking aligned attribute..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_ALIGNED_ATTRIBUTE" ]; then
		HAVE_ALIGNED_ATTRIBUTE=`cat ${cache}/ctest-HAVE_ALIGNED_ATTRIBUTE`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_ALIGNED_ATTRIBUTE`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
int main(int argc, char *argv[])
{
	struct s1 { int x,y,z; } __attribute__ ((aligned(16)));
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_ALIGNED_ATTRIBUTE="yes"
echo "HAVE_ALIGNED_ATTRIBUTE=$HAVE_ALIGNED_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_ALIGNED_ATTRIBUTE\"] = \"$HAVE_ALIGNED_ATTRIBUTE\"" >>configure.lua
echo "#ifndef HAVE_ALIGNED_ATTRIBUTE" > $BLD/include/agar/config/have_aligned_attribute.h
echo "#define HAVE_ALIGNED_ATTRIBUTE \"$HAVE_ALIGNED_ATTRIBUTE\"" >> $BLD/include/agar/config/have_aligned_attribute.h
echo "#endif" >> $BLD/include/agar/config/have_aligned_attribute.h
echo "hdefs[\"HAVE_ALIGNED_ATTRIBUTE\"] = \"$HAVE_ALIGNED_ATTRIBUTE\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_ALIGNED_ATTRIBUTE="no"
echo "HAVE_ALIGNED_ATTRIBUTE=$HAVE_ALIGNED_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_ALIGNED_ATTRIBUTE\"] = \"$HAVE_ALIGNED_ATTRIBUTE\"" >>configure.lua
echo "#undef HAVE_ALIGNED_ATTRIBUTE" >$BLD/include/agar/config/have_aligned_attribute.h
echo "hdefs[\"HAVE_ALIGNED_ATTRIBUTE\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_ALIGNED_ATTRIBUTE" > ${cache}/ctest-HAVE_ALIGNED_ATTRIBUTE
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_ALIGNED_ATTRIBUTE
fi
rm -f conftest.c $testdir/conftest
$ECHO_N "checking bounded attribute..."
$ECHO_N "checking bounded attribute..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_BOUNDED_ATTRIBUTE" ]; then
		HAVE_BOUNDED_ATTRIBUTE=`cat ${cache}/ctest-HAVE_BOUNDED_ATTRIBUTE`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_BOUNDED_ATTRIBUTE`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
void foo(char *, int) __attribute__ ((__bounded__(__string__,1,2)));
void foo(char *a, int c) { }
int main(int argc, char *argv[])
{
	char buf[32];
	foo(buf, sizeof(buf));
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c " >>config.log
	$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c  2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_BOUNDED_ATTRIBUTE="yes"
echo "HAVE_BOUNDED_ATTRIBUTE=$HAVE_BOUNDED_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_BOUNDED_ATTRIBUTE\"] = \"$HAVE_BOUNDED_ATTRIBUTE\"" >>configure.lua
echo "#ifndef HAVE_BOUNDED_ATTRIBUTE" > $BLD/include/agar/config/have_bounded_attribute.h
echo "#define HAVE_BOUNDED_ATTRIBUTE \"$HAVE_BOUNDED_ATTRIBUTE\"" >> $BLD/include/agar/config/have_bounded_attribute.h
echo "#endif" >> $BLD/include/agar/config/have_bounded_attribute.h
echo "hdefs[\"HAVE_BOUNDED_ATTRIBUTE\"] = \"$HAVE_BOUNDED_ATTRIBUTE\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_BOUNDED_ATTRIBUTE="no"
echo "HAVE_BOUNDED_ATTRIBUTE=$HAVE_BOUNDED_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_BOUNDED_ATTRIBUTE\"] = \"$HAVE_BOUNDED_ATTRIBUTE\"" >>configure.lua
echo "#undef HAVE_BOUNDED_ATTRIBUTE" >$BLD/include/agar/config/have_bounded_attribute.h
echo "hdefs[\"HAVE_BOUNDED_ATTRIBUTE\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_BOUNDED_ATTRIBUTE" > ${cache}/ctest-HAVE_BOUNDED_ATTRIBUTE
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_BOUNDED_ATTRIBUTE
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
$ECHO_N "checking const attribute..."
$ECHO_N "checking const attribute..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_CONST_ATTRIBUTE" ]; then
		HAVE_CONST_ATTRIBUTE=`cat ${cache}/ctest-HAVE_CONST_ATTRIBUTE`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_CONST_ATTRIBUTE`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
int foo(int) __attribute__ ((const));
int foo(int x) { return (x*x); }
int main(int argc, char *argv[])
{
	int x = foo(1);
	return (x);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_CONST_ATTRIBUTE="yes"
echo "HAVE_CONST_ATTRIBUTE=$HAVE_CONST_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_CONST_ATTRIBUTE\"] = \"$HAVE_CONST_ATTRIBUTE\"" >>configure.lua
echo "#ifndef HAVE_CONST_ATTRIBUTE" > $BLD/include/agar/config/have_const_attribute.h
echo "#define HAVE_CONST_ATTRIBUTE \"$HAVE_CONST_ATTRIBUTE\"" >> $BLD/include/agar/config/have_const_attribute.h
echo "#endif" >> $BLD/include/agar/config/have_const_attribute.h
echo "hdefs[\"HAVE_CONST_ATTRIBUTE\"] = \"$HAVE_CONST_ATTRIBUTE\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_CONST_ATTRIBUTE="no"
echo "HAVE_CONST_ATTRIBUTE=$HAVE_CONST_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_CONST_ATTRIBUTE\"] = \"$HAVE_CONST_ATTRIBUTE\"" >>configure.lua
echo "#undef HAVE_CONST_ATTRIBUTE" >$BLD/include/agar/config/have_const_attribute.h
echo "hdefs[\"HAVE_CONST_ATTRIBUTE\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_CONST_ATTRIBUTE" > ${cache}/ctest-HAVE_CONST_ATTRIBUTE
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_CONST_ATTRIBUTE
fi
rm -f conftest.c $testdir/conftest
$ECHO_N "checking deprecated attribute..."
$ECHO_N "checking deprecated attribute..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_DEPRECATED_ATTRIBUTE" ]; then
		HAVE_DEPRECATED_ATTRIBUTE=`cat ${cache}/ctest-HAVE_DEPRECATED_ATTRIBUTE`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_DEPRECATED_ATTRIBUTE`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
void foo(void) __attribute__ ((deprecated));
void foo(void) { }

int main(int argc, char *argv[])
{
/*	foo(); */
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_DEPRECATED_ATTRIBUTE="yes"
echo "HAVE_DEPRECATED_ATTRIBUTE=$HAVE_DEPRECATED_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_DEPRECATED_ATTRIBUTE\"] = \"$HAVE_DEPRECATED_ATTRIBUTE\"" >>configure.lua
echo "#ifndef HAVE_DEPRECATED_ATTRIBUTE" > $BLD/include/agar/config/have_deprecated_attribute.h
echo "#define HAVE_DEPRECATED_ATTRIBUTE \"$HAVE_DEPRECATED_ATTRIBUTE\"" >> $BLD/include/agar/config/have_deprecated_attribute.h
echo "#endif" >> $BLD/include/agar/config/have_deprecated_attribute.h
echo "hdefs[\"HAVE_DEPRECATED_ATTRIBUTE\"] = \"$HAVE_DEPRECATED_ATTRIBUTE\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_DEPRECATED_ATTRIBUTE="no"
echo "HAVE_DEPRECATED_ATTRIBUTE=$HAVE_DEPRECATED_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_DEPRECATED_ATTRIBUTE\"] = \"$HAVE_DEPRECATED_ATTRIBUTE\"" >>configure.lua
echo "#undef HAVE_DEPRECATED_ATTRIBUTE" >$BLD/include/agar/config/have_deprecated_attribute.h
echo "hdefs[\"HAVE_DEPRECATED_ATTRIBUTE\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_DEPRECATED_ATTRIBUTE" > ${cache}/ctest-HAVE_DEPRECATED_ATTRIBUTE
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_DEPRECATED_ATTRIBUTE
fi
rm -f conftest.c $testdir/conftest
$ECHO_N "checking format attribute..."
$ECHO_N "checking format attribute..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_FORMAT_ATTRIBUTE" ]; then
		HAVE_FORMAT_ATTRIBUTE=`cat ${cache}/ctest-HAVE_FORMAT_ATTRIBUTE`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_FORMAT_ATTRIBUTE`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <stdarg.h>
void foo1(char *, ...)
     __attribute__((__format__ (printf, 1, 2)));
void foo2(char *, ...)
     __attribute__((__format__ (__printf__, 1, 2)))
     __attribute__((__nonnull__ (1)));
void foo1(char *a, ...) {}
void foo2(char *a, ...) {}
int main(int argc, char *argv[])
{
	foo1("foo %s", "bar");
	foo2("foo %d", 1);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c " >>config.log
	$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c  2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_FORMAT_ATTRIBUTE="yes"
echo "HAVE_FORMAT_ATTRIBUTE=$HAVE_FORMAT_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_FORMAT_ATTRIBUTE\"] = \"$HAVE_FORMAT_ATTRIBUTE\"" >>configure.lua
echo "#ifndef HAVE_FORMAT_ATTRIBUTE" > $BLD/include/agar/config/have_format_attribute.h
echo "#define HAVE_FORMAT_ATTRIBUTE \"$HAVE_FORMAT_ATTRIBUTE\"" >> $BLD/include/agar/config/have_format_attribute.h
echo "#endif" >> $BLD/include/agar/config/have_format_attribute.h
echo "hdefs[\"HAVE_FORMAT_ATTRIBUTE\"] = \"$HAVE_FORMAT_ATTRIBUTE\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_FORMAT_ATTRIBUTE="no"
echo "HAVE_FORMAT_ATTRIBUTE=$HAVE_FORMAT_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_FORMAT_ATTRIBUTE\"] = \"$HAVE_FORMAT_ATTRIBUTE\"" >>configure.lua
echo "#undef HAVE_FORMAT_ATTRIBUTE" >$BLD/include/agar/config/have_format_attribute.h
echo "hdefs[\"HAVE_FORMAT_ATTRIBUTE\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_FORMAT_ATTRIBUTE" > ${cache}/ctest-HAVE_FORMAT_ATTRIBUTE
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_FORMAT_ATTRIBUTE
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
$ECHO_N "checking nonnull attribute..."
$ECHO_N "checking nonnull attribute..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_NONNULL_ATTRIBUTE" ]; then
		HAVE_NONNULL_ATTRIBUTE=`cat ${cache}/ctest-HAVE_NONNULL_ATTRIBUTE`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_NONNULL_ATTRIBUTE`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
void foo(char *) __attribute__((__nonnull__ (1)));
void foo(char *a) { }
int main(int argc, char *argv[])
{
	foo("foo");
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_NONNULL_ATTRIBUTE="yes"
echo "HAVE_NONNULL_ATTRIBUTE=$HAVE_NONNULL_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_NONNULL_ATTRIBUTE\"] = \"$HAVE_NONNULL_ATTRIBUTE\"" >>configure.lua
echo "#ifndef HAVE_NONNULL_ATTRIBUTE" > $BLD/include/agar/config/have_nonnull_attribute.h
echo "#define HAVE_NONNULL_ATTRIBUTE \"$HAVE_NONNULL_ATTRIBUTE\"" >> $BLD/include/agar/config/have_nonnull_attribute.h
echo "#endif" >> $BLD/include/agar/config/have_nonnull_attribute.h
echo "hdefs[\"HAVE_NONNULL_ATTRIBUTE\"] = \"$HAVE_NONNULL_ATTRIBUTE\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_NONNULL_ATTRIBUTE="no"
echo "HAVE_NONNULL_ATTRIBUTE=$HAVE_NONNULL_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_NONNULL_ATTRIBUTE\"] = \"$HAVE_NONNULL_ATTRIBUTE\"" >>configure.lua
echo "#undef HAVE_NONNULL_ATTRIBUTE" >$BLD/include/agar/config/have_nonnull_attribute.h
echo "hdefs[\"HAVE_NONNULL_ATTRIBUTE\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_NONNULL_ATTRIBUTE" > ${cache}/ctest-HAVE_NONNULL_ATTRIBUTE
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_NONNULL_ATTRIBUTE
fi
rm -f conftest.c $testdir/conftest
$ECHO_N "checking noreturn attribute..."
$ECHO_N "checking noreturn attribute..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_NORETURN_ATTRIBUTE" ]; then
		HAVE_NORETURN_ATTRIBUTE=`cat ${cache}/ctest-HAVE_NORETURN_ATTRIBUTE`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_NORETURN_ATTRIBUTE`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <unistd.h>
#include <stdlib.h>
void foo(void) __attribute__ ((noreturn));
void foo(void) { _exit(0); }
int main(int argc, char *argv[])
{
	foo();
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_NORETURN_ATTRIBUTE="yes"
echo "HAVE_NORETURN_ATTRIBUTE=$HAVE_NORETURN_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_NORETURN_ATTRIBUTE\"] = \"$HAVE_NORETURN_ATTRIBUTE\"" >>configure.lua
echo "#ifndef HAVE_NORETURN_ATTRIBUTE" > $BLD/include/agar/config/have_noreturn_attribute.h
echo "#define HAVE_NORETURN_ATTRIBUTE \"$HAVE_NORETURN_ATTRIBUTE\"" >> $BLD/include/agar/config/have_noreturn_attribute.h
echo "#endif" >> $BLD/include/agar/config/have_noreturn_attribute.h
echo "hdefs[\"HAVE_NORETURN_ATTRIBUTE\"] = \"$HAVE_NORETURN_ATTRIBUTE\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_NORETURN_ATTRIBUTE="no"
echo "HAVE_NORETURN_ATTRIBUTE=$HAVE_NORETURN_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_NORETURN_ATTRIBUTE\"] = \"$HAVE_NORETURN_ATTRIBUTE\"" >>configure.lua
echo "#undef HAVE_NORETURN_ATTRIBUTE" >$BLD/include/agar/config/have_noreturn_attribute.h
echo "hdefs[\"HAVE_NORETURN_ATTRIBUTE\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_NORETURN_ATTRIBUTE" > ${cache}/ctest-HAVE_NORETURN_ATTRIBUTE
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_NORETURN_ATTRIBUTE
fi
rm -f conftest.c $testdir/conftest
$ECHO_N "checking packed attribute..."
$ECHO_N "checking packed attribute..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_PACKED_ATTRIBUTE" ]; then
		HAVE_PACKED_ATTRIBUTE=`cat ${cache}/ctest-HAVE_PACKED_ATTRIBUTE`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_PACKED_ATTRIBUTE`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
int main(int argc, char *argv[])
{
	struct s1 { char c; int x,y,z; } __attribute__ ((packed));
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_PACKED_ATTRIBUTE="yes"
echo "HAVE_PACKED_ATTRIBUTE=$HAVE_PACKED_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_PACKED_ATTRIBUTE\"] = \"$HAVE_PACKED_ATTRIBUTE\"" >>configure.lua
echo "#ifndef HAVE_PACKED_ATTRIBUTE" > $BLD/include/agar/config/have_packed_attribute.h
echo "#define HAVE_PACKED_ATTRIBUTE \"$HAVE_PACKED_ATTRIBUTE\"" >> $BLD/include/agar/config/have_packed_attribute.h
echo "#endif" >> $BLD/include/agar/config/have_packed_attribute.h
echo "hdefs[\"HAVE_PACKED_ATTRIBUTE\"] = \"$HAVE_PACKED_ATTRIBUTE\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_PACKED_ATTRIBUTE="no"
echo "HAVE_PACKED_ATTRIBUTE=$HAVE_PACKED_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_PACKED_ATTRIBUTE\"] = \"$HAVE_PACKED_ATTRIBUTE\"" >>configure.lua
echo "#undef HAVE_PACKED_ATTRIBUTE" >$BLD/include/agar/config/have_packed_attribute.h
echo "hdefs[\"HAVE_PACKED_ATTRIBUTE\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_PACKED_ATTRIBUTE" > ${cache}/ctest-HAVE_PACKED_ATTRIBUTE
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_PACKED_ATTRIBUTE
fi
rm -f conftest.c $testdir/conftest
$ECHO_N "checking pure attribute..."
$ECHO_N "checking pure attribute..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_PURE_ATTRIBUTE" ]; then
		HAVE_PURE_ATTRIBUTE=`cat ${cache}/ctest-HAVE_PURE_ATTRIBUTE`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_PURE_ATTRIBUTE`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
int foo(int) __attribute__ ((pure));
int foo(int x) { return (x*x); }
int main(int argc, char *argv[])
{
	int x = foo(1);
	return (x);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_PURE_ATTRIBUTE="yes"
echo "HAVE_PURE_ATTRIBUTE=$HAVE_PURE_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_PURE_ATTRIBUTE\"] = \"$HAVE_PURE_ATTRIBUTE\"" >>configure.lua
echo "#ifndef HAVE_PURE_ATTRIBUTE" > $BLD/include/agar/config/have_pure_attribute.h
echo "#define HAVE_PURE_ATTRIBUTE \"$HAVE_PURE_ATTRIBUTE\"" >> $BLD/include/agar/config/have_pure_attribute.h
echo "#endif" >> $BLD/include/agar/config/have_pure_attribute.h
echo "hdefs[\"HAVE_PURE_ATTRIBUTE\"] = \"$HAVE_PURE_ATTRIBUTE\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_PURE_ATTRIBUTE="no"
echo "HAVE_PURE_ATTRIBUTE=$HAVE_PURE_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_PURE_ATTRIBUTE\"] = \"$HAVE_PURE_ATTRIBUTE\"" >>configure.lua
echo "#undef HAVE_PURE_ATTRIBUTE" >$BLD/include/agar/config/have_pure_attribute.h
echo "hdefs[\"HAVE_PURE_ATTRIBUTE\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_PURE_ATTRIBUTE" > ${cache}/ctest-HAVE_PURE_ATTRIBUTE
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_PURE_ATTRIBUTE
fi
rm -f conftest.c $testdir/conftest
$ECHO_N "checking warn_unused_result attribute..."
$ECHO_N "checking warn_unused_result attribute..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_WARN_UNUSED_RESULT_ATTRIBUTE" ]; then
		HAVE_WARN_UNUSED_RESULT_ATTRIBUTE=`cat ${cache}/ctest-HAVE_WARN_UNUSED_RESULT_ATTRIBUTE`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_WARN_UNUSED_RESULT_ATTRIBUTE`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
int foo(void) __attribute__ ((warn_unused_result));
int foo(void) { return (1); }
int main(int argc, char *argv[])
{
	int rv = foo();
	return (rv);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_WARN_UNUSED_RESULT_ATTRIBUTE="yes"
echo "HAVE_WARN_UNUSED_RESULT_ATTRIBUTE=$HAVE_WARN_UNUSED_RESULT_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_WARN_UNUSED_RESULT_ATTRIBUTE\"] = \"$HAVE_WARN_UNUSED_RESULT_ATTRIBUTE\"" >>configure.lua
echo "#ifndef HAVE_WARN_UNUSED_RESULT_ATTRIBUTE" > $BLD/include/agar/config/have_warn_unused_result_attribute.h
echo "#define HAVE_WARN_UNUSED_RESULT_ATTRIBUTE \"$HAVE_WARN_UNUSED_RESULT_ATTRIBUTE\"" >> $BLD/include/agar/config/have_warn_unused_result_attribute.h
echo "#endif" >> $BLD/include/agar/config/have_warn_unused_result_attribute.h
echo "hdefs[\"HAVE_WARN_UNUSED_RESULT_ATTRIBUTE\"] = \"$HAVE_WARN_UNUSED_RESULT_ATTRIBUTE\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_WARN_UNUSED_RESULT_ATTRIBUTE="no"
echo "HAVE_WARN_UNUSED_RESULT_ATTRIBUTE=$HAVE_WARN_UNUSED_RESULT_ATTRIBUTE" >>Makefile.config
echo "mdefs[\"HAVE_WARN_UNUSED_RESULT_ATTRIBUTE\"] = \"$HAVE_WARN_UNUSED_RESULT_ATTRIBUTE\"" >>configure.lua
echo "#undef HAVE_WARN_UNUSED_RESULT_ATTRIBUTE" >$BLD/include/agar/config/have_warn_unused_result_attribute.h
echo "hdefs[\"HAVE_WARN_UNUSED_RESULT_ATTRIBUTE\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_WARN_UNUSED_RESULT_ATTRIBUTE" > ${cache}/ctest-HAVE_WARN_UNUSED_RESULT_ATTRIBUTE
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_WARN_UNUSED_RESULT_ATTRIBUTE
fi
rm -f conftest.c $testdir/conftest
$ECHO_N "checking for long double..."
$ECHO_N "checking for long double..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_LONG_DOUBLE" ]; then
		HAVE_LONG_DOUBLE=`cat ${cache}/ctest-HAVE_LONG_DOUBLE`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_LONG_DOUBLE`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
int
main(int argc, char *argv[])
{
	long double ld = 0.1;

	ld = 0;
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_LONG_DOUBLE="yes"
echo "#ifndef HAVE_LONG_DOUBLE" > $BLD/include/agar/config/have_long_double.h
echo "#define HAVE_LONG_DOUBLE \"$HAVE_LONG_DOUBLE\"" >> $BLD/include/agar/config/have_long_double.h
echo "#endif" >> $BLD/include/agar/config/have_long_double.h
echo "hdefs[\"HAVE_LONG_DOUBLE\"] = \"$HAVE_LONG_DOUBLE\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_LONG_DOUBLE="no"
echo "#undef HAVE_LONG_DOUBLE" >$BLD/include/agar/config/have_long_double.h
echo "hdefs[\"HAVE_LONG_DOUBLE\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_LONG_DOUBLE" > ${cache}/ctest-HAVE_LONG_DOUBLE
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_LONG_DOUBLE
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
$ECHO_N "checking for long long..."
$ECHO_N "checking for long long..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_LONG_LONG" ]; then
		HAVE_LONG_LONG=`cat ${cache}/ctest-HAVE_LONG_LONG`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_LONG_LONG`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
int
main(int argc, char *argv[])
{
	long long ll = 0.0;
	unsigned long long ull = 0.0;
	ll = 1.0;
	ull = 1.0;
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_LONG_LONG="yes"
echo "#ifndef HAVE_LONG_LONG" > $BLD/include/agar/config/have_long_long.h
echo "#define HAVE_LONG_LONG \"$HAVE_LONG_LONG\"" >> $BLD/include/agar/config/have_long_long.h
echo "#endif" >> $BLD/include/agar/config/have_long_long.h
echo "hdefs[\"HAVE_LONG_LONG\"] = \"$HAVE_LONG_LONG\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_LONG_LONG="no"
echo "#undef HAVE_LONG_LONG" >$BLD/include/agar/config/have_long_long.h
echo "hdefs[\"HAVE_LONG_LONG\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_LONG_LONG" > ${cache}/ctest-HAVE_LONG_LONG
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_LONG_LONG
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
$ECHO_N "checking for cygwin environment..."
$ECHO_N "checking for cygwin environment..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_CYGWIN" ]; then
		HAVE_CYGWIN=`cat ${cache}/ctest-HAVE_CYGWIN`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_CYGWIN`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <sys/types.h>
#include <sys/stat.h>
#include <windows.h>

int
main(int argc, char *argv[]) {
	struct stat sb;
	DWORD rv;
	rv = GetFileAttributes("foo");
	stat("foo", &sb);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS -mcygwin -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS -mcygwin -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_CYGWIN="yes"
echo "HAVE_CYGWIN=$HAVE_CYGWIN" >>Makefile.config
echo "mdefs[\"HAVE_CYGWIN\"] = \"$HAVE_CYGWIN\"" >>configure.lua
echo "#ifndef HAVE_CYGWIN" > $BLD/include/agar/config/have_cygwin.h
echo "#define HAVE_CYGWIN \"$HAVE_CYGWIN\"" >> $BLD/include/agar/config/have_cygwin.h
echo "#endif" >> $BLD/include/agar/config/have_cygwin.h
echo "hdefs[\"HAVE_CYGWIN\"] = \"$HAVE_CYGWIN\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_CYGWIN="no"
echo "HAVE_CYGWIN=$HAVE_CYGWIN" >>Makefile.config
echo "mdefs[\"HAVE_CYGWIN\"] = \"$HAVE_CYGWIN\"" >>configure.lua
echo "#undef HAVE_CYGWIN" >$BLD/include/agar/config/have_cygwin.h
echo "hdefs[\"HAVE_CYGWIN\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_CYGWIN" > ${cache}/ctest-HAVE_CYGWIN
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_CYGWIN
fi
rm -f conftest.c $testdir/conftest
echo "CC=$CC" >>Makefile.config
echo "mdefs[\"CC\"] = \"$CC\"" >>configure.lua
echo "CFLAGS=$CFLAGS" >>Makefile.config
echo "mdefs[\"CFLAGS\"] = \"$CFLAGS\"" >>configure.lua
$ECHO_N "checking for <sys/types.h>..."
$ECHO_N "checking for <sys/types.h>..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-_MK_HAVE_SYS_TYPES_H" ]; then
		_MK_HAVE_SYS_TYPES_H=`cat ${cache}/ctest-_MK_HAVE_SYS_TYPES_H`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-_MK_HAVE_SYS_TYPES_H`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <sys/types.h>
int main(int argc, char *argv[]) {
	size_t len = 1;
	len++;
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c " >>config.log
	$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c  2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
_MK_HAVE_SYS_TYPES_H="yes"
echo "_MK_HAVE_SYS_TYPES_H=$_MK_HAVE_SYS_TYPES_H" >>Makefile.config
echo "mdefs[\"_MK_HAVE_SYS_TYPES_H\"] = \"$_MK_HAVE_SYS_TYPES_H\"" >>configure.lua
echo "#ifndef _MK_HAVE_SYS_TYPES_H" > $BLD/include/agar/config/_mk_have_sys_types_h.h
echo "#define _MK_HAVE_SYS_TYPES_H \"$_MK_HAVE_SYS_TYPES_H\"" >> $BLD/include/agar/config/_mk_have_sys_types_h.h
echo "#endif" >> $BLD/include/agar/config/_mk_have_sys_types_h.h
echo "hdefs[\"_MK_HAVE_SYS_TYPES_H\"] = \"$_MK_HAVE_SYS_TYPES_H\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
_MK_HAVE_SYS_TYPES_H="no"
echo "_MK_HAVE_SYS_TYPES_H=$_MK_HAVE_SYS_TYPES_H" >>Makefile.config
echo "mdefs[\"_MK_HAVE_SYS_TYPES_H\"] = \"$_MK_HAVE_SYS_TYPES_H\"" >>configure.lua
echo "#undef _MK_HAVE_SYS_TYPES_H" >$BLD/include/agar/config/_mk_have_sys_types_h.h
echo "hdefs[\"_MK_HAVE_SYS_TYPES_H\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$_MK_HAVE_SYS_TYPES_H" > ${cache}/ctest-_MK_HAVE_SYS_TYPES_H
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-_MK_HAVE_SYS_TYPES_H
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${_MK_HAVE_SYS_TYPES_H}" = "yes" ]; then
$ECHO_N "checking for 64-bit types..."
$ECHO_N "checking for 64-bit types..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_64BIT" ]; then
		HAVE_64BIT=`cat ${cache}/ctest-HAVE_64BIT`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_64BIT`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <sys/types.h>
int main(int argc, char *argv[]) {
	int64_t i64 = 0;
	u_int64_t u64 = 0;
	i64 = 1;
	u64 = 1;
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c " >>config.log
	$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c  2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_64BIT="yes"
echo "HAVE_64BIT=$HAVE_64BIT" >>Makefile.config
echo "mdefs[\"HAVE_64BIT\"] = \"$HAVE_64BIT\"" >>configure.lua
echo "#ifndef HAVE_64BIT" > $BLD/include/agar/config/have_64bit.h
echo "#define HAVE_64BIT \"$HAVE_64BIT\"" >> $BLD/include/agar/config/have_64bit.h
echo "#endif" >> $BLD/include/agar/config/have_64bit.h
echo "hdefs[\"HAVE_64BIT\"] = \"$HAVE_64BIT\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_64BIT="no"
echo "HAVE_64BIT=$HAVE_64BIT" >>Makefile.config
echo "mdefs[\"HAVE_64BIT\"] = \"$HAVE_64BIT\"" >>configure.lua
echo "#undef HAVE_64BIT" >$BLD/include/agar/config/have_64bit.h
echo "hdefs[\"HAVE_64BIT\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_64BIT" > ${cache}/ctest-HAVE_64BIT
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_64BIT
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
$ECHO_N "checking for conflicting typedefs..."
$ECHO_N "checking for conflicting typedefs..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-_MK_HAVE_UNSIGNED_TYPEDEFS" ]; then
		_MK_HAVE_UNSIGNED_TYPEDEFS=`cat ${cache}/ctest-_MK_HAVE_UNSIGNED_TYPEDEFS`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-_MK_HAVE_UNSIGNED_TYPEDEFS`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <sys/types.h>
int main(int argc, char *argv[]) {
	Uchar foo = 0;
	Uint bar = 0;
	Ulong baz = 0;
	foo = 1; bar = 2; baz = 3;
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c " >>config.log
	$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c  2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
_MK_HAVE_UNSIGNED_TYPEDEFS="yes"
echo "_MK_HAVE_UNSIGNED_TYPEDEFS=$_MK_HAVE_UNSIGNED_TYPEDEFS" >>Makefile.config
echo "mdefs[\"_MK_HAVE_UNSIGNED_TYPEDEFS\"] = \"$_MK_HAVE_UNSIGNED_TYPEDEFS\"" >>configure.lua
echo "#ifndef _MK_HAVE_UNSIGNED_TYPEDEFS" > $BLD/include/agar/config/_mk_have_unsigned_typedefs.h
echo "#define _MK_HAVE_UNSIGNED_TYPEDEFS \"$_MK_HAVE_UNSIGNED_TYPEDEFS\"" >> $BLD/include/agar/config/_mk_have_unsigned_typedefs.h
echo "#endif" >> $BLD/include/agar/config/_mk_have_unsigned_typedefs.h
echo "hdefs[\"_MK_HAVE_UNSIGNED_TYPEDEFS\"] = \"$_MK_HAVE_UNSIGNED_TYPEDEFS\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
_MK_HAVE_UNSIGNED_TYPEDEFS="no"
echo "_MK_HAVE_UNSIGNED_TYPEDEFS=$_MK_HAVE_UNSIGNED_TYPEDEFS" >>Makefile.config
echo "mdefs[\"_MK_HAVE_UNSIGNED_TYPEDEFS\"] = \"$_MK_HAVE_UNSIGNED_TYPEDEFS\"" >>configure.lua
echo "#undef _MK_HAVE_UNSIGNED_TYPEDEFS" >$BLD/include/agar/config/_mk_have_unsigned_typedefs.h
echo "hdefs[\"_MK_HAVE_UNSIGNED_TYPEDEFS\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$_MK_HAVE_UNSIGNED_TYPEDEFS" > ${cache}/ctest-_MK_HAVE_UNSIGNED_TYPEDEFS
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-_MK_HAVE_UNSIGNED_TYPEDEFS
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
else
echo "#undef HAVE_64BIT" >$BLD/include/agar/config/have_64bit.h
echo "hdefs[\"HAVE_64BIT\"] = nil" >>configure.lua
$ECHO_N "checking for conflicting typedefs..."
$ECHO_N "checking for conflicting typedefs..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-_MK_HAVE_UNSIGNED_TYPEDEFS" ]; then
		_MK_HAVE_UNSIGNED_TYPEDEFS=`cat ${cache}/ctest-_MK_HAVE_UNSIGNED_TYPEDEFS`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-_MK_HAVE_UNSIGNED_TYPEDEFS`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
int main(int argc, char *argv[]) {
	Uchar foo = 0;
	Uint bar = 0;
	Ulong baz = 0;
	foo = 1; bar = 2; baz = 3;
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c " >>config.log
	$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c  2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
_MK_HAVE_UNSIGNED_TYPEDEFS="yes"
echo "_MK_HAVE_UNSIGNED_TYPEDEFS=$_MK_HAVE_UNSIGNED_TYPEDEFS" >>Makefile.config
echo "mdefs[\"_MK_HAVE_UNSIGNED_TYPEDEFS\"] = \"$_MK_HAVE_UNSIGNED_TYPEDEFS\"" >>configure.lua
echo "#ifndef _MK_HAVE_UNSIGNED_TYPEDEFS" > $BLD/include/agar/config/_mk_have_unsigned_typedefs.h
echo "#define _MK_HAVE_UNSIGNED_TYPEDEFS \"$_MK_HAVE_UNSIGNED_TYPEDEFS\"" >> $BLD/include/agar/config/_mk_have_unsigned_typedefs.h
echo "#endif" >> $BLD/include/agar/config/_mk_have_unsigned_typedefs.h
echo "hdefs[\"_MK_HAVE_UNSIGNED_TYPEDEFS\"] = \"$_MK_HAVE_UNSIGNED_TYPEDEFS\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
_MK_HAVE_UNSIGNED_TYPEDEFS="no"
echo "_MK_HAVE_UNSIGNED_TYPEDEFS=$_MK_HAVE_UNSIGNED_TYPEDEFS" >>Makefile.config
echo "mdefs[\"_MK_HAVE_UNSIGNED_TYPEDEFS\"] = \"$_MK_HAVE_UNSIGNED_TYPEDEFS\"" >>configure.lua
echo "#undef _MK_HAVE_UNSIGNED_TYPEDEFS" >$BLD/include/agar/config/_mk_have_unsigned_typedefs.h
echo "hdefs[\"_MK_HAVE_UNSIGNED_TYPEDEFS\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$_MK_HAVE_UNSIGNED_TYPEDEFS" > ${cache}/ctest-_MK_HAVE_UNSIGNED_TYPEDEFS
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-_MK_HAVE_UNSIGNED_TYPEDEFS
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
fi;
$ECHO_N "checking for <stdlib.h>..."
$ECHO_N "checking for <stdlib.h>..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-_MK_HAVE_STDLIB_H" ]; then
		_MK_HAVE_STDLIB_H=`cat ${cache}/ctest-_MK_HAVE_STDLIB_H`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-_MK_HAVE_STDLIB_H`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <stdlib.h>
int main(int argc, char *argv[]) {
	void *foo = malloc(1);
	free(foo);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c " >>config.log
	$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c  2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
_MK_HAVE_STDLIB_H="yes"
echo "_MK_HAVE_STDLIB_H=$_MK_HAVE_STDLIB_H" >>Makefile.config
echo "mdefs[\"_MK_HAVE_STDLIB_H\"] = \"$_MK_HAVE_STDLIB_H\"" >>configure.lua
echo "#ifndef _MK_HAVE_STDLIB_H" > $BLD/include/agar/config/_mk_have_stdlib_h.h
echo "#define _MK_HAVE_STDLIB_H \"$_MK_HAVE_STDLIB_H\"" >> $BLD/include/agar/config/_mk_have_stdlib_h.h
echo "#endif" >> $BLD/include/agar/config/_mk_have_stdlib_h.h
echo "hdefs[\"_MK_HAVE_STDLIB_H\"] = \"$_MK_HAVE_STDLIB_H\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
_MK_HAVE_STDLIB_H="no"
echo "_MK_HAVE_STDLIB_H=$_MK_HAVE_STDLIB_H" >>Makefile.config
echo "mdefs[\"_MK_HAVE_STDLIB_H\"] = \"$_MK_HAVE_STDLIB_H\"" >>configure.lua
echo "#undef _MK_HAVE_STDLIB_H" >$BLD/include/agar/config/_mk_have_stdlib_h.h
echo "hdefs[\"_MK_HAVE_STDLIB_H\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$_MK_HAVE_STDLIB_H" > ${cache}/ctest-_MK_HAVE_STDLIB_H
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-_MK_HAVE_STDLIB_H
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
$ECHO_N "checking for <unistd.h>..."
$ECHO_N "checking for <unistd.h>..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-_MK_HAVE_UNISTD_H" ]; then
		_MK_HAVE_UNISTD_H=`cat ${cache}/ctest-_MK_HAVE_UNISTD_H`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-_MK_HAVE_UNISTD_H`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <unistd.h>
#include <sys/types.h>
int main(int argc, char *argv[]) {
	uid_t uid = 0;
	pid_t pid = 0;

	uid = getuid();
	pid = getpid();
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c " >>config.log
	$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c  2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
_MK_HAVE_UNISTD_H="yes"
echo "_MK_HAVE_UNISTD_H=$_MK_HAVE_UNISTD_H" >>Makefile.config
echo "mdefs[\"_MK_HAVE_UNISTD_H\"] = \"$_MK_HAVE_UNISTD_H\"" >>configure.lua
echo "#ifndef _MK_HAVE_UNISTD_H" > $BLD/include/agar/config/_mk_have_unistd_h.h
echo "#define _MK_HAVE_UNISTD_H \"$_MK_HAVE_UNISTD_H\"" >> $BLD/include/agar/config/_mk_have_unistd_h.h
echo "#endif" >> $BLD/include/agar/config/_mk_have_unistd_h.h
echo "hdefs[\"_MK_HAVE_UNISTD_H\"] = \"$_MK_HAVE_UNISTD_H\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
_MK_HAVE_UNISTD_H="no"
echo "_MK_HAVE_UNISTD_H=$_MK_HAVE_UNISTD_H" >>Makefile.config
echo "mdefs[\"_MK_HAVE_UNISTD_H\"] = \"$_MK_HAVE_UNISTD_H\"" >>configure.lua
echo "#undef _MK_HAVE_UNISTD_H" >$BLD/include/agar/config/_mk_have_unistd_h.h
echo "hdefs[\"_MK_HAVE_UNISTD_H\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$_MK_HAVE_UNISTD_H" > ${cache}/ctest-_MK_HAVE_UNISTD_H
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-_MK_HAVE_UNISTD_H
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
$ECHO_N "checking for compatible <limits.h>..."
$ECHO_N "checking for compatible <limits.h>..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-_MK_HAVE_LIMITS_H" ]; then
		_MK_HAVE_LIMITS_H=`cat ${cache}/ctest-_MK_HAVE_LIMITS_H`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-_MK_HAVE_LIMITS_H`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <limits.h>

int main(int argc, char *argv[]) {
	int i;
	unsigned u;
	long l;
	unsigned long ul;

	i = INT_MIN;	i = INT_MAX;	u = UINT_MAX;
	l = LONG_MIN;	l = LONG_MAX;	ul = ULONG_MAX;
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c " >>config.log
	$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c  2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
_MK_HAVE_LIMITS_H="yes"
echo "_MK_HAVE_LIMITS_H=$_MK_HAVE_LIMITS_H" >>Makefile.config
echo "mdefs[\"_MK_HAVE_LIMITS_H\"] = \"$_MK_HAVE_LIMITS_H\"" >>configure.lua
echo "#ifndef _MK_HAVE_LIMITS_H" > $BLD/include/agar/config/_mk_have_limits_h.h
echo "#define _MK_HAVE_LIMITS_H \"$_MK_HAVE_LIMITS_H\"" >> $BLD/include/agar/config/_mk_have_limits_h.h
echo "#endif" >> $BLD/include/agar/config/_mk_have_limits_h.h
echo "hdefs[\"_MK_HAVE_LIMITS_H\"] = \"$_MK_HAVE_LIMITS_H\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
_MK_HAVE_LIMITS_H="no"
echo "_MK_HAVE_LIMITS_H=$_MK_HAVE_LIMITS_H" >>Makefile.config
echo "mdefs[\"_MK_HAVE_LIMITS_H\"] = \"$_MK_HAVE_LIMITS_H\"" >>configure.lua
echo "#undef _MK_HAVE_LIMITS_H" >$BLD/include/agar/config/_mk_have_limits_h.h
echo "hdefs[\"_MK_HAVE_LIMITS_H\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$_MK_HAVE_LIMITS_H" > ${cache}/ctest-_MK_HAVE_LIMITS_H
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-_MK_HAVE_LIMITS_H
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
$ECHO_N "checking for compatible <float.h>..."
$ECHO_N "checking for compatible <float.h>..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-_MK_HAVE_FLOAT_H" ]; then
		_MK_HAVE_FLOAT_H=`cat ${cache}/ctest-_MK_HAVE_FLOAT_H`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-_MK_HAVE_FLOAT_H`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <float.h>

int main(int argc, char *argv[]) {
	float flt = 0.0f;
	double dbl = 0.0;

	flt += FLT_EPSILON;
	dbl += DBL_EPSILON;
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c " >>config.log
	$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c  2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
_MK_HAVE_FLOAT_H="yes"
echo "_MK_HAVE_FLOAT_H=$_MK_HAVE_FLOAT_H" >>Makefile.config
echo "mdefs[\"_MK_HAVE_FLOAT_H\"] = \"$_MK_HAVE_FLOAT_H\"" >>configure.lua
echo "#ifndef _MK_HAVE_FLOAT_H" > $BLD/include/agar/config/_mk_have_float_h.h
echo "#define _MK_HAVE_FLOAT_H \"$_MK_HAVE_FLOAT_H\"" >> $BLD/include/agar/config/_mk_have_float_h.h
echo "#endif" >> $BLD/include/agar/config/_mk_have_float_h.h
echo "hdefs[\"_MK_HAVE_FLOAT_H\"] = \"$_MK_HAVE_FLOAT_H\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
_MK_HAVE_FLOAT_H="no"
echo "_MK_HAVE_FLOAT_H=$_MK_HAVE_FLOAT_H" >>Makefile.config
echo "mdefs[\"_MK_HAVE_FLOAT_H\"] = \"$_MK_HAVE_FLOAT_H\"" >>configure.lua
echo "#undef _MK_HAVE_FLOAT_H" >$BLD/include/agar/config/_mk_have_float_h.h
echo "hdefs[\"_MK_HAVE_FLOAT_H\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$_MK_HAVE_FLOAT_H" > ${cache}/ctest-_MK_HAVE_FLOAT_H
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-_MK_HAVE_FLOAT_H
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
$ECHO_N "checking for the __progname variable..."
$ECHO_N "checking for the __progname variable..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_PROGNAME" ]; then
		HAVE_PROGNAME=`cat ${cache}/ctest-HAVE_PROGNAME`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_PROGNAME`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <stdio.h>
int
main(int argc, char *argv[])
{
	extern char *__progname;
	printf("%s\n", __progname);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_PROGNAME="yes"
echo "#ifndef HAVE_PROGNAME" > $BLD/include/agar/config/have_progname.h
echo "#define HAVE_PROGNAME \"$HAVE_PROGNAME\"" >> $BLD/include/agar/config/have_progname.h
echo "#endif" >> $BLD/include/agar/config/have_progname.h
echo "hdefs[\"HAVE_PROGNAME\"] = \"$HAVE_PROGNAME\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_PROGNAME="no"
echo "#undef HAVE_PROGNAME" >$BLD/include/agar/config/have_progname.h
echo "hdefs[\"HAVE_PROGNAME\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_PROGNAME" > ${cache}/ctest-HAVE_PROGNAME
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_PROGNAME
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
$ECHO_N "checking for the C math library..."
$ECHO_N "checking for the C math library..." >> config.log
if [ "" != "" ]; then
MATH_CFLAGS="-I"
MATH_LIBS="-L -lm"
else
MATH_CFLAGS=""
MATH_LIBS="-lm"
fi;
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_MATH" ]; then
		HAVE_MATH=`cat ${cache}/ctest-HAVE_MATH`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_MATH`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <math.h>

int
main(int argc, char *argv[])
{
	double d = 1.0;
	d = fabs(d);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} ${MATH_CFLAGS} -o $testdir/conftest conftest.c ${MATH_LIBS}" >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} ${MATH_CFLAGS} -o $testdir/conftest conftest.c ${MATH_LIBS} 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_MATH="yes"
echo "HAVE_MATH=$HAVE_MATH" >>Makefile.config
echo "mdefs[\"HAVE_MATH\"] = \"$HAVE_MATH\"" >>configure.lua
echo "#ifndef HAVE_MATH" > $BLD/include/agar/config/have_math.h
echo "#define HAVE_MATH \"$HAVE_MATH\"" >> $BLD/include/agar/config/have_math.h
echo "#endif" >> $BLD/include/agar/config/have_math.h
echo "hdefs[\"HAVE_MATH\"] = \"$HAVE_MATH\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_MATH="no"
echo "HAVE_MATH=$HAVE_MATH" >>Makefile.config
echo "mdefs[\"HAVE_MATH\"] = \"$HAVE_MATH\"" >>configure.lua
echo "#undef HAVE_MATH" >$BLD/include/agar/config/have_math.h
echo "hdefs[\"HAVE_MATH\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_MATH" > ${cache}/ctest-HAVE_MATH
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_MATH
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_MATH}" = "yes" ]; then
echo "MATH_CFLAGS=$MATH_CFLAGS" >>Makefile.config
echo "mdefs[\"MATH_CFLAGS\"] = \"$MATH_CFLAGS\"" >>configure.lua
echo "#ifndef MATH_CFLAGS" > $BLD/include/agar/config/math_cflags.h
echo "#define MATH_CFLAGS \"$MATH_CFLAGS\"" >> $BLD/include/agar/config/math_cflags.h
echo "#endif" >> $BLD/include/agar/config/math_cflags.h
echo "hdefs[\"MATH_CFLAGS\"] = \"$MATH_CFLAGS\"" >>configure.lua
echo "MATH_LIBS=$MATH_LIBS" >>Makefile.config
echo "mdefs[\"MATH_LIBS\"] = \"$MATH_LIBS\"" >>configure.lua
echo "#ifndef MATH_LIBS" > $BLD/include/agar/config/math_libs.h
echo "#define MATH_LIBS \"$MATH_LIBS\"" >> $BLD/include/agar/config/math_libs.h
echo "#endif" >> $BLD/include/agar/config/math_libs.h
echo "hdefs[\"MATH_LIBS\"] = \"$MATH_LIBS\"" >>configure.lua
else
echo "#undef MATH_CFLAGS" >$BLD/include/agar/config/math_cflags.h
echo "hdefs[\"MATH_CFLAGS\"] = nil" >>configure.lua
MATH_CFLAGS=""
echo "#undef MATH_LIBS" >$BLD/include/agar/config/math_libs.h
echo "hdefs[\"MATH_LIBS\"] = nil" >>configure.lua
MATH_LIBS=""
fi;
$ECHO_N "checking for the C math library (C99)..."
$ECHO_N "checking for the C math library (C99)..." >> config.log
if [ "" != "" ]; then
MATH_C99_CFLAGS="-I"
MATH_C99_LIBS="-L -lm"
else
MATH_C99_CFLAGS=""
MATH_C99_LIBS="-lm"
fi;
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_MATH_C99" ]; then
		HAVE_MATH_C99=`cat ${cache}/ctest-HAVE_MATH_C99`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_MATH_C99`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <math.h>

int
main(int argc, char *argv[])
{
	float f = 1.0;
	double d = 1.0;

	d = fabs(d);
	f = fabsf(f);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} ${MATH_C99_CFLAGS} -o $testdir/conftest conftest.c ${MATH_C99_LIBS}" >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} ${MATH_C99_CFLAGS} -o $testdir/conftest conftest.c ${MATH_C99_LIBS} 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_MATH_C99="yes"
echo "HAVE_MATH_C99=$HAVE_MATH_C99" >>Makefile.config
echo "mdefs[\"HAVE_MATH_C99\"] = \"$HAVE_MATH_C99\"" >>configure.lua
echo "#ifndef HAVE_MATH_C99" > $BLD/include/agar/config/have_math_c99.h
echo "#define HAVE_MATH_C99 \"$HAVE_MATH_C99\"" >> $BLD/include/agar/config/have_math_c99.h
echo "#endif" >> $BLD/include/agar/config/have_math_c99.h
echo "hdefs[\"HAVE_MATH_C99\"] = \"$HAVE_MATH_C99\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_MATH_C99="no"
echo "HAVE_MATH_C99=$HAVE_MATH_C99" >>Makefile.config
echo "mdefs[\"HAVE_MATH_C99\"] = \"$HAVE_MATH_C99\"" >>configure.lua
echo "#undef HAVE_MATH_C99" >$BLD/include/agar/config/have_math_c99.h
echo "hdefs[\"HAVE_MATH_C99\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_MATH_C99" > ${cache}/ctest-HAVE_MATH_C99
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_MATH_C99
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_MATH_C99}" = "yes" ]; then
echo "MATH_C99_CFLAGS=$MATH_C99_CFLAGS" >>Makefile.config
echo "mdefs[\"MATH_C99_CFLAGS\"] = \"$MATH_C99_CFLAGS\"" >>configure.lua
echo "#ifndef MATH_C99_CFLAGS" > $BLD/include/agar/config/math_c99_cflags.h
echo "#define MATH_C99_CFLAGS \"$MATH_C99_CFLAGS\"" >> $BLD/include/agar/config/math_c99_cflags.h
echo "#endif" >> $BLD/include/agar/config/math_c99_cflags.h
echo "hdefs[\"MATH_C99_CFLAGS\"] = \"$MATH_C99_CFLAGS\"" >>configure.lua
echo "MATH_C99_LIBS=$MATH_C99_LIBS" >>Makefile.config
echo "mdefs[\"MATH_C99_LIBS\"] = \"$MATH_C99_LIBS\"" >>configure.lua
echo "#ifndef MATH_C99_LIBS" > $BLD/include/agar/config/math_c99_libs.h
echo "#define MATH_C99_LIBS \"$MATH_C99_LIBS\"" >> $BLD/include/agar/config/math_c99_libs.h
echo "#endif" >> $BLD/include/agar/config/math_c99_libs.h
echo "hdefs[\"MATH_C99_LIBS\"] = \"$MATH_C99_LIBS\"" >>configure.lua
else
echo "#undef MATH_C99_CFLAGS" >$BLD/include/agar/config/math_c99_cflags.h
echo "hdefs[\"MATH_C99_CFLAGS\"] = nil" >>configure.lua
MATH_C99_CFLAGS=""
echo "#undef MATH_C99_LIBS" >$BLD/include/agar/config/math_c99_libs.h
echo "hdefs[\"MATH_C99_LIBS\"] = nil" >>configure.lua
MATH_C99_LIBS=""
fi;
$ECHO_N "checking for a getpwuid() function..."
$ECHO_N "checking for a getpwuid() function..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_GETPWUID" ]; then
		HAVE_GETPWUID=`cat ${cache}/ctest-HAVE_GETPWUID`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_GETPWUID`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <sys/types.h>
#include <pwd.h>

int
main(int argc, char *argv[])
{
	struct passwd *pwd;
	uid_t uid = 0;

	pwd = getpwuid(uid);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_GETPWUID="yes"
echo "#ifndef HAVE_GETPWUID" > $BLD/include/agar/config/have_getpwuid.h
echo "#define HAVE_GETPWUID \"$HAVE_GETPWUID\"" >> $BLD/include/agar/config/have_getpwuid.h
echo "#endif" >> $BLD/include/agar/config/have_getpwuid.h
echo "hdefs[\"HAVE_GETPWUID\"] = \"$HAVE_GETPWUID\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_GETPWUID="no"
echo "#undef HAVE_GETPWUID" >$BLD/include/agar/config/have_getpwuid.h
echo "hdefs[\"HAVE_GETPWUID\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_GETPWUID" > ${cache}/ctest-HAVE_GETPWUID
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_GETPWUID
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
$ECHO_N "checking for a getuid() function..."
$ECHO_N "checking for a getuid() function..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_GETUID" ]; then
		HAVE_GETUID=`cat ${cache}/ctest-HAVE_GETUID`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_GETUID`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <sys/types.h>
#include <unistd.h>

int
main(int argc, char *argv[])
{
	uid_t uid;

	uid = getuid();
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_GETUID="yes"
echo "#ifndef HAVE_GETUID" > $BLD/include/agar/config/have_getuid.h
echo "#define HAVE_GETUID \"$HAVE_GETUID\"" >> $BLD/include/agar/config/have_getuid.h
echo "#endif" >> $BLD/include/agar/config/have_getuid.h
echo "hdefs[\"HAVE_GETUID\"] = \"$HAVE_GETUID\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_GETUID="no"
echo "#undef HAVE_GETUID" >$BLD/include/agar/config/have_getuid.h
echo "hdefs[\"HAVE_GETUID\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_GETUID" > ${cache}/ctest-HAVE_GETUID
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_GETUID
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
$ECHO_N "checking for a strsep() function..."
$ECHO_N "checking for a strsep() function..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_STRSEP" ]; then
		HAVE_STRSEP=`cat ${cache}/ctest-HAVE_STRSEP`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_STRSEP`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <string.h>
int
main(int argc, char *argv[])
{
	(void)strsep(NULL, NULL);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_STRSEP="yes"
echo "#ifndef HAVE_STRSEP" > $BLD/include/agar/config/have_strsep.h
echo "#define HAVE_STRSEP \"$HAVE_STRSEP\"" >> $BLD/include/agar/config/have_strsep.h
echo "#endif" >> $BLD/include/agar/config/have_strsep.h
echo "hdefs[\"HAVE_STRSEP\"] = \"$HAVE_STRSEP\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_STRSEP="no"
echo "#undef HAVE_STRSEP" >$BLD/include/agar/config/have_strsep.h
echo "hdefs[\"HAVE_STRSEP\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_STRSEP" > ${cache}/ctest-HAVE_STRSEP
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_STRSEP
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
$ECHO_N "checking for the snprintf() function..."
$ECHO_N "checking for the snprintf() function..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_SNPRINTF" ]; then
		HAVE_SNPRINTF=`cat ${cache}/ctest-HAVE_SNPRINTF`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_SNPRINTF`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <stdio.h>

int
main(int argc, char *argv[])
{
	char buf[16];
	(void)snprintf(buf, sizeof(buf), "foo");
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_SNPRINTF="yes"
echo "#ifndef HAVE_SNPRINTF" > $BLD/include/agar/config/have_snprintf.h
echo "#define HAVE_SNPRINTF \"$HAVE_SNPRINTF\"" >> $BLD/include/agar/config/have_snprintf.h
echo "#endif" >> $BLD/include/agar/config/have_snprintf.h
echo "hdefs[\"HAVE_SNPRINTF\"] = \"$HAVE_SNPRINTF\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_SNPRINTF="no"
echo "#undef HAVE_SNPRINTF" >$BLD/include/agar/config/have_snprintf.h
echo "hdefs[\"HAVE_SNPRINTF\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_SNPRINTF" > ${cache}/ctest-HAVE_SNPRINTF
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_SNPRINTF
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
$ECHO_N "checking for the vsnprintf() function..."
$ECHO_N "checking for the vsnprintf() function..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_VSNPRINTF" ]; then
		HAVE_VSNPRINTF=`cat ${cache}/ctest-HAVE_VSNPRINTF`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_VSNPRINTF`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <stdio.h>
#include <stdarg.h>

static void
testfmt(const char *fmt, ...)
{
	char buf[16];
	va_list ap;
	va_start(ap, fmt);
	(void)vsnprintf(buf, sizeof(buf), fmt, ap);
	va_end(ap);
}
int
main(int argc, char *argv[])
{
	testfmt("foo", 1, 2, 3);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_VSNPRINTF="yes"
echo "#ifndef HAVE_VSNPRINTF" > $BLD/include/agar/config/have_vsnprintf.h
echo "#define HAVE_VSNPRINTF \"$HAVE_VSNPRINTF\"" >> $BLD/include/agar/config/have_vsnprintf.h
echo "#endif" >> $BLD/include/agar/config/have_vsnprintf.h
echo "hdefs[\"HAVE_VSNPRINTF\"] = \"$HAVE_VSNPRINTF\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_VSNPRINTF="no"
echo "#undef HAVE_VSNPRINTF" >$BLD/include/agar/config/have_vsnprintf.h
echo "hdefs[\"HAVE_VSNPRINTF\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_VSNPRINTF" > ${cache}/ctest-HAVE_VSNPRINTF
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_VSNPRINTF
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
$ECHO_N "checking for a vasprintf() function..."
$ECHO_N "checking for a vasprintf() function..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_VASPRINTF" ]; then
		HAVE_VASPRINTF=`cat ${cache}/ctest-HAVE_VASPRINTF`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_VASPRINTF`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <stdio.h>
#include <stdarg.h>

int
testprintf(const char *fmt, ...)
{
	va_list args;
	char *buf;

	va_start(args, fmt);
	if (vasprintf(&buf, "%s", args) == -1) {
		return (-1);
	}
	va_end(args);
	return (0);
}
int
main(int argc, char *argv[])
{
	return (testprintf("foo %s", "bar"));
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS -D_GNU_SOURCE -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS -D_GNU_SOURCE -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_VASPRINTF="yes"
echo "HAVE_VASPRINTF=$HAVE_VASPRINTF" >>Makefile.config
echo "mdefs[\"HAVE_VASPRINTF\"] = \"$HAVE_VASPRINTF\"" >>configure.lua
echo "#ifndef HAVE_VASPRINTF" > $BLD/include/agar/config/have_vasprintf.h
echo "#define HAVE_VASPRINTF \"$HAVE_VASPRINTF\"" >> $BLD/include/agar/config/have_vasprintf.h
echo "#endif" >> $BLD/include/agar/config/have_vasprintf.h
echo "hdefs[\"HAVE_VASPRINTF\"] = \"$HAVE_VASPRINTF\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_VASPRINTF="no"
echo "HAVE_VASPRINTF=$HAVE_VASPRINTF" >>Makefile.config
echo "mdefs[\"HAVE_VASPRINTF\"] = \"$HAVE_VASPRINTF\"" >>configure.lua
echo "#undef HAVE_VASPRINTF" >$BLD/include/agar/config/have_vasprintf.h
echo "hdefs[\"HAVE_VASPRINTF\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_VASPRINTF" > ${cache}/ctest-HAVE_VASPRINTF
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_VASPRINTF
fi
rm -f conftest.c $testdir/conftest
$ECHO_N "checking for the signal() function..."
$ECHO_N "checking for the signal() function..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-_MK_HAVE_SIGNAL" ]; then
		_MK_HAVE_SIGNAL=`cat ${cache}/ctest-_MK_HAVE_SIGNAL`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-_MK_HAVE_SIGNAL`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <signal.h>

void
sighandler(int sig)
{
}

int
main(int argc, char *argv[])
{
	signal(SIGTERM, sighandler);
	signal(SIGILL, sighandler);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
_MK_HAVE_SIGNAL="yes"
echo "#ifndef _MK_HAVE_SIGNAL" > $BLD/include/agar/config/_mk_have_signal.h
echo "#define _MK_HAVE_SIGNAL \"$_MK_HAVE_SIGNAL\"" >> $BLD/include/agar/config/_mk_have_signal.h
echo "#endif" >> $BLD/include/agar/config/_mk_have_signal.h
echo "hdefs[\"_MK_HAVE_SIGNAL\"] = \"$_MK_HAVE_SIGNAL\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
_MK_HAVE_SIGNAL="no"
echo "#undef _MK_HAVE_SIGNAL" >$BLD/include/agar/config/_mk_have_signal.h
echo "hdefs[\"_MK_HAVE_SIGNAL\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$_MK_HAVE_SIGNAL" > ${cache}/ctest-_MK_HAVE_SIGNAL
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-_MK_HAVE_SIGNAL
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
$ECHO_N "checking for setjmp() and longjmp()..."
$ECHO_N "checking for setjmp() and longjmp()..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-_MK_HAVE_SETJMP" ]; then
		_MK_HAVE_SETJMP=`cat ${cache}/ctest-_MK_HAVE_SETJMP`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-_MK_HAVE_SETJMP`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <setjmp.h>

jmp_buf jmpbuf;

int
main(int argc, char *argv[])
{
	longjmp(jmpbuf, 1);
	setjmp(jmpbuf);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
_MK_HAVE_SETJMP="yes"
echo "#ifndef _MK_HAVE_SETJMP" > $BLD/include/agar/config/_mk_have_setjmp.h
echo "#define _MK_HAVE_SETJMP \"$_MK_HAVE_SETJMP\"" >> $BLD/include/agar/config/_mk_have_setjmp.h
echo "#endif" >> $BLD/include/agar/config/_mk_have_setjmp.h
echo "hdefs[\"_MK_HAVE_SETJMP\"] = \"$_MK_HAVE_SETJMP\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
_MK_HAVE_SETJMP="no"
echo "#undef _MK_HAVE_SETJMP" >$BLD/include/agar/config/_mk_have_setjmp.h
echo "hdefs[\"_MK_HAVE_SETJMP\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$_MK_HAVE_SETJMP" > ${cache}/ctest-_MK_HAVE_SETJMP
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-_MK_HAVE_SETJMP
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
$ECHO_N "checking for a strtoll() function..."
$ECHO_N "checking for a strtoll() function..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-_MK_HAVE_STRTOLL" ]; then
		_MK_HAVE_STRTOLL=`cat ${cache}/ctest-_MK_HAVE_STRTOLL`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-_MK_HAVE_STRTOLL`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <stdlib.h>

int
main(int argc, char *argv[])
{
	long long int lli;
	char *ep = NULL;
	char *foo = "1234";

	lli = strtoll(foo, &ep, 10);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
_MK_HAVE_STRTOLL="yes"
echo "#ifndef _MK_HAVE_STRTOLL" > $BLD/include/agar/config/_mk_have_strtoll.h
echo "#define _MK_HAVE_STRTOLL \"$_MK_HAVE_STRTOLL\"" >> $BLD/include/agar/config/_mk_have_strtoll.h
echo "#endif" >> $BLD/include/agar/config/_mk_have_strtoll.h
echo "hdefs[\"_MK_HAVE_STRTOLL\"] = \"$_MK_HAVE_STRTOLL\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
_MK_HAVE_STRTOLL="no"
echo "#undef _MK_HAVE_STRTOLL" >$BLD/include/agar/config/_mk_have_strtoll.h
echo "hdefs[\"_MK_HAVE_STRTOLL\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$_MK_HAVE_STRTOLL" > ${cache}/ctest-_MK_HAVE_STRTOLL
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-_MK_HAVE_STRTOLL
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
$ECHO_N "checking for a strtold() function..."
$ECHO_N "checking for a strtold() function..." >> config.log
if [ "${HAVE_LONG_DOUBLE}" = "yes" ]; then
if [ "${HAVE_CYGWIN}" = "no" ]; then
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-_MK_HAVE_STRTOLD" ]; then
		_MK_HAVE_STRTOLD=`cat ${cache}/ctest-_MK_HAVE_STRTOLD`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-_MK_HAVE_STRTOLD`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#define _XOPEN_SOURCE 600
#include <stdlib.h>
int
main(int argc, char *argv[])
{
	long double ld;
	char *ep = NULL;
	char *foo = "1234";

	ld = strtold(foo, &ep);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
_MK_HAVE_STRTOLD="yes"
echo "#ifndef _MK_HAVE_STRTOLD" > $BLD/include/agar/config/_mk_have_strtold.h
echo "#define _MK_HAVE_STRTOLD \"$_MK_HAVE_STRTOLD\"" >> $BLD/include/agar/config/_mk_have_strtold.h
echo "#endif" >> $BLD/include/agar/config/_mk_have_strtold.h
echo "hdefs[\"_MK_HAVE_STRTOLD\"] = \"$_MK_HAVE_STRTOLD\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
_MK_HAVE_STRTOLD="no"
echo "#undef _MK_HAVE_STRTOLD" >$BLD/include/agar/config/_mk_have_strtold.h
echo "hdefs[\"_MK_HAVE_STRTOLD\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$_MK_HAVE_STRTOLD" > ${cache}/ctest-_MK_HAVE_STRTOLD
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-_MK_HAVE_STRTOLD
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
else
_MK_HAVE_STRTOLD="no"
echo "#undef _MK_HAVE_STRTOLD" >$BLD/include/agar/config/_mk_have_strtold.h
echo "hdefs[\"_MK_HAVE_STRTOLD\"] = nil" >>configure.lua
echo "not checking (cygwin issues)"
echo "not checking (cygwin issues)" >> config.log
fi;
else
_MK_HAVE_STRTOLD="no"
echo "#undef _MK_HAVE_STRTOLD" >$BLD/include/agar/config/_mk_have_strtold.h
echo "hdefs[\"_MK_HAVE_STRTOLD\"] = nil" >>configure.lua
echo "skipping (no long double)"
echo "skipping (no long double)" >> config.log
fi;
$ECHO_N "checking for byte order..."
$ECHO_N "checking for byte order..." >> config.log
if [ "${byte_order}" != "" ]; then
if [ "${byte_order}" = "LE" ]; then
_MK_BYTE_ORDER="LE"
else
if [ "${byte_order}" = "BE" ]; then
_MK_BYTE_ORDER="BE"
else
echo "Usage: --byte-order=[LE|BE]"
exit 1
fi;
fi;
else
cat << EOT > conftest.c
#include <sys/types.h>
#include <sys/param.h>
int
main(int argc, char *argv[])
{
#if BYTE_ORDER == BIG_ENDIAN
	static volatile char *bo = "BiGEnDiANBiGEnDiANBiGEnDiANBiGEnDiANBiGEnDiANBiGEnDiANBiGEnDiANBiGEnDiANBiGEnDiANBiGEnDiANBiGEnDiANBiGEnDiANBiGEnDiANBiGEnDiANBiGEnDiANBiGEnDiANBiGEnDiANBiGEnDiANBiGEnDiANBiGEnDiAN";
#else
	static volatile char *bo = "LiTTLeEnDiANLiTTLeEnDiANLiTTLeEnDiANLiTTLeEnDiANLiTTLeEnDiANLiTTLeEnDiANLiTTLeEnDiANLiTTLeEnDiANLiTTLeEnDiANLiTTLeEnDiANLiTTLeEnDiANLiTTLeEnDiANLiTTLeEnDiANLiTTLeEnDiANLiTTLeEnDiAN";
#endif
	int c = 0;
	volatile char *p = bo;
	while (*p != '\0') { c *= (int)*p; }
	return (c>123?c:456);
}

EOT
echo "$CC $CFLAGS  -o $testdir/conftest conftest.c" >>config.log
$CC $CFLAGS  -o $testdir/conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "Failed to compile test program for byte order ($?)"
	echo "Failed to compile test program for byte order ($?)" >> config.log
	exit 1
fi
rm -f conftest.c

_MK_BYTE_ORDER=""
_MK_BYTE_ORDER_LESTRING="LiTTLeEnD"
_MK_BYTE_ORDER_BESTRING="BiGEnDiAN"
od -tc $testdir/conftest$EXECSUFFIX | sed 's/ //g' > $testdir/conftest.dump

if grep "$_MK_BYTE_ORDER_LESTRING" $testdir/conftest.dump >/dev/null; then
	_MK_BYTE_ORDER="LE"
	if grep "$_MK_BYTE_ORDER_BESTRING" $testdir/conftest.dump >/dev/null; then
		echo "*"
		echo "* Unable to auto-determine host byte order. Please re-run ./configure"
		echo "* with --byte-order=LE or --byte-order=BE."
		echo "*"
		exit 1
	fi
else
	if grep "$_MK_BYTE_ORDER_BESTRING" $testdir/conftest.dump >/dev/null; then
		_MK_BYTE_ORDER="BE"
		if grep "$_MK_BYTE_ORDER_LESTRING" $testdir/conftest.dump >/dev/null; then
			echo "*"
			echo "* Unable to auto-determine host byte order. Please re-run ./configure"
			echo "* with --byte-order=LE or --byte-order=BE."
			echo "*"
			exit 1
		fi
	fi
fi
rm -f conftest.c $testdir/conftest $testdir/conftest.dump
fi;
if [ "$_MK_BYTE_ORDER" = "LE" ]; then
echo "little-endian"
echo "little-endian" >> config.log
_MK_LITTLE_ENDIAN="yes"
echo "#ifndef _MK_LITTLE_ENDIAN" > $BLD/include/agar/config/_mk_little_endian.h
echo "#define _MK_LITTLE_ENDIAN \"$_MK_LITTLE_ENDIAN\"" >> $BLD/include/agar/config/_mk_little_endian.h
echo "#endif" >> $BLD/include/agar/config/_mk_little_endian.h
echo "hdefs[\"_MK_LITTLE_ENDIAN\"] = \"$_MK_LITTLE_ENDIAN\"" >>configure.lua
echo "#undef _MK_BIG_ENDIAN" >$BLD/include/agar/config/_mk_big_endian.h
echo "hdefs[\"_MK_BIG_ENDIAN\"] = nil" >>configure.lua
else
echo "big-endian"
echo "big-endian" >> config.log
_MK_BIG_ENDIAN="yes"
echo "#ifndef _MK_BIG_ENDIAN" > $BLD/include/agar/config/_mk_big_endian.h
echo "#define _MK_BIG_ENDIAN \"$_MK_BIG_ENDIAN\"" >> $BLD/include/agar/config/_mk_big_endian.h
echo "#endif" >> $BLD/include/agar/config/_mk_big_endian.h
echo "hdefs[\"_MK_BIG_ENDIAN\"] = \"$_MK_BIG_ENDIAN\"" >>configure.lua
echo "#undef _MK_LITTLE_ENDIAN" >$BLD/include/agar/config/_mk_little_endian.h
echo "hdefs[\"_MK_LITTLE_ENDIAN\"] = nil" >>configure.lua
fi;
$ECHO_N "checking for dlopen() interface..."
$ECHO_N "checking for dlopen() interface..." >> config.log
DSO_CFLAGS=""
DSO_LIBS=""
TEST_CFLAGS_ORIG="${TEST_CFLAGS}"
TEST_HEADERS="Yes"
echo > conftest.c
echo "#include <dlfcn.h>" >> conftest.c
echo "int main (int argc, char *argv[]) { return (0); }" >> conftest.c
MK_COMPILE_STATUS="OK"
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c" >>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	MK_COMPILE_STATUS="FAIL($?)"
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
HAVE_DLFCN_H="yes"
echo "#ifndef HAVE_DLFCN_H" > $BLD/include/agar/config/have_dlfcn_h.h
echo "#define HAVE_DLFCN_H \"$HAVE_DLFCN_H\"" >> $BLD/include/agar/config/have_dlfcn_h.h
echo "#endif" >> $BLD/include/agar/config/have_dlfcn_h.h
echo "hdefs[\"HAVE_DLFCN_H\"] = \"$HAVE_DLFCN_H\"" >>configure.lua
if [ "${TEST_HEADERS}" = "Yes" ]; then
TEST_CFLAGS="${TEST_CFLAGS} -DHAVE_DLFCN_H"
fi;
else
HAVE_DLFCN_H="no"
echo "#undef HAVE_DLFCN_H" >$BLD/include/agar/config/have_dlfcn_h.h
echo "hdefs[\"HAVE_DLFCN_H\"] = nil" >>configure.lua
fi;
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_DLOPEN" ]; then
		HAVE_DLOPEN=`cat ${cache}/ctest-HAVE_DLOPEN`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_DLOPEN`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#ifdef HAVE_DLFCN_H
#include <dlfcn.h>
#endif

int
main(int argc, char *argv[])
{
	void *handle;
	char *error;
	handle = dlopen("foo.so", 0);
	error = dlerror();
	(void)dlsym(handle, "foo");
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_DLOPEN="yes"
echo "#ifndef HAVE_DLOPEN" > $BLD/include/agar/config/have_dlopen.h
echo "#define HAVE_DLOPEN \"$HAVE_DLOPEN\"" >> $BLD/include/agar/config/have_dlopen.h
echo "#endif" >> $BLD/include/agar/config/have_dlopen.h
echo "hdefs[\"HAVE_DLOPEN\"] = \"$HAVE_DLOPEN\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_DLOPEN="no"
echo "#undef HAVE_DLOPEN" >$BLD/include/agar/config/have_dlopen.h
echo "hdefs[\"HAVE_DLOPEN\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_DLOPEN" > ${cache}/ctest-HAVE_DLOPEN
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_DLOPEN
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_DLOPEN}" = "no" ]; then
$ECHO_N "checking for dlopen() in -ldl..."
$ECHO_N "checking for dlopen() in -ldl..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_DLOPEN" ]; then
		HAVE_DLOPEN=`cat ${cache}/ctest-HAVE_DLOPEN`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_DLOPEN`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#ifdef HAVE_DLFCN_H
#include <dlfcn.h>
#endif

int
main(int argc, char *argv[])
{
	void *handle;
	char *error;
	handle = dlopen("foo.so", 0);
	error = dlerror();
	(void)dlsym(handle, "foo");
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS -ldl -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS -ldl -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_DLOPEN="yes"
echo "HAVE_DLOPEN=$HAVE_DLOPEN" >>Makefile.config
echo "mdefs[\"HAVE_DLOPEN\"] = \"$HAVE_DLOPEN\"" >>configure.lua
echo "#ifndef HAVE_DLOPEN" > $BLD/include/agar/config/have_dlopen.h
echo "#define HAVE_DLOPEN \"$HAVE_DLOPEN\"" >> $BLD/include/agar/config/have_dlopen.h
echo "#endif" >> $BLD/include/agar/config/have_dlopen.h
echo "hdefs[\"HAVE_DLOPEN\"] = \"$HAVE_DLOPEN\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_DLOPEN="no"
echo "HAVE_DLOPEN=$HAVE_DLOPEN" >>Makefile.config
echo "mdefs[\"HAVE_DLOPEN\"] = \"$HAVE_DLOPEN\"" >>configure.lua
echo "#undef HAVE_DLOPEN" >$BLD/include/agar/config/have_dlopen.h
echo "hdefs[\"HAVE_DLOPEN\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_DLOPEN" > ${cache}/ctest-HAVE_DLOPEN
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_DLOPEN
fi
rm -f conftest.c $testdir/conftest
if [ "${HAVE_DLOPEN}" = "yes" ]; then
DSO_CFLAGS=""
DSO_LIBS="-ldl"
fi;
fi;
TEST_CFLAGS="${TEST_CFLAGS_ORIG}"
TEST_HEADERS=""
echo "DSO_CFLAGS=$DSO_CFLAGS" >>Makefile.config
echo "mdefs[\"DSO_CFLAGS\"] = \"$DSO_CFLAGS\"" >>configure.lua
echo "#ifndef DSO_CFLAGS" > $BLD/include/agar/config/dso_cflags.h
echo "#define DSO_CFLAGS \"$DSO_CFLAGS\"" >> $BLD/include/agar/config/dso_cflags.h
echo "#endif" >> $BLD/include/agar/config/dso_cflags.h
echo "hdefs[\"DSO_CFLAGS\"] = \"$DSO_CFLAGS\"" >>configure.lua
echo "DSO_LIBS=$DSO_LIBS" >>Makefile.config
echo "mdefs[\"DSO_LIBS\"] = \"$DSO_LIBS\"" >>configure.lua
echo "#ifndef DSO_LIBS" > $BLD/include/agar/config/dso_libs.h
echo "#define DSO_LIBS \"$DSO_LIBS\"" >> $BLD/include/agar/config/dso_libs.h
echo "#endif" >> $BLD/include/agar/config/dso_libs.h
echo "hdefs[\"DSO_LIBS\"] = \"$DSO_LIBS\"" >>configure.lua
$ECHO_N "checking for dyld interface..."
$ECHO_N "checking for dyld interface..." >> config.log
DSO_CFLAGS=""
DSO_LIBS=""
TEST_CFLAGS_ORIG="${TEST_CFLAGS}"
TEST_HEADERS="Yes"
echo > conftest.c
echo "#include <mach-o/dyld.h>" >> conftest.c
echo "int main (int argc, char *argv[]) { return (0); }" >> conftest.c
MK_COMPILE_STATUS="OK"
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c" >>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	MK_COMPILE_STATUS="FAIL($?)"
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
HAVE_MACH_O_DYLD_H="yes"
echo "#ifndef HAVE_MACH_O_DYLD_H" > $BLD/include/agar/config/have_mach_o_dyld_h.h
echo "#define HAVE_MACH_O_DYLD_H \"$HAVE_MACH_O_DYLD_H\"" >> $BLD/include/agar/config/have_mach_o_dyld_h.h
echo "#endif" >> $BLD/include/agar/config/have_mach_o_dyld_h.h
echo "hdefs[\"HAVE_MACH_O_DYLD_H\"] = \"$HAVE_MACH_O_DYLD_H\"" >>configure.lua
if [ "${TEST_HEADERS}" = "Yes" ]; then
TEST_CFLAGS="${TEST_CFLAGS} -DHAVE_MACH_O_DYLD_H"
fi;
else
HAVE_MACH_O_DYLD_H="no"
echo "#undef HAVE_MACH_O_DYLD_H" >$BLD/include/agar/config/have_mach_o_dyld_h.h
echo "hdefs[\"HAVE_MACH_O_DYLD_H\"] = nil" >>configure.lua
fi;
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_DYLD" ]; then
		HAVE_DYLD=`cat ${cache}/ctest-HAVE_DYLD`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_DYLD`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#ifdef HAVE_MACH_O_DYLD_H
#include <mach-o/dyld.h>
#endif
int
main(int argc, char *argv[])
{
	NSObjectFileImage img;
	NSObjectFileImageReturnCode rv;

	rv = NSCreateObjectFileImageFromFile("foo", &img);
	return (rv == NSObjectFileImageSuccess);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_DYLD="yes"
echo "#ifndef HAVE_DYLD" > $BLD/include/agar/config/have_dyld.h
echo "#define HAVE_DYLD \"$HAVE_DYLD\"" >> $BLD/include/agar/config/have_dyld.h
echo "#endif" >> $BLD/include/agar/config/have_dyld.h
echo "hdefs[\"HAVE_DYLD\"] = \"$HAVE_DYLD\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_DYLD="no"
echo "#undef HAVE_DYLD" >$BLD/include/agar/config/have_dyld.h
echo "hdefs[\"HAVE_DYLD\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_DYLD" > ${cache}/ctest-HAVE_DYLD
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_DYLD
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_DYLD}" = "yes" ]; then
echo "checking for NSLINKMODULE_OPTION_RETURN_ON_ERROR"
echo "checking for NSLINKMODULE_OPTION_RETURN_ON_ERROR" >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_DYLD_RETURN_ON_ERROR" ]; then
		HAVE_DYLD_RETURN_ON_ERROR=`cat ${cache}/ctest-HAVE_DYLD_RETURN_ON_ERROR`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_DYLD_RETURN_ON_ERROR`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#ifdef HAVE_MACH_O_DYLD_H
#include <mach-o/dyld.h>
#endif
int
main(int argc, char *argv[])
{
	NSObjectFileImage img;
	NSObjectFileImageReturnCode rv;
	void *handle;

	rv = NSCreateObjectFileImageFromFile("foo", &img);
	handle = (void *)NSLinkModule(img, "foo",
	    NSLINKMODULE_OPTION_RETURN_ON_ERROR|
		NSLINKMODULE_OPTION_NONE);
	if (handle == NULL) {
		NSLinkEditErrors errs;
		int n;
		const char *f, *s = NULL;
		NSLinkEditError(&errs, &n, &f, &s);
	}
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_DYLD_RETURN_ON_ERROR="yes"
echo "#ifndef HAVE_DYLD_RETURN_ON_ERROR" > $BLD/include/agar/config/have_dyld_return_on_error.h
echo "#define HAVE_DYLD_RETURN_ON_ERROR \"$HAVE_DYLD_RETURN_ON_ERROR\"" >> $BLD/include/agar/config/have_dyld_return_on_error.h
echo "#endif" >> $BLD/include/agar/config/have_dyld_return_on_error.h
echo "hdefs[\"HAVE_DYLD_RETURN_ON_ERROR\"] = \"$HAVE_DYLD_RETURN_ON_ERROR\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_DYLD_RETURN_ON_ERROR="no"
echo "#undef HAVE_DYLD_RETURN_ON_ERROR" >$BLD/include/agar/config/have_dyld_return_on_error.h
echo "hdefs[\"HAVE_DYLD_RETURN_ON_ERROR\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_DYLD_RETURN_ON_ERROR" > ${cache}/ctest-HAVE_DYLD_RETURN_ON_ERROR
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_DYLD_RETURN_ON_ERROR
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
else
HAVE_DYLD_RETURN_ON_ERROR="no"
echo "#undef HAVE_DYLD_RETURN_ON_ERROR" >$BLD/include/agar/config/have_dyld_return_on_error.h
echo "hdefs[\"HAVE_DYLD_RETURN_ON_ERROR\"] = nil" >>configure.lua
fi;
TEST_CFLAGS="${TEST_CFLAGS_ORIG}"
TEST_HEADERS=""
echo "DSO_CFLAGS=$DSO_CFLAGS" >>Makefile.config
echo "mdefs[\"DSO_CFLAGS\"] = \"$DSO_CFLAGS\"" >>configure.lua
echo "#ifndef DSO_CFLAGS" > $BLD/include/agar/config/dso_cflags.h
echo "#define DSO_CFLAGS \"$DSO_CFLAGS\"" >> $BLD/include/agar/config/dso_cflags.h
echo "#endif" >> $BLD/include/agar/config/dso_cflags.h
echo "hdefs[\"DSO_CFLAGS\"] = \"$DSO_CFLAGS\"" >>configure.lua
echo "DSO_LIBS=$DSO_LIBS" >>Makefile.config
echo "mdefs[\"DSO_LIBS\"] = \"$DSO_LIBS\"" >>configure.lua
echo "#ifndef DSO_LIBS" > $BLD/include/agar/config/dso_libs.h
echo "#define DSO_LIBS \"$DSO_LIBS\"" >> $BLD/include/agar/config/dso_libs.h
echo "#endif" >> $BLD/include/agar/config/dso_libs.h
echo "hdefs[\"DSO_LIBS\"] = \"$DSO_LIBS\"" >>configure.lua
$ECHO_N "checking for shl_load() interface..."
$ECHO_N "checking for shl_load() interface..." >> config.log
TEST_CFLAGS_ORIG="${TEST_CFLAGS}"
TEST_HEADERS="Yes"
echo > conftest.c
echo "#include <dl.h>" >> conftest.c
echo "int main (int argc, char *argv[]) { return (0); }" >> conftest.c
MK_COMPILE_STATUS="OK"
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c" >>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	MK_COMPILE_STATUS="FAIL($?)"
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
HAVE_DL_H="yes"
echo "#ifndef HAVE_DL_H" > $BLD/include/agar/config/have_dl_h.h
echo "#define HAVE_DL_H \"$HAVE_DL_H\"" >> $BLD/include/agar/config/have_dl_h.h
echo "#endif" >> $BLD/include/agar/config/have_dl_h.h
echo "hdefs[\"HAVE_DL_H\"] = \"$HAVE_DL_H\"" >>configure.lua
if [ "${TEST_HEADERS}" = "Yes" ]; then
TEST_CFLAGS="${TEST_CFLAGS} -DHAVE_DL_H"
fi;
else
HAVE_DL_H="no"
echo "#undef HAVE_DL_H" >$BLD/include/agar/config/have_dl_h.h
echo "hdefs[\"HAVE_DL_H\"] = nil" >>configure.lua
fi;
if [ "" != "" ]; then
SHL_LOAD_LIBS="-L -ldld"
else
SHL_LOAD_LIBS="-ldld"
fi;
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_SHL_LOAD" ]; then
		HAVE_SHL_LOAD=`cat ${cache}/ctest-HAVE_SHL_LOAD`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_SHL_LOAD`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#ifdef HAVE_DL_H
#include <dl.h>
#endif

int
main(int argc, char *argv[])
{
	void *handle;
	void **p;

	handle = shl_load("foo.so", BIND_IMMEDIATE, 0);
	(void)shl_findsym((shl_t *)&handle, "foo", TYPE_PROCEDURE, p);
	(void)shl_findsym((shl_t *)&handle, "foo", TYPE_DATA, p);
	shl_unload((shl_t)handle);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${SHL_LOAD_LIBS} -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${SHL_LOAD_LIBS} -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_SHL_LOAD="yes"
echo "HAVE_SHL_LOAD=$HAVE_SHL_LOAD" >>Makefile.config
echo "mdefs[\"HAVE_SHL_LOAD\"] = \"$HAVE_SHL_LOAD\"" >>configure.lua
echo "#ifndef HAVE_SHL_LOAD" > $BLD/include/agar/config/have_shl_load.h
echo "#define HAVE_SHL_LOAD \"$HAVE_SHL_LOAD\"" >> $BLD/include/agar/config/have_shl_load.h
echo "#endif" >> $BLD/include/agar/config/have_shl_load.h
echo "hdefs[\"HAVE_SHL_LOAD\"] = \"$HAVE_SHL_LOAD\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_SHL_LOAD="no"
echo "HAVE_SHL_LOAD=$HAVE_SHL_LOAD" >>Makefile.config
echo "mdefs[\"HAVE_SHL_LOAD\"] = \"$HAVE_SHL_LOAD\"" >>configure.lua
echo "#undef HAVE_SHL_LOAD" >$BLD/include/agar/config/have_shl_load.h
echo "hdefs[\"HAVE_SHL_LOAD\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_SHL_LOAD" > ${cache}/ctest-HAVE_SHL_LOAD
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_SHL_LOAD
fi
rm -f conftest.c $testdir/conftest
if [ "${HAVE_SHL_LOAD}" = "yes" ]; then
echo "HAVE_SHL_LOAD=$HAVE_SHL_LOAD" >>Makefile.config
echo "mdefs[\"HAVE_SHL_LOAD\"] = \"$HAVE_SHL_LOAD\"" >>configure.lua
echo "#ifndef HAVE_SHL_LOAD" > $BLD/include/agar/config/have_shl_load.h
echo "#define HAVE_SHL_LOAD \"$HAVE_SHL_LOAD\"" >> $BLD/include/agar/config/have_shl_load.h
echo "#endif" >> $BLD/include/agar/config/have_shl_load.h
echo "hdefs[\"HAVE_SHL_LOAD\"] = \"$HAVE_SHL_LOAD\"" >>configure.lua
DSO_LIBS="$DSO_LIBS $SHL_LOAD_LIBS"
else
echo "#undef HAVE_SHL_LOAD" >$BLD/include/agar/config/have_shl_load.h
echo "hdefs[\"HAVE_SHL_LOAD\"] = nil" >>configure.lua
fi;
TEST_CFLAGS="${TEST_CFLAGS_ORIG}"
TEST_HEADERS=""
$ECHO_N "checking for the gettimeofday() function..."
$ECHO_N "checking for the gettimeofday() function..." >> config.log
case "${host}" in
*-*-cygwin* | *-*-mingw32*)
echo "not checking (mingw32 issues)"
echo "not checking (mingw32 issues)" >> config.log
HAVE_GETTIMEOFDAY="no"
echo "#undef HAVE_GETTIMEOFDAY" >$BLD/include/agar/config/have_gettimeofday.h
echo "hdefs[\"HAVE_GETTIMEOFDAY\"] = nil" >>configure.lua
;;
*)
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_GETTIMEOFDAY" ]; then
		HAVE_GETTIMEOFDAY=`cat ${cache}/ctest-HAVE_GETTIMEOFDAY`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_GETTIMEOFDAY`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <sys/time.h>
#include <stdio.h>

int
main(int argc, char *argv[])
{
	struct timeval tv;
	int rv = gettimeofday(&tv, NULL);
	return (rv);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_GETTIMEOFDAY="yes"
echo "#ifndef HAVE_GETTIMEOFDAY" > $BLD/include/agar/config/have_gettimeofday.h
echo "#define HAVE_GETTIMEOFDAY \"$HAVE_GETTIMEOFDAY\"" >> $BLD/include/agar/config/have_gettimeofday.h
echo "#endif" >> $BLD/include/agar/config/have_gettimeofday.h
echo "hdefs[\"HAVE_GETTIMEOFDAY\"] = \"$HAVE_GETTIMEOFDAY\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_GETTIMEOFDAY="no"
echo "#undef HAVE_GETTIMEOFDAY" >$BLD/include/agar/config/have_gettimeofday.h
echo "hdefs[\"HAVE_GETTIMEOFDAY\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_GETTIMEOFDAY" > ${cache}/ctest-HAVE_GETTIMEOFDAY
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_GETTIMEOFDAY
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
;;
esac
$ECHO_N "checking for the select() interface..."
$ECHO_N "checking for the select() interface..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_SELECT" ]; then
		HAVE_SELECT=`cat ${cache}/ctest-HAVE_SELECT`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_SELECT`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <sys/types.h>
#include <sys/time.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>

int
main(int argc, char *argv[])
{
	struct timeval tv;
	int rv;

	tv.tv_sec = 1;
	tv.tv_usec = 1;
	rv = select(0, NULL, NULL, NULL, &tv);
	return (rv == -1 && errno != EINTR);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_SELECT="yes"
echo "#ifndef HAVE_SELECT" > $BLD/include/agar/config/have_select.h
echo "#define HAVE_SELECT \"$HAVE_SELECT\"" >> $BLD/include/agar/config/have_select.h
echo "#endif" >> $BLD/include/agar/config/have_select.h
echo "hdefs[\"HAVE_SELECT\"] = \"$HAVE_SELECT\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_SELECT="no"
echo "#undef HAVE_SELECT" >$BLD/include/agar/config/have_select.h
echo "hdefs[\"HAVE_SELECT\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_SELECT" > ${cache}/ctest-HAVE_SELECT
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_SELECT
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
$ECHO_N "checking for a setproctitle() function..."
$ECHO_N "checking for a setproctitle() function..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_SETPROCTITLE" ]; then
		HAVE_SETPROCTITLE=`cat ${cache}/ctest-HAVE_SETPROCTITLE`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_SETPROCTITLE`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <sys/types.h>
#include <unistd.h>
#include <stdlib.h>
int
main(int argc, char *argv[])
{
	setproctitle("foo %d", 1);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_SETPROCTITLE="yes"
echo "#ifndef HAVE_SETPROCTITLE" > $BLD/include/agar/config/have_setproctitle.h
echo "#define HAVE_SETPROCTITLE \"$HAVE_SETPROCTITLE\"" >> $BLD/include/agar/config/have_setproctitle.h
echo "#endif" >> $BLD/include/agar/config/have_setproctitle.h
echo "hdefs[\"HAVE_SETPROCTITLE\"] = \"$HAVE_SETPROCTITLE\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_SETPROCTITLE="no"
echo "#undef HAVE_SETPROCTITLE" >$BLD/include/agar/config/have_setproctitle.h
echo "hdefs[\"HAVE_SETPROCTITLE\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_SETPROCTITLE" > ${cache}/ctest-HAVE_SETPROCTITLE
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_SETPROCTITLE
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
$ECHO_N "checking for a syslog() function..."
$ECHO_N "checking for a syslog() function..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_SYSLOG" ]; then
		HAVE_SYSLOG=`cat ${cache}/ctest-HAVE_SYSLOG`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_SYSLOG`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <syslog.h>
#include <stdarg.h>
int
main(int argc, char *argv[])
{
	syslog(LOG_DEBUG, "foo %d", 1);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_SYSLOG="yes"
echo "#ifndef HAVE_SYSLOG" > $BLD/include/agar/config/have_syslog.h
echo "#define HAVE_SYSLOG \"$HAVE_SYSLOG\"" >> $BLD/include/agar/config/have_syslog.h
echo "#endif" >> $BLD/include/agar/config/have_syslog.h
echo "hdefs[\"HAVE_SYSLOG\"] = \"$HAVE_SYSLOG\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_SYSLOG="no"
echo "#undef HAVE_SYSLOG" >$BLD/include/agar/config/have_syslog.h
echo "hdefs[\"HAVE_SYSLOG\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_SYSLOG" > ${cache}/ctest-HAVE_SYSLOG
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_SYSLOG
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
$ECHO_N "checking for syslog_r()..."
$ECHO_N "checking for syslog_r()..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_SYSLOG_R" ]; then
		HAVE_SYSLOG_R=`cat ${cache}/ctest-HAVE_SYSLOG_R`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_SYSLOG_R`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <syslog.h>
#include <stdarg.h>
int
main(int argc, char *argv[])
{
	struct syslog_data sdata = SYSLOG_DATA_INIT;
	syslog_r(LOG_ERR, &sdata, "foo %d", 1);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_SYSLOG_R="yes"
echo "#ifndef HAVE_SYSLOG_R" > $BLD/include/agar/config/have_syslog_r.h
echo "#define HAVE_SYSLOG_R \"$HAVE_SYSLOG_R\"" >> $BLD/include/agar/config/have_syslog_r.h
echo "#endif" >> $BLD/include/agar/config/have_syslog_r.h
echo "hdefs[\"HAVE_SYSLOG_R\"] = \"$HAVE_SYSLOG_R\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_SYSLOG_R="no"
echo "#undef HAVE_SYSLOG_R" >$BLD/include/agar/config/have_syslog_r.h
echo "hdefs[\"HAVE_SYSLOG_R\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_SYSLOG_R" > ${cache}/ctest-HAVE_SYSLOG_R
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_SYSLOG_R
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
$ECHO_N "checking for vsyslog()..."
$ECHO_N "checking for vsyslog()..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_VSYSLOG" ]; then
		HAVE_VSYSLOG=`cat ${cache}/ctest-HAVE_VSYSLOG`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_VSYSLOG`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <syslog.h>
#include <stdarg.h>

void
foofn(const char *fmt, ...)
{
	va_list ap;
	va_start(ap, fmt);
	vsyslog(LOG_DEBUG, fmt, ap);
	va_end(ap);
}
int
main(int argc, char *argv[])
{
	foofn("foo %d", 1);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_VSYSLOG="yes"
echo "#ifndef HAVE_VSYSLOG" > $BLD/include/agar/config/have_vsyslog.h
echo "#define HAVE_VSYSLOG \"$HAVE_VSYSLOG\"" >> $BLD/include/agar/config/have_vsyslog.h
echo "#endif" >> $BLD/include/agar/config/have_vsyslog.h
echo "hdefs[\"HAVE_VSYSLOG\"] = \"$HAVE_VSYSLOG\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_VSYSLOG="no"
echo "#undef HAVE_VSYSLOG" >$BLD/include/agar/config/have_vsyslog.h
echo "hdefs[\"HAVE_VSYSLOG\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_VSYSLOG" > ${cache}/ctest-HAVE_VSYSLOG
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_VSYSLOG
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
$ECHO_N "checking for vsyslog_r()..."
$ECHO_N "checking for vsyslog_r()..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_VSYSLOG_R" ]; then
		HAVE_VSYSLOG_R=`cat ${cache}/ctest-HAVE_VSYSLOG_R`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_VSYSLOG_R`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <syslog.h>
#include <stdarg.h>

void
foofn(const char *fmt, ...)
{
	va_list ap;
	struct syslog_data sdata = SYSLOG_DATA_INIT;
	va_start(ap, fmt);
	vsyslog_r(LOG_DEBUG, &sdata, fmt, ap);
	va_end(ap);
}
int
main(int argc, char *argv[])
{
	foofn("foo %d", 1);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_VSYSLOG_R="yes"
echo "#ifndef HAVE_VSYSLOG_R" > $BLD/include/agar/config/have_vsyslog_r.h
echo "#define HAVE_VSYSLOG_R \"$HAVE_VSYSLOG_R\"" >> $BLD/include/agar/config/have_vsyslog_r.h
echo "#endif" >> $BLD/include/agar/config/have_vsyslog_r.h
echo "hdefs[\"HAVE_VSYSLOG_R\"] = \"$HAVE_VSYSLOG_R\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_VSYSLOG_R="no"
echo "#undef HAVE_VSYSLOG_R" >$BLD/include/agar/config/have_vsyslog_r.h
echo "hdefs[\"HAVE_VSYSLOG_R\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_VSYSLOG_R" > ${cache}/ctest-HAVE_VSYSLOG_R
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_VSYSLOG_R
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
$ECHO_N "checking for the glob() function..."
$ECHO_N "checking for the glob() function..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_GLOB" ]; then
		HAVE_GLOB=`cat ${cache}/ctest-HAVE_GLOB`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_GLOB`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <glob.h>
#include <stdio.h>

int
main(int argc, char *argv[])
{
	glob_t gl;
	int rv, i;
	char *s;

	rv = glob("~/foo", GLOB_TILDE, NULL, &gl);
	for (i = 0; i < gl.gl_pathc; i++) { s = gl.gl_pathv[i]; }
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_GLOB="yes"
echo "#ifndef HAVE_GLOB" > $BLD/include/agar/config/have_glob.h
echo "#define HAVE_GLOB \"$HAVE_GLOB\"" >> $BLD/include/agar/config/have_glob.h
echo "#endif" >> $BLD/include/agar/config/have_glob.h
echo "hdefs[\"HAVE_GLOB\"] = \"$HAVE_GLOB\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_GLOB="no"
echo "#undef HAVE_GLOB" >$BLD/include/agar/config/have_glob.h
echo "hdefs[\"HAVE_GLOB\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_GLOB" > ${cache}/ctest-HAVE_GLOB
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_GLOB
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
$ECHO_N "checking for the getopt() function..."
$ECHO_N "checking for the getopt() function..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_GETOPT" ]; then
		HAVE_GETOPT=`cat ${cache}/ctest-HAVE_GETOPT`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_GETOPT`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <unistd.h>

int
main(int argc, char *argv[])
{
	int c, x;
	while ((c = getopt(argc, argv, "foo")) != -1) {
		extern char *optarg;
		extern int optind, opterr, optopt;
		if (optarg != NULL) { x = 1; }
		if (optind > 0) { x = 2; }
		if (opterr > 0) { x = 3; }
		if (optopt > 0) { x = 4; }
	}
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_GETOPT="yes"
echo "#ifndef HAVE_GETOPT" > $BLD/include/agar/config/have_getopt.h
echo "#define HAVE_GETOPT \"$HAVE_GETOPT\"" >> $BLD/include/agar/config/have_getopt.h
echo "#endif" >> $BLD/include/agar/config/have_getopt.h
echo "hdefs[\"HAVE_GETOPT\"] = \"$HAVE_GETOPT\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_GETOPT="no"
echo "#undef HAVE_GETOPT" >$BLD/include/agar/config/have_getopt.h
echo "hdefs[\"HAVE_GETOPT\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_GETOPT" > ${cache}/ctest-HAVE_GETOPT
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_GETOPT
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
$ECHO_N "checking for the execvp() function..."
$ECHO_N "checking for the execvp() function..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_EXECVP" ]; then
		HAVE_EXECVP=`cat ${cache}/ctest-HAVE_EXECVP`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_EXECVP`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <unistd.h>

int
main(int argc, char *argv[])
{
	char *args[3];
	int rv;

	args[0] = "foo";
	args[2] = NULL;

	rv = execvp(args[0], args);
	return (rv);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_EXECVP="yes"
echo "#ifndef HAVE_EXECVP" > $BLD/include/agar/config/have_execvp.h
echo "#define HAVE_EXECVP \"$HAVE_EXECVP\"" >> $BLD/include/agar/config/have_execvp.h
echo "#endif" >> $BLD/include/agar/config/have_execvp.h
echo "hdefs[\"HAVE_EXECVP\"] = \"$HAVE_EXECVP\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_EXECVP="no"
echo "#undef HAVE_EXECVP" >$BLD/include/agar/config/have_execvp.h
echo "hdefs[\"HAVE_EXECVP\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_EXECVP" > ${cache}/ctest-HAVE_EXECVP
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_EXECVP
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
$ECHO_N "checking for clock_gettime() interface (w/o -lrt)..."
$ECHO_N "checking for clock_gettime() interface (w/o -lrt)..." >> config.log
CLOCK_CFLAGS=""
CLOCK_LIBS=""
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_CLOCK_GETTIME" ]; then
		HAVE_CLOCK_GETTIME=`cat ${cache}/ctest-HAVE_CLOCK_GETTIME`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_CLOCK_GETTIME`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <time.h>
int
main(int argc, char *argv[])
{
	struct timespec ts;
	clock_gettime(CLOCK_REALTIME, &ts);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${CLOCK_CFLAGS} -o $testdir/conftest conftest.c ${CLOCK_LIBS}" >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${CLOCK_CFLAGS} -o $testdir/conftest conftest.c ${CLOCK_LIBS} 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_CLOCK_GETTIME="yes"
echo "HAVE_CLOCK_GETTIME=$HAVE_CLOCK_GETTIME" >>Makefile.config
echo "mdefs[\"HAVE_CLOCK_GETTIME\"] = \"$HAVE_CLOCK_GETTIME\"" >>configure.lua
echo "#ifndef HAVE_CLOCK_GETTIME" > $BLD/include/agar/config/have_clock_gettime.h
echo "#define HAVE_CLOCK_GETTIME \"$HAVE_CLOCK_GETTIME\"" >> $BLD/include/agar/config/have_clock_gettime.h
echo "#endif" >> $BLD/include/agar/config/have_clock_gettime.h
echo "hdefs[\"HAVE_CLOCK_GETTIME\"] = \"$HAVE_CLOCK_GETTIME\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_CLOCK_GETTIME="no"
echo "HAVE_CLOCK_GETTIME=$HAVE_CLOCK_GETTIME" >>Makefile.config
echo "mdefs[\"HAVE_CLOCK_GETTIME\"] = \"$HAVE_CLOCK_GETTIME\"" >>configure.lua
echo "#undef HAVE_CLOCK_GETTIME" >$BLD/include/agar/config/have_clock_gettime.h
echo "hdefs[\"HAVE_CLOCK_GETTIME\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_CLOCK_GETTIME" > ${cache}/ctest-HAVE_CLOCK_GETTIME
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_CLOCK_GETTIME
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_CLOCK_GETTIME}" = "yes" ]; then
echo "#ifndef HAVE_CLOCK_GETTIME" > $BLD/include/agar/config/have_clock_gettime.h
echo "#define HAVE_CLOCK_GETTIME \"$HAVE_CLOCK_GETTIME\"" >> $BLD/include/agar/config/have_clock_gettime.h
echo "#endif" >> $BLD/include/agar/config/have_clock_gettime.h
echo "hdefs[\"HAVE_CLOCK_GETTIME\"] = \"$HAVE_CLOCK_GETTIME\"" >>configure.lua
echo "#ifndef CLOCK_CFLAGS" > $BLD/include/agar/config/clock_cflags.h
echo "#define CLOCK_CFLAGS \"$CLOCK_CFLAGS\"" >> $BLD/include/agar/config/clock_cflags.h
echo "#endif" >> $BLD/include/agar/config/clock_cflags.h
echo "hdefs[\"CLOCK_CFLAGS\"] = \"$CLOCK_CFLAGS\"" >>configure.lua
echo "#ifndef CLOCK_LIBS" > $BLD/include/agar/config/clock_libs.h
echo "#define CLOCK_LIBS \"$CLOCK_LIBS\"" >> $BLD/include/agar/config/clock_libs.h
echo "#endif" >> $BLD/include/agar/config/clock_libs.h
echo "hdefs[\"CLOCK_LIBS\"] = \"$CLOCK_LIBS\"" >>configure.lua
echo "CLOCK_CFLAGS=$CLOCK_CFLAGS" >>Makefile.config
echo "mdefs[\"CLOCK_CFLAGS\"] = \"$CLOCK_CFLAGS\"" >>configure.lua
echo "CLOCK_LIBS=$CLOCK_LIBS" >>Makefile.config
echo "mdefs[\"CLOCK_LIBS\"] = \"$CLOCK_LIBS\"" >>configure.lua
else
$ECHO_N "checking for clock_gettime() interface (with -lrt)..."
$ECHO_N "checking for clock_gettime() interface (with -lrt)..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_CLOCK_GETTIME" ]; then
		HAVE_CLOCK_GETTIME=`cat ${cache}/ctest-HAVE_CLOCK_GETTIME`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_CLOCK_GETTIME`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <time.h>
int
main(int argc, char *argv[])
{
	struct timespec ts;
	clock_gettime(CLOCK_REALTIME, &ts);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${CLOCK_CFLAGS} -o $testdir/conftest conftest.c -lrt" >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${CLOCK_CFLAGS} -o $testdir/conftest conftest.c -lrt 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_CLOCK_GETTIME="yes"
echo "HAVE_CLOCK_GETTIME=$HAVE_CLOCK_GETTIME" >>Makefile.config
echo "mdefs[\"HAVE_CLOCK_GETTIME\"] = \"$HAVE_CLOCK_GETTIME\"" >>configure.lua
echo "#ifndef HAVE_CLOCK_GETTIME" > $BLD/include/agar/config/have_clock_gettime.h
echo "#define HAVE_CLOCK_GETTIME \"$HAVE_CLOCK_GETTIME\"" >> $BLD/include/agar/config/have_clock_gettime.h
echo "#endif" >> $BLD/include/agar/config/have_clock_gettime.h
echo "hdefs[\"HAVE_CLOCK_GETTIME\"] = \"$HAVE_CLOCK_GETTIME\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_CLOCK_GETTIME="no"
echo "HAVE_CLOCK_GETTIME=$HAVE_CLOCK_GETTIME" >>Makefile.config
echo "mdefs[\"HAVE_CLOCK_GETTIME\"] = \"$HAVE_CLOCK_GETTIME\"" >>configure.lua
echo "#undef HAVE_CLOCK_GETTIME" >$BLD/include/agar/config/have_clock_gettime.h
echo "hdefs[\"HAVE_CLOCK_GETTIME\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_CLOCK_GETTIME" > ${cache}/ctest-HAVE_CLOCK_GETTIME
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_CLOCK_GETTIME
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_CLOCK_GETTIME}" = "yes" ]; then
CLOCK_LIBS="-lrt"
echo "#ifndef HAVE_CLOCK_GETTIME" > $BLD/include/agar/config/have_clock_gettime.h
echo "#define HAVE_CLOCK_GETTIME \"$HAVE_CLOCK_GETTIME\"" >> $BLD/include/agar/config/have_clock_gettime.h
echo "#endif" >> $BLD/include/agar/config/have_clock_gettime.h
echo "hdefs[\"HAVE_CLOCK_GETTIME\"] = \"$HAVE_CLOCK_GETTIME\"" >>configure.lua
echo "#ifndef CLOCK_CFLAGS" > $BLD/include/agar/config/clock_cflags.h
echo "#define CLOCK_CFLAGS \"$CLOCK_CFLAGS\"" >> $BLD/include/agar/config/clock_cflags.h
echo "#endif" >> $BLD/include/agar/config/clock_cflags.h
echo "hdefs[\"CLOCK_CFLAGS\"] = \"$CLOCK_CFLAGS\"" >>configure.lua
echo "#ifndef CLOCK_LIBS" > $BLD/include/agar/config/clock_libs.h
echo "#define CLOCK_LIBS \"$CLOCK_LIBS\"" >> $BLD/include/agar/config/clock_libs.h
echo "#endif" >> $BLD/include/agar/config/clock_libs.h
echo "hdefs[\"CLOCK_LIBS\"] = \"$CLOCK_LIBS\"" >>configure.lua
echo "CLOCK_CFLAGS=$CLOCK_CFLAGS" >>Makefile.config
echo "mdefs[\"CLOCK_CFLAGS\"] = \"$CLOCK_CFLAGS\"" >>configure.lua
echo "CLOCK_LIBS=$CLOCK_LIBS" >>Makefile.config
echo "mdefs[\"CLOCK_LIBS\"] = \"$CLOCK_LIBS\"" >>configure.lua
else
echo "#undef HAVE_CLOCK_GETTIME" >$BLD/include/agar/config/have_clock_gettime.h
echo "hdefs[\"HAVE_CLOCK_GETTIME\"] = nil" >>configure.lua
fi;
fi;
$ECHO_N "checking for winmm time interface..."
$ECHO_N "checking for winmm time interface..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_CLOCK_WIN32" ]; then
		HAVE_CLOCK_WIN32=`cat ${cache}/ctest-HAVE_CLOCK_WIN32`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_CLOCK_WIN32`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#ifdef _XBOX
#include <xtl.h>
#else
#include <windows.h>
#include <mmsystem.h>
#endif

int
main(int argc, char *argv[])
{
	DWORD t0;
#ifndef _XBOX
	timeBeginPeriod(1);
#endif
	t0 = timeGetTime();
	Sleep(1);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c -lwinmm" >>config.log
	$CC $CFLAGS $TEST_CFLAGS  -o $testdir/conftest conftest.c -lwinmm 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_CLOCK_WIN32="yes"
echo "HAVE_CLOCK_WIN32=$HAVE_CLOCK_WIN32" >>Makefile.config
echo "mdefs[\"HAVE_CLOCK_WIN32\"] = \"$HAVE_CLOCK_WIN32\"" >>configure.lua
echo "#ifndef HAVE_CLOCK_WIN32" > $BLD/include/agar/config/have_clock_win32.h
echo "#define HAVE_CLOCK_WIN32 \"$HAVE_CLOCK_WIN32\"" >> $BLD/include/agar/config/have_clock_win32.h
echo "#endif" >> $BLD/include/agar/config/have_clock_win32.h
echo "hdefs[\"HAVE_CLOCK_WIN32\"] = \"$HAVE_CLOCK_WIN32\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_CLOCK_WIN32="no"
echo "HAVE_CLOCK_WIN32=$HAVE_CLOCK_WIN32" >>Makefile.config
echo "mdefs[\"HAVE_CLOCK_WIN32\"] = \"$HAVE_CLOCK_WIN32\"" >>configure.lua
echo "#undef HAVE_CLOCK_WIN32" >$BLD/include/agar/config/have_clock_win32.h
echo "hdefs[\"HAVE_CLOCK_WIN32\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_CLOCK_WIN32" > ${cache}/ctest-HAVE_CLOCK_WIN32
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_CLOCK_WIN32
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_CLOCK_WIN32}" = "yes" ]; then
CLOCK_CFLAGS=""
CLOCK_LIBS="-lwinmm"
echo "#ifndef HAVE_CLOCK_WIN32" > $BLD/include/agar/config/have_clock_win32.h
echo "#define HAVE_CLOCK_WIN32 \"$HAVE_CLOCK_WIN32\"" >> $BLD/include/agar/config/have_clock_win32.h
echo "#endif" >> $BLD/include/agar/config/have_clock_win32.h
echo "hdefs[\"HAVE_CLOCK_WIN32\"] = \"$HAVE_CLOCK_WIN32\"" >>configure.lua
echo "#ifndef CLOCK_CFLAGS" > $BLD/include/agar/config/clock_cflags.h
echo "#define CLOCK_CFLAGS \"$CLOCK_CFLAGS\"" >> $BLD/include/agar/config/clock_cflags.h
echo "#endif" >> $BLD/include/agar/config/clock_cflags.h
echo "hdefs[\"CLOCK_CFLAGS\"] = \"$CLOCK_CFLAGS\"" >>configure.lua
echo "#ifndef CLOCK_LIBS" > $BLD/include/agar/config/clock_libs.h
echo "#define CLOCK_LIBS \"$CLOCK_LIBS\"" >> $BLD/include/agar/config/clock_libs.h
echo "#endif" >> $BLD/include/agar/config/clock_libs.h
echo "hdefs[\"CLOCK_LIBS\"] = \"$CLOCK_LIBS\"" >>configure.lua
echo "CLOCK_CFLAGS=$CLOCK_CFLAGS" >>Makefile.config
echo "mdefs[\"CLOCK_CFLAGS\"] = \"$CLOCK_CFLAGS\"" >>configure.lua
echo "CLOCK_LIBS=$CLOCK_LIBS" >>Makefile.config
echo "mdefs[\"CLOCK_LIBS\"] = \"$CLOCK_LIBS\"" >>configure.lua
else
echo "#undef HAVE_CLOCK_WIN32" >$BLD/include/agar/config/have_clock_win32.h
echo "hdefs[\"HAVE_CLOCK_WIN32\"] = nil" >>configure.lua
fi;
CFLAGS="$CFLAGS -D_AGAR_INTERNAL"
CXXFLAGS="$CXXFLAGS -D_AGAR_INTERNAL"
echo "CFLAGS=$CFLAGS" >>Makefile.config
echo "mdefs[\"CFLAGS\"] = \"$CFLAGS\"" >>configure.lua
echo "CXXFLAGS=$CXXFLAGS" >>Makefile.config
echo "mdefs[\"CXXFLAGS\"] = \"$CXXFLAGS\"" >>configure.lua
CFLAGS="$CFLAGS -D_BSD_SOURCE"
CXXFLAGS="$CXXFLAGS -D_BSD_SOURCE"
echo "CFLAGS=$CFLAGS" >>Makefile.config
echo "mdefs[\"CFLAGS\"] = \"$CFLAGS\"" >>configure.lua
echo "CXXFLAGS=$CXXFLAGS" >>Makefile.config
echo "mdefs[\"CXXFLAGS\"] = \"$CXXFLAGS\"" >>configure.lua
if [ "${enable_warnings}" = "yes" ]
 then
CFLAGS="$CFLAGS -Wall"
CXXFLAGS="$CXXFLAGS -Wall"
echo "CFLAGS=$CFLAGS" >>Makefile.config
echo "mdefs[\"CFLAGS\"] = \"$CFLAGS\"" >>configure.lua
echo "CXXFLAGS=$CXXFLAGS" >>Makefile.config
echo "mdefs[\"CXXFLAGS\"] = \"$CXXFLAGS\"" >>configure.lua
CFLAGS="$CFLAGS -Werror"
CXXFLAGS="$CXXFLAGS -Werror"
echo "CFLAGS=$CFLAGS" >>Makefile.config
echo "mdefs[\"CFLAGS\"] = \"$CFLAGS\"" >>configure.lua
echo "CXXFLAGS=$CXXFLAGS" >>Makefile.config
echo "mdefs[\"CXXFLAGS\"] = \"$CXXFLAGS\"" >>configure.lua
CFLAGS="$CFLAGS -Wmissing-prototypes"
CXXFLAGS="$CXXFLAGS -Wmissing-prototypes"
echo "CFLAGS=$CFLAGS" >>Makefile.config
echo "mdefs[\"CFLAGS\"] = \"$CFLAGS\"" >>configure.lua
echo "CXXFLAGS=$CXXFLAGS" >>Makefile.config
echo "mdefs[\"CXXFLAGS\"] = \"$CXXFLAGS\"" >>configure.lua
WNO_UNINITIALIZED="-Wno-uninitialized"
echo "WNO_UNINITIALIZED=$WNO_UNINITIALIZED" >>Makefile.config
echo "mdefs[\"WNO_UNINITIALIZED\"] = \"$WNO_UNINITIALIZED\"" >>configure.lua
else
WNO_UNINITIALIZED=""
echo "WNO_UNINITIALIZED=$WNO_UNINITIALIZED" >>Makefile.config
echo "mdefs[\"WNO_UNINITIALIZED\"] = \"$WNO_UNINITIALIZED\"" >>configure.lua
fi
if [ "${enable_debug}" = "yes" ]
 then
AG_DEBUG="yes"
echo "#ifndef AG_DEBUG" > $BLD/include/agar/config/ag_debug.h
echo "#define AG_DEBUG \"$AG_DEBUG\"" >> $BLD/include/agar/config/ag_debug.h
echo "#endif" >> $BLD/include/agar/config/ag_debug.h
echo "hdefs[\"AG_DEBUG\"] = \"$AG_DEBUG\"" >>configure.lua
	echo "LDFLAGS+=-g" >> Makefile.config
else
echo "#undef AG_DEBUG" >$BLD/include/agar/config/ag_debug.h
echo "hdefs[\"AG_DEBUG\"] = nil" >>configure.lua
fi
if [ "${enable_objdebug}" = "yes" ]
 then
AG_OBJDEBUG="yes"
echo "#ifndef AG_OBJDEBUG" > $BLD/include/agar/config/ag_objdebug.h
echo "#define AG_OBJDEBUG \"$AG_OBJDEBUG\"" >> $BLD/include/agar/config/ag_objdebug.h
echo "#endif" >> $BLD/include/agar/config/ag_objdebug.h
echo "hdefs[\"AG_OBJDEBUG\"] = \"$AG_OBJDEBUG\"" >>configure.lua
else
echo "#undef AG_OBJDEBUG" >$BLD/include/agar/config/ag_objdebug.h
echo "hdefs[\"AG_OBJDEBUG\"] = nil" >>configure.lua
fi
if [ "${enable_legacy}" != "no" ]
 then
AG_LEGACY="yes"
echo "#ifndef AG_LEGACY" > $BLD/include/agar/config/ag_legacy.h
echo "#define AG_LEGACY \"$AG_LEGACY\"" >> $BLD/include/agar/config/ag_legacy.h
echo "#endif" >> $BLD/include/agar/config/ag_legacy.h
echo "hdefs[\"AG_LEGACY\"] = \"$AG_LEGACY\"" >>configure.lua
else
echo "#undef AG_LEGACY" >$BLD/include/agar/config/ag_legacy.h
echo "hdefs[\"AG_LEGACY\"] = nil" >>configure.lua
fi
if [ "${enable_gui}" != "no" ]
 then
ENABLE_GUI="yes"
echo "#ifndef ENABLE_GUI" > $BLD/include/agar/config/enable_gui.h
echo "#define ENABLE_GUI \"$ENABLE_GUI\"" >> $BLD/include/agar/config/enable_gui.h
echo "#endif" >> $BLD/include/agar/config/enable_gui.h
echo "hdefs[\"ENABLE_GUI\"] = \"$ENABLE_GUI\"" >>configure.lua
SUBDIR_gui="gui"
echo "SUBDIR_gui=$SUBDIR_gui" >>Makefile.config
echo "mdefs[\"SUBDIR_gui\"] = \"$SUBDIR_gui\"" >>configure.lua
	if [ "${with_sdl}" != "no" ]
 then
$ECHO_N "checking for SDL (http://www.libsdl.org)..."
$ECHO_N "checking for SDL (http://www.libsdl.org)..." >> config.log
if [ "${prefix_sdl}" != "" ]; then
MK_EXEC_FOUND="No"

if [ "${prefix_sdl}" != "" ]; then
	if [ -e "${prefix_sdl}/bin/sdl-config" ]; then
		SDL_VERSION=`${prefix_sdl}/bin/sdl-config --version`
		MK_EXEC_FOUND="Yes"
	fi
else
	MK_CACHED="No"
	if [ "${cache}" != "" ]; then
		if [ -e "${cache}/exec-SDL_VERSION" ]; then
			SDL_VERSION=`cat ${cache}/exec-SDL_VERSION`
			MK_EXEC_FOUND=`cat ${cache}/exec-found-SDL_VERSION`
			MK_CACHED="Yes"
		fi
	fi
	if [ "${MK_CACHED}" = "No" ]; then
		SDL_VERSION=""
		for path in `echo $PATH | sed 's/:/ /g'`; do
			if [ -e "${path}/sdl-config" ]; then
				SDL_VERSION=`${path}/sdl-config --version`
				MK_EXEC_FOUND="Yes"
				break
			fi
		done
		if [ "${cache}" != "" ]; then
			echo "$SDL_VERSION" > ${cache}/exec-SDL_VERSION
			echo $MK_EXEC_FOUND > ${cache}/exec-found-SDL_VERSION
		fi
	fi
fi
MK_EXEC_FOUND="No"

if [ "${prefix_sdl}" != "" ]; then
	if [ -e "${prefix_sdl}/bin/sdl-config" ]; then
		SDL_CFLAGS=`${prefix_sdl}/bin/sdl-config --cflags`
		MK_EXEC_FOUND="Yes"
	fi
else
	MK_CACHED="No"
	if [ "${cache}" != "" ]; then
		if [ -e "${cache}/exec-SDL_CFLAGS" ]; then
			SDL_CFLAGS=`cat ${cache}/exec-SDL_CFLAGS`
			MK_EXEC_FOUND=`cat ${cache}/exec-found-SDL_CFLAGS`
			MK_CACHED="Yes"
		fi
	fi
	if [ "${MK_CACHED}" = "No" ]; then
		SDL_CFLAGS=""
		for path in `echo $PATH | sed 's/:/ /g'`; do
			if [ -e "${path}/sdl-config" ]; then
				SDL_CFLAGS=`${path}/sdl-config --cflags`
				MK_EXEC_FOUND="Yes"
				break
			fi
		done
		if [ "${cache}" != "" ]; then
			echo "$SDL_CFLAGS" > ${cache}/exec-SDL_CFLAGS
			echo $MK_EXEC_FOUND > ${cache}/exec-found-SDL_CFLAGS
		fi
	fi
fi
MK_EXEC_FOUND="No"

if [ "${prefix_sdl}" != "" ]; then
	if [ -e "${prefix_sdl}/bin/sdl-config" ]; then
		SDL_LIBS=`${prefix_sdl}/bin/sdl-config --libs`
		MK_EXEC_FOUND="Yes"
	fi
else
	MK_CACHED="No"
	if [ "${cache}" != "" ]; then
		if [ -e "${cache}/exec-SDL_LIBS" ]; then
			SDL_LIBS=`cat ${cache}/exec-SDL_LIBS`
			MK_EXEC_FOUND=`cat ${cache}/exec-found-SDL_LIBS`
			MK_CACHED="Yes"
		fi
	fi
	if [ "${MK_CACHED}" = "No" ]; then
		SDL_LIBS=""
		for path in `echo $PATH | sed 's/:/ /g'`; do
			if [ -e "${path}/sdl-config" ]; then
				SDL_LIBS=`${path}/sdl-config --libs`
				MK_EXEC_FOUND="Yes"
				break
			fi
		done
		if [ "${cache}" != "" ]; then
			echo "$SDL_LIBS" > ${cache}/exec-SDL_LIBS
			echo $MK_EXEC_FOUND > ${cache}/exec-found-SDL_LIBS
		fi
	fi
fi
else
case "${host}" in
*-*-freebsd*)
MK_EXEC_FOUND="No"
MK_CACHED="No"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/exec-SDL_VERSION" ]; then
		SDL_VERSION=`cat ${cache}/exec-SDL_VERSION`
		MK_EXEC_FOUND=`cat ${cache}/exec-found-SDL_VERSION`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	SDL_VERSION=""
	for path in `echo $PATH | sed 's/:/ /g'`; do
		if [ -e "${path}/sdl11-config" ]; then
			SDL_VERSION=`${path}/sdl11-config --version`
			MK_EXEC_FOUND="Yes"
			break
		fi
	done
	if [ "${cache}" != "" ]; then
		echo "$SDL_VERSION" > ${cache}/exec-SDL_VERSION
		echo $MK_EXEC_FOUND > ${cache}/exec-found-SDL_VERSION
	fi
fi
if [ "${SDL_VERSION}" != "" ]; then
MK_EXEC_FOUND="No"
MK_CACHED="No"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/exec-SDL_CFLAGS" ]; then
		SDL_CFLAGS=`cat ${cache}/exec-SDL_CFLAGS`
		MK_EXEC_FOUND=`cat ${cache}/exec-found-SDL_CFLAGS`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	SDL_CFLAGS=""
	for path in `echo $PATH | sed 's/:/ /g'`; do
		if [ -e "${path}/sdl11-config" ]; then
			SDL_CFLAGS=`${path}/sdl11-config --cflags`
			MK_EXEC_FOUND="Yes"
			break
		fi
	done
	if [ "${cache}" != "" ]; then
		echo "$SDL_CFLAGS" > ${cache}/exec-SDL_CFLAGS
		echo $MK_EXEC_FOUND > ${cache}/exec-found-SDL_CFLAGS
	fi
fi
MK_EXEC_FOUND="No"
MK_CACHED="No"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/exec-SDL_LIBS" ]; then
		SDL_LIBS=`cat ${cache}/exec-SDL_LIBS`
		MK_EXEC_FOUND=`cat ${cache}/exec-found-SDL_LIBS`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	SDL_LIBS=""
	for path in `echo $PATH | sed 's/:/ /g'`; do
		if [ -e "${path}/sdl11-config" ]; then
			SDL_LIBS=`${path}/sdl11-config --libs`
			MK_EXEC_FOUND="Yes"
			break
		fi
	done
	if [ "${cache}" != "" ]; then
		echo "$SDL_LIBS" > ${cache}/exec-SDL_LIBS
		echo $MK_EXEC_FOUND > ${cache}/exec-found-SDL_LIBS
	fi
fi
else
MK_EXEC_FOUND="No"
MK_CACHED="No"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/exec-SDL_VERSION" ]; then
		SDL_VERSION=`cat ${cache}/exec-SDL_VERSION`
		MK_EXEC_FOUND=`cat ${cache}/exec-found-SDL_VERSION`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	SDL_VERSION=""
	for path in `echo $PATH | sed 's/:/ /g'`; do
		if [ -e "${path}/sdl-config" ]; then
			SDL_VERSION=`${path}/sdl-config --version`
			MK_EXEC_FOUND="Yes"
			break
		fi
	done
	if [ "${cache}" != "" ]; then
		echo "$SDL_VERSION" > ${cache}/exec-SDL_VERSION
		echo $MK_EXEC_FOUND > ${cache}/exec-found-SDL_VERSION
	fi
fi
MK_EXEC_FOUND="No"
MK_CACHED="No"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/exec-SDL_CFLAGS" ]; then
		SDL_CFLAGS=`cat ${cache}/exec-SDL_CFLAGS`
		MK_EXEC_FOUND=`cat ${cache}/exec-found-SDL_CFLAGS`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	SDL_CFLAGS=""
	for path in `echo $PATH | sed 's/:/ /g'`; do
		if [ -e "${path}/sdl-config" ]; then
			SDL_CFLAGS=`${path}/sdl-config --cflags`
			MK_EXEC_FOUND="Yes"
			break
		fi
	done
	if [ "${cache}" != "" ]; then
		echo "$SDL_CFLAGS" > ${cache}/exec-SDL_CFLAGS
		echo $MK_EXEC_FOUND > ${cache}/exec-found-SDL_CFLAGS
	fi
fi
MK_EXEC_FOUND="No"
MK_CACHED="No"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/exec-SDL_LIBS" ]; then
		SDL_LIBS=`cat ${cache}/exec-SDL_LIBS`
		MK_EXEC_FOUND=`cat ${cache}/exec-found-SDL_LIBS`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	SDL_LIBS=""
	for path in `echo $PATH | sed 's/:/ /g'`; do
		if [ -e "${path}/sdl-config" ]; then
			SDL_LIBS=`${path}/sdl-config --libs`
			MK_EXEC_FOUND="Yes"
			break
		fi
	done
	if [ "${cache}" != "" ]; then
		echo "$SDL_LIBS" > ${cache}/exec-SDL_LIBS
		echo $MK_EXEC_FOUND > ${cache}/exec-found-SDL_LIBS
	fi
fi
fi;
;;
*)
MK_EXEC_FOUND="No"
MK_CACHED="No"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/exec-SDL_VERSION" ]; then
		SDL_VERSION=`cat ${cache}/exec-SDL_VERSION`
		MK_EXEC_FOUND=`cat ${cache}/exec-found-SDL_VERSION`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	SDL_VERSION=""
	for path in `echo $PATH | sed 's/:/ /g'`; do
		if [ -e "${path}/sdl-config" ]; then
			SDL_VERSION=`${path}/sdl-config --version`
			MK_EXEC_FOUND="Yes"
			break
		fi
	done
	if [ "${cache}" != "" ]; then
		echo "$SDL_VERSION" > ${cache}/exec-SDL_VERSION
		echo $MK_EXEC_FOUND > ${cache}/exec-found-SDL_VERSION
	fi
fi
MK_EXEC_FOUND="No"
MK_CACHED="No"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/exec-SDL_CFLAGS" ]; then
		SDL_CFLAGS=`cat ${cache}/exec-SDL_CFLAGS`
		MK_EXEC_FOUND=`cat ${cache}/exec-found-SDL_CFLAGS`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	SDL_CFLAGS=""
	for path in `echo $PATH | sed 's/:/ /g'`; do
		if [ -e "${path}/sdl-config" ]; then
			SDL_CFLAGS=`${path}/sdl-config --cflags`
			MK_EXEC_FOUND="Yes"
			break
		fi
	done
	if [ "${cache}" != "" ]; then
		echo "$SDL_CFLAGS" > ${cache}/exec-SDL_CFLAGS
		echo $MK_EXEC_FOUND > ${cache}/exec-found-SDL_CFLAGS
	fi
fi
MK_EXEC_FOUND="No"
MK_CACHED="No"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/exec-SDL_LIBS" ]; then
		SDL_LIBS=`cat ${cache}/exec-SDL_LIBS`
		MK_EXEC_FOUND=`cat ${cache}/exec-found-SDL_LIBS`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	SDL_LIBS=""
	for path in `echo $PATH | sed 's/:/ /g'`; do
		if [ -e "${path}/sdl-config" ]; then
			SDL_LIBS=`${path}/sdl-config --libs`
			MK_EXEC_FOUND="Yes"
			break
		fi
	done
	if [ "${cache}" != "" ]; then
		echo "$SDL_LIBS" > ${cache}/exec-SDL_LIBS
		echo $MK_EXEC_FOUND > ${cache}/exec-found-SDL_LIBS
	fi
fi
;;
esac
fi;
if [ "${SDL_VERSION}" != "" ]; then
if [ "${prefix_sdl}" != "" ]; then
echo "yes ($SDL_VERSION in ${prefix_sdl})"
echo "yes ($SDL_VERSION in ${prefix_sdl})" >> config.log
else
echo "yes ($SDL_VERSION)"
echo "yes ($SDL_VERSION)" >> config.log
fi;
if [ "1.2.0" != "" ]; then
MK_VERSION_MAJOR=`echo "$SDL_VERSION" |sed 's/\([0-9]*\).\([0-9]*\).\([0-9]*\).*/\1/'`;
MK_VERSION_MINOR=`echo "$SDL_VERSION" |sed 's/\([0-9]*\).\([0-9]*\).\([0-9]*\).*/\2/'`;
MK_VERSION_MICRO=`echo "$SDL_VERSION" |sed 's/\([0-9]*\).\([0-9]*\).\([0-9]*\).*/\3/'`;
MK_VERSION_OK="no"
if [ $MK_VERSION_MAJOR -gt 1 ]; then
	MK_VERSION_OK="yes";
elif [ $MK_VERSION_MAJOR -eq 1 ]; then
	if [ "$MK_VERSION_MINOR" = "" ]; then
		MK_VERSION_OK="yes"
	else
		if [ $MK_VERSION_MINOR -gt 2 ]; then
			MK_VERSION_OK="yes";
		elif [ $MK_VERSION_MINOR -eq 2 ]; then
			if [ "$MK_VERSION_MICRO" = "" ]; then
				MK_VERSION_OK="yes"
			else
				if [ $MK_VERSION_MICRO -ge 0 ]; then
					MK_VERSION_OK="yes"
				fi
			fi
		fi
	fi
fi
if [ "${MK_VERSION_OK}" != "yes" ]; then
echo "Version 1.2.0 or greater is required (found $SDL_VERSION)"
exit 1
fi;
fi;
$ECHO_N "checking whether SDL works..."
$ECHO_N "checking whether SDL works..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_SDL" ]; then
		HAVE_SDL=`cat ${cache}/ctest-HAVE_SDL`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_SDL`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <stdio.h>
#include <SDL.h>

int main(int argc, char *argv[]) {
	SDL_Surface *su;

	if (SDL_Init(SDL_INIT_TIMER|SDL_INIT_NOPARACHUTE) != 0) {
		return (1);
	}
	su = SDL_CreateRGBSurface(0, 16, 16, 32, 0, 0, 0, 0);
	SDL_FreeSurface(su);
	SDL_Quit();
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${SDL_CFLAGS} -o $testdir/conftest conftest.c ${SDL_LIBS}" >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${SDL_CFLAGS} -o $testdir/conftest conftest.c ${SDL_LIBS} 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_SDL="yes"
echo "HAVE_SDL=$HAVE_SDL" >>Makefile.config
echo "mdefs[\"HAVE_SDL\"] = \"$HAVE_SDL\"" >>configure.lua
echo "#ifndef HAVE_SDL" > $BLD/include/agar/config/have_sdl.h
echo "#define HAVE_SDL \"$HAVE_SDL\"" >> $BLD/include/agar/config/have_sdl.h
echo "#endif" >> $BLD/include/agar/config/have_sdl.h
echo "hdefs[\"HAVE_SDL\"] = \"$HAVE_SDL\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_SDL="no"
echo "HAVE_SDL=$HAVE_SDL" >>Makefile.config
echo "mdefs[\"HAVE_SDL\"] = \"$HAVE_SDL\"" >>configure.lua
echo "#undef HAVE_SDL" >$BLD/include/agar/config/have_sdl.h
echo "hdefs[\"HAVE_SDL\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_SDL" > ${cache}/ctest-HAVE_SDL
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_SDL
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_SDL}" = "yes" ]; then
echo "SDL_CFLAGS=$SDL_CFLAGS" >>Makefile.config
echo "mdefs[\"SDL_CFLAGS\"] = \"$SDL_CFLAGS\"" >>configure.lua
echo "#ifndef SDL_CFLAGS" > $BLD/include/agar/config/sdl_cflags.h
echo "#define SDL_CFLAGS \"$SDL_CFLAGS\"" >> $BLD/include/agar/config/sdl_cflags.h
echo "#endif" >> $BLD/include/agar/config/sdl_cflags.h
echo "hdefs[\"SDL_CFLAGS\"] = \"$SDL_CFLAGS\"" >>configure.lua
echo "SDL_LIBS=$SDL_LIBS" >>Makefile.config
echo "mdefs[\"SDL_LIBS\"] = \"$SDL_LIBS\"" >>configure.lua
echo "#ifndef SDL_LIBS" > $BLD/include/agar/config/sdl_libs.h
echo "#define SDL_LIBS \"$SDL_LIBS\"" >> $BLD/include/agar/config/sdl_libs.h
echo "#endif" >> $BLD/include/agar/config/sdl_libs.h
echo "hdefs[\"SDL_LIBS\"] = \"$SDL_LIBS\"" >>configure.lua
else
$ECHO_N "checking whether SDL works (with X11 libs)..."
$ECHO_N "checking whether SDL works (with X11 libs)..." >> config.log
SDL_LIBS="${SDL_LIBS} -L/usr/X11R6/lib -lX11 -lXext -lXrandr -lXrender"
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_SDL" ]; then
		HAVE_SDL=`cat ${cache}/ctest-HAVE_SDL`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_SDL`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <stdio.h>
#include <SDL.h>

int main(int argc, char *argv[]) {
	SDL_Surface *su;

	if (SDL_Init(SDL_INIT_TIMER|SDL_INIT_NOPARACHUTE) != 0) {
		return (1);
	}
	su = SDL_CreateRGBSurface(0, 16, 16, 32, 0, 0, 0, 0);
	SDL_FreeSurface(su);
	SDL_Quit();
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${SDL_CFLAGS} -o $testdir/conftest conftest.c ${SDL_LIBS}" >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${SDL_CFLAGS} -o $testdir/conftest conftest.c ${SDL_LIBS} 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_SDL="yes"
echo "HAVE_SDL=$HAVE_SDL" >>Makefile.config
echo "mdefs[\"HAVE_SDL\"] = \"$HAVE_SDL\"" >>configure.lua
echo "#ifndef HAVE_SDL" > $BLD/include/agar/config/have_sdl.h
echo "#define HAVE_SDL \"$HAVE_SDL\"" >> $BLD/include/agar/config/have_sdl.h
echo "#endif" >> $BLD/include/agar/config/have_sdl.h
echo "hdefs[\"HAVE_SDL\"] = \"$HAVE_SDL\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_SDL="no"
echo "HAVE_SDL=$HAVE_SDL" >>Makefile.config
echo "mdefs[\"HAVE_SDL\"] = \"$HAVE_SDL\"" >>configure.lua
echo "#undef HAVE_SDL" >$BLD/include/agar/config/have_sdl.h
echo "hdefs[\"HAVE_SDL\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_SDL" > ${cache}/ctest-HAVE_SDL
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_SDL
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_SDL}" = "yes" ]; then
echo "SDL_CFLAGS=$SDL_CFLAGS" >>Makefile.config
echo "mdefs[\"SDL_CFLAGS\"] = \"$SDL_CFLAGS\"" >>configure.lua
echo "#ifndef SDL_CFLAGS" > $BLD/include/agar/config/sdl_cflags.h
echo "#define SDL_CFLAGS \"$SDL_CFLAGS\"" >> $BLD/include/agar/config/sdl_cflags.h
echo "#endif" >> $BLD/include/agar/config/sdl_cflags.h
echo "hdefs[\"SDL_CFLAGS\"] = \"$SDL_CFLAGS\"" >>configure.lua
echo "SDL_LIBS=$SDL_LIBS" >>Makefile.config
echo "mdefs[\"SDL_LIBS\"] = \"$SDL_LIBS\"" >>configure.lua
echo "#ifndef SDL_LIBS" > $BLD/include/agar/config/sdl_libs.h
echo "#define SDL_LIBS \"$SDL_LIBS\"" >> $BLD/include/agar/config/sdl_libs.h
echo "#endif" >> $BLD/include/agar/config/sdl_libs.h
echo "hdefs[\"SDL_LIBS\"] = \"$SDL_LIBS\"" >>configure.lua
else
echo "#undef SDL_CFLAGS" >$BLD/include/agar/config/sdl_cflags.h
echo "hdefs[\"SDL_CFLAGS\"] = nil" >>configure.lua
SDL_CFLAGS=""
echo "#undef SDL_LIBS" >$BLD/include/agar/config/sdl_libs.h
echo "hdefs[\"SDL_LIBS\"] = nil" >>configure.lua
SDL_LIBS=""
fi;
fi;
else
if [ "${prefix_sdl}" != "" ]; then
echo "no (not in ${prefix_sdl})"
echo "no (not in ${prefix_sdl})" >> config.log
else
echo "no"
echo "no" >> config.log
fi;
echo "#undef HAVE_SDL" >$BLD/include/agar/config/have_sdl.h
echo "hdefs[\"HAVE_SDL\"] = nil" >>configure.lua
echo "#undef SDL_CFLAGS" >$BLD/include/agar/config/sdl_cflags.h
echo "hdefs[\"SDL_CFLAGS\"] = nil" >>configure.lua
echo "#undef SDL_LIBS" >$BLD/include/agar/config/sdl_libs.h
echo "hdefs[\"SDL_LIBS\"] = nil" >>configure.lua
fi;
		if [ "${HAVE_SDL}" != "yes" ]
 then
			if [ "${with_sdl}" = "yes" ]
 then
				echo "*"
				echo "* --with-sdl was requested, but the SDL "
				echo "* library was not found."
				echo "*"
				exit 1
			else
echo "#undef HAVE_SDL" >$BLD/include/agar/config/have_sdl.h
echo "hdefs[\"HAVE_SDL\"] = nil" >>configure.lua
			fi
		fi
	else
echo "#undef HAVE_SDL" >$BLD/include/agar/config/have_sdl.h
echo "hdefs[\"HAVE_SDL\"] = nil" >>configure.lua
SDL_CFLAGS=""
echo "SDL_CFLAGS=$SDL_CFLAGS" >>Makefile.config
echo "mdefs[\"SDL_CFLAGS\"] = \"$SDL_CFLAGS\"" >>configure.lua
SDL_LIBS=""
echo "SDL_LIBS=$SDL_LIBS" >>Makefile.config
echo "mdefs[\"SDL_LIBS\"] = \"$SDL_LIBS\"" >>configure.lua
	fi
	if [ "${with_gl}" != "no" ]
 then
$ECHO_N "checking for OpenGL (http://www.opengl.org)..."
$ECHO_N "checking for OpenGL (http://www.opengl.org)..." >> config.log
GL_CFLAGS=""
GL_LIBS=""
GL_FOUND=""
if [ "${prefix_gl}" != "" ]; then
if [ -e  "${prefix_gl}/include" ]; then
GL_CFLAGS="-I${prefix_gl}/include"
GL_LIBS="${GL_LIBS} -L${prefix_gl}/lib"
GL_FOUND="yes"
fi;
else
if [ -e  "/usr/include/X11/GL" ]; then
GL_CFLAGS="-I/usr/include/X11"
GL_FOUND="yes"
fi;
if [ -e  "/usr/include/X11R6/GL" ]; then
GL_CFLAGS="-I/usr/include/X11R6"
GL_FOUND="yes"
fi;
if [ -e  "/usr/local/X11/include/GL" ]; then
GL_CFLAGS="-I/usr/local/X11/include"
GL_FOUND="yes"
fi;
if [ -e  "/usr/local/X11R6/include/GL" ]; then
GL_CFLAGS="-I/usr/local/X11R6/include"
GL_FOUND="yes"
fi;
if [ -e  "/usr/local/include/X11/GL" ]; then
GL_CFLAGS="-I/usr/local/include/X11"
GL_FOUND="yes"
fi;
if [ -e  "/usr/local/include/X11R6/GL" ]; then
GL_CFLAGS="-I/usr/local/include/X11R6"
GL_FOUND="yes"
fi;
if [ -e  "/usr/X11/include/GL" ]; then
GL_CFLAGS="-I/usr/X11/include"
GL_FOUND="yes"
fi;
if [ -e  "/usr/X11R6/include/GL" ]; then
GL_CFLAGS="-I/usr/X11R6/include"
GL_FOUND="yes"
fi;
if [ -e  "/usr/local/include/GL" ]; then
GL_CFLAGS="-I/usr/local/include"
GL_FOUND="yes"
fi;
if [ -e  "/usr/local/X11/lib" ]; then
GL_LIBS="${GL_LIBS} -L/usr/local/X11/lib"
GL_FOUND="yes"
fi;
if [ -e  "/usr/local/X11R6/lib" ]; then
GL_LIBS="${GL_LIBS} -L/usr/local/X11R6/lib"
GL_FOUND="yes"
fi;
if [ -e  "/usr/X11/lib" ]; then
GL_LIBS="${GL_LIBS} -L/usr/X11/lib"
GL_FOUND="yes"
fi;
if [ -e  "/usr/X11R6/lib" ]; then
GL_LIBS="${GL_LIBS} -L/usr/X11R6/lib"
GL_FOUND="yes"
fi;
if [ -e  "/usr/local/lib" ]; then
GL_LIBS="${GL_LIBS} -L/usr/local/lib"
GL_FOUND="yes"
fi;
fi;
if [ "${GL_FOUND}" = "yes" ]; then
echo "yes"
echo "yes" >> config.log
case "${host}" in
*-*-darwin*)
OPENGL_CFLAGS=""
OPENGL_LIBS="-framework OpenGL"
;;
*-*-cygwin* | *-*-mingw32*)
$ECHO_N "checking whether -lopengl32 works..."
$ECHO_N "checking whether -lopengl32 works..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_LIBOPENGL32" ]; then
		HAVE_LIBOPENGL32=`cat ${cache}/ctest-HAVE_LIBOPENGL32`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_LIBOPENGL32`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
int main(int argc, char *argv[]) {
	glFlush();
	glLoadIdentity();
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${OPENGL_CFLAGS} -o $testdir/conftest conftest.c -lopengl32" >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${OPENGL_CFLAGS} -o $testdir/conftest conftest.c -lopengl32 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_LIBOPENGL32="yes"
echo "HAVE_LIBOPENGL32=$HAVE_LIBOPENGL32" >>Makefile.config
echo "mdefs[\"HAVE_LIBOPENGL32\"] = \"$HAVE_LIBOPENGL32\"" >>configure.lua
echo "#ifndef HAVE_LIBOPENGL32" > $BLD/include/agar/config/have_libopengl32.h
echo "#define HAVE_LIBOPENGL32 \"$HAVE_LIBOPENGL32\"" >> $BLD/include/agar/config/have_libopengl32.h
echo "#endif" >> $BLD/include/agar/config/have_libopengl32.h
echo "hdefs[\"HAVE_LIBOPENGL32\"] = \"$HAVE_LIBOPENGL32\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_LIBOPENGL32="no"
echo "HAVE_LIBOPENGL32=$HAVE_LIBOPENGL32" >>Makefile.config
echo "mdefs[\"HAVE_LIBOPENGL32\"] = \"$HAVE_LIBOPENGL32\"" >>configure.lua
echo "#undef HAVE_LIBOPENGL32" >$BLD/include/agar/config/have_libopengl32.h
echo "hdefs[\"HAVE_LIBOPENGL32\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_LIBOPENGL32" > ${cache}/ctest-HAVE_LIBOPENGL32
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_LIBOPENGL32
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_LIBOPENGL32}" = "yes" ]; then
OPENGL_LIBS="${GL_LIBS} -lopengl32"
else
OPENGL_LIBS="${GL_LIBS} -lGL"
fi;
;;
*)
OPENGL_CFLAGS="${GL_CFLAGS}"
OPENGL_LIBS="${GL_LIBS} -lGL"
;;
esac
$ECHO_N "checking whether OpenGL works..."
$ECHO_N "checking whether OpenGL works..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_OPENGL" ]; then
		HAVE_OPENGL=`cat ${cache}/ctest-HAVE_OPENGL`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_OPENGL`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
int main(int argc, char *argv[]) {
	glFlush();
	glLoadIdentity();
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${OPENGL_CFLAGS} -o $testdir/conftest conftest.c ${OPENGL_LIBS}" >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${OPENGL_CFLAGS} -o $testdir/conftest conftest.c ${OPENGL_LIBS} 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_OPENGL="yes"
echo "HAVE_OPENGL=$HAVE_OPENGL" >>Makefile.config
echo "mdefs[\"HAVE_OPENGL\"] = \"$HAVE_OPENGL\"" >>configure.lua
echo "#ifndef HAVE_OPENGL" > $BLD/include/agar/config/have_opengl.h
echo "#define HAVE_OPENGL \"$HAVE_OPENGL\"" >> $BLD/include/agar/config/have_opengl.h
echo "#endif" >> $BLD/include/agar/config/have_opengl.h
echo "hdefs[\"HAVE_OPENGL\"] = \"$HAVE_OPENGL\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_OPENGL="no"
echo "HAVE_OPENGL=$HAVE_OPENGL" >>Makefile.config
echo "mdefs[\"HAVE_OPENGL\"] = \"$HAVE_OPENGL\"" >>configure.lua
echo "#undef HAVE_OPENGL" >$BLD/include/agar/config/have_opengl.h
echo "hdefs[\"HAVE_OPENGL\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_OPENGL" > ${cache}/ctest-HAVE_OPENGL
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_OPENGL
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_OPENGL}" = "yes" ]; then
echo "OPENGL_CFLAGS=$OPENGL_CFLAGS" >>Makefile.config
echo "mdefs[\"OPENGL_CFLAGS\"] = \"$OPENGL_CFLAGS\"" >>configure.lua
echo "#ifndef OPENGL_CFLAGS" > $BLD/include/agar/config/opengl_cflags.h
echo "#define OPENGL_CFLAGS \"$OPENGL_CFLAGS\"" >> $BLD/include/agar/config/opengl_cflags.h
echo "#endif" >> $BLD/include/agar/config/opengl_cflags.h
echo "hdefs[\"OPENGL_CFLAGS\"] = \"$OPENGL_CFLAGS\"" >>configure.lua
echo "OPENGL_LIBS=$OPENGL_LIBS" >>Makefile.config
echo "mdefs[\"OPENGL_LIBS\"] = \"$OPENGL_LIBS\"" >>configure.lua
echo "#ifndef OPENGL_LIBS" > $BLD/include/agar/config/opengl_libs.h
echo "#define OPENGL_LIBS \"$OPENGL_LIBS\"" >> $BLD/include/agar/config/opengl_libs.h
echo "#endif" >> $BLD/include/agar/config/opengl_libs.h
echo "hdefs[\"OPENGL_LIBS\"] = \"$OPENGL_LIBS\"" >>configure.lua
else
$ECHO_N "checking whether -lGL requires -lm..."
$ECHO_N "checking whether -lGL requires -lm..." >> config.log
OPENGL_LIBS="${OPENGL_LIBS} -lm"
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_OPENGL" ]; then
		HAVE_OPENGL=`cat ${cache}/ctest-HAVE_OPENGL`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_OPENGL`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#ifdef __APPLE__
#include <OpenGL/gl.h>
#else
#include <GL/gl.h>
#endif
int main(int argc, char *argv[]) {
	glFlush();
	glLoadIdentity();
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${OPENGL_CFLAGS} -o $testdir/conftest conftest.c ${OPENGL_LIBS}" >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${OPENGL_CFLAGS} -o $testdir/conftest conftest.c ${OPENGL_LIBS} 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_OPENGL="yes"
echo "HAVE_OPENGL=$HAVE_OPENGL" >>Makefile.config
echo "mdefs[\"HAVE_OPENGL\"] = \"$HAVE_OPENGL\"" >>configure.lua
echo "#ifndef HAVE_OPENGL" > $BLD/include/agar/config/have_opengl.h
echo "#define HAVE_OPENGL \"$HAVE_OPENGL\"" >> $BLD/include/agar/config/have_opengl.h
echo "#endif" >> $BLD/include/agar/config/have_opengl.h
echo "hdefs[\"HAVE_OPENGL\"] = \"$HAVE_OPENGL\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_OPENGL="no"
echo "HAVE_OPENGL=$HAVE_OPENGL" >>Makefile.config
echo "mdefs[\"HAVE_OPENGL\"] = \"$HAVE_OPENGL\"" >>configure.lua
echo "#undef HAVE_OPENGL" >$BLD/include/agar/config/have_opengl.h
echo "hdefs[\"HAVE_OPENGL\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_OPENGL" > ${cache}/ctest-HAVE_OPENGL
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_OPENGL
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_OPENGL}" = "yes" ]; then
echo "OPENGL_CFLAGS=$OPENGL_CFLAGS" >>Makefile.config
echo "mdefs[\"OPENGL_CFLAGS\"] = \"$OPENGL_CFLAGS\"" >>configure.lua
echo "#ifndef OPENGL_CFLAGS" > $BLD/include/agar/config/opengl_cflags.h
echo "#define OPENGL_CFLAGS \"$OPENGL_CFLAGS\"" >> $BLD/include/agar/config/opengl_cflags.h
echo "#endif" >> $BLD/include/agar/config/opengl_cflags.h
echo "hdefs[\"OPENGL_CFLAGS\"] = \"$OPENGL_CFLAGS\"" >>configure.lua
echo "OPENGL_LIBS=$OPENGL_LIBS" >>Makefile.config
echo "mdefs[\"OPENGL_LIBS\"] = \"$OPENGL_LIBS\"" >>configure.lua
echo "#ifndef OPENGL_LIBS" > $BLD/include/agar/config/opengl_libs.h
echo "#define OPENGL_LIBS \"$OPENGL_LIBS\"" >> $BLD/include/agar/config/opengl_libs.h
echo "#endif" >> $BLD/include/agar/config/opengl_libs.h
echo "hdefs[\"OPENGL_LIBS\"] = \"$OPENGL_LIBS\"" >>configure.lua
else
echo "#undef OPENGL_CFLAGS" >$BLD/include/agar/config/opengl_cflags.h
echo "hdefs[\"OPENGL_CFLAGS\"] = nil" >>configure.lua
OPENGL_CFLAGS=""
echo "#undef OPENGL_LIBS" >$BLD/include/agar/config/opengl_libs.h
echo "hdefs[\"OPENGL_LIBS\"] = nil" >>configure.lua
OPENGL_LIBS=""
fi;
fi;
else
echo "no"
echo "no" >> config.log
fi;
		if [ "${HAVE_OPENGL}" = "yes" ]
 then
SDL_CFLAGS="$SDL_CFLAGS $OPENGL_CFLAGS"
echo "SDL_CFLAGS=$SDL_CFLAGS" >>Makefile.config
echo "mdefs[\"SDL_CFLAGS\"] = \"$SDL_CFLAGS\"" >>configure.lua
		else
			if [ "${with_gl}" = "yes" ]
 then
				echo "*"
				echo "* --with-gl was requested, but no OpenGL"
				echo "* library was found."
				echo "*"
				exit 1
			else
echo "#undef HAVE_OPENGL" >$BLD/include/agar/config/have_opengl.h
echo "hdefs[\"HAVE_OPENGL\"] = nil" >>configure.lua
			fi
		fi
	else
echo "#undef HAVE_OPENGL" >$BLD/include/agar/config/have_opengl.h
echo "hdefs[\"HAVE_OPENGL\"] = nil" >>configure.lua
OPENGL_CFLAGS=""
echo "OPENGL_CFLAGS=$OPENGL_CFLAGS" >>Makefile.config
echo "mdefs[\"OPENGL_CFLAGS\"] = \"$OPENGL_CFLAGS\"" >>configure.lua
OPENGL_LIBS=""
echo "OPENGL_LIBS=$OPENGL_LIBS" >>Makefile.config
echo "mdefs[\"OPENGL_LIBS\"] = \"$OPENGL_LIBS\"" >>configure.lua
	fi
	
	if [ "${with_x}" != "no" ]
 then
$ECHO_N "checking for the X window system..."
$ECHO_N "checking for the X window system..." >> config.log
X11_CFLAGS=""
X11_LIBS=""
if [ "${prefix_x}" != "" ]; then
if [ -e  "${prefix_x}/include/X11" ]; then
X11_CFLAGS="-I${prefix_x}/include"
fi;
if [ -e  "${prefix_x}/lib" ]; then
X11_LIBS="-L${prefix_x}/lib"
fi;
else
if [ -e  "/usr/include/X11/X11" ]; then
X11_CFLAGS="-I/usr/include/X11"
fi;
if [ -e  "/usr/include/X11R6/X11" ]; then
X11_CFLAGS="-I/usr/include/X11R6"
fi;
if [ -e  "/usr/local/X11/include/X11" ]; then
X11_CFLAGS="-I/usr/local/X11/include"
fi;
if [ -e  "/usr/local/X11R6/include/X11" ]; then
X11_CFLAGS="-I/usr/local/X11R6/include"
fi;
if [ -e  "/usr/local/include/X11/X11" ]; then
X11_CFLAGS="-I/usr/local/include/X11"
fi;
if [ -e  "/usr/local/include/X11R6/X11" ]; then
X11_CFLAGS="-I/usr/local/include/X11R6"
fi;
if [ -e  "/usr/X11/include/X11" ]; then
X11_CFLAGS="-I/usr/X11/include"
fi;
if [ -e  "/usr/X11R6/include/X11" ]; then
X11_CFLAGS="-I/usr/X11R6/include"
fi;
if [ -e  "/usr/local/X11/lib" ]; then
X11_LIBS="${X11_LIBS} -L/usr/local/X11/lib"
fi;
if [ -e  "/usr/local/X11R6/lib" ]; then
X11_LIBS="${X11_LIBS} -L/usr/local/X11R6/lib"
fi;
if [ -e  "/usr/X11/lib" ]; then
X11_LIBS="${X11_LIBS} -L/usr/X11/lib"
fi;
if [ -e  "/usr/X11R6/lib" ]; then
X11_LIBS="${X11_LIBS} -L/usr/X11R6/lib"
fi;
fi;
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_X11" ]; then
		HAVE_X11=`cat ${cache}/ctest-HAVE_X11`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_X11`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <X11/Xlib.h>
int main(int argc, char *argv[])
{
	Display *disp;
	disp = XOpenDisplay(NULL);
	XCloseDisplay(disp);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${X11_CFLAGS} -o $testdir/conftest conftest.c ${X11_LIBS} -lX11" >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${X11_CFLAGS} -o $testdir/conftest conftest.c ${X11_LIBS} -lX11 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_X11="yes"
echo "HAVE_X11=$HAVE_X11" >>Makefile.config
echo "mdefs[\"HAVE_X11\"] = \"$HAVE_X11\"" >>configure.lua
echo "#ifndef HAVE_X11" > $BLD/include/agar/config/have_x11.h
echo "#define HAVE_X11 \"$HAVE_X11\"" >> $BLD/include/agar/config/have_x11.h
echo "#endif" >> $BLD/include/agar/config/have_x11.h
echo "hdefs[\"HAVE_X11\"] = \"$HAVE_X11\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_X11="no"
echo "HAVE_X11=$HAVE_X11" >>Makefile.config
echo "mdefs[\"HAVE_X11\"] = \"$HAVE_X11\"" >>configure.lua
echo "#undef HAVE_X11" >$BLD/include/agar/config/have_x11.h
echo "hdefs[\"HAVE_X11\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_X11" > ${cache}/ctest-HAVE_X11
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_X11
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_X11}" = "yes" ]; then
echo "X11_CFLAGS=$X11_CFLAGS" >>Makefile.config
echo "mdefs[\"X11_CFLAGS\"] = \"$X11_CFLAGS\"" >>configure.lua
echo "#ifndef X11_CFLAGS" > $BLD/include/agar/config/x11_cflags.h
echo "#define X11_CFLAGS \"$X11_CFLAGS\"" >> $BLD/include/agar/config/x11_cflags.h
echo "#endif" >> $BLD/include/agar/config/x11_cflags.h
echo "hdefs[\"X11_CFLAGS\"] = \"$X11_CFLAGS\"" >>configure.lua
echo "X11_LIBS=$X11_LIBS" >>Makefile.config
echo "mdefs[\"X11_LIBS\"] = \"$X11_LIBS\"" >>configure.lua
echo "#ifndef X11_LIBS" > $BLD/include/agar/config/x11_libs.h
echo "#define X11_LIBS \"$X11_LIBS\"" >> $BLD/include/agar/config/x11_libs.h
echo "#endif" >> $BLD/include/agar/config/x11_libs.h
echo "hdefs[\"X11_LIBS\"] = \"$X11_LIBS\"" >>configure.lua
else
echo "#undef X11_CFLAGS" >$BLD/include/agar/config/x11_cflags.h
echo "hdefs[\"X11_CFLAGS\"] = nil" >>configure.lua
X11_CFLAGS=""
echo "#undef X11_LIBS" >$BLD/include/agar/config/x11_libs.h
echo "hdefs[\"X11_LIBS\"] = nil" >>configure.lua
X11_LIBS=""
fi;
		if [ "${HAVE_X11}" != "yes" ]
 then
			if [ "${with_x}" = "yes" ]
 then
				echo "*"
				echo "* --with-x was requested, but Xlib "
				echo "* was not found."
				echo "*"
				exit 1
			else
echo "#undef HAVE_X11" >$BLD/include/agar/config/have_x11.h
echo "hdefs[\"HAVE_X11\"] = nil" >>configure.lua
			fi
		fi
	else
echo "#undef HAVE_X11" >$BLD/include/agar/config/have_x11.h
echo "hdefs[\"HAVE_X11\"] = nil" >>configure.lua
X11_CFLAGS=""
echo "X11_CFLAGS=$X11_CFLAGS" >>Makefile.config
echo "mdefs[\"X11_CFLAGS\"] = \"$X11_CFLAGS\"" >>configure.lua
X11_LIBS=""
echo "X11_LIBS=$X11_LIBS" >>Makefile.config
echo "mdefs[\"X11_LIBS\"] = \"$X11_LIBS\"" >>configure.lua
	fi
	if [ "${HAVE_OPENGL}" = "yes" ]
 then
		if [ "${with_glx}" != "no" ]
 then
$ECHO_N "checking for the GLX interface..."
$ECHO_N "checking for the GLX interface..." >> config.log
GLX_CFLAGS="${OPENGL_CFLAGS} ${X11_CFLAGS}"
GLX_LIBS="${OPENGL_LIBS} ${X11_LIBS}"
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_GLX" ]; then
		HAVE_GLX=`cat ${cache}/ctest-HAVE_GLX`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_GLX`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <X11/Xlib.h>
#include <X11/Xutil.h>
#ifdef __APPLE__
#include <OpenGL/gl.h>
#include <OpenGL/glx.h>
#else
#include <GL/gl.h>
#include <GL/glx.h>
#endif
int main(int argc, char *argv[]) {
	Display *d;
	XVisualInfo *xvi;
	int glxAttrs[] = { GLX_RGBA, GLX_RED_SIZE,1, GLX_DEPTH_SIZE,1, None };
	GLXContext glxCtx;
	int err, ev, s;

	d = XOpenDisplay(NULL);
	(void)glXQueryExtension(d, &err, &ev);
	s = DefaultScreen(d);
	if ((xvi = glXChooseVisual(d, s, glxAttrs)) == NULL) { return (1); }
	if ((glxCtx = glXCreateContext(d, xvi, 0, GL_FALSE)) == NULL) { return (1); }
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${GLX_CFLAGS} -o $testdir/conftest conftest.c ${GLX_LIBS}" >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${GLX_CFLAGS} -o $testdir/conftest conftest.c ${GLX_LIBS} 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_GLX="yes"
echo "HAVE_GLX=$HAVE_GLX" >>Makefile.config
echo "mdefs[\"HAVE_GLX\"] = \"$HAVE_GLX\"" >>configure.lua
echo "#ifndef HAVE_GLX" > $BLD/include/agar/config/have_glx.h
echo "#define HAVE_GLX \"$HAVE_GLX\"" >> $BLD/include/agar/config/have_glx.h
echo "#endif" >> $BLD/include/agar/config/have_glx.h
echo "hdefs[\"HAVE_GLX\"] = \"$HAVE_GLX\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_GLX="no"
echo "HAVE_GLX=$HAVE_GLX" >>Makefile.config
echo "mdefs[\"HAVE_GLX\"] = \"$HAVE_GLX\"" >>configure.lua
echo "#undef HAVE_GLX" >$BLD/include/agar/config/have_glx.h
echo "hdefs[\"HAVE_GLX\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_GLX" > ${cache}/ctest-HAVE_GLX
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_GLX
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_GLX}" = "yes" ]; then
echo "GLX_CFLAGS=$GLX_CFLAGS" >>Makefile.config
echo "mdefs[\"GLX_CFLAGS\"] = \"$GLX_CFLAGS\"" >>configure.lua
echo "#ifndef GLX_CFLAGS" > $BLD/include/agar/config/glx_cflags.h
echo "#define GLX_CFLAGS \"$GLX_CFLAGS\"" >> $BLD/include/agar/config/glx_cflags.h
echo "#endif" >> $BLD/include/agar/config/glx_cflags.h
echo "hdefs[\"GLX_CFLAGS\"] = \"$GLX_CFLAGS\"" >>configure.lua
echo "GLX_LIBS=$GLX_LIBS" >>Makefile.config
echo "mdefs[\"GLX_LIBS\"] = \"$GLX_LIBS\"" >>configure.lua
echo "#ifndef GLX_LIBS" > $BLD/include/agar/config/glx_libs.h
echo "#define GLX_LIBS \"$GLX_LIBS\"" >> $BLD/include/agar/config/glx_libs.h
echo "#endif" >> $BLD/include/agar/config/glx_libs.h
echo "hdefs[\"GLX_LIBS\"] = \"$GLX_LIBS\"" >>configure.lua
else
echo "#undef GLX_CFLAGS" >$BLD/include/agar/config/glx_cflags.h
echo "hdefs[\"GLX_CFLAGS\"] = nil" >>configure.lua
GLX_CFLAGS=""
echo "#undef GLX_LIBS" >$BLD/include/agar/config/glx_libs.h
echo "hdefs[\"GLX_LIBS\"] = nil" >>configure.lua
GLX_LIBS=""
fi;
			if [ "${HAVE_GLX}" != "yes" ]
 then
				if [ "${with_glx}" = "yes" ]
 then
					echo "*"
					echo "* --with-glx was requested, but no"
					echo "* compatible GLX library was found."
					echo "*"
					exit 1
				else
echo "#undef HAVE_GLX" >$BLD/include/agar/config/have_glx.h
echo "hdefs[\"HAVE_GLX\"] = nil" >>configure.lua
				fi
			fi
		else
echo "#undef HAVE_GLX" >$BLD/include/agar/config/have_glx.h
echo "hdefs[\"HAVE_GLX\"] = nil" >>configure.lua
GLX_CFLAGS=""
echo "GLX_CFLAGS=$GLX_CFLAGS" >>Makefile.config
echo "mdefs[\"GLX_CFLAGS\"] = \"$GLX_CFLAGS\"" >>configure.lua
GLX_LIBS=""
echo "GLX_LIBS=$GLX_LIBS" >>Makefile.config
echo "mdefs[\"GLX_LIBS\"] = \"$GLX_LIBS\"" >>configure.lua
		fi
		
		if [ "${with_wgl}" != "no" ]
 then
$ECHO_N "checking for the WGL interface..."
$ECHO_N "checking for the WGL interface..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_WGL" ]; then
		HAVE_WGL=`cat ${cache}/ctest-HAVE_WGL`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_WGL`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <windows.h>

int main(int argc, char *argv[]) {
	HWND hwnd;
	HDC hdc;
	HGLRC hglrc;

	hwnd = CreateWindowEx(0, "a", "a", WS_OVERLAPPEDWINDOW, CW_USEDEFAULT,
	    CW_USEDEFAULT, 0,0, NULL, NULL, GetModuleHandle(NULL), NULL);
	hdc = GetDC(hwnd);
	hglrc = wglCreateContext(hdc);
	SwapBuffers(hdc);
	wglDeleteContext(hglrc);
	ReleaseDC(hwnd, hdc);
	DestroyWindow(hwnd);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${OPENGL_CFLAGS} -o $testdir/conftest conftest.c ${OPENGL_LIBS} -lgdi32" >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${OPENGL_CFLAGS} -o $testdir/conftest conftest.c ${OPENGL_LIBS} -lgdi32 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_WGL="yes"
echo "HAVE_WGL=$HAVE_WGL" >>Makefile.config
echo "mdefs[\"HAVE_WGL\"] = \"$HAVE_WGL\"" >>configure.lua
echo "#ifndef HAVE_WGL" > $BLD/include/agar/config/have_wgl.h
echo "#define HAVE_WGL \"$HAVE_WGL\"" >> $BLD/include/agar/config/have_wgl.h
echo "#endif" >> $BLD/include/agar/config/have_wgl.h
echo "hdefs[\"HAVE_WGL\"] = \"$HAVE_WGL\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_WGL="no"
echo "HAVE_WGL=$HAVE_WGL" >>Makefile.config
echo "mdefs[\"HAVE_WGL\"] = \"$HAVE_WGL\"" >>configure.lua
echo "#undef HAVE_WGL" >$BLD/include/agar/config/have_wgl.h
echo "hdefs[\"HAVE_WGL\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_WGL" > ${cache}/ctest-HAVE_WGL
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_WGL
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_WGL}" = "yes" ]; then
OPENGL_LIBS="${OPENGL_LIBS} -lgdi32"
echo "OPENGL_LIBS=$OPENGL_LIBS" >>Makefile.config
echo "mdefs[\"OPENGL_LIBS\"] = \"$OPENGL_LIBS\"" >>configure.lua
echo "#ifndef OPENGL_LIBS" > $BLD/include/agar/config/opengl_libs.h
echo "#define OPENGL_LIBS \"$OPENGL_LIBS\"" >> $BLD/include/agar/config/opengl_libs.h
echo "#endif" >> $BLD/include/agar/config/opengl_libs.h
echo "hdefs[\"OPENGL_LIBS\"] = \"$OPENGL_LIBS\"" >>configure.lua
fi;
			if [ "${HAVE_WGL}" != "yes" ]
 then
				if [ "${with_wgl}" = "yes" ]
 then
					echo "*"
					echo "* --with-wgl was requested, but the"
					echo "* WGL test has failed."
					echo "*"
					exit 1
				else
echo "#undef HAVE_WGL" >$BLD/include/agar/config/have_wgl.h
echo "hdefs[\"HAVE_WGL\"] = nil" >>configure.lua
				fi
			fi
		else
echo "#undef HAVE_WGL" >$BLD/include/agar/config/have_wgl.h
echo "hdefs[\"HAVE_WGL\"] = nil" >>configure.lua
		fi
	else
echo "#undef HAVE_WGL" >$BLD/include/agar/config/have_wgl.h
echo "hdefs[\"HAVE_WGL\"] = nil" >>configure.lua
echo "#undef HAVE_GLX" >$BLD/include/agar/config/have_glx.h
echo "hdefs[\"HAVE_GLX\"] = nil" >>configure.lua
GLX_CFLAGS=""
echo "GLX_CFLAGS=$GLX_CFLAGS" >>Makefile.config
echo "mdefs[\"GLX_CFLAGS\"] = \"$GLX_CFLAGS\"" >>configure.lua
GLX_LIBS=""
echo "GLX_LIBS=$GLX_LIBS" >>Makefile.config
echo "mdefs[\"GLX_LIBS\"] = \"$GLX_LIBS\"" >>configure.lua
	fi
	
	if [ "${with_freetype}" != "no" ]
 then
$ECHO_N "checking for FreeType (http://www.freetype.org)..."
$ECHO_N "checking for FreeType (http://www.freetype.org)..." >> config.log
MK_EXEC_FOUND="No"

if [ "${prefix_freetype}" != "" ]; then
	if [ -e "${prefix_freetype}/bin/freetype-config" ]; then
		FREETYPE_VERSION=`${prefix_freetype}/bin/freetype-config --version`
		MK_EXEC_FOUND="Yes"
	fi
else
	MK_CACHED="No"
	if [ "${cache}" != "" ]; then
		if [ -e "${cache}/exec-FREETYPE_VERSION" ]; then
			FREETYPE_VERSION=`cat ${cache}/exec-FREETYPE_VERSION`
			MK_EXEC_FOUND=`cat ${cache}/exec-found-FREETYPE_VERSION`
			MK_CACHED="Yes"
		fi
	fi
	if [ "${MK_CACHED}" = "No" ]; then
		FREETYPE_VERSION=""
		for path in `echo $PATH | sed 's/:/ /g'`; do
			if [ -e "${path}/freetype-config" ]; then
				FREETYPE_VERSION=`${path}/freetype-config --version`
				MK_EXEC_FOUND="Yes"
				break
			fi
		done
		if [ "${cache}" != "" ]; then
			echo "$FREETYPE_VERSION" > ${cache}/exec-FREETYPE_VERSION
			echo $MK_EXEC_FOUND > ${cache}/exec-found-FREETYPE_VERSION
		fi
	fi
fi
MK_EXEC_FOUND="No"

if [ "${prefix_freetype}" != "" ]; then
	if [ -e "${prefix_freetype}/bin/freetype-config" ]; then
		FREETYPE_CFLAGS=`${prefix_freetype}/bin/freetype-config --cflags`
		MK_EXEC_FOUND="Yes"
	fi
else
	MK_CACHED="No"
	if [ "${cache}" != "" ]; then
		if [ -e "${cache}/exec-FREETYPE_CFLAGS" ]; then
			FREETYPE_CFLAGS=`cat ${cache}/exec-FREETYPE_CFLAGS`
			MK_EXEC_FOUND=`cat ${cache}/exec-found-FREETYPE_CFLAGS`
			MK_CACHED="Yes"
		fi
	fi
	if [ "${MK_CACHED}" = "No" ]; then
		FREETYPE_CFLAGS=""
		for path in `echo $PATH | sed 's/:/ /g'`; do
			if [ -e "${path}/freetype-config" ]; then
				FREETYPE_CFLAGS=`${path}/freetype-config --cflags`
				MK_EXEC_FOUND="Yes"
				break
			fi
		done
		if [ "${cache}" != "" ]; then
			echo "$FREETYPE_CFLAGS" > ${cache}/exec-FREETYPE_CFLAGS
			echo $MK_EXEC_FOUND > ${cache}/exec-found-FREETYPE_CFLAGS
		fi
	fi
fi
MK_EXEC_FOUND="No"

if [ "${prefix_freetype}" != "" ]; then
	if [ -e "${prefix_freetype}/bin/freetype-config" ]; then
		FREETYPE_LIBS=`${prefix_freetype}/bin/freetype-config --libs`
		MK_EXEC_FOUND="Yes"
	fi
else
	MK_CACHED="No"
	if [ "${cache}" != "" ]; then
		if [ -e "${cache}/exec-FREETYPE_LIBS" ]; then
			FREETYPE_LIBS=`cat ${cache}/exec-FREETYPE_LIBS`
			MK_EXEC_FOUND=`cat ${cache}/exec-found-FREETYPE_LIBS`
			MK_CACHED="Yes"
		fi
	fi
	if [ "${MK_CACHED}" = "No" ]; then
		FREETYPE_LIBS=""
		for path in `echo $PATH | sed 's/:/ /g'`; do
			if [ -e "${path}/freetype-config" ]; then
				FREETYPE_LIBS=`${path}/freetype-config --libs`
				MK_EXEC_FOUND="Yes"
				break
			fi
		done
		if [ "${cache}" != "" ]; then
			echo "$FREETYPE_LIBS" > ${cache}/exec-FREETYPE_LIBS
			echo $MK_EXEC_FOUND > ${cache}/exec-found-FREETYPE_LIBS
		fi
	fi
fi
case "${host}" in
*-*-irix*)
if [ -e  "/usr/freeware/include" ]; then
FREETYPE_CFLAGS="${FREETYPE_CFLAGS} -I/usr/freeware/include"
fi;
;;
esac
if [ "${FREETYPE_VERSION}" != "" ]; then
if [ "${prefix_freetype}" != "" ]; then
echo "yes ($FREETYPE_VERSION in ${prefix_freetype})"
echo "yes ($FREETYPE_VERSION in ${prefix_freetype})" >> config.log
else
echo "yes ($FREETYPE_VERSION)"
echo "yes ($FREETYPE_VERSION)" >> config.log
fi;
if [ "7.0.1" != "" ]; then
MK_VERSION_MAJOR=`echo "$FREETYPE_VERSION" |sed 's/\([0-9]*\).\([0-9]*\).\([0-9]*\).*/\1/'`;
MK_VERSION_MINOR=`echo "$FREETYPE_VERSION" |sed 's/\([0-9]*\).\([0-9]*\).\([0-9]*\).*/\2/'`;
MK_VERSION_MICRO=`echo "$FREETYPE_VERSION" |sed 's/\([0-9]*\).\([0-9]*\).\([0-9]*\).*/\3/'`;
MK_VERSION_OK="no"
if [ $MK_VERSION_MAJOR -gt 7 ]; then
	MK_VERSION_OK="yes";
elif [ $MK_VERSION_MAJOR -eq 7 ]; then
	if [ "$MK_VERSION_MINOR" = "" ]; then
		MK_VERSION_OK="yes"
	else
		if [ $MK_VERSION_MINOR -gt 0 ]; then
			MK_VERSION_OK="yes";
		elif [ $MK_VERSION_MINOR -eq 0 ]; then
			if [ "$MK_VERSION_MICRO" = "" ]; then
				MK_VERSION_OK="yes"
			else
				if [ $MK_VERSION_MICRO -ge 1 ]; then
					MK_VERSION_OK="yes"
				fi
			fi
		fi
	fi
fi
if [ "${MK_VERSION_OK}" != "yes" ]; then
echo "Version 7.0.1 or greater is required (found $FREETYPE_VERSION)"
exit 1
fi;
fi;
$ECHO_N "checking whether FreeType works..."
$ECHO_N "checking whether FreeType works..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_FREETYPE" ]; then
		HAVE_FREETYPE=`cat ${cache}/ctest-HAVE_FREETYPE`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_FREETYPE`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <ft2build.h>
#include FT_FREETYPE_H
#include FT_OUTLINE_H
int
main(int argc, char *argv[])
{
	FT_Library library;
	FT_Face face;
	FT_Init_FreeType(&library);
	FT_New_Face(library, "foo", 0, &face);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${FREETYPE_CFLAGS} -o $testdir/conftest conftest.c ${FREETYPE_LIBS}" >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${FREETYPE_CFLAGS} -o $testdir/conftest conftest.c ${FREETYPE_LIBS} 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_FREETYPE="yes"
echo "HAVE_FREETYPE=$HAVE_FREETYPE" >>Makefile.config
echo "mdefs[\"HAVE_FREETYPE\"] = \"$HAVE_FREETYPE\"" >>configure.lua
echo "#ifndef HAVE_FREETYPE" > $BLD/include/agar/config/have_freetype.h
echo "#define HAVE_FREETYPE \"$HAVE_FREETYPE\"" >> $BLD/include/agar/config/have_freetype.h
echo "#endif" >> $BLD/include/agar/config/have_freetype.h
echo "hdefs[\"HAVE_FREETYPE\"] = \"$HAVE_FREETYPE\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_FREETYPE="no"
echo "HAVE_FREETYPE=$HAVE_FREETYPE" >>Makefile.config
echo "mdefs[\"HAVE_FREETYPE\"] = \"$HAVE_FREETYPE\"" >>configure.lua
echo "#undef HAVE_FREETYPE" >$BLD/include/agar/config/have_freetype.h
echo "hdefs[\"HAVE_FREETYPE\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_FREETYPE" > ${cache}/ctest-HAVE_FREETYPE
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_FREETYPE
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_FREETYPE}" = "yes" ]; then
echo "FREETYPE_CFLAGS=$FREETYPE_CFLAGS" >>Makefile.config
echo "mdefs[\"FREETYPE_CFLAGS\"] = \"$FREETYPE_CFLAGS\"" >>configure.lua
echo "#ifndef FREETYPE_CFLAGS" > $BLD/include/agar/config/freetype_cflags.h
echo "#define FREETYPE_CFLAGS \"$FREETYPE_CFLAGS\"" >> $BLD/include/agar/config/freetype_cflags.h
echo "#endif" >> $BLD/include/agar/config/freetype_cflags.h
echo "hdefs[\"FREETYPE_CFLAGS\"] = \"$FREETYPE_CFLAGS\"" >>configure.lua
echo "FREETYPE_LIBS=$FREETYPE_LIBS" >>Makefile.config
echo "mdefs[\"FREETYPE_LIBS\"] = \"$FREETYPE_LIBS\"" >>configure.lua
echo "#ifndef FREETYPE_LIBS" > $BLD/include/agar/config/freetype_libs.h
echo "#define FREETYPE_LIBS \"$FREETYPE_LIBS\"" >> $BLD/include/agar/config/freetype_libs.h
echo "#endif" >> $BLD/include/agar/config/freetype_libs.h
echo "hdefs[\"FREETYPE_LIBS\"] = \"$FREETYPE_LIBS\"" >>configure.lua
else
echo "#undef FREETYPE_CFLAGS" >$BLD/include/agar/config/freetype_cflags.h
echo "hdefs[\"FREETYPE_CFLAGS\"] = nil" >>configure.lua
FREETYPE_CFLAGS=""
echo "#undef FREETYPE_LIBS" >$BLD/include/agar/config/freetype_libs.h
echo "hdefs[\"FREETYPE_LIBS\"] = nil" >>configure.lua
FREETYPE_LIBS=""
fi;
else
if [ "${prefix_freetype}" != "" ]; then
echo "no (not in ${prefix_freetype})"
echo "no (not in ${prefix_freetype})" >> config.log
else
echo "no"
echo "no" >> config.log
fi;
echo "#undef HAVE_FREETYPE" >$BLD/include/agar/config/have_freetype.h
echo "hdefs[\"HAVE_FREETYPE\"] = nil" >>configure.lua
fi;
		if [ "${HAVE_FREETYPE}" != "yes" ]
 then
			echo "*"
			echo "* The FreeType library was not found, aborting!"
			echo "*"
			echo "* Agar needs FreeType to display vector fonts"
			echo "* (http://www.freetype.org/)."
			echo "*"
			echo "* If you really want to use Agar's built-in"
			echo "* monospace bitmap font engine (not recommended),"
			echo "* please use: ./configure --without-freetype"
			echo "*"
			exit 1
		fi
	else
echo "#undef HAVE_FREETYPE" >$BLD/include/agar/config/have_freetype.h
echo "hdefs[\"HAVE_FREETYPE\"] = nil" >>configure.lua
FREETYPE_CFLAGS=""
echo "FREETYPE_CFLAGS=$FREETYPE_CFLAGS" >>Makefile.config
echo "mdefs[\"FREETYPE_CFLAGS\"] = \"$FREETYPE_CFLAGS\"" >>configure.lua
FREETYPE_LIBS=""
echo "FREETYPE_LIBS=$FREETYPE_LIBS" >>Makefile.config
echo "mdefs[\"FREETYPE_LIBS\"] = \"$FREETYPE_LIBS\"" >>configure.lua
	fi
	
	if [ "${with_jpeg}" != "no" ]
 then
$ECHO_N "checking for libjpeg (ftp://ftp.uu.net/graphics/jpeg/)..."
$ECHO_N "checking for libjpeg (ftp://ftp.uu.net/graphics/jpeg/)..." >> config.log
JPEG_CFLAGS=""
if [ "${prefix_jpeg}" != "" ]; then
if [ -e  "${prefix_jpeg}/include/jpeglib.h" ]; then
JPEG_CFLAGS="-I${prefix_jpeg}/include"
JPEG_LIBS="-L${prefix_jpeg}/lib -ljpeg"
fi;
else
if [ -e  "/usr/local/include/jpeglib.h" ]; then
JPEG_CFLAGS="-I/usr/local/include"
JPEG_LIBS="-L/usr/local/lib -ljpeg"
fi;
if [ -e  "/usr/X11R6/include/jpeglib.h" ]; then
JPEG_CFLAGS="-I/usr/X11R6/include"
JPEG_LIBS="-L/usr/X11R6/lib -ljpeg"
fi;
if [ -e  "/usr/include/jpeglib.h" ]; then
JPEG_CFLAGS="-I/usr/include"
JPEG_LIBS="-L/usr/lib -ljpeg"
fi;
if [ -e  "/opt/local/include/jpeglib.h" ]; then
JPEG_CFLAGS="-I/opt/local/include"
JPEG_LIBS="-L/opt/local/lib -ljpeg"
fi;
if [ -e  "/opt/include/jpeglib.h" ]; then
JPEG_CFLAGS="-I/opt/include"
JPEG_LIBS="-L/opt/lib -ljpeg"
fi;
fi;
if [ "${JPEG_LIBS}" != "" ]; then
echo "yes"
echo "yes" >> config.log
$ECHO_N "checking whether libjpeg works..."
$ECHO_N "checking whether libjpeg works..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_JPEG" ]; then
		HAVE_JPEG=`cat ${cache}/ctest-HAVE_JPEG`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_JPEG`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#ifdef _WIN32
#error "libjpeg conflicts with windows.h"
#endif

#include <stdio.h>
#include <jpeglib.h>

struct jpeg_error_mgr		jerr;
struct jpeg_compress_struct	jcomp;

int
main(int argc, char *argv[])
{
	jcomp.err = jpeg_std_error(&jerr);

	jpeg_create_compress(&jcomp);
	jcomp.image_width = 32;
	jcomp.image_height = 32;
	jcomp.input_components = 3;
	jcomp.in_color_space = JCS_RGB;

	jpeg_set_defaults(&jcomp);
	jpeg_set_quality(&jcomp, 75, TRUE);

	jpeg_destroy_compress(&jcomp);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${JPEG_CFLAGS} -o $testdir/conftest conftest.c ${JPEG_LIBS}" >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${JPEG_CFLAGS} -o $testdir/conftest conftest.c ${JPEG_LIBS} 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_JPEG="yes"
echo "HAVE_JPEG=$HAVE_JPEG" >>Makefile.config
echo "mdefs[\"HAVE_JPEG\"] = \"$HAVE_JPEG\"" >>configure.lua
echo "#ifndef HAVE_JPEG" > $BLD/include/agar/config/have_jpeg.h
echo "#define HAVE_JPEG \"$HAVE_JPEG\"" >> $BLD/include/agar/config/have_jpeg.h
echo "#endif" >> $BLD/include/agar/config/have_jpeg.h
echo "hdefs[\"HAVE_JPEG\"] = \"$HAVE_JPEG\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_JPEG="no"
echo "HAVE_JPEG=$HAVE_JPEG" >>Makefile.config
echo "mdefs[\"HAVE_JPEG\"] = \"$HAVE_JPEG\"" >>configure.lua
echo "#undef HAVE_JPEG" >$BLD/include/agar/config/have_jpeg.h
echo "hdefs[\"HAVE_JPEG\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_JPEG" > ${cache}/ctest-HAVE_JPEG
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_JPEG
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_JPEG}" = "yes" ]; then
echo "JPEG_CFLAGS=$JPEG_CFLAGS" >>Makefile.config
echo "mdefs[\"JPEG_CFLAGS\"] = \"$JPEG_CFLAGS\"" >>configure.lua
echo "#ifndef JPEG_CFLAGS" > $BLD/include/agar/config/jpeg_cflags.h
echo "#define JPEG_CFLAGS \"$JPEG_CFLAGS\"" >> $BLD/include/agar/config/jpeg_cflags.h
echo "#endif" >> $BLD/include/agar/config/jpeg_cflags.h
echo "hdefs[\"JPEG_CFLAGS\"] = \"$JPEG_CFLAGS\"" >>configure.lua
echo "JPEG_LIBS=$JPEG_LIBS" >>Makefile.config
echo "mdefs[\"JPEG_LIBS\"] = \"$JPEG_LIBS\"" >>configure.lua
echo "#ifndef JPEG_LIBS" > $BLD/include/agar/config/jpeg_libs.h
echo "#define JPEG_LIBS \"$JPEG_LIBS\"" >> $BLD/include/agar/config/jpeg_libs.h
echo "#endif" >> $BLD/include/agar/config/jpeg_libs.h
echo "hdefs[\"JPEG_LIBS\"] = \"$JPEG_LIBS\"" >>configure.lua
else
echo "#undef JPEG_CFLAGS" >$BLD/include/agar/config/jpeg_cflags.h
echo "hdefs[\"JPEG_CFLAGS\"] = nil" >>configure.lua
JPEG_CFLAGS=""
echo "#undef JPEG_LIBS" >$BLD/include/agar/config/jpeg_libs.h
echo "hdefs[\"JPEG_LIBS\"] = nil" >>configure.lua
JPEG_LIBS=""
fi;
else
echo "#undef HAVE_JPEG" >$BLD/include/agar/config/have_jpeg.h
echo "hdefs[\"HAVE_JPEG\"] = nil" >>configure.lua
echo "#undef JPEG_CFLAGS" >$BLD/include/agar/config/jpeg_cflags.h
echo "hdefs[\"JPEG_CFLAGS\"] = nil" >>configure.lua
echo "#undef JPEG_LIBS" >$BLD/include/agar/config/jpeg_libs.h
echo "hdefs[\"JPEG_LIBS\"] = nil" >>configure.lua
echo "no"
echo "no" >> config.log
fi;
		if [ "${HAVE_JPEG}" != "yes" ]
 then
			if [ "${with_jpeg}" = "yes" ]
 then
				echo "*"
				echo "* --with-jpeg was requested, but libjpeg"
				echo "* was not found."
				echo "*"
				exit 1
			else
echo "#undef HAVE_JPEG" >$BLD/include/agar/config/have_jpeg.h
echo "hdefs[\"HAVE_JPEG\"] = nil" >>configure.lua
			fi
		fi
	else
echo "#undef HAVE_JPEG" >$BLD/include/agar/config/have_jpeg.h
echo "hdefs[\"HAVE_JPEG\"] = nil" >>configure.lua
JPEG_CFLAGS=""
echo "JPEG_CFLAGS=$JPEG_CFLAGS" >>Makefile.config
echo "mdefs[\"JPEG_CFLAGS\"] = \"$JPEG_CFLAGS\"" >>configure.lua
JPEG_LIBS=""
echo "JPEG_LIBS=$JPEG_LIBS" >>Makefile.config
echo "mdefs[\"JPEG_LIBS\"] = \"$JPEG_LIBS\"" >>configure.lua
	fi
	
	if [ "${with_png}" != "no" ]
 then
$ECHO_N "checking for libpng (http://www.libpng.org)..."
$ECHO_N "checking for libpng (http://www.libpng.org)..." >> config.log
MK_EXEC_FOUND="No"

if [ "${prefix_png}" != "" ]; then
	if [ -e "${prefix_png}/bin/libpng-config" ]; then
		PNG_VERSION=`${prefix_png}/bin/libpng-config --version`
		MK_EXEC_FOUND="Yes"
	fi
else
	MK_CACHED="No"
	if [ "${cache}" != "" ]; then
		if [ -e "${cache}/exec-PNG_VERSION" ]; then
			PNG_VERSION=`cat ${cache}/exec-PNG_VERSION`
			MK_EXEC_FOUND=`cat ${cache}/exec-found-PNG_VERSION`
			MK_CACHED="Yes"
		fi
	fi
	if [ "${MK_CACHED}" = "No" ]; then
		PNG_VERSION=""
		for path in `echo $PATH | sed 's/:/ /g'`; do
			if [ -e "${path}/libpng-config" ]; then
				PNG_VERSION=`${path}/libpng-config --version`
				MK_EXEC_FOUND="Yes"
				break
			fi
		done
		if [ "${cache}" != "" ]; then
			echo "$PNG_VERSION" > ${cache}/exec-PNG_VERSION
			echo $MK_EXEC_FOUND > ${cache}/exec-found-PNG_VERSION
		fi
	fi
fi
MK_EXEC_FOUND="No"

if [ "${prefix_png}" != "" ]; then
	if [ -e "${prefix_png}/bin/libpng-config" ]; then
		PNG_CFLAGS=`${prefix_png}/bin/libpng-config --cflags`
		MK_EXEC_FOUND="Yes"
	fi
else
	MK_CACHED="No"
	if [ "${cache}" != "" ]; then
		if [ -e "${cache}/exec-PNG_CFLAGS" ]; then
			PNG_CFLAGS=`cat ${cache}/exec-PNG_CFLAGS`
			MK_EXEC_FOUND=`cat ${cache}/exec-found-PNG_CFLAGS`
			MK_CACHED="Yes"
		fi
	fi
	if [ "${MK_CACHED}" = "No" ]; then
		PNG_CFLAGS=""
		for path in `echo $PATH | sed 's/:/ /g'`; do
			if [ -e "${path}/libpng-config" ]; then
				PNG_CFLAGS=`${path}/libpng-config --cflags`
				MK_EXEC_FOUND="Yes"
				break
			fi
		done
		if [ "${cache}" != "" ]; then
			echo "$PNG_CFLAGS" > ${cache}/exec-PNG_CFLAGS
			echo $MK_EXEC_FOUND > ${cache}/exec-found-PNG_CFLAGS
		fi
	fi
fi
MK_EXEC_FOUND="No"

if [ "${prefix_png}" != "" ]; then
	if [ -e "${prefix_png}/bin/libpng-config" ]; then
		PNG_LOPTS=`${prefix_png}/bin/libpng-config --L_opts`
		MK_EXEC_FOUND="Yes"
	fi
else
	MK_CACHED="No"
	if [ "${cache}" != "" ]; then
		if [ -e "${cache}/exec-PNG_LOPTS" ]; then
			PNG_LOPTS=`cat ${cache}/exec-PNG_LOPTS`
			MK_EXEC_FOUND=`cat ${cache}/exec-found-PNG_LOPTS`
			MK_CACHED="Yes"
		fi
	fi
	if [ "${MK_CACHED}" = "No" ]; then
		PNG_LOPTS=""
		for path in `echo $PATH | sed 's/:/ /g'`; do
			if [ -e "${path}/libpng-config" ]; then
				PNG_LOPTS=`${path}/libpng-config --L_opts`
				MK_EXEC_FOUND="Yes"
				break
			fi
		done
		if [ "${cache}" != "" ]; then
			echo "$PNG_LOPTS" > ${cache}/exec-PNG_LOPTS
			echo $MK_EXEC_FOUND > ${cache}/exec-found-PNG_LOPTS
		fi
	fi
fi
MK_EXEC_FOUND="No"

if [ "${prefix_png}" != "" ]; then
	if [ -e "${prefix_png}/bin/libpng-config" ]; then
		PNG_LIBS=`${prefix_png}/bin/libpng-config --libs`
		MK_EXEC_FOUND="Yes"
	fi
else
	MK_CACHED="No"
	if [ "${cache}" != "" ]; then
		if [ -e "${cache}/exec-PNG_LIBS" ]; then
			PNG_LIBS=`cat ${cache}/exec-PNG_LIBS`
			MK_EXEC_FOUND=`cat ${cache}/exec-found-PNG_LIBS`
			MK_CACHED="Yes"
		fi
	fi
	if [ "${MK_CACHED}" = "No" ]; then
		PNG_LIBS=""
		for path in `echo $PATH | sed 's/:/ /g'`; do
			if [ -e "${path}/libpng-config" ]; then
				PNG_LIBS=`${path}/libpng-config --libs`
				MK_EXEC_FOUND="Yes"
				break
			fi
		done
		if [ "${cache}" != "" ]; then
			echo "$PNG_LIBS" > ${cache}/exec-PNG_LIBS
			echo $MK_EXEC_FOUND > ${cache}/exec-found-PNG_LIBS
		fi
	fi
fi
PNG_LIBS="${PNG_LOPTS} ${PNG_LIBS}"
if [ "${PNG_VERSION}" != "" ]; then
if [ "${prefix_png}" != "" ]; then
echo "yes ($PNG_VERSION in ${prefix_png})"
echo "yes ($PNG_VERSION in ${prefix_png})" >> config.log
else
echo "yes ($PNG_VERSION)"
echo "yes ($PNG_VERSION)" >> config.log
fi;
if [ "0" != "" ]; then
if [ "${MK_VERSION_OK}" != "yes" ]; then
echo "Version 0 or greater is required (found $PNG_VERSION)"
exit 1
fi;
fi;
$ECHO_N "checking whether libpng works..."
$ECHO_N "checking whether libpng works..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_PNG" ]; then
		HAVE_PNG=`cat ${cache}/ctest-HAVE_PNG`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_PNG`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <stdio.h>
#include <png.h>

int main(int argc, char *argv[])
{
	char foo[4];

	if (png_sig_cmp((png_bytep)foo, 0, 3)) {
		return (1);
	}
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${PNG_CFLAGS} -o $testdir/conftest conftest.c ${PNG_LIBS}" >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${PNG_CFLAGS} -o $testdir/conftest conftest.c ${PNG_LIBS} 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_PNG="yes"
echo "HAVE_PNG=$HAVE_PNG" >>Makefile.config
echo "mdefs[\"HAVE_PNG\"] = \"$HAVE_PNG\"" >>configure.lua
echo "#ifndef HAVE_PNG" > $BLD/include/agar/config/have_png.h
echo "#define HAVE_PNG \"$HAVE_PNG\"" >> $BLD/include/agar/config/have_png.h
echo "#endif" >> $BLD/include/agar/config/have_png.h
echo "hdefs[\"HAVE_PNG\"] = \"$HAVE_PNG\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_PNG="no"
echo "HAVE_PNG=$HAVE_PNG" >>Makefile.config
echo "mdefs[\"HAVE_PNG\"] = \"$HAVE_PNG\"" >>configure.lua
echo "#undef HAVE_PNG" >$BLD/include/agar/config/have_png.h
echo "hdefs[\"HAVE_PNG\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_PNG" > ${cache}/ctest-HAVE_PNG
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_PNG
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_PNG}" = "yes" ]; then
echo "PNG_CFLAGS=$PNG_CFLAGS" >>Makefile.config
echo "mdefs[\"PNG_CFLAGS\"] = \"$PNG_CFLAGS\"" >>configure.lua
echo "#ifndef PNG_CFLAGS" > $BLD/include/agar/config/png_cflags.h
echo "#define PNG_CFLAGS \"$PNG_CFLAGS\"" >> $BLD/include/agar/config/png_cflags.h
echo "#endif" >> $BLD/include/agar/config/png_cflags.h
echo "hdefs[\"PNG_CFLAGS\"] = \"$PNG_CFLAGS\"" >>configure.lua
echo "PNG_LIBS=$PNG_LIBS" >>Makefile.config
echo "mdefs[\"PNG_LIBS\"] = \"$PNG_LIBS\"" >>configure.lua
echo "#ifndef PNG_LIBS" > $BLD/include/agar/config/png_libs.h
echo "#define PNG_LIBS \"$PNG_LIBS\"" >> $BLD/include/agar/config/png_libs.h
echo "#endif" >> $BLD/include/agar/config/png_libs.h
echo "hdefs[\"PNG_LIBS\"] = \"$PNG_LIBS\"" >>configure.lua
else
echo "#undef PNG_CFLAGS" >$BLD/include/agar/config/png_cflags.h
echo "hdefs[\"PNG_CFLAGS\"] = nil" >>configure.lua
PNG_CFLAGS=""
echo "#undef PNG_LIBS" >$BLD/include/agar/config/png_libs.h
echo "hdefs[\"PNG_LIBS\"] = nil" >>configure.lua
PNG_LIBS=""
fi;
MK_VERSION_MAJOR=`echo "$PNG_VERSION" |sed 's/\([0-9]*\).\([0-9]*\).\([0-9]*\).*/\1/'`;
MK_VERSION_MINOR=`echo "$PNG_VERSION" |sed 's/\([0-9]*\).\([0-9]*\).\([0-9]*\).*/\2/'`;
MK_VERSION_MICRO=`echo "$PNG_VERSION" |sed 's/\([0-9]*\).\([0-9]*\).\([0-9]*\).*/\3/'`;
MK_VERSION_OK="no"
if [ $MK_VERSION_MAJOR -gt 1 ]; then
	MK_VERSION_OK="yes";
elif [ $MK_VERSION_MAJOR -eq 1 ]; then
	if [ "$MK_VERSION_MINOR" = "" ]; then
		MK_VERSION_OK="yes"
	else
		if [ $MK_VERSION_MINOR -gt 4 ]; then
			MK_VERSION_OK="yes";
		elif [ $MK_VERSION_MINOR -eq 4 ]; then
			if [ "$MK_VERSION_MICRO" = "" ]; then
				MK_VERSION_OK="yes"
			else
				if [ $MK_VERSION_MICRO -ge 0 ]; then
					MK_VERSION_OK="yes"
				fi
			fi
		fi
	fi
fi
if [ "${MK_VERSION_OK}" = "yes" ]; then
HAVE_LIBPNG14="yes"
echo "HAVE_LIBPNG14=$HAVE_LIBPNG14" >>Makefile.config
echo "mdefs[\"HAVE_LIBPNG14\"] = \"$HAVE_LIBPNG14\"" >>configure.lua
echo "#ifndef HAVE_LIBPNG14" > $BLD/include/agar/config/have_libpng14.h
echo "#define HAVE_LIBPNG14 \"$HAVE_LIBPNG14\"" >> $BLD/include/agar/config/have_libpng14.h
echo "#endif" >> $BLD/include/agar/config/have_libpng14.h
echo "hdefs[\"HAVE_LIBPNG14\"] = \"$HAVE_LIBPNG14\"" >>configure.lua
else
echo "#undef HAVE_LIBPNG14" >$BLD/include/agar/config/have_libpng14.h
echo "hdefs[\"HAVE_LIBPNG14\"] = nil" >>configure.lua
fi;
else
if [ "${prefix_png}" != "" ]; then
echo "no (not in ${prefix_png})"
echo "no (not in ${prefix_png})" >> config.log
else
echo "no"
echo "no" >> config.log
fi;
echo "#undef HAVE_PNG" >$BLD/include/agar/config/have_png.h
echo "hdefs[\"HAVE_PNG\"] = nil" >>configure.lua
echo "#undef PNG_CFLAGS" >$BLD/include/agar/config/png_cflags.h
echo "hdefs[\"PNG_CFLAGS\"] = nil" >>configure.lua
echo "#undef PNG_LIBS" >$BLD/include/agar/config/png_libs.h
echo "hdefs[\"PNG_LIBS\"] = nil" >>configure.lua
echo "#undef HAVE_LIBPNG14" >$BLD/include/agar/config/have_libpng14.h
echo "hdefs[\"HAVE_LIBPNG14\"] = nil" >>configure.lua
fi;
		if [ "${HAVE_PNG}" != "yes" ]
 then
			if [ "${with_png}" = "yes" ]
 then
				echo "*"
				echo "* --with-png was requested, but libpng"
				echo "* was not found."
				echo "*"
				exit 1
			else
echo "#undef HAVE_PNG" >$BLD/include/agar/config/have_png.h
echo "hdefs[\"HAVE_PNG\"] = nil" >>configure.lua
			fi
		fi
	else
echo "#undef HAVE_PNG" >$BLD/include/agar/config/have_png.h
echo "hdefs[\"HAVE_PNG\"] = nil" >>configure.lua
PNG_CFLAGS=""
echo "PNG_CFLAGS=$PNG_CFLAGS" >>Makefile.config
echo "mdefs[\"PNG_CFLAGS\"] = \"$PNG_CFLAGS\"" >>configure.lua
PNG_LIBS=""
echo "PNG_LIBS=$PNG_LIBS" >>Makefile.config
echo "mdefs[\"PNG_LIBS\"] = \"$PNG_LIBS\"" >>configure.lua
	fi
else
echo "#undef ENABLE_GUI" >$BLD/include/agar/config/enable_gui.h
echo "hdefs[\"ENABLE_GUI\"] = nil" >>configure.lua
SUBDIR_gui=""
echo "SUBDIR_gui=$SUBDIR_gui" >>Makefile.config
echo "mdefs[\"SUBDIR_gui\"] = \"$SUBDIR_gui\"" >>configure.lua
echo "#undef HAVE_SDL" >$BLD/include/agar/config/have_sdl.h
echo "hdefs[\"HAVE_SDL\"] = nil" >>configure.lua
SDL_CFLAGS=""
echo "SDL_CFLAGS=$SDL_CFLAGS" >>Makefile.config
echo "mdefs[\"SDL_CFLAGS\"] = \"$SDL_CFLAGS\"" >>configure.lua
SDL_LIBS=""
echo "SDL_LIBS=$SDL_LIBS" >>Makefile.config
echo "mdefs[\"SDL_LIBS\"] = \"$SDL_LIBS\"" >>configure.lua
echo "#undef HAVE_GLX" >$BLD/include/agar/config/have_glx.h
echo "hdefs[\"HAVE_GLX\"] = nil" >>configure.lua
GLX_CFLAGS=""
echo "GLX_CFLAGS=$GLX_CFLAGS" >>Makefile.config
echo "mdefs[\"GLX_CFLAGS\"] = \"$GLX_CFLAGS\"" >>configure.lua
GLX_LIBS=""
echo "GLX_LIBS=$GLX_LIBS" >>Makefile.config
echo "mdefs[\"GLX_LIBS\"] = \"$GLX_LIBS\"" >>configure.lua
echo "#undef HAVE_WGL" >$BLD/include/agar/config/have_wgl.h
echo "hdefs[\"HAVE_WGL\"] = nil" >>configure.lua
WGL_CFLAGS=""
echo "WGL_CFLAGS=$WGL_CFLAGS" >>Makefile.config
echo "mdefs[\"WGL_CFLAGS\"] = \"$WGL_CFLAGS\"" >>configure.lua
WGL_LIBS=""
echo "WGL_LIBS=$WGL_LIBS" >>Makefile.config
echo "mdefs[\"WGL_LIBS\"] = \"$WGL_LIBS\"" >>configure.lua
echo "#undef HAVE_OPENGL" >$BLD/include/agar/config/have_opengl.h
echo "hdefs[\"HAVE_OPENGL\"] = nil" >>configure.lua
OPENGL_CFLAGS=""
echo "OPENGL_CFLAGS=$OPENGL_CFLAGS" >>Makefile.config
echo "mdefs[\"OPENGL_CFLAGS\"] = \"$OPENGL_CFLAGS\"" >>configure.lua
OPENGL_LIBS=""
echo "OPENGL_LIBS=$OPENGL_LIBS" >>Makefile.config
echo "mdefs[\"OPENGL_LIBS\"] = \"$OPENGL_LIBS\"" >>configure.lua
echo "#undef HAVE_FREETYPE" >$BLD/include/agar/config/have_freetype.h
echo "hdefs[\"HAVE_FREETYPE\"] = nil" >>configure.lua
FREETYPE_CFLAGS=""
echo "FREETYPE_CFLAGS=$FREETYPE_CFLAGS" >>Makefile.config
echo "mdefs[\"FREETYPE_CFLAGS\"] = \"$FREETYPE_CFLAGS\"" >>configure.lua
FREETYPE_LIBS=""
echo "FREETYPE_LIBS=$FREETYPE_LIBS" >>Makefile.config
echo "mdefs[\"FREETYPE_LIBS\"] = \"$FREETYPE_LIBS\"" >>configure.lua
echo "#undef HAVE_JPEG" >$BLD/include/agar/config/have_jpeg.h
echo "hdefs[\"HAVE_JPEG\"] = nil" >>configure.lua
JPEG_CFLAGS=""
echo "JPEG_CFLAGS=$JPEG_CFLAGS" >>Makefile.config
echo "mdefs[\"JPEG_CFLAGS\"] = \"$JPEG_CFLAGS\"" >>configure.lua
JPEG_LIBS=""
echo "JPEG_LIBS=$JPEG_LIBS" >>Makefile.config
echo "mdefs[\"JPEG_LIBS\"] = \"$JPEG_LIBS\"" >>configure.lua
fi
if [ "${enable_network}" = "yes" ]
 then
$ECHO_N "checking for the getaddrinfo() function..."
$ECHO_N "checking for the getaddrinfo() function..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_GETADDRINFO" ]; then
		HAVE_GETADDRINFO=`cat ${cache}/ctest-HAVE_GETADDRINFO`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_GETADDRINFO`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>

int
main(int argc, char *argv[])
{
	struct addrinfo hints, *res0;
	const char *s;
	int rv;

	hints.ai_family = PF_UNSPEC;
	hints.ai_socktype = SOCK_STREAM;
	hints.ai_flags = AI_PASSIVE;
	rv = getaddrinfo("hostname", "port", &hints, &res0);
	s = gai_strerror(rv);
	freeaddrinfo(res0);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c" >>config.log
	$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_GETADDRINFO="yes"
echo "#ifndef HAVE_GETADDRINFO" > $BLD/include/agar/config/have_getaddrinfo.h
echo "#define HAVE_GETADDRINFO \"$HAVE_GETADDRINFO\"" >> $BLD/include/agar/config/have_getaddrinfo.h
echo "#endif" >> $BLD/include/agar/config/have_getaddrinfo.h
echo "hdefs[\"HAVE_GETADDRINFO\"] = \"$HAVE_GETADDRINFO\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_GETADDRINFO="no"
echo "#undef HAVE_GETADDRINFO" >$BLD/include/agar/config/have_getaddrinfo.h
echo "hdefs[\"HAVE_GETADDRINFO\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_GETADDRINFO" > ${cache}/ctest-HAVE_GETADDRINFO
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_GETADDRINFO
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
	if [ "${HAVE_GETADDRINFO}" = "yes" ]
 then
AG_NETWORK="yes"
echo "#ifndef AG_NETWORK" > $BLD/include/agar/config/ag_network.h
echo "#define AG_NETWORK \"$AG_NETWORK\"" >> $BLD/include/agar/config/ag_network.h
echo "#endif" >> $BLD/include/agar/config/ag_network.h
echo "hdefs[\"AG_NETWORK\"] = \"$AG_NETWORK\"" >>configure.lua
	else
		if [ "${enable_network}" = "yes" ]
 then
			echo "*"
			echo "* --enable-network was requested, but this system"
			echo "* does not seem to support getaddrinfo()."
			echo "*"
			exit 1
		else
echo "#undef AG_NETWORK" >$BLD/include/agar/config/ag_network.h
echo "hdefs[\"AG_NETWORK\"] = nil" >>configure.lua
		fi
	fi
else
echo "#undef AG_NETWORK" >$BLD/include/agar/config/ag_network.h
echo "hdefs[\"AG_NETWORK\"] = nil" >>configure.lua
echo "#undef HAVE_GETADDRINFO" >$BLD/include/agar/config/have_getaddrinfo.h
echo "hdefs[\"HAVE_GETADDRINFO\"] = nil" >>configure.lua
fi
	
if [ "${with_db4}" = "yes" ]
 then
$ECHO_N "checking for Berkeley DB 4.x..."
$ECHO_N "checking for Berkeley DB 4.x..." >> config.log
DB4_CFLAGS=""
DB4_LIBS=""
DB4_VERSION=""

for path in  /usr /usr/local /opt; do
	if [ -e "${path}/include/db4.7" ]; then
		DB4_CFLAGS="-I${path}/include/db4.7 -I${path}/include"
		DB4_VERSION="4.7"
	elif [ -e "${path}/include/db4.6" ]; then
		DB4_CFLAGS="-I${path}/include/db4.6 -I${path}/include"
		DB4_VERSION="4.6"
	elif [ -e "${path}/include/db4.5" ]; then
		DB4_CFLAGS="-I${path}/include/db4.5 -I${path}/include"
		DB4_VERSION="4.5"
	elif [ -e "${path}/include/db4.4" ]; then
		DB4_CFLAGS="-I${path}/include/db4.4 -I${path}/include"
		DB4_VERSION="4.4"
	elif [ -e "${path}/include/db4.3" ]; then
		DB4_CFLAGS="-I${path}/include/db4.3 -I${path}/include"
		DB4_VERSION="4.3"
	elif [ -e "${path}/include/db4.2" ]; then
		DB4_CFLAGS="-I${path}/include/db4.2 -I${path}/include"
		DB4_VERSION="4.2"
	elif [ -e "${path}/include/db47" ]; then
		DB4_CFLAGS="-I${path}/include/db47 -I${path}/include"
		DB4_VERSION="4.7"
	elif [ -e "${path}/include/db46" ]; then
		DB4_CFLAGS="-I${path}/include/db46 -I${path}/include"
		DB4_VERSION="4.6"
	elif [ -e "${path}/include/db45" ]; then
		DB4_CFLAGS="-I${path}/include/db45 -I${path}/include"
		DB4_VERSION="4.5"
	elif [ -e "${path}/include/db44" ]; then
		DB4_CFLAGS="-I${path}/include/db44 -I${path}/include"
		DB4_VERSION="4.4"
	elif [ -e "${path}/include/db43" ]; then
		DB4_CFLAGS="-I${path}/include/db43 -I${path}/include"
		DB4_VERSION="4.3"
	elif [ -e "${path}/include/db42" ]; then
		DB4_CFLAGS="-I${path}/include/db42 -I${path}/include"
		DB4_VERSION="4.2"
	elif [ -e "${path}/include/db4" ]; then
		DB4_CFLAGS="-I${path}/include/db4 -I${path}/include"
		DB4_VERSION="4"
	fi
	case "${DB4_VERSION}" in
	4)
		if [ -e "${path}/lib/db4" ]; then
			DB4_LIBS="-L${path}/lib/db4 -ldb"
		fi
		;;
	4.2)
		if [ -e "${path}/lib/db42" ]; then
			DB4_LIBS="-L${path}/lib/db42 -ldb"
		elif [ -e "${path}/lib/libdb-4.2.so" ]; then
			DB4_LIBS="-L${path}/lib -ldb-4.2"
		fi
		;;
	4.3)
		if [ -e "${path}/lib/db43" ]; then
			DB4_LIBS="-L${path}/lib/db43 -ldb"
		elif [ -e "${path}/lib/libdb-4.3.so" ]; then
			DB4_LIBS="-L${path}/lib -ldb-4.3"
		fi
		;;
	4.4)
		if [ -e "${path}/lib/db44" ]; then
			DB4_LIBS="-L${path}/lib/db44 -ldb"
		elif [ -e "${path}/lib/libdb-4.4.so" ]; then
			DB4_LIBS="-L${path}/lib -ldb-4.4"
		fi
		;;
	4.5)
		if [ -e "${path}/lib/db45" ]; then
			DB4_LIBS="-L${path}/lib/db45 -ldb"
		elif [ -e "${path}/lib/libdb-4.5.so" ]; then
			DB4_LIBS="-L${path}/lib -ldb-4.5"
		fi
		;;
	4.6)
		if [ -e "${path}/lib/db46" ]; then
			DB4_LIBS="-L${path}/lib/db46 -ldb"
		elif [ -e "${path}/lib/libdb-4.6.so" ]; then
			DB4_LIBS="-L${path}/lib -ldb-4.6"
		fi
		;;
	4.7)
		if [ -e "${path}/lib/db47" ]; then
			DB4_LIBS="-L${path}/lib/db47 -ldb"
		elif [ -e "${path}/lib/libdb-4.7.so" ]; then
			DB4_LIBS="-L${path}/lib -ldb-4.7"
		fi
		;;
	*)
		;;
	esac
done
if [ "${DB4_VERSION}" != "" ]; then
if [ "" != "" ]; then
echo "yes ($DB4_VERSION in )"
echo "yes ($DB4_VERSION in )" >> config.log
else
echo "yes ($DB4_VERSION)"
echo "yes ($DB4_VERSION)" >> config.log
fi;
if [ "${prefix_db4}" != "" ]; then
MK_VERSION_MAJOR=`echo "$DB4_VERSION" |sed 's/\([0-9]*\).\([0-9]*\).\([0-9]*\).*/\1/'`;
MK_VERSION_OK="no"
if [ $MK_VERSION_MAJOR -gt ${prefix_db4} ]; then
	MK_VERSION_OK="yes";
elif [ $MK_VERSION_MAJOR -ge ${prefix_db4} ]; then
	MK_VERSION_OK="yes";
fi
if [ "${MK_VERSION_OK}" != "yes" ]; then
echo "Version ${prefix_db4} or greater is required (found $DB4_VERSION)"
exit 1
fi;
fi;
$ECHO_N "checking whether DB4 works..."
$ECHO_N "checking whether DB4 works..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_DB4" ]; then
		HAVE_DB4=`cat ${cache}/ctest-HAVE_DB4`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_DB4`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <db.h>

int main(int argc, char *argv[]) {
	DB *db;
	db_create(&db, NULL, 0);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${DB4_CFLAGS} -o $testdir/conftest conftest.c ${DB4_LIBS}" >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${DB4_CFLAGS} -o $testdir/conftest conftest.c ${DB4_LIBS} 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_DB4="yes"
echo "HAVE_DB4=$HAVE_DB4" >>Makefile.config
echo "mdefs[\"HAVE_DB4\"] = \"$HAVE_DB4\"" >>configure.lua
echo "#ifndef HAVE_DB4" > $BLD/include/agar/config/have_db4.h
echo "#define HAVE_DB4 \"$HAVE_DB4\"" >> $BLD/include/agar/config/have_db4.h
echo "#endif" >> $BLD/include/agar/config/have_db4.h
echo "hdefs[\"HAVE_DB4\"] = \"$HAVE_DB4\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_DB4="no"
echo "HAVE_DB4=$HAVE_DB4" >>Makefile.config
echo "mdefs[\"HAVE_DB4\"] = \"$HAVE_DB4\"" >>configure.lua
echo "#undef HAVE_DB4" >$BLD/include/agar/config/have_db4.h
echo "hdefs[\"HAVE_DB4\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_DB4" > ${cache}/ctest-HAVE_DB4
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_DB4
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_DB4}" = "yes" ]; then
echo "DB4_CFLAGS=$DB4_CFLAGS" >>Makefile.config
echo "mdefs[\"DB4_CFLAGS\"] = \"$DB4_CFLAGS\"" >>configure.lua
echo "#ifndef DB4_CFLAGS" > $BLD/include/agar/config/db4_cflags.h
echo "#define DB4_CFLAGS \"$DB4_CFLAGS\"" >> $BLD/include/agar/config/db4_cflags.h
echo "#endif" >> $BLD/include/agar/config/db4_cflags.h
echo "hdefs[\"DB4_CFLAGS\"] = \"$DB4_CFLAGS\"" >>configure.lua
echo "DB4_LIBS=$DB4_LIBS" >>Makefile.config
echo "mdefs[\"DB4_LIBS\"] = \"$DB4_LIBS\"" >>configure.lua
echo "#ifndef DB4_LIBS" > $BLD/include/agar/config/db4_libs.h
echo "#define DB4_LIBS \"$DB4_LIBS\"" >> $BLD/include/agar/config/db4_libs.h
echo "#endif" >> $BLD/include/agar/config/db4_libs.h
echo "hdefs[\"DB4_LIBS\"] = \"$DB4_LIBS\"" >>configure.lua
else
echo "#undef DB4_CFLAGS" >$BLD/include/agar/config/db4_cflags.h
echo "hdefs[\"DB4_CFLAGS\"] = nil" >>configure.lua
DB4_CFLAGS=""
echo "#undef DB4_LIBS" >$BLD/include/agar/config/db4_libs.h
echo "hdefs[\"DB4_LIBS\"] = nil" >>configure.lua
DB4_LIBS=""
fi;
else
if [ "" != "" ]; then
echo "no (not in )"
echo "no (not in )" >> config.log
else
echo "no"
echo "no" >> config.log
fi;
echo "#undef HAVE_DB4" >$BLD/include/agar/config/have_db4.h
echo "hdefs[\"HAVE_DB4\"] = nil" >>configure.lua
fi;
	if [ "${HAVE_DB4}" != "yes" ]
 then
		if [ "${with_db4}" = "yes" ]
 then
			echo "*"
			echo "* --with-db4 was requested, but Berkeley DB v4"
			echo "* was not found."
			echo "*"
			exit 1
		else
echo "#undef HAVE_DB4" >$BLD/include/agar/config/have_db4.h
echo "hdefs[\"HAVE_DB4\"] = nil" >>configure.lua
		fi
	fi
else
echo "#undef HAVE_DB4" >$BLD/include/agar/config/have_db4.h
echo "hdefs[\"HAVE_DB4\"] = nil" >>configure.lua
DB4_CFLAGS=""
echo "DB4_CFLAGS=$DB4_CFLAGS" >>Makefile.config
echo "mdefs[\"DB4_CFLAGS\"] = \"$DB4_CFLAGS\"" >>configure.lua
DB4_LIBS=""
echo "DB4_LIBS=$DB4_LIBS" >>Makefile.config
echo "mdefs[\"DB4_LIBS\"] = \"$DB4_LIBS\"" >>configure.lua
fi
if [ "${enable_threads}" != "no" ]
 then
$ECHO_N "checking for POSIX threads..."
$ECHO_N "checking for POSIX threads..." >> config.log
if [ "" != "" ]; then
PTHREADS_CFLAGS="-I/include"
PTHREADS_LIBS="-L/lib -lpthread"
else
PTHREADS_CFLAGS=""
PTHREADS_LIBS="-lpthread"
fi;
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_PTHREADS" ]; then
		HAVE_PTHREADS=`cat ${cache}/ctest-HAVE_PTHREADS`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_PTHREADS`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <pthread.h>
#include <signal.h>

static void *start_routine(void *arg)
{
	return (NULL);
}
int main(int argc, char *argv[])
{
	pthread_mutex_t mutex;
	pthread_t thread;
	pthread_mutex_init(&mutex, NULL);
	pthread_mutex_lock(&mutex);
	pthread_mutex_unlock(&mutex);
	pthread_mutex_destroy(&mutex);
	pthread_create(&thread, NULL, start_routine, NULL);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o $testdir/conftest conftest.c ${PTHREADS_LIBS}" >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o $testdir/conftest conftest.c ${PTHREADS_LIBS} 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_PTHREADS="yes"
echo "HAVE_PTHREADS=$HAVE_PTHREADS" >>Makefile.config
echo "mdefs[\"HAVE_PTHREADS\"] = \"$HAVE_PTHREADS\"" >>configure.lua
echo "#ifndef HAVE_PTHREADS" > $BLD/include/agar/config/have_pthreads.h
echo "#define HAVE_PTHREADS \"$HAVE_PTHREADS\"" >> $BLD/include/agar/config/have_pthreads.h
echo "#endif" >> $BLD/include/agar/config/have_pthreads.h
echo "hdefs[\"HAVE_PTHREADS\"] = \"$HAVE_PTHREADS\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_PTHREADS="no"
echo "HAVE_PTHREADS=$HAVE_PTHREADS" >>Makefile.config
echo "mdefs[\"HAVE_PTHREADS\"] = \"$HAVE_PTHREADS\"" >>configure.lua
echo "#undef HAVE_PTHREADS" >$BLD/include/agar/config/have_pthreads.h
echo "hdefs[\"HAVE_PTHREADS\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_PTHREADS" > ${cache}/ctest-HAVE_PTHREADS
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_PTHREADS
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_PTHREADS}" = "yes" ]; then
CFLAGS="${CFLAGS} ${PTHREADS_CFLAGS}"
echo "CFLAGS=$CFLAGS" >>Makefile.config
echo "mdefs[\"CFLAGS\"] = \"$CFLAGS\"" >>configure.lua
echo "PTHREADS_CFLAGS=$PTHREADS_CFLAGS" >>Makefile.config
echo "mdefs[\"PTHREADS_CFLAGS\"] = \"$PTHREADS_CFLAGS\"" >>configure.lua
echo "PTHREADS_LIBS=$PTHREADS_LIBS" >>Makefile.config
echo "mdefs[\"PTHREADS_LIBS\"] = \"$PTHREADS_LIBS\"" >>configure.lua
echo "#ifndef PTHREADS_CFLAGS" > $BLD/include/agar/config/pthreads_cflags.h
echo "#define PTHREADS_CFLAGS \"$PTHREADS_CFLAGS\"" >> $BLD/include/agar/config/pthreads_cflags.h
echo "#endif" >> $BLD/include/agar/config/pthreads_cflags.h
echo "hdefs[\"PTHREADS_CFLAGS\"] = \"$PTHREADS_CFLAGS\"" >>configure.lua
echo "#ifndef PTHREADS_LIBS" > $BLD/include/agar/config/pthreads_libs.h
echo "#define PTHREADS_LIBS \"$PTHREADS_LIBS\"" >> $BLD/include/agar/config/pthreads_libs.h
echo "#endif" >> $BLD/include/agar/config/pthreads_libs.h
echo "hdefs[\"PTHREADS_LIBS\"] = \"$PTHREADS_LIBS\"" >>configure.lua
else
$ECHO_N "checking for -pthread..."
$ECHO_N "checking for -pthread..." >> config.log
PTHREADS_LIBS="-pthread"
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_PTHREADS" ]; then
		HAVE_PTHREADS=`cat ${cache}/ctest-HAVE_PTHREADS`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_PTHREADS`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <pthread.h>
#include <signal.h>

static void *start_routine(void *arg)
{
	return (NULL);
}
int main(int argc, char *argv[])
{
	pthread_mutex_t mutex;
	pthread_t thread;
	pthread_mutex_init(&mutex, NULL);
	pthread_mutex_lock(&mutex);
	pthread_mutex_unlock(&mutex);
	pthread_mutex_destroy(&mutex);
	pthread_create(&thread, NULL, start_routine, NULL);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o $testdir/conftest conftest.c ${PTHREADS_LIBS}" >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o $testdir/conftest conftest.c ${PTHREADS_LIBS} 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_PTHREADS="yes"
echo "HAVE_PTHREADS=$HAVE_PTHREADS" >>Makefile.config
echo "mdefs[\"HAVE_PTHREADS\"] = \"$HAVE_PTHREADS\"" >>configure.lua
echo "#ifndef HAVE_PTHREADS" > $BLD/include/agar/config/have_pthreads.h
echo "#define HAVE_PTHREADS \"$HAVE_PTHREADS\"" >> $BLD/include/agar/config/have_pthreads.h
echo "#endif" >> $BLD/include/agar/config/have_pthreads.h
echo "hdefs[\"HAVE_PTHREADS\"] = \"$HAVE_PTHREADS\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_PTHREADS="no"
echo "HAVE_PTHREADS=$HAVE_PTHREADS" >>Makefile.config
echo "mdefs[\"HAVE_PTHREADS\"] = \"$HAVE_PTHREADS\"" >>configure.lua
echo "#undef HAVE_PTHREADS" >$BLD/include/agar/config/have_pthreads.h
echo "hdefs[\"HAVE_PTHREADS\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_PTHREADS" > ${cache}/ctest-HAVE_PTHREADS
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_PTHREADS
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_PTHREADS}" = "yes" ]; then
CFLAGS="${CFLAGS} ${PTHREADS_CFLAGS}"
echo "CFLAGS=$CFLAGS" >>Makefile.config
echo "mdefs[\"CFLAGS\"] = \"$CFLAGS\"" >>configure.lua
echo "PTHREADS_CFLAGS=$PTHREADS_CFLAGS" >>Makefile.config
echo "mdefs[\"PTHREADS_CFLAGS\"] = \"$PTHREADS_CFLAGS\"" >>configure.lua
echo "PTHREADS_LIBS=$PTHREADS_LIBS" >>Makefile.config
echo "mdefs[\"PTHREADS_LIBS\"] = \"$PTHREADS_LIBS\"" >>configure.lua
echo "#ifndef PTHREADS_CFLAGS" > $BLD/include/agar/config/pthreads_cflags.h
echo "#define PTHREADS_CFLAGS \"$PTHREADS_CFLAGS\"" >> $BLD/include/agar/config/pthreads_cflags.h
echo "#endif" >> $BLD/include/agar/config/pthreads_cflags.h
echo "hdefs[\"PTHREADS_CFLAGS\"] = \"$PTHREADS_CFLAGS\"" >>configure.lua
echo "#ifndef PTHREADS_LIBS" > $BLD/include/agar/config/pthreads_libs.h
echo "#define PTHREADS_LIBS \"$PTHREADS_LIBS\"" >> $BLD/include/agar/config/pthreads_libs.h
echo "#endif" >> $BLD/include/agar/config/pthreads_libs.h
echo "hdefs[\"PTHREADS_LIBS\"] = \"$PTHREADS_LIBS\"" >>configure.lua
else
PTHREADS_CFLAGS=""
PTHREADS_LIBS=""
$ECHO_N "checking for -pthread (common paths)..."
$ECHO_N "checking for -pthread (common paths)..." >> config.log
if [ -e  "/lib/pthread.h" ]; then
PTHREADS_CFLAGS="-I/lib"
fi;
if [ -e  "/usr/include/pthreads/pthread.h" ]; then
PTHREADS_CFLAGS="-I/usr/include/pthreads"
fi;
if [ -e  "/usr/local/include/pthread.h" ]; then
PTHREADS_CFLAGS="-I/usr/local/include"
fi;
if [ -e  "/usr/local/include/pthreads/pthread.h" ]; then
PTHREADS_CFLAGS="-I/usr/local/include/pthreads"
fi;
if [ -e  "/lib/libpthread.a" ]; then
PTHREADS_LIBS="-L/lib -lpthread"
fi;
if [ -e  "/lib/libpthreadGC1.a" ]; then
PTHREADS_LIBS="-L/lib -lpthreadGC1"
fi;
if [ -e  "/lib/libpthreadGC1d.a" ]; then
PTHREADS_LIBS="-L/lib -lpthreadGC1d"
fi;
if [ -e  "/lib/libpthreadGCE1.a" ]; then
PTHREADS_LIBS="-L/lib -lpthreadGCE1"
fi;
if [ -e  "/lib/libpthreadGCE1d.a" ]; then
PTHREADS_LIBS="-L/lib -lpthreadGCE1d"
fi;
if [ -e  "/lib/libpthreadGC2.a" ]; then
PTHREADS_LIBS="-L/lib -lpthreadGC2"
fi;
if [ -e  "/lib/libpthreadGC2d.a" ]; then
PTHREADS_LIBS="-L/lib -lpthreadGC2d"
fi;
if [ -e  "/lib/libpthreadGCE2.a" ]; then
PTHREADS_LIBS="-L/lib -lpthreadGCE2"
fi;
if [ -e  "/lib/libpthreadGCE2d.a" ]; then
PTHREADS_LIBS="-L/lib -lpthreadGCE2d"
fi;
if [ -e  "/usr/local/lib/libpthread.a" ]; then
PTHREADS_LIBS="-L/usr/local/lib -lpthread"
fi;
if [ -e  "/usr/local/lib/libpthreadGC1.a" ]; then
PTHREADS_LIBS="-L/usr/local/lib -lpthreadGC1"
fi;
if [ -e  "/usr/local/lib/libpthreadGC1d.a" ]; then
PTHREADS_LIBS="-L/usr/local/lib -lpthreadGC1d"
fi;
if [ -e  "/usr/local/lib/libpthreadGCE1.a" ]; then
PTHREADS_LIBS="-L/usr/local/lib -lpthreadGCE1"
fi;
if [ -e  "/usr/local/lib/libpthreadGCE1d.a" ]; then
PTHREADS_LIBS="-L/usr/local/lib -lpthreadGCE1d"
fi;
if [ -e  "/usr/local/lib/libpthreadGC2.a" ]; then
PTHREADS_LIBS="-L/usr/local/lib -lpthreadGC2"
fi;
if [ -e  "/usr/local/lib/libpthreadGC2d.a" ]; then
PTHREADS_LIBS="-L/usr/local/lib -lpthreadGC2d"
fi;
if [ -e  "/usr/local/lib/libpthreadGCE2.a" ]; then
PTHREADS_LIBS="-L/usr/local/lib -lpthreadGCE2"
fi;
if [ -e  "/usr/local/lib/libpthreadGCE2d.a" ]; then
PTHREADS_LIBS="-L/usr/local/lib -lpthreadGCE2d"
fi;
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_PTHREADS" ]; then
		HAVE_PTHREADS=`cat ${cache}/ctest-HAVE_PTHREADS`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_PTHREADS`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <pthread.h>
#include <signal.h>

static void *start_routine(void *arg)
{
	return (NULL);
}
int main(int argc, char *argv[])
{
	pthread_mutex_t mutex;
	pthread_t thread;
	pthread_mutex_init(&mutex, NULL);
	pthread_mutex_lock(&mutex);
	pthread_mutex_unlock(&mutex);
	pthread_mutex_destroy(&mutex);
	pthread_create(&thread, NULL, start_routine, NULL);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o $testdir/conftest conftest.c ${PTHREADS_LIBS}" >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o $testdir/conftest conftest.c ${PTHREADS_LIBS} 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_PTHREADS="yes"
echo "HAVE_PTHREADS=$HAVE_PTHREADS" >>Makefile.config
echo "mdefs[\"HAVE_PTHREADS\"] = \"$HAVE_PTHREADS\"" >>configure.lua
echo "#ifndef HAVE_PTHREADS" > $BLD/include/agar/config/have_pthreads.h
echo "#define HAVE_PTHREADS \"$HAVE_PTHREADS\"" >> $BLD/include/agar/config/have_pthreads.h
echo "#endif" >> $BLD/include/agar/config/have_pthreads.h
echo "hdefs[\"HAVE_PTHREADS\"] = \"$HAVE_PTHREADS\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_PTHREADS="no"
echo "HAVE_PTHREADS=$HAVE_PTHREADS" >>Makefile.config
echo "mdefs[\"HAVE_PTHREADS\"] = \"$HAVE_PTHREADS\"" >>configure.lua
echo "#undef HAVE_PTHREADS" >$BLD/include/agar/config/have_pthreads.h
echo "hdefs[\"HAVE_PTHREADS\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_PTHREADS" > ${cache}/ctest-HAVE_PTHREADS
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_PTHREADS
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_PTHREADS}" = "yes" ]; then
CFLAGS="${CFLAGS} ${PTHREADS_CFLAGS}"
echo "CFLAGS=$CFLAGS" >>Makefile.config
echo "mdefs[\"CFLAGS\"] = \"$CFLAGS\"" >>configure.lua
echo "PTHREADS_CFLAGS=$PTHREADS_CFLAGS" >>Makefile.config
echo "mdefs[\"PTHREADS_CFLAGS\"] = \"$PTHREADS_CFLAGS\"" >>configure.lua
echo "PTHREADS_LIBS=$PTHREADS_LIBS" >>Makefile.config
echo "mdefs[\"PTHREADS_LIBS\"] = \"$PTHREADS_LIBS\"" >>configure.lua
echo "#ifndef PTHREADS_CFLAGS" > $BLD/include/agar/config/pthreads_cflags.h
echo "#define PTHREADS_CFLAGS \"$PTHREADS_CFLAGS\"" >> $BLD/include/agar/config/pthreads_cflags.h
echo "#endif" >> $BLD/include/agar/config/pthreads_cflags.h
echo "hdefs[\"PTHREADS_CFLAGS\"] = \"$PTHREADS_CFLAGS\"" >>configure.lua
echo "#ifndef PTHREADS_LIBS" > $BLD/include/agar/config/pthreads_libs.h
echo "#define PTHREADS_LIBS \"$PTHREADS_LIBS\"" >> $BLD/include/agar/config/pthreads_libs.h
echo "#endif" >> $BLD/include/agar/config/pthreads_libs.h
echo "hdefs[\"PTHREADS_LIBS\"] = \"$PTHREADS_LIBS\"" >>configure.lua
fi;
fi;
fi;
$ECHO_N "checking for the X/Open Threads Extension..."
$ECHO_N "checking for the X/Open Threads Extension..." >> config.log
case "${host}" in
*-*-freebsd*)
PTHREADS_XOPEN_CFLAGS=""
;;
*)
PTHREADS_XOPEN_CFLAGS="-U_XOPEN_SOURCE -D_XOPEN_SOURCE=600"
;;
esac
if [ "" != "" ]; then
PTHREADS_XOPEN_LIBS="-L/lib -lpthread"
else
PTHREADS_XOPEN_LIBS="-lpthread"
fi;
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_PTHREADS_XOPEN" ]; then
		HAVE_PTHREADS_XOPEN=`cat ${cache}/ctest-HAVE_PTHREADS_XOPEN`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_PTHREADS_XOPEN`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <pthread.h>
#include <signal.h>

int main(int argc, char *argv[])
{
	pthread_mutex_t mutex;
	pthread_mutexattr_t mutexattr;
	pthread_mutexattr_settype(&mutexattr, PTHREAD_MUTEX_RECURSIVE);
	pthread_mutex_init(&mutex, &mutexattr);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_XOPEN_CFLAGS} -o $testdir/conftest conftest.c ${PTHREADS_XOPEN_LIBS}" >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_XOPEN_CFLAGS} -o $testdir/conftest conftest.c ${PTHREADS_XOPEN_LIBS} 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_PTHREADS_XOPEN="yes"
echo "HAVE_PTHREADS_XOPEN=$HAVE_PTHREADS_XOPEN" >>Makefile.config
echo "mdefs[\"HAVE_PTHREADS_XOPEN\"] = \"$HAVE_PTHREADS_XOPEN\"" >>configure.lua
echo "#ifndef HAVE_PTHREADS_XOPEN" > $BLD/include/agar/config/have_pthreads_xopen.h
echo "#define HAVE_PTHREADS_XOPEN \"$HAVE_PTHREADS_XOPEN\"" >> $BLD/include/agar/config/have_pthreads_xopen.h
echo "#endif" >> $BLD/include/agar/config/have_pthreads_xopen.h
echo "hdefs[\"HAVE_PTHREADS_XOPEN\"] = \"$HAVE_PTHREADS_XOPEN\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_PTHREADS_XOPEN="no"
echo "HAVE_PTHREADS_XOPEN=$HAVE_PTHREADS_XOPEN" >>Makefile.config
echo "mdefs[\"HAVE_PTHREADS_XOPEN\"] = \"$HAVE_PTHREADS_XOPEN\"" >>configure.lua
echo "#undef HAVE_PTHREADS_XOPEN" >$BLD/include/agar/config/have_pthreads_xopen.h
echo "hdefs[\"HAVE_PTHREADS_XOPEN\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_PTHREADS_XOPEN" > ${cache}/ctest-HAVE_PTHREADS_XOPEN
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_PTHREADS_XOPEN
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_PTHREADS_XOPEN}" = "yes" ]; then
echo "PTHREADS_XOPEN_CFLAGS=$PTHREADS_XOPEN_CFLAGS" >>Makefile.config
echo "mdefs[\"PTHREADS_XOPEN_CFLAGS\"] = \"$PTHREADS_XOPEN_CFLAGS\"" >>configure.lua
echo "PTHREADS_XOPEN_LIBS=$PTHREADS_XOPEN_LIBS" >>Makefile.config
echo "mdefs[\"PTHREADS_XOPEN_LIBS\"] = \"$PTHREADS_XOPEN_LIBS\"" >>configure.lua
echo "#ifndef HAVE_PTHREADS_XOPEN" > $BLD/include/agar/config/have_pthreads_xopen.h
echo "#define HAVE_PTHREADS_XOPEN \"$HAVE_PTHREADS_XOPEN\"" >> $BLD/include/agar/config/have_pthreads_xopen.h
echo "#endif" >> $BLD/include/agar/config/have_pthreads_xopen.h
echo "hdefs[\"HAVE_PTHREADS_XOPEN\"] = \"$HAVE_PTHREADS_XOPEN\"" >>configure.lua
echo "#ifndef PTHREADS_XOPEN_CFLAGS" > $BLD/include/agar/config/pthreads_xopen_cflags.h
echo "#define PTHREADS_XOPEN_CFLAGS \"$PTHREADS_XOPEN_CFLAGS\"" >> $BLD/include/agar/config/pthreads_xopen_cflags.h
echo "#endif" >> $BLD/include/agar/config/pthreads_xopen_cflags.h
echo "hdefs[\"PTHREADS_XOPEN_CFLAGS\"] = \"$PTHREADS_XOPEN_CFLAGS\"" >>configure.lua
echo "#ifndef PTHREADS_XOPEN_LIBS" > $BLD/include/agar/config/pthreads_xopen_libs.h
echo "#define PTHREADS_XOPEN_LIBS \"$PTHREADS_XOPEN_LIBS\"" >> $BLD/include/agar/config/pthreads_xopen_libs.h
echo "#endif" >> $BLD/include/agar/config/pthreads_xopen_libs.h
echo "hdefs[\"PTHREADS_XOPEN_LIBS\"] = \"$PTHREADS_XOPEN_LIBS\"" >>configure.lua
else
PTHREADS_XOPEN_LIBS=""
$ECHO_N "checking for the X/Open Threads Extension (common paths)..."
$ECHO_N "checking for the X/Open Threads Extension (common paths)..." >> config.log
if [ -e  "/lib/libpthread.a" ]; then
PTHREADS_XOPEN_LIBS="-L/lib -lpthread"
fi;
if [ -e  "/lib/libpthreadGC1.a" ]; then
PTHREADS_XOPEN_LIBS="-L/lib -lpthreadGC1"
fi;
if [ -e  "/lib/libpthreadGC1d.a" ]; then
PTHREADS_XOPEN_LIBS="-L/lib -lpthreadGC1d"
fi;
if [ -e  "/lib/libpthreadGCE1.a" ]; then
PTHREADS_XOPEN_LIBS="-L/lib -lpthreadGCE1"
fi;
if [ -e  "/lib/libpthreadGCE1d.a" ]; then
PTHREADS_XOPEN_LIBS="-L/lib -lpthreadGCE1d"
fi;
if [ -e  "/lib/libpthreadGC2.a" ]; then
PTHREADS_XOPEN_LIBS="-L/lib -lpthreadGC2"
fi;
if [ -e  "/lib/libpthreadGC2d.a" ]; then
PTHREADS_XOPEN_LIBS="-L/lib -lpthreadGC2d"
fi;
if [ -e  "/lib/libpthreadGCE2.a" ]; then
PTHREADS_XOPEN_LIBS="-L/lib -lpthreadGCE2"
fi;
if [ -e  "/lib/libpthreadGCE2d.a" ]; then
PTHREADS_XOPEN_LIBS="-L/lib -lpthreadGCE2d"
fi;
if [ -e  "/usr/local/lib/libpthread.a" ]; then
PTHREADS_XOPEN_LIBS="-L/usr/local/lib -lpthread"
fi;
if [ -e  "/usr/local/lib/libpthreadGC1.a" ]; then
PTHREADS_XOPEN_LIBS="-L/usr/local/lib -lpthreadGC1"
fi;
if [ -e  "/usr/local/lib/libpthreadGC1d.a" ]; then
PTHREADS_XOPEN_LIBS="-L/usr/local/lib -lpthreadGC1d"
fi;
if [ -e  "/usr/local/lib/libpthreadGCE1.a" ]; then
PTHREADS_XOPEN_LIBS="-L/usr/local/lib -lpthreadGCE1"
fi;
if [ -e  "/usr/local/lib/libpthreadGCE1d.a" ]; then
PTHREADS_XOPEN_LIBS="-L/usr/local/lib -lpthreadGCE1d"
fi;
if [ -e  "/usr/local/lib/libpthreadGC2.a" ]; then
PTHREADS_XOPEN_LIBS="-L/usr/local/lib -lpthreadGC2"
fi;
if [ -e  "/usr/local/lib/libpthreadGC2d.a" ]; then
PTHREADS_XOPEN_LIBS="-L/usr/local/lib -lpthreadGC2d"
fi;
if [ -e  "/usr/local/lib/libpthreadGCE2.a" ]; then
PTHREADS_XOPEN_LIBS="-L/usr/local/lib -lpthreadGCE2"
fi;
if [ -e  "/usr/local/lib/libpthreadGCE2d.a" ]; then
PTHREADS_XOPEN_LIBS="-L/usr/local/lib -lpthreadGCE2d"
fi;
if [ -e  "/lib/pthread.h" ]; then
PTHREADS_CFLAGS="-I/lib"
fi;
if [ -e  "/usr/include/pthreads/pthread.h" ]; then
PTHREADS_CFLAGS="-I/usr/include/pthreads"
fi;
if [ -e  "/usr/local/include/pthread.h" ]; then
PTHREADS_CFLAGS="-I/usr/local/include"
fi;
if [ -e  "/usr/local/include/pthreads/pthread.h" ]; then
PTHREADS_CFLAGS="-I/usr/local/include/pthreads"
fi;
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_PTHREADS_XOPEN" ]; then
		HAVE_PTHREADS_XOPEN=`cat ${cache}/ctest-HAVE_PTHREADS_XOPEN`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_PTHREADS_XOPEN`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <pthread.h>
#include <signal.h>

int main(int argc, char *argv[])
{
	pthread_mutex_t mutex;
	pthread_mutexattr_t mutexattr;
	pthread_mutexattr_settype(&mutexattr, PTHREAD_MUTEX_RECURSIVE);
	pthread_mutex_init(&mutex, &mutexattr);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_XOPEN_CFLAGS} -o $testdir/conftest conftest.c ${PTHREADS_XOPEN_LIBS}" >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_XOPEN_CFLAGS} -o $testdir/conftest conftest.c ${PTHREADS_XOPEN_LIBS} 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_PTHREADS_XOPEN="yes"
echo "HAVE_PTHREADS_XOPEN=$HAVE_PTHREADS_XOPEN" >>Makefile.config
echo "mdefs[\"HAVE_PTHREADS_XOPEN\"] = \"$HAVE_PTHREADS_XOPEN\"" >>configure.lua
echo "#ifndef HAVE_PTHREADS_XOPEN" > $BLD/include/agar/config/have_pthreads_xopen.h
echo "#define HAVE_PTHREADS_XOPEN \"$HAVE_PTHREADS_XOPEN\"" >> $BLD/include/agar/config/have_pthreads_xopen.h
echo "#endif" >> $BLD/include/agar/config/have_pthreads_xopen.h
echo "hdefs[\"HAVE_PTHREADS_XOPEN\"] = \"$HAVE_PTHREADS_XOPEN\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_PTHREADS_XOPEN="no"
echo "HAVE_PTHREADS_XOPEN=$HAVE_PTHREADS_XOPEN" >>Makefile.config
echo "mdefs[\"HAVE_PTHREADS_XOPEN\"] = \"$HAVE_PTHREADS_XOPEN\"" >>configure.lua
echo "#undef HAVE_PTHREADS_XOPEN" >$BLD/include/agar/config/have_pthreads_xopen.h
echo "hdefs[\"HAVE_PTHREADS_XOPEN\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_PTHREADS_XOPEN" > ${cache}/ctest-HAVE_PTHREADS_XOPEN
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_PTHREADS_XOPEN
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_PTHREADS_XOPEN}" = "yes" ]; then
echo "PTHREADS_XOPEN_CFLAGS=$PTHREADS_XOPEN_CFLAGS" >>Makefile.config
echo "mdefs[\"PTHREADS_XOPEN_CFLAGS\"] = \"$PTHREADS_XOPEN_CFLAGS\"" >>configure.lua
echo "PTHREADS_XOPEN_LIBS=$PTHREADS_XOPEN_LIBS" >>Makefile.config
echo "mdefs[\"PTHREADS_XOPEN_LIBS\"] = \"$PTHREADS_XOPEN_LIBS\"" >>configure.lua
echo "#ifndef HAVE_PTHREADS_XOPEN" > $BLD/include/agar/config/have_pthreads_xopen.h
echo "#define HAVE_PTHREADS_XOPEN \"$HAVE_PTHREADS_XOPEN\"" >> $BLD/include/agar/config/have_pthreads_xopen.h
echo "#endif" >> $BLD/include/agar/config/have_pthreads_xopen.h
echo "hdefs[\"HAVE_PTHREADS_XOPEN\"] = \"$HAVE_PTHREADS_XOPEN\"" >>configure.lua
echo "#ifndef PTHREADS_XOPEN_CFLAGS" > $BLD/include/agar/config/pthreads_xopen_cflags.h
echo "#define PTHREADS_XOPEN_CFLAGS \"$PTHREADS_XOPEN_CFLAGS\"" >> $BLD/include/agar/config/pthreads_xopen_cflags.h
echo "#endif" >> $BLD/include/agar/config/pthreads_xopen_cflags.h
echo "hdefs[\"PTHREADS_XOPEN_CFLAGS\"] = \"$PTHREADS_XOPEN_CFLAGS\"" >>configure.lua
echo "#ifndef PTHREADS_XOPEN_LIBS" > $BLD/include/agar/config/pthreads_xopen_libs.h
echo "#define PTHREADS_XOPEN_LIBS \"$PTHREADS_XOPEN_LIBS\"" >> $BLD/include/agar/config/pthreads_xopen_libs.h
echo "#endif" >> $BLD/include/agar/config/pthreads_xopen_libs.h
echo "hdefs[\"PTHREADS_XOPEN_LIBS\"] = \"$PTHREADS_XOPEN_LIBS\"" >>configure.lua
else
echo "#undef HAVE_PTHREADS_XOPEN" >$BLD/include/agar/config/have_pthreads_xopen.h
echo "hdefs[\"HAVE_PTHREADS_XOPEN\"] = nil" >>configure.lua
fi;
fi;
$ECHO_N "checking for PTHREAD_MUTEX_RECURSIVE..."
$ECHO_N "checking for PTHREAD_MUTEX_RECURSIVE..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_PTHREAD_MUTEX_RECURSIVE" ]; then
		HAVE_PTHREAD_MUTEX_RECURSIVE=`cat ${cache}/ctest-HAVE_PTHREAD_MUTEX_RECURSIVE`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_PTHREAD_MUTEX_RECURSIVE`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <pthread.h>
#include <signal.h>
int main(int argc, char *argv[])
{
	pthread_mutex_t mutex;
	pthread_mutexattr_t mutexattr;
	pthread_mutexattr_settype(&mutexattr, PTHREAD_MUTEX_RECURSIVE);
	pthread_mutex_init(&mutex, &mutexattr);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o $testdir/conftest conftest.c ${PTHREADS_LIBS}" >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o $testdir/conftest conftest.c ${PTHREADS_LIBS} 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_PTHREAD_MUTEX_RECURSIVE="yes"
echo "HAVE_PTHREAD_MUTEX_RECURSIVE=$HAVE_PTHREAD_MUTEX_RECURSIVE" >>Makefile.config
echo "mdefs[\"HAVE_PTHREAD_MUTEX_RECURSIVE\"] = \"$HAVE_PTHREAD_MUTEX_RECURSIVE\"" >>configure.lua
echo "#ifndef HAVE_PTHREAD_MUTEX_RECURSIVE" > $BLD/include/agar/config/have_pthread_mutex_recursive.h
echo "#define HAVE_PTHREAD_MUTEX_RECURSIVE \"$HAVE_PTHREAD_MUTEX_RECURSIVE\"" >> $BLD/include/agar/config/have_pthread_mutex_recursive.h
echo "#endif" >> $BLD/include/agar/config/have_pthread_mutex_recursive.h
echo "hdefs[\"HAVE_PTHREAD_MUTEX_RECURSIVE\"] = \"$HAVE_PTHREAD_MUTEX_RECURSIVE\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_PTHREAD_MUTEX_RECURSIVE="no"
echo "HAVE_PTHREAD_MUTEX_RECURSIVE=$HAVE_PTHREAD_MUTEX_RECURSIVE" >>Makefile.config
echo "mdefs[\"HAVE_PTHREAD_MUTEX_RECURSIVE\"] = \"$HAVE_PTHREAD_MUTEX_RECURSIVE\"" >>configure.lua
echo "#undef HAVE_PTHREAD_MUTEX_RECURSIVE" >$BLD/include/agar/config/have_pthread_mutex_recursive.h
echo "hdefs[\"HAVE_PTHREAD_MUTEX_RECURSIVE\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_PTHREAD_MUTEX_RECURSIVE" > ${cache}/ctest-HAVE_PTHREAD_MUTEX_RECURSIVE
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_PTHREAD_MUTEX_RECURSIVE
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_PTHREAD_MUTEX_RECURSIVE}" = "yes" ]; then
echo "#ifndef HAVE_PTHREAD_MUTEX_RECURSIVE" > $BLD/include/agar/config/have_pthread_mutex_recursive.h
echo "#define HAVE_PTHREAD_MUTEX_RECURSIVE \"$HAVE_PTHREAD_MUTEX_RECURSIVE\"" >> $BLD/include/agar/config/have_pthread_mutex_recursive.h
echo "#endif" >> $BLD/include/agar/config/have_pthread_mutex_recursive.h
echo "hdefs[\"HAVE_PTHREAD_MUTEX_RECURSIVE\"] = \"$HAVE_PTHREAD_MUTEX_RECURSIVE\"" >>configure.lua
else
echo "#undef HAVE_PTHREAD_MUTEX_RECURSIVE" >$BLD/include/agar/config/have_pthread_mutex_recursive.h
echo "hdefs[\"HAVE_PTHREAD_MUTEX_RECURSIVE\"] = nil" >>configure.lua
fi;
$ECHO_N "checking for PTHREAD_MUTEX_RECURSIVE_NP..."
$ECHO_N "checking for PTHREAD_MUTEX_RECURSIVE_NP..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_PTHREAD_MUTEX_RECURSIVE_NP" ]; then
		HAVE_PTHREAD_MUTEX_RECURSIVE_NP=`cat ${cache}/ctest-HAVE_PTHREAD_MUTEX_RECURSIVE_NP`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_PTHREAD_MUTEX_RECURSIVE_NP`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <pthread.h>
#include <signal.h>
int main(int argc, char *argv[])
{
	pthread_mutex_t mutex;
	pthread_mutexattr_t mutexattr;
	pthread_mutexattr_settype(&mutexattr, PTHREAD_MUTEX_RECURSIVE_NP);
	pthread_mutex_init(&mutex, &mutexattr);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o $testdir/conftest conftest.c ${PTHREADS_LIBS}" >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${PTHREADS_CFLAGS} -o $testdir/conftest conftest.c ${PTHREADS_LIBS} 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_PTHREAD_MUTEX_RECURSIVE_NP="yes"
echo "HAVE_PTHREAD_MUTEX_RECURSIVE_NP=$HAVE_PTHREAD_MUTEX_RECURSIVE_NP" >>Makefile.config
echo "mdefs[\"HAVE_PTHREAD_MUTEX_RECURSIVE_NP\"] = \"$HAVE_PTHREAD_MUTEX_RECURSIVE_NP\"" >>configure.lua
echo "#ifndef HAVE_PTHREAD_MUTEX_RECURSIVE_NP" > $BLD/include/agar/config/have_pthread_mutex_recursive_np.h
echo "#define HAVE_PTHREAD_MUTEX_RECURSIVE_NP \"$HAVE_PTHREAD_MUTEX_RECURSIVE_NP\"" >> $BLD/include/agar/config/have_pthread_mutex_recursive_np.h
echo "#endif" >> $BLD/include/agar/config/have_pthread_mutex_recursive_np.h
echo "hdefs[\"HAVE_PTHREAD_MUTEX_RECURSIVE_NP\"] = \"$HAVE_PTHREAD_MUTEX_RECURSIVE_NP\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_PTHREAD_MUTEX_RECURSIVE_NP="no"
echo "HAVE_PTHREAD_MUTEX_RECURSIVE_NP=$HAVE_PTHREAD_MUTEX_RECURSIVE_NP" >>Makefile.config
echo "mdefs[\"HAVE_PTHREAD_MUTEX_RECURSIVE_NP\"] = \"$HAVE_PTHREAD_MUTEX_RECURSIVE_NP\"" >>configure.lua
echo "#undef HAVE_PTHREAD_MUTEX_RECURSIVE_NP" >$BLD/include/agar/config/have_pthread_mutex_recursive_np.h
echo "hdefs[\"HAVE_PTHREAD_MUTEX_RECURSIVE_NP\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_PTHREAD_MUTEX_RECURSIVE_NP" > ${cache}/ctest-HAVE_PTHREAD_MUTEX_RECURSIVE_NP
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_PTHREAD_MUTEX_RECURSIVE_NP
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_PTHREAD_MUTEX_RECURSIVE_NP}" = "yes" ]; then
echo "#ifndef HAVE_PTHREAD_MUTEX_RECURSIVE_NP" > $BLD/include/agar/config/have_pthread_mutex_recursive_np.h
echo "#define HAVE_PTHREAD_MUTEX_RECURSIVE_NP \"$HAVE_PTHREAD_MUTEX_RECURSIVE_NP\"" >> $BLD/include/agar/config/have_pthread_mutex_recursive_np.h
echo "#endif" >> $BLD/include/agar/config/have_pthread_mutex_recursive_np.h
echo "hdefs[\"HAVE_PTHREAD_MUTEX_RECURSIVE_NP\"] = \"$HAVE_PTHREAD_MUTEX_RECURSIVE_NP\"" >>configure.lua
else
echo "#undef HAVE_PTHREAD_MUTEX_RECURSIVE_NP" >$BLD/include/agar/config/have_pthread_mutex_recursive_np.h
echo "hdefs[\"HAVE_PTHREAD_MUTEX_RECURSIVE_NP\"] = nil" >>configure.lua
fi;
	if [ "${HAVE_PTHREADS}" = "yes" ]
	then
AG_THREADS="yes"
echo "#ifndef AG_THREADS" > $BLD/include/agar/config/ag_threads.h
echo "#define AG_THREADS \"$AG_THREADS\"" >> $BLD/include/agar/config/ag_threads.h
echo "#endif" >> $BLD/include/agar/config/ag_threads.h
echo "hdefs[\"AG_THREADS\"] = \"$AG_THREADS\"" >>configure.lua
		if [ "${HAVE_PTHREADS_XOPEN}" = "no" ]
 then
		if [ "${HAVE_PTHREAD_MUTEX_RECURSIVE}" = "no" ]
 then
		if [ "${HAVE_PTHREAD_MUTEX_RECURSIVE_NP}" = "no" ]
 then
echo "#undef AG_THREADS" >$BLD/include/agar/config/ag_threads.h
echo "hdefs[\"AG_THREADS\"] = nil" >>configure.lua
			if [ "${enable_threads}" = "yes" ]
 then
				echo "*"
				echo "* --enable-threads was given, but your"
				echo "* pthreads library seems to lack support"
				echo "* for recursive mutexes."
				echo "*"
				exit 1
			fi
		fi
		fi
		fi
	else
echo "#undef AG_THREADS" >$BLD/include/agar/config/ag_threads.h
echo "hdefs[\"AG_THREADS\"] = nil" >>configure.lua
		if [ "${enable_threads}" = "yes" ]
 then
			echo "*"
			echo "* --enable-threads was given, but no pthreads"
			echo "* library was found on your system."
			echo "*"
			exit 1
		fi
	fi
else
echo "#undef AG_THREADS" >$BLD/include/agar/config/ag_threads.h
echo "hdefs[\"AG_THREADS\"] = nil" >>configure.lua
echo "#undef HAVE_PTHREADS" >$BLD/include/agar/config/have_pthreads.h
echo "hdefs[\"HAVE_PTHREADS\"] = nil" >>configure.lua
echo "#undef HAVE_PTHREADS_XOPEN" >$BLD/include/agar/config/have_pthreads_xopen.h
echo "hdefs[\"HAVE_PTHREADS_XOPEN\"] = nil" >>configure.lua
PTHREADS_CFLAGS=""
echo "PTHREADS_CFLAGS=$PTHREADS_CFLAGS" >>Makefile.config
echo "mdefs[\"PTHREADS_CFLAGS\"] = \"$PTHREADS_CFLAGS\"" >>configure.lua
PTHREADS_LIBS=""
echo "PTHREADS_LIBS=$PTHREADS_LIBS" >>Makefile.config
echo "mdefs[\"PTHREADS_LIBS\"] = \"$PTHREADS_LIBS\"" >>configure.lua
PTHREADS_XOPEN_CFLAGS=""
echo "PTHREADS_XOPEN_CFLAGS=$PTHREADS_XOPEN_CFLAGS" >>Makefile.config
echo "mdefs[\"PTHREADS_XOPEN_CFLAGS\"] = \"$PTHREADS_XOPEN_CFLAGS\"" >>configure.lua
PTHREADS_XOPEN_LIBS=""
echo "PTHREADS_XOPEN_LIBS=$PTHREADS_XOPEN_LIBS" >>Makefile.config
echo "mdefs[\"PTHREADS_XOPEN_LIBS\"] = \"$PTHREADS_XOPEN_LIBS\"" >>configure.lua
	if [ "${enable_warnings}" = "yes" ]
 then
CFLAGS="$CFLAGS -Wno-unused"
CXXFLAGS="$CXXFLAGS -Wno-unused"
echo "CFLAGS=$CFLAGS" >>Makefile.config
echo "mdefs[\"CFLAGS\"] = \"$CFLAGS\"" >>configure.lua
echo "CXXFLAGS=$CXXFLAGS" >>Makefile.config
echo "mdefs[\"CXXFLAGS\"] = \"$CXXFLAGS\"" >>configure.lua
	fi
fi
echo "#undef ASTRONOMICAL_UNITS" >$BLD/include/agar/config/astronomical_units.h
echo "hdefs[\"ASTRONOMICAL_UNITS\"] = nil" >>configure.lua
HISTORICAL_UNITS="yes"
echo "#ifndef HISTORICAL_UNITS" > $BLD/include/agar/config/historical_units.h
echo "#define HISTORICAL_UNITS \"$HISTORICAL_UNITS\"" >> $BLD/include/agar/config/historical_units.h
echo "#endif" >> $BLD/include/agar/config/historical_units.h
echo "hdefs[\"HISTORICAL_UNITS\"] = \"$HISTORICAL_UNITS\"" >>configure.lua
if [ "${enable_nls}" = "yes" ]
 then
$ECHO_N "checking for a gettext library..."
$ECHO_N "checking for a gettext library..." >> config.log
GETTEXT_CFLAGS=""
GETTEXT_LIBS=""
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_GETTEXT" ]; then
		HAVE_GETTEXT=`cat ${cache}/ctest-HAVE_GETTEXT`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_GETTEXT`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <libintl.h>
int main(int argc, char *argv[])
{
	char *s;
	bindtextdomain("foo", "/foo");
	textdomain("foo");
	s = gettext("string");
	s = dgettext("foo","string");
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${GETTEXT_CFLAGS} -o $testdir/conftest conftest.c ${GETTEXT_LIBS}" >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${GETTEXT_CFLAGS} -o $testdir/conftest conftest.c ${GETTEXT_LIBS} 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_GETTEXT="yes"
echo "HAVE_GETTEXT=$HAVE_GETTEXT" >>Makefile.config
echo "mdefs[\"HAVE_GETTEXT\"] = \"$HAVE_GETTEXT\"" >>configure.lua
echo "#ifndef HAVE_GETTEXT" > $BLD/include/agar/config/have_gettext.h
echo "#define HAVE_GETTEXT \"$HAVE_GETTEXT\"" >> $BLD/include/agar/config/have_gettext.h
echo "#endif" >> $BLD/include/agar/config/have_gettext.h
echo "hdefs[\"HAVE_GETTEXT\"] = \"$HAVE_GETTEXT\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_GETTEXT="no"
echo "HAVE_GETTEXT=$HAVE_GETTEXT" >>Makefile.config
echo "mdefs[\"HAVE_GETTEXT\"] = \"$HAVE_GETTEXT\"" >>configure.lua
echo "#undef HAVE_GETTEXT" >$BLD/include/agar/config/have_gettext.h
echo "hdefs[\"HAVE_GETTEXT\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_GETTEXT" > ${cache}/ctest-HAVE_GETTEXT
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_GETTEXT
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_GETTEXT}" = "no" ]; then
$ECHO_N "checking whether gettext requires -lintl..."
$ECHO_N "checking whether gettext requires -lintl..." >> config.log
if [ "${prefix_gettext}" != "" ]; then
if [ -e  "${prefix_gettext}/include/libintl.h" ]; then
GETTEXT_CFLAGS="-I${prefix_gettext}/include"
GETTEXT_LIBS="-L${prefix_gettext}/lib -lintl"
fi;
else
if [ -e  "${prefix_gettext}/include/libintl.h" ]; then
GETTEXT_CFLAGS="-I${prefix_gettext}/include"
GETTEXT_LIBS="-L${prefix_gettext}/lib -lintl"
fi;
if [ -e  "/usr/include/libintl.h" ]; then
GETTEXT_CFLAGS="-I/usr/include"
GETTEXT_LIBS="-L/usr/lib -lintl"
fi;
if [ -e  "/usr/local/include/libintl.h" ]; then
GETTEXT_CFLAGS="-I/usr/local/include"
GETTEXT_LIBS="-L/usr/local/lib -lintl"
fi;
if [ -e  "/opt/include/libintl.h" ]; then
GETTEXT_CFLAGS="-I/opt/include"
GETTEXT_LIBS="-L/opt/lib -lintl"
fi;
if [ -e  "/opt/local/include/libintl.h" ]; then
GETTEXT_CFLAGS="-I/opt/local/include"
GETTEXT_LIBS="-L/opt/local/lib -lintl"
fi;
fi;
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_GETTEXT" ]; then
		HAVE_GETTEXT=`cat ${cache}/ctest-HAVE_GETTEXT`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_GETTEXT`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <libintl.h>
int main(int argc, char *argv[])
{
	char *s;
	bindtextdomain("foo", "/foo");
	textdomain("foo");
	s = gettext("string");
	s = dgettext("foo","string");
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${GETTEXT_CFLAGS} -o $testdir/conftest conftest.c ${GETTEXT_LIBS}" >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${GETTEXT_CFLAGS} -o $testdir/conftest conftest.c ${GETTEXT_LIBS} 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_GETTEXT="yes"
echo "HAVE_GETTEXT=$HAVE_GETTEXT" >>Makefile.config
echo "mdefs[\"HAVE_GETTEXT\"] = \"$HAVE_GETTEXT\"" >>configure.lua
echo "#ifndef HAVE_GETTEXT" > $BLD/include/agar/config/have_gettext.h
echo "#define HAVE_GETTEXT \"$HAVE_GETTEXT\"" >> $BLD/include/agar/config/have_gettext.h
echo "#endif" >> $BLD/include/agar/config/have_gettext.h
echo "hdefs[\"HAVE_GETTEXT\"] = \"$HAVE_GETTEXT\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_GETTEXT="no"
echo "HAVE_GETTEXT=$HAVE_GETTEXT" >>Makefile.config
echo "mdefs[\"HAVE_GETTEXT\"] = \"$HAVE_GETTEXT\"" >>configure.lua
echo "#undef HAVE_GETTEXT" >$BLD/include/agar/config/have_gettext.h
echo "hdefs[\"HAVE_GETTEXT\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_GETTEXT" > ${cache}/ctest-HAVE_GETTEXT
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_GETTEXT
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_GETTEXT}" = "yes" ]; then
echo "GETTEXT_CFLAGS=$GETTEXT_CFLAGS" >>Makefile.config
echo "mdefs[\"GETTEXT_CFLAGS\"] = \"$GETTEXT_CFLAGS\"" >>configure.lua
echo "#ifndef GETTEXT_CFLAGS" > $BLD/include/agar/config/gettext_cflags.h
echo "#define GETTEXT_CFLAGS \"$GETTEXT_CFLAGS\"" >> $BLD/include/agar/config/gettext_cflags.h
echo "#endif" >> $BLD/include/agar/config/gettext_cflags.h
echo "hdefs[\"GETTEXT_CFLAGS\"] = \"$GETTEXT_CFLAGS\"" >>configure.lua
echo "GETTEXT_LIBS=$GETTEXT_LIBS" >>Makefile.config
echo "mdefs[\"GETTEXT_LIBS\"] = \"$GETTEXT_LIBS\"" >>configure.lua
echo "#ifndef GETTEXT_LIBS" > $BLD/include/agar/config/gettext_libs.h
echo "#define GETTEXT_LIBS \"$GETTEXT_LIBS\"" >> $BLD/include/agar/config/gettext_libs.h
echo "#endif" >> $BLD/include/agar/config/gettext_libs.h
echo "hdefs[\"GETTEXT_LIBS\"] = \"$GETTEXT_LIBS\"" >>configure.lua
else
$ECHO_N "checking whether -lintl requires -liconv..."
$ECHO_N "checking whether -lintl requires -liconv..." >> config.log
if [ "${prefix_gettext}" != "" ]; then
if [ -e  "${prefix_gettext}/include/iconv.h" ]; then
GETTEXT_CFLAGS="${GETTEXT_CFLAGS} -I${prefix_gettext}/include"
GETTEXT_LIBS="${GETTEXT_LIBS} -L${prefix_gettext}/lib -liconv"
fi;
else
if [ -e  "${prefix_gettext}/include/iconv.h" ]; then
GETTEXT_CFLAGS="${GETTEXT_CFLAGS} -I${prefix_gettext}/include"
GETTEXT_LIBS="${GETTEXT_LIBS} -L${prefix_gettext}/lib -liconv"
fi;
if [ -e  "/usr/include/iconv.h" ]; then
GETTEXT_CFLAGS="${GETTEXT_CFLAGS} -I/usr/include"
GETTEXT_LIBS="${GETTEXT_LIBS} -L/usr/lib -liconv"
fi;
if [ -e  "/usr/local/include/iconv.h" ]; then
GETTEXT_CFLAGS="${GETTEXT_CFLAGS} -I/usr/local/include"
GETTEXT_LIBS="${GETTEXT_LIBS} -L/usr/local/lib -liconv"
fi;
if [ -e  "/opt/include/iconv.h" ]; then
GETTEXT_CFLAGS="${GETTEXT_CFLAGS} -I/opt/include"
GETTEXT_LIBS="${GETTEXT_LIBS} -L/opt/lib -liconv"
fi;
if [ -e  "/opt/local/include/iconv.h" ]; then
GETTEXT_CFLAGS="${GETTEXT_CFLAGS} -I/opt/local/include"
GETTEXT_LIBS="${GETTEXT_LIBS} -L/opt/local/lib -liconv"
fi;
fi;
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_GETTEXT" ]; then
		HAVE_GETTEXT=`cat ${cache}/ctest-HAVE_GETTEXT`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_GETTEXT`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <libintl.h>
int main(int argc, char *argv[])
{
	char *s;
	bindtextdomain("foo", "/foo");
	textdomain("foo");
	s = gettext("string");
	s = dgettext("foo","string");
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${GETTEXT_CFLAGS} -o $testdir/conftest conftest.c ${GETTEXT_LIBS}" >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${GETTEXT_CFLAGS} -o $testdir/conftest conftest.c ${GETTEXT_LIBS} 2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_GETTEXT="yes"
echo "HAVE_GETTEXT=$HAVE_GETTEXT" >>Makefile.config
echo "mdefs[\"HAVE_GETTEXT\"] = \"$HAVE_GETTEXT\"" >>configure.lua
echo "#ifndef HAVE_GETTEXT" > $BLD/include/agar/config/have_gettext.h
echo "#define HAVE_GETTEXT \"$HAVE_GETTEXT\"" >> $BLD/include/agar/config/have_gettext.h
echo "#endif" >> $BLD/include/agar/config/have_gettext.h
echo "hdefs[\"HAVE_GETTEXT\"] = \"$HAVE_GETTEXT\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_GETTEXT="no"
echo "HAVE_GETTEXT=$HAVE_GETTEXT" >>Makefile.config
echo "mdefs[\"HAVE_GETTEXT\"] = \"$HAVE_GETTEXT\"" >>configure.lua
echo "#undef HAVE_GETTEXT" >$BLD/include/agar/config/have_gettext.h
echo "hdefs[\"HAVE_GETTEXT\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_GETTEXT" > ${cache}/ctest-HAVE_GETTEXT
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_GETTEXT
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_GETTEXT}" = "yes" ]; then
echo "GETTEXT_CFLAGS=$GETTEXT_CFLAGS" >>Makefile.config
echo "mdefs[\"GETTEXT_CFLAGS\"] = \"$GETTEXT_CFLAGS\"" >>configure.lua
echo "#ifndef GETTEXT_CFLAGS" > $BLD/include/agar/config/gettext_cflags.h
echo "#define GETTEXT_CFLAGS \"$GETTEXT_CFLAGS\"" >> $BLD/include/agar/config/gettext_cflags.h
echo "#endif" >> $BLD/include/agar/config/gettext_cflags.h
echo "hdefs[\"GETTEXT_CFLAGS\"] = \"$GETTEXT_CFLAGS\"" >>configure.lua
echo "GETTEXT_LIBS=$GETTEXT_LIBS" >>Makefile.config
echo "mdefs[\"GETTEXT_LIBS\"] = \"$GETTEXT_LIBS\"" >>configure.lua
echo "#ifndef GETTEXT_LIBS" > $BLD/include/agar/config/gettext_libs.h
echo "#define GETTEXT_LIBS \"$GETTEXT_LIBS\"" >> $BLD/include/agar/config/gettext_libs.h
echo "#endif" >> $BLD/include/agar/config/gettext_libs.h
echo "hdefs[\"GETTEXT_LIBS\"] = \"$GETTEXT_LIBS\"" >>configure.lua
else
echo "#undef GETTEXT_CFLAGS" >$BLD/include/agar/config/gettext_cflags.h
echo "hdefs[\"GETTEXT_CFLAGS\"] = nil" >>configure.lua
GETTEXT_CFLAGS=""
echo "#undef GETTEXT_LIBS" >$BLD/include/agar/config/gettext_libs.h
echo "hdefs[\"GETTEXT_LIBS\"] = nil" >>configure.lua
GETTEXT_LIBS=""
fi;
fi;
else
echo "#undef GETTEXT_CFLAGS" >$BLD/include/agar/config/gettext_cflags.h
echo "hdefs[\"GETTEXT_CFLAGS\"] = nil" >>configure.lua
echo "#undef GETTEXT_LIBS" >$BLD/include/agar/config/gettext_libs.h
echo "hdefs[\"GETTEXT_LIBS\"] = nil" >>configure.lua
fi;
	if [ "${HAVE_GETTEXT}" != "yes" ]
 then
		echo "*"
		echo "* --enable-nls was given but gettext was not found."
		echo "*"
		exit 1
	fi
fi
if [ "${enable_math}" != "no" ]
 then
ENABLE_MATH="yes"
echo "#ifndef ENABLE_MATH" > $BLD/include/agar/config/enable_math.h
echo "#define ENABLE_MATH \"$ENABLE_MATH\"" >> $BLD/include/agar/config/enable_math.h
echo "#endif" >> $BLD/include/agar/config/enable_math.h
echo "hdefs[\"ENABLE_MATH\"] = \"$ENABLE_MATH\"" >>configure.lua
SUBDIR_math="math"
echo "SUBDIR_math=$SUBDIR_math" >>Makefile.config
echo "mdefs[\"SUBDIR_math\"] = \"$SUBDIR_math\"" >>configure.lua
else
echo "#undef ENABLE_MATH" >$BLD/include/agar/config/enable_math.h
echo "hdefs[\"ENABLE_MATH\"] = nil" >>configure.lua
SUBDIR_math=""
echo "SUBDIR_math=$SUBDIR_math" >>Makefile.config
echo "mdefs[\"SUBDIR_math\"] = \"$SUBDIR_math\"" >>configure.lua
fi
if [ "${with_sse}" = "yes" ]
 then
$ECHO_N "checking for SSE extensions..."
$ECHO_N "checking for SSE extensions..." >> config.log
SSE_CFLAGS="-msse"
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
MK_RUN_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_SSE" ]; then
		HAVE_SSE=`cat ${cache}/ctest-HAVE_SSE`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_SSE`
		MK_RUN_STATUS=`cat ${cache}/ctest-runstatus-HAVE_SSE`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <xmmintrin.h>
#include <stdio.h>

#define MAXERR 1e-4

typedef union vec {
	float v[4];
	__m128 m128;
	struct { float x, y, z, pad; };
} Vector __attribute__ ((aligned(16)));

const float testVals[4][7] = {
	{ 0.076003,0.559770,0.163680, 1.0,	0.076003,0.559770,0.163680 },
	{ 0.076003,0.559770,0.163680, 0.20485,	0.015569,0.114667,0.033529 },
	{ 0.668390,0.929890,0.382710, 1.0,	0.668390,0.929890,0.382710 },
	{ 0.668390,0.929890,0.382710, 0.95831,	0.640530,0.891120,0.366760 },
};

static Vector
Scale(Vector a, float c)
{
	Vector b;
	__m128 v;

	v = _mm_set1_ps(c);
	b.m128 = _mm_mul_ps(a.m128, v);
	return (b);
}

int
main(int argc, char *argv[])
{
	Vector a, b;
	float dx, dy, dz;
	int i, j;

	for (i = 0; i < 10000; i++) {
		for (j = 0; j < 4; j++) {
			a.x = testVals[j][0];
			a.y = testVals[j][1];
			a.z = testVals[j][2];
			b = Scale(a, testVals[j][3]);
			dx = b.x - testVals[j][4];
			dy = b.y - testVals[j][5];
			dz = b.z - testVals[j][6];
			if ((dx > 0.0 && dx >  MAXERR) ||
			    (dx < 0.0 && dx < -MAXERR) ||
			    (dy > 0.0 && dy >  MAXERR) ||
			    (dy < 0.0 && dz < -MAXERR) ||
			    (dz > 0.0 && dz >  MAXERR) ||
			    (dz < 0.0 && dz < -MAXERR)) {
				printf("results inaccurate [%f,%f,%f]\n",
				    dx, dy, dz);
				return (1);
			}
		}
	}
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} ${SSE_CFLAGS} -o $testdir/conftest conftest.c " >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} ${SSE_CFLAGS} -o $testdir/conftest conftest.c  2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
(cd $testdir && ./conftest$EXECSUFFIX) >> config.log
if [ "$?" = "0" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_SSE="yes"
echo "HAVE_SSE=$HAVE_SSE" >>Makefile.config
echo "mdefs[\"HAVE_SSE\"] = \"$HAVE_SSE\"" >>configure.lua
echo "#ifndef HAVE_SSE" > $BLD/include/agar/config/have_sse.h
echo "#define HAVE_SSE \"$HAVE_SSE\"" >> $BLD/include/agar/config/have_sse.h
echo "#endif" >> $BLD/include/agar/config/have_sse.h
echo "hdefs[\"HAVE_SSE\"] = \"$HAVE_SSE\"" >>configure.lua
else
echo "no (test program failed)"
echo "no (test program failed)" >> config.log
MK_RUN_STATUS="FAIL(\$?)"
HAVE_SSE="no"
echo "HAVE_SSE=$HAVE_SSE" >>Makefile.config
echo "mdefs[\"HAVE_SSE\"] = \"$HAVE_SSE\"" >>configure.lua
echo "#undef HAVE_SSE" >$BLD/include/agar/config/have_sse.h
echo "hdefs[\"HAVE_SSE\"] = nil" >>configure.lua
fi;
else
echo "no (compilation failed)"
echo "no (compilation failed)" >> config.log
MK_RUN_STATUS="FAIL(\$?)"
HAVE_SSE="no"
echo "HAVE_SSE=$HAVE_SSE" >>Makefile.config
echo "mdefs[\"HAVE_SSE\"] = \"$HAVE_SSE\"" >>configure.lua
echo "#undef HAVE_SSE" >$BLD/include/agar/config/have_sse.h
echo "hdefs[\"HAVE_SSE\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_SSE" > ${cache}/ctest-HAVE_SSE
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_SSE
	echo $MK_RUN_STATUS > ${cache}/ctest-runstatus-HAVE_SSE
fi
rm -f conftest.c $testdir/conftest
if [ "${HAVE_SSE}" = "yes" ]; then
echo "#ifndef SSE_CFLAGS" > $BLD/include/agar/config/sse_cflags.h
echo "#define SSE_CFLAGS \"$SSE_CFLAGS\"" >> $BLD/include/agar/config/sse_cflags.h
echo "#endif" >> $BLD/include/agar/config/sse_cflags.h
echo "hdefs[\"SSE_CFLAGS\"] = \"$SSE_CFLAGS\"" >>configure.lua
else
echo "#undef SSE_CFLAGS" >$BLD/include/agar/config/sse_cflags.h
echo "hdefs[\"SSE_CFLAGS\"] = nil" >>configure.lua
SSE_CFLAGS=""
fi;
echo "SSE_CFLAGS=$SSE_CFLAGS" >>Makefile.config
echo "mdefs[\"SSE_CFLAGS\"] = \"$SSE_CFLAGS\"" >>configure.lua
$ECHO_N "checking for SSE2 extensions..."
$ECHO_N "checking for SSE2 extensions..." >> config.log
SSE2_CFLAGS="-msse2"
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
MK_RUN_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_SSE2" ]; then
		HAVE_SSE2=`cat ${cache}/ctest-HAVE_SSE2`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_SSE2`
		MK_RUN_STATUS=`cat ${cache}/ctest-runstatus-HAVE_SSE2`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <emmintrin.h>

int
main(int argc, char *argv[])
{
	double a[4] __attribute__ ((aligned(16)));
	double b[4] __attribute__ ((aligned(16)));
	double rv;
	__m128d vec1, vec2;

	vec1 = _mm_load_pd(a);
	vec2 = _mm_load_pd(b);
	vec1 = _mm_xor_pd(vec1, vec2);
	_mm_store_sd(&rv, vec1);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} ${SSE2_CFLAGS} -o $testdir/conftest conftest.c " >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} ${SSE2_CFLAGS} -o $testdir/conftest conftest.c  2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
(cd $testdir && ./conftest$EXECSUFFIX) >> config.log
if [ "$?" = "0" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_SSE2="yes"
echo "HAVE_SSE2=$HAVE_SSE2" >>Makefile.config
echo "mdefs[\"HAVE_SSE2\"] = \"$HAVE_SSE2\"" >>configure.lua
echo "#ifndef HAVE_SSE2" > $BLD/include/agar/config/have_sse2.h
echo "#define HAVE_SSE2 \"$HAVE_SSE2\"" >> $BLD/include/agar/config/have_sse2.h
echo "#endif" >> $BLD/include/agar/config/have_sse2.h
echo "hdefs[\"HAVE_SSE2\"] = \"$HAVE_SSE2\"" >>configure.lua
else
echo "no (test program failed)"
echo "no (test program failed)" >> config.log
MK_RUN_STATUS="FAIL(\$?)"
HAVE_SSE2="no"
echo "HAVE_SSE2=$HAVE_SSE2" >>Makefile.config
echo "mdefs[\"HAVE_SSE2\"] = \"$HAVE_SSE2\"" >>configure.lua
echo "#undef HAVE_SSE2" >$BLD/include/agar/config/have_sse2.h
echo "hdefs[\"HAVE_SSE2\"] = nil" >>configure.lua
fi;
else
echo "no (compilation failed)"
echo "no (compilation failed)" >> config.log
MK_RUN_STATUS="FAIL(\$?)"
HAVE_SSE2="no"
echo "HAVE_SSE2=$HAVE_SSE2" >>Makefile.config
echo "mdefs[\"HAVE_SSE2\"] = \"$HAVE_SSE2\"" >>configure.lua
echo "#undef HAVE_SSE2" >$BLD/include/agar/config/have_sse2.h
echo "hdefs[\"HAVE_SSE2\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_SSE2" > ${cache}/ctest-HAVE_SSE2
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_SSE2
	echo $MK_RUN_STATUS > ${cache}/ctest-runstatus-HAVE_SSE2
fi
rm -f conftest.c $testdir/conftest
if [ "${HAVE_SSE2}" = "yes" ]; then
echo "#ifndef SSE2_CFLAGS" > $BLD/include/agar/config/sse2_cflags.h
echo "#define SSE2_CFLAGS \"$SSE2_CFLAGS\"" >> $BLD/include/agar/config/sse2_cflags.h
echo "#endif" >> $BLD/include/agar/config/sse2_cflags.h
echo "hdefs[\"SSE2_CFLAGS\"] = \"$SSE2_CFLAGS\"" >>configure.lua
else
echo "#undef SSE2_CFLAGS" >$BLD/include/agar/config/sse2_cflags.h
echo "hdefs[\"SSE2_CFLAGS\"] = nil" >>configure.lua
SSE2_CFLAGS=""
fi;
echo "SSE2_CFLAGS=$SSE2_CFLAGS" >>Makefile.config
echo "mdefs[\"SSE2_CFLAGS\"] = \"$SSE2_CFLAGS\"" >>configure.lua
$ECHO_N "checking for SSE3 extensions..."
$ECHO_N "checking for SSE3 extensions..." >> config.log
SSE3_CFLAGS="-msse3"
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
MK_RUN_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_SSE3" ]; then
		HAVE_SSE3=`cat ${cache}/ctest-HAVE_SSE3`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_SSE3`
		MK_RUN_STATUS=`cat ${cache}/ctest-runstatus-HAVE_SSE3`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <pmmintrin.h>

int
main(int argc, char *argv[])
{
	float a[4] __attribute__ ((aligned(16)));
	float b[4] __attribute__ ((aligned(16)));
	__m128 vec1, vec2;
	float rv;

	vec1 = _mm_load_ps(a);
	vec2 = _mm_load_ps(b);
	vec1 = _mm_mul_ps(vec1, vec2);
	vec1 = _mm_hadd_ps(vec1, vec1);
	vec1 = _mm_hadd_ps(vec1, vec1);
	_mm_store_ss(&rv, vec1);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} ${SSE3_CFLAGS} -o $testdir/conftest conftest.c " >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} ${SSE3_CFLAGS} -o $testdir/conftest conftest.c  2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
(cd $testdir && ./conftest$EXECSUFFIX) >> config.log
if [ "$?" = "0" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_SSE3="yes"
echo "HAVE_SSE3=$HAVE_SSE3" >>Makefile.config
echo "mdefs[\"HAVE_SSE3\"] = \"$HAVE_SSE3\"" >>configure.lua
echo "#ifndef HAVE_SSE3" > $BLD/include/agar/config/have_sse3.h
echo "#define HAVE_SSE3 \"$HAVE_SSE3\"" >> $BLD/include/agar/config/have_sse3.h
echo "#endif" >> $BLD/include/agar/config/have_sse3.h
echo "hdefs[\"HAVE_SSE3\"] = \"$HAVE_SSE3\"" >>configure.lua
else
echo "no (test program failed)"
echo "no (test program failed)" >> config.log
MK_RUN_STATUS="FAIL(\$?)"
HAVE_SSE3="no"
echo "HAVE_SSE3=$HAVE_SSE3" >>Makefile.config
echo "mdefs[\"HAVE_SSE3\"] = \"$HAVE_SSE3\"" >>configure.lua
echo "#undef HAVE_SSE3" >$BLD/include/agar/config/have_sse3.h
echo "hdefs[\"HAVE_SSE3\"] = nil" >>configure.lua
fi;
else
echo "no (compilation failed)"
echo "no (compilation failed)" >> config.log
MK_RUN_STATUS="FAIL(\$?)"
HAVE_SSE3="no"
echo "HAVE_SSE3=$HAVE_SSE3" >>Makefile.config
echo "mdefs[\"HAVE_SSE3\"] = \"$HAVE_SSE3\"" >>configure.lua
echo "#undef HAVE_SSE3" >$BLD/include/agar/config/have_sse3.h
echo "hdefs[\"HAVE_SSE3\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_SSE3" > ${cache}/ctest-HAVE_SSE3
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_SSE3
	echo $MK_RUN_STATUS > ${cache}/ctest-runstatus-HAVE_SSE3
fi
rm -f conftest.c $testdir/conftest
if [ "${HAVE_SSE3}" = "yes" ]; then
echo "#ifndef SSE3_CFLAGS" > $BLD/include/agar/config/sse3_cflags.h
echo "#define SSE3_CFLAGS \"$SSE3_CFLAGS\"" >> $BLD/include/agar/config/sse3_cflags.h
echo "#endif" >> $BLD/include/agar/config/sse3_cflags.h
echo "hdefs[\"SSE3_CFLAGS\"] = \"$SSE3_CFLAGS\"" >>configure.lua
else
echo "#undef SSE3_CFLAGS" >$BLD/include/agar/config/sse3_cflags.h
echo "hdefs[\"SSE3_CFLAGS\"] = nil" >>configure.lua
SSE3_CFLAGS=""
fi;
echo "SSE3_CFLAGS=$SSE3_CFLAGS" >>Makefile.config
echo "mdefs[\"SSE3_CFLAGS\"] = \"$SSE3_CFLAGS\"" >>configure.lua
	if [ "${HAVE_SSE}" != "yes" ]
 then
		if [ "${with_sse}" = "yes" ]
 then
			echo "*"
			echo "* --with-sse was requested, but SSE "
			echo "* intrinsics not supported by compiler"
			echo "*"
			exit 1
		else
echo "#undef HAVE_SSE" >$BLD/include/agar/config/have_sse.h
echo "hdefs[\"HAVE_SSE\"] = nil" >>configure.lua
echo "#undef INLINE_SSE" >$BLD/include/agar/config/inline_sse.h
echo "hdefs[\"INLINE_SSE\"] = nil" >>configure.lua
echo "#undef INLINE_SSE2" >$BLD/include/agar/config/inline_sse2.h
echo "hdefs[\"INLINE_SSE2\"] = nil" >>configure.lua
echo "#undef INLINE_SSE3" >$BLD/include/agar/config/inline_sse3.h
echo "hdefs[\"INLINE_SSE3\"] = nil" >>configure.lua
		fi
	else
		if [ "${with_sse_inline}" = "yes" ]
 then
INLINE_SSE="yes"
echo "#ifndef INLINE_SSE" > $BLD/include/agar/config/inline_sse.h
echo "#define INLINE_SSE \"$INLINE_SSE\"" >> $BLD/include/agar/config/inline_sse.h
echo "#endif" >> $BLD/include/agar/config/inline_sse.h
echo "hdefs[\"INLINE_SSE\"] = \"$INLINE_SSE\"" >>configure.lua
		else
echo "#undef INLINE_SSE" >$BLD/include/agar/config/inline_sse.h
echo "hdefs[\"INLINE_SSE\"] = nil" >>configure.lua
		fi
		if [ "${HAVE_SSE2}" = "yes" ]
 then
			if [ "${with_sse2_inline}" = "yes" ]
 then
INLINE_SSE2="yes"
echo "#ifndef INLINE_SSE2" > $BLD/include/agar/config/inline_sse2.h
echo "#define INLINE_SSE2 \"$INLINE_SSE2\"" >> $BLD/include/agar/config/inline_sse2.h
echo "#endif" >> $BLD/include/agar/config/inline_sse2.h
echo "hdefs[\"INLINE_SSE2\"] = \"$INLINE_SSE2\"" >>configure.lua
			else
echo "#undef INLINE_SSE2" >$BLD/include/agar/config/inline_sse2.h
echo "hdefs[\"INLINE_SSE2\"] = nil" >>configure.lua
			fi
		else
echo "#undef INLINE_SSE2" >$BLD/include/agar/config/inline_sse2.h
echo "hdefs[\"INLINE_SSE2\"] = nil" >>configure.lua
		fi
		if [ "${HAVE_SSE3}" = "yes" ]
 then
			if [ "${with_sse3_inline}" = "yes" ]
 then
INLINE_SSE3="yes"
echo "#ifndef INLINE_SSE3" > $BLD/include/agar/config/inline_sse3.h
echo "#define INLINE_SSE3 \"$INLINE_SSE3\"" >> $BLD/include/agar/config/inline_sse3.h
echo "#endif" >> $BLD/include/agar/config/inline_sse3.h
echo "hdefs[\"INLINE_SSE3\"] = \"$INLINE_SSE3\"" >>configure.lua
			else
echo "#undef INLINE_SSE3" >$BLD/include/agar/config/inline_sse3.h
echo "hdefs[\"INLINE_SSE3\"] = nil" >>configure.lua
			fi
		else
echo "#undef INLINE_SSE3" >$BLD/include/agar/config/inline_sse3.h
echo "hdefs[\"INLINE_SSE3\"] = nil" >>configure.lua
		fi
	fi
else
echo "#undef HAVE_SSE" >$BLD/include/agar/config/have_sse.h
echo "hdefs[\"HAVE_SSE\"] = nil" >>configure.lua
echo "#undef HAVE_SSE2" >$BLD/include/agar/config/have_sse2.h
echo "hdefs[\"HAVE_SSE2\"] = nil" >>configure.lua
echo "#undef HAVE_SSE3" >$BLD/include/agar/config/have_sse3.h
echo "hdefs[\"HAVE_SSE3\"] = nil" >>configure.lua
echo "#undef INLINE_SSE" >$BLD/include/agar/config/inline_sse.h
echo "hdefs[\"INLINE_SSE\"] = nil" >>configure.lua
echo "#undef INLINE_SSE2" >$BLD/include/agar/config/inline_sse2.h
echo "hdefs[\"INLINE_SSE2\"] = nil" >>configure.lua
echo "#undef INLINE_SSE3" >$BLD/include/agar/config/inline_sse3.h
echo "hdefs[\"INLINE_SSE3\"] = nil" >>configure.lua
fi
if [ "${with_altivec}" = "yes" ]
 then
$ECHO_N "checking for AltiVec (with <altivec.h>)..."
$ECHO_N "checking for AltiVec (with <altivec.h>)..." >> config.log
case "$host" in
powerpc-*-darwin*)
	ALTIVEC_CFLAGS="-faltivec -maltivec"
	ALTIVEC_CHECK_CFLAGS="-D_DARWIN_C_SOURCE"
	echo "ALTIVEC_CHECK_CFLAGS=${ALTIVEC_CHECK_CFLAGS}" >> Makefile.config
	;;
*)
	ALTIVEC_CFLAGS="-mabi=altivec -maltivec"
	ALTIVEC_CHECK_CFLAGS=""
	echo "ALTIVEC_CHECK_CFLAGS=" >> Makefile.config
	;;
esac
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_ALTIVEC" ]; then
		HAVE_ALTIVEC=`cat ${cache}/ctest-HAVE_ALTIVEC`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_ALTIVEC`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
#include <altivec.h>
float a[4] = { 1,2,3,4 };
float b[4] = { 5,6,7,8 };
float c[4];

int
main(int argc, char *argv[])
{
	vector float *va = (vector float *)a;
	vector float *vb = (vector float *)b;
	vector float *vc = (vector float *)c;

	*vc = vec_add(*va, *vb);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} ${ALTIVEC_CFLAGS} -o $testdir/conftest conftest.c " >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} ${ALTIVEC_CFLAGS} -o $testdir/conftest conftest.c  2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_ALTIVEC="yes"
echo "HAVE_ALTIVEC=$HAVE_ALTIVEC" >>Makefile.config
echo "mdefs[\"HAVE_ALTIVEC\"] = \"$HAVE_ALTIVEC\"" >>configure.lua
echo "#ifndef HAVE_ALTIVEC" > $BLD/include/agar/config/have_altivec.h
echo "#define HAVE_ALTIVEC \"$HAVE_ALTIVEC\"" >> $BLD/include/agar/config/have_altivec.h
echo "#endif" >> $BLD/include/agar/config/have_altivec.h
echo "hdefs[\"HAVE_ALTIVEC\"] = \"$HAVE_ALTIVEC\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_ALTIVEC="no"
echo "HAVE_ALTIVEC=$HAVE_ALTIVEC" >>Makefile.config
echo "mdefs[\"HAVE_ALTIVEC\"] = \"$HAVE_ALTIVEC\"" >>configure.lua
echo "#undef HAVE_ALTIVEC" >$BLD/include/agar/config/have_altivec.h
echo "hdefs[\"HAVE_ALTIVEC\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_ALTIVEC" > ${cache}/ctest-HAVE_ALTIVEC
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_ALTIVEC
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_ALTIVEC}" = "yes" ]; then
echo "ALTIVEC_CFLAGS=$ALTIVEC_CFLAGS" >>Makefile.config
echo "mdefs[\"ALTIVEC_CFLAGS\"] = \"$ALTIVEC_CFLAGS\"" >>configure.lua
HAVE_ALTIVEC_H=""
echo "#ifndef ALTIVEC_CFLAGS" > $BLD/include/agar/config/altivec_cflags.h
echo "#define ALTIVEC_CFLAGS \"$ALTIVEC_CFLAGS\"" >> $BLD/include/agar/config/altivec_cflags.h
echo "#endif" >> $BLD/include/agar/config/altivec_cflags.h
echo "hdefs[\"ALTIVEC_CFLAGS\"] = \"$ALTIVEC_CFLAGS\"" >>configure.lua
echo "#ifndef HAVE_ALTIVEC_H" > $BLD/include/agar/config/have_altivec_h.h
echo "#define HAVE_ALTIVEC_H \"$HAVE_ALTIVEC_H\"" >> $BLD/include/agar/config/have_altivec_h.h
echo "#endif" >> $BLD/include/agar/config/have_altivec_h.h
echo "hdefs[\"HAVE_ALTIVEC_H\"] = \"$HAVE_ALTIVEC_H\"" >>configure.lua
else
$ECHO_N "checking for AltiVec (without <altivec.h>)..."
$ECHO_N "checking for AltiVec (without <altivec.h>)..." >> config.log
MK_CACHED="No"
MK_COMPILE_STATUS="OK"
if [ "${cache}" != "" ]; then
	if [ -e "${cache}/ctest-HAVE_ALTIVEC" ]; then
		HAVE_ALTIVEC=`cat ${cache}/ctest-HAVE_ALTIVEC`
		MK_COMPILE_STATUS=`cat ${cache}/ctest-status-HAVE_ALTIVEC`
		MK_CACHED="Yes"
	fi
fi
if [ "${MK_CACHED}" = "No" ]; then
	cat << EOT > conftest.c
float a[4] = { 1,2,3,4 };
float b[4] = { 5,6,7,8 };
float c[4];

int
main(int argc, char *argv[])
{
	vector float *va = (vector float *)a;
	vector float *vb = (vector float *)b;
	vector float *vc = (vector float *)c;

	*vc = vec_add(*va, *vb);
	return (0);
}

EOT
	echo "$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} ${ALTIVEC_CFLAGS} -o $testdir/conftest conftest.c " >>config.log
	$CC $CFLAGS $TEST_CFLAGS ${CFLAGS} ${ALTIVEC_CFLAGS} -o $testdir/conftest conftest.c  2>>config.log
	if [ $? != 0 ]; then
		echo "-> failed ($?)" >> config.log
		MK_COMPILE_STATUS="FAIL($?)"
	fi
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_ALTIVEC="yes"
echo "HAVE_ALTIVEC=$HAVE_ALTIVEC" >>Makefile.config
echo "mdefs[\"HAVE_ALTIVEC\"] = \"$HAVE_ALTIVEC\"" >>configure.lua
echo "#ifndef HAVE_ALTIVEC" > $BLD/include/agar/config/have_altivec.h
echo "#define HAVE_ALTIVEC \"$HAVE_ALTIVEC\"" >> $BLD/include/agar/config/have_altivec.h
echo "#endif" >> $BLD/include/agar/config/have_altivec.h
echo "hdefs[\"HAVE_ALTIVEC\"] = \"$HAVE_ALTIVEC\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_ALTIVEC="no"
echo "HAVE_ALTIVEC=$HAVE_ALTIVEC" >>Makefile.config
echo "mdefs[\"HAVE_ALTIVEC\"] = \"$HAVE_ALTIVEC\"" >>configure.lua
echo "#undef HAVE_ALTIVEC" >$BLD/include/agar/config/have_altivec.h
echo "hdefs[\"HAVE_ALTIVEC\"] = nil" >>configure.lua
fi;
if [ "${cache}" != "" ]; then
	echo "$HAVE_ALTIVEC" > ${cache}/ctest-HAVE_ALTIVEC
	echo $MK_COMPILE_STATUS > ${cache}/ctest-status-HAVE_ALTIVEC
fi
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_ALTIVEC}" = "yes" ]; then
echo "ALTIVEC_CFLAGS=$ALTIVEC_CFLAGS" >>Makefile.config
echo "mdefs[\"ALTIVEC_CFLAGS\"] = \"$ALTIVEC_CFLAGS\"" >>configure.lua
echo "#ifndef ALTIVEC_CFLAGS" > $BLD/include/agar/config/altivec_cflags.h
echo "#define ALTIVEC_CFLAGS \"$ALTIVEC_CFLAGS\"" >> $BLD/include/agar/config/altivec_cflags.h
echo "#endif" >> $BLD/include/agar/config/altivec_cflags.h
echo "hdefs[\"ALTIVEC_CFLAGS\"] = \"$ALTIVEC_CFLAGS\"" >>configure.lua
else
echo "#undef ALTIVEC_CFLAGS" >$BLD/include/agar/config/altivec_cflags.h
echo "hdefs[\"ALTIVEC_CFLAGS\"] = nil" >>configure.lua
ALTIVEC_CFLAGS=""
echo "ALTIVEC_CFLAGS=$ALTIVEC_CFLAGS" >>Makefile.config
echo "mdefs[\"ALTIVEC_CFLAGS\"] = \"$ALTIVEC_CFLAGS\"" >>configure.lua
fi;
echo "#undef HAVE_ALTIVEC_H" >$BLD/include/agar/config/have_altivec_h.h
echo "hdefs[\"HAVE_ALTIVEC_H\"] = nil" >>configure.lua
fi;
	if [ "${HAVE_ALTIVEC}" != "yes" ]
 then
		if [ "${with_altivec}" = "yes" ]
 then
			echo "*"
			echo "* --with-altivec was requested, but "
			echo "* AltiVec is not supported by compiler"
			echo "*"
			exit 1
		else
echo "#undef HAVE_ALTIVEC" >$BLD/include/agar/config/have_altivec.h
echo "hdefs[\"HAVE_ALTIVEC\"] = nil" >>configure.lua
echo "#undef HAVE_ALTIVEC_H" >$BLD/include/agar/config/have_altivec_h.h
echo "hdefs[\"HAVE_ALTIVEC_H\"] = nil" >>configure.lua
echo "#undef INLINE_ALTIVEC" >$BLD/include/agar/config/inline_altivec.h
echo "hdefs[\"INLINE_ALTIVEC\"] = nil" >>configure.lua
		fi
	else
		if [ "${with_altivec_inline}" = "yes" ]
 then
INLINE_ALTIVEC="yes"
echo "#ifndef INLINE_ALTIVEC" > $BLD/include/agar/config/inline_altivec.h
echo "#define INLINE_ALTIVEC \"$INLINE_ALTIVEC\"" >> $BLD/include/agar/config/inline_altivec.h
echo "#endif" >> $BLD/include/agar/config/inline_altivec.h
echo "hdefs[\"INLINE_ALTIVEC\"] = \"$INLINE_ALTIVEC\"" >>configure.lua
		else
echo "#undef INLINE_ALTIVEC" >$BLD/include/agar/config/inline_altivec.h
echo "hdefs[\"INLINE_ALTIVEC\"] = nil" >>configure.lua
		fi
	fi
else
echo "#undef HAVE_ALTIVEC" >$BLD/include/agar/config/have_altivec.h
echo "hdefs[\"HAVE_ALTIVEC\"] = nil" >>configure.lua
echo "#undef HAVE_ALTIVEC_H" >$BLD/include/agar/config/have_altivec_h.h
echo "hdefs[\"HAVE_ALTIVEC_H\"] = nil" >>configure.lua
echo "#undef INLINE_ALTIVEC" >$BLD/include/agar/config/inline_altivec.h
echo "hdefs[\"INLINE_ALTIVEC\"] = nil" >>configure.lua
fi
if [ "${with_single_fp}" = "yes" ]
 then
	if [ "${HAVE_MATH_C99}" != "yes" ]
 then
		echo "*"
		echo "* --with-single-fp was requested, but your compiler does"
		echo "* not support the C99 math routines (sinf(), etc)."
		echo "*"
		exit 1
	fi
SINGLE_PRECISION="yes"
echo "#ifndef SINGLE_PRECISION" > $BLD/include/agar/config/single_precision.h
echo "#define SINGLE_PRECISION \"$SINGLE_PRECISION\"" >> $BLD/include/agar/config/single_precision.h
echo "#endif" >> $BLD/include/agar/config/single_precision.h
echo "hdefs[\"SINGLE_PRECISION\"] = \"$SINGLE_PRECISION\"" >>configure.lua
else
echo "#undef SINGLE_PRECISION" >$BLD/include/agar/config/single_precision.h
echo "hdefs[\"SINGLE_PRECISION\"] = nil" >>configure.lua
fi
if [ "${with_double_fp}" != "no" ]
 then
DOUBLE_PRECISION="yes"
echo "#ifndef DOUBLE_PRECISION" > $BLD/include/agar/config/double_precision.h
echo "#define DOUBLE_PRECISION \"$DOUBLE_PRECISION\"" >> $BLD/include/agar/config/double_precision.h
echo "#endif" >> $BLD/include/agar/config/double_precision.h
echo "hdefs[\"DOUBLE_PRECISION\"] = \"$DOUBLE_PRECISION\"" >>configure.lua
else
echo "#undef DOUBLE_PRECISION" >$BLD/include/agar/config/double_precision.h
echo "hdefs[\"DOUBLE_PRECISION\"] = nil" >>configure.lua
fi
if [ "${with_quad_fp}" = "yes" ]
 then
	if [ "${HAVE_LONG_DOUBLE}" != "yes" ]
 then
		echo "*"
		echo "* --with-quad-fp was requested, but your compiler"
		echo "* does not support the C99 long double type."
		echo "*"
		exit 1
	fi
	if [ "${HAVE_MATH_C99}" != "yes" ]
 then
		echo "*"
		echo "* --with-quad-fp was requested, but the C99 math"
		echo "* routines (sinl(), etc.) are not available."
		echo "*"
		exit 1
	fi
QUAD_PRECISION="yes"
echo "#ifndef QUAD_PRECISION" > $BLD/include/agar/config/quad_precision.h
echo "#define QUAD_PRECISION \"$QUAD_PRECISION\"" >> $BLD/include/agar/config/quad_precision.h
echo "#endif" >> $BLD/include/agar/config/quad_precision.h
echo "hdefs[\"QUAD_PRECISION\"] = \"$QUAD_PRECISION\"" >>configure.lua
else
echo "#undef QUAD_PRECISION" >$BLD/include/agar/config/quad_precision.h
echo "hdefs[\"QUAD_PRECISION\"] = nil" >>configure.lua
fi
if [ "${enable_vg}" != "no" -a "${enable_gui}" != "no" ]
 then
ENABLE_VG="yes"
echo "#ifndef ENABLE_VG" > $BLD/include/agar/config/enable_vg.h
echo "#define ENABLE_VG \"$ENABLE_VG\"" >> $BLD/include/agar/config/enable_vg.h
echo "#endif" >> $BLD/include/agar/config/enable_vg.h
echo "hdefs[\"ENABLE_VG\"] = \"$ENABLE_VG\"" >>configure.lua
SUBDIR_vg="vg"
echo "SUBDIR_vg=$SUBDIR_vg" >>Makefile.config
echo "mdefs[\"SUBDIR_vg\"] = \"$SUBDIR_vg\"" >>configure.lua
else
echo "#undef ENABLE_VG" >$BLD/include/agar/config/enable_vg.h
echo "hdefs[\"ENABLE_VG\"] = nil" >>configure.lua
SUBDIR_vg=""
echo "SUBDIR_vg=$SUBDIR_vg" >>Makefile.config
echo "mdefs[\"SUBDIR_vg\"] = \"$SUBDIR_vg\"" >>configure.lua
fi
if [ "${enable_rg}" != "no" -a "${enable_gui}" != "no" ]
 then
ENABLE_RG="yes"
echo "#ifndef ENABLE_RG" > $BLD/include/agar/config/enable_rg.h
echo "#define ENABLE_RG \"$ENABLE_RG\"" >> $BLD/include/agar/config/enable_rg.h
echo "#endif" >> $BLD/include/agar/config/enable_rg.h
echo "hdefs[\"ENABLE_RG\"] = \"$ENABLE_RG\"" >>configure.lua
SUBDIR_rg="rg"
echo "SUBDIR_rg=$SUBDIR_rg" >>Makefile.config
echo "mdefs[\"SUBDIR_rg\"] = \"$SUBDIR_rg\"" >>configure.lua
else
echo "#undef ENABLE_RG" >$BLD/include/agar/config/enable_rg.h
echo "hdefs[\"ENABLE_RG\"] = nil" >>configure.lua
SUBDIR_rg=""
echo "SUBDIR_rg=$SUBDIR_rg" >>Makefile.config
echo "mdefs[\"SUBDIR_rg\"] = \"$SUBDIR_rg\"" >>configure.lua
fi
if [ "${enable_dev}" != "no" -a "${enable_gui}" != "no" ]
 then
ENABLE_DEV="yes"
echo "#ifndef ENABLE_DEV" > $BLD/include/agar/config/enable_dev.h
echo "#define ENABLE_DEV \"$ENABLE_DEV\"" >> $BLD/include/agar/config/enable_dev.h
echo "#endif" >> $BLD/include/agar/config/enable_dev.h
echo "hdefs[\"ENABLE_DEV\"] = \"$ENABLE_DEV\"" >>configure.lua
SUBDIR_dev="dev"
echo "SUBDIR_dev=$SUBDIR_dev" >>Makefile.config
echo "mdefs[\"SUBDIR_dev\"] = \"$SUBDIR_dev\"" >>configure.lua
else
echo "#undef ENABLE_DEV" >$BLD/include/agar/config/enable_dev.h
echo "hdefs[\"ENABLE_DEV\"] = nil" >>configure.lua
SUBDIR_dev=""
echo "SUBDIR_dev=$SUBDIR_dev" >>Makefile.config
echo "mdefs[\"SUBDIR_dev\"] = \"$SUBDIR_dev\"" >>configure.lua
fi
if [ ! -e "$BLD/include/agar" ]; then
	mkdir -p "$BLD/include/agar"
fi
if [ "${includes}" = "link" ]; then
	$ECHO_N "* Linking C include files..."
	if [ "${SRCDIR}" != "${BLDDIR}" ]; then
		(cd ${SRCDIR} && ${PERL} mk/gen-includelinks.pl "${SRCDIR}" "$BLD/include/agar" 1>>${BLDDIR}/config.log 2>&1)
	else
		${PERL} mk/gen-includelinks.pl "${SRCDIR}" "$BLD/include/agar" 1>>config.log 2>&1
	fi
	if [ $? != 0 ]; then
		echo "${PERL} mk/gen-includelinks.pl failed"
		exit 1
	fi
	echo "done"
else
	if [ "${PERL}" = "" ]; then
		echo "*"
		echo "* The --includes=yes option requires perl, but no perl"
		echo "* interpreter was found. If perl is unavailable, please"
		echo "* please rerun configure with --includes=link instead."
		echo "*"
		exit 1
	fi
	$ECHO_N "* Preprocessing C include files..."
	if [ "${SRCDIR}" != "${BLDDIR}" ]; then
		(cd ${SRCDIR} && ${PERL} mk/gen-includes.pl "$BLD/include/agar" 1>>${BLDDIR}/config.log 2>&1)
	else
		${PERL} mk/gen-includes.pl "$BLD/include/agar" 1>>config.log 2>&1
	fi
	if [ $? != 0 ]; then
		echo "${PERL} mk/gen-includes.pl failed"
		exit 1
	fi
	echo "done"
fi
CFLAGS="$CFLAGS -I$BLD/include"
CXXFLAGS="$CXXFLAGS -I$BLD/include"
echo "CFLAGS=$CFLAGS" >>Makefile.config
echo "mdefs[\"CFLAGS\"] = \"$CFLAGS\"" >>configure.lua
echo "CXXFLAGS=$CXXFLAGS" >>Makefile.config
echo "mdefs[\"CXXFLAGS\"] = \"$CXXFLAGS\"" >>configure.lua
CFLAGS="$CFLAGS -I$BLD/include/agar"
CXXFLAGS="$CXXFLAGS -I$BLD/include/agar"
echo "CFLAGS=$CFLAGS" >>Makefile.config
echo "mdefs[\"CFLAGS\"] = \"$CFLAGS\"" >>configure.lua
echo "CXXFLAGS=$CXXFLAGS" >>Makefile.config
echo "mdefs[\"CXXFLAGS\"] = \"$CXXFLAGS\"" >>configure.lua
config_script_out="agar-config"
config_script_cflags="-I${INCLDIR} ${SDL_CFLAGS} ${FREETYPE_CFLAGS} ${OPENGL_CFLAGS} ${MATH_CFLAGS} ${PNG_CFLAGS} ${PTHREADS_CFLAGS} ${DB4_CFLAGS} ${GETTEXT_CFLAGS} ${DSO_CFLAGS} ${CLOCK_CFLAGS}"
config_script_libs="-L${LIBDIR} -lag_gui -lag_core ${SDL_LIBS} ${FREETYPE_LIBS} ${OPENGL_LIBS} ${MATH_LIBS} ${JPEG_LIBS} ${PNG_LIBS} ${PTHREADS_LIBS} ${DB4_LIBS} ${GETTEXT_LIBS} ${DSO_LIBS} ${CLOCK_LIBS}"
# Avoid breakage with existing trees compiled before BSDBuild 2.8.
if [ -d "$config_script_out" ]; then
	echo "rm -fR $config_script_out"
	rm -fR $config_script_out
fi
if [ "${SRC}" != "" ]; then
	if [ -d "${SRC}/$config_script_out" ]; then
		echo "rm -fR ${SRC}/$config_script_out"
		rm -fR ${SRC}/$config_script_out
	fi
fi
cat << EOT > $config_script_out
#!/bin/sh
# Generated for ${PACKAGE} by BSDBuild 2.8.
# <http://bsdbuild.hypertriton.com>

prefix="${PREFIX}"
exec_prefix="${EXEC_PREFIX}"
exec_prefix_set="no"
libdir="${LIBDIR}"

usage="\
Usage: $config_script_out [--prefix[=DIR]] [--exec-prefix[=DIR]] [--version] [--cflags] [--libs]"

if test \$# -eq 0; then
	echo "\${usage}" 1>&2
	exit 1
fi

while test \$# -gt 0; do
	case "\$1" in
	-*=*)
		optarg=\`echo "\$1" | LC_ALL="C" sed 's/[-_a-zA-Z0-9]*=//'\`
		;;
	*)
		optarg=
		;;
	esac

	case \$1 in
	--prefix=*)
		prefix=\$optarg
		if test \$exec_prefix_set = no ; then
			exec_prefix=\$optarg
		fi
		;;
	--prefix)
		echo "\$prefix"
		;;
	--exec-prefix=*)
		exec_prefix=\$optarg
		exec_prefix_set=yes
		;;
	--exec-prefix)
		echo "\$exec_prefix"
		;;
	--version)
		echo "${VERSION}"
		;;
	--cflags)
		echo "$config_script_cflags"
		;;
	--libs | --static-libs)
		if test x"\${prefix}" != x"/usr" ; then
			libdirs="-L/usr/lib64"
		else
			libdirs=""
		fi
		echo "\$libdirs $config_script_libs"
		;;
	*)
		echo "\${usage}" 1>&2
		exit 1
		;;
	esac
	shift
done
EOT
config_script_out="agar-core-config"
config_script_cflags="-I${INCLDIR} ${SDL_CFLAGS} ${MATH_CFLAGS} ${HAVE_PTHREADS} ${HAVE_DB4} ${GETTEXT_CFLAGS} ${DSO_CFLAGS} ${CLOCK_CFLAGS}"
config_script_libs="-L${LIBDIR} -lag_core ${MATH_LIBS} ${PTHREADS_LIBS} ${DB4_LIBS} ${GETTEXT_LIBS} ${DSO_LIBS} ${CLOCK_LIBS}"
# Avoid breakage with existing trees compiled before BSDBuild 2.8.
if [ -d "$config_script_out" ]; then
	echo "rm -fR $config_script_out"
	rm -fR $config_script_out
fi
if [ "${SRC}" != "" ]; then
	if [ -d "${SRC}/$config_script_out" ]; then
		echo "rm -fR ${SRC}/$config_script_out"
		rm -fR ${SRC}/$config_script_out
	fi
fi
cat << EOT > $config_script_out
#!/bin/sh
# Generated for ${PACKAGE} by BSDBuild 2.8.
# <http://bsdbuild.hypertriton.com>

prefix="${PREFIX}"
exec_prefix="${EXEC_PREFIX}"
exec_prefix_set="no"
libdir="${LIBDIR}"

usage="\
Usage: $config_script_out [--prefix[=DIR]] [--exec-prefix[=DIR]] [--version] [--cflags] [--libs]"

if test \$# -eq 0; then
	echo "\${usage}" 1>&2
	exit 1
fi

while test \$# -gt 0; do
	case "\$1" in
	-*=*)
		optarg=\`echo "\$1" | LC_ALL="C" sed 's/[-_a-zA-Z0-9]*=//'\`
		;;
	*)
		optarg=
		;;
	esac

	case \$1 in
	--prefix=*)
		prefix=\$optarg
		if test \$exec_prefix_set = no ; then
			exec_prefix=\$optarg
		fi
		;;
	--prefix)
		echo "\$prefix"
		;;
	--exec-prefix=*)
		exec_prefix=\$optarg
		exec_prefix_set=yes
		;;
	--exec-prefix)
		echo "\$exec_prefix"
		;;
	--version)
		echo "${VERSION}"
		;;
	--cflags)
		echo "$config_script_cflags"
		;;
	--libs | --static-libs)
		if test x"\${prefix}" != x"/usr" ; then
			libdirs="-L/usr/lib64"
		else
			libdirs=""
		fi
		echo "\$libdirs $config_script_libs"
		;;
	*)
		echo "\${usage}" 1>&2
		exit 1
		;;
	esac
	shift
done
EOT
config_script_out="agar-dev-config"
config_script_cflags="-I${INCLDIR} ${GETTEXT_CFLAGS}"
config_script_libs="-L${LIBDIR} -lag_dev ${GETTEXT_LIBS}"
# Avoid breakage with existing trees compiled before BSDBuild 2.8.
if [ -d "$config_script_out" ]; then
	echo "rm -fR $config_script_out"
	rm -fR $config_script_out
fi
if [ "${SRC}" != "" ]; then
	if [ -d "${SRC}/$config_script_out" ]; then
		echo "rm -fR ${SRC}/$config_script_out"
		rm -fR ${SRC}/$config_script_out
	fi
fi
cat << EOT > $config_script_out
#!/bin/sh
# Generated for ${PACKAGE} by BSDBuild 2.8.
# <http://bsdbuild.hypertriton.com>

prefix="${PREFIX}"
exec_prefix="${EXEC_PREFIX}"
exec_prefix_set="no"
libdir="${LIBDIR}"

usage="\
Usage: $config_script_out [--prefix[=DIR]] [--exec-prefix[=DIR]] [--version] [--cflags] [--libs]"

if test \$# -eq 0; then
	echo "\${usage}" 1>&2
	exit 1
fi

while test \$# -gt 0; do
	case "\$1" in
	-*=*)
		optarg=\`echo "\$1" | LC_ALL="C" sed 's/[-_a-zA-Z0-9]*=//'\`
		;;
	*)
		optarg=
		;;
	esac

	case \$1 in
	--prefix=*)
		prefix=\$optarg
		if test \$exec_prefix_set = no ; then
			exec_prefix=\$optarg
		fi
		;;
	--prefix)
		echo "\$prefix"
		;;
	--exec-prefix=*)
		exec_prefix=\$optarg
		exec_prefix_set=yes
		;;
	--exec-prefix)
		echo "\$exec_prefix"
		;;
	--version)
		echo "${VERSION}"
		;;
	--cflags)
		echo "$config_script_cflags"
		;;
	--libs | --static-libs)
		if test x"\${prefix}" != x"/usr" ; then
			libdirs="-L/usr/lib64"
		else
			libdirs=""
		fi
		echo "\$libdirs $config_script_libs"
		;;
	*)
		echo "\${usage}" 1>&2
		exit 1
		;;
	esac
	shift
done
EOT
config_script_out="agar-math-config"
config_script_cflags="-I${INCLDIR} ${MATH_CFLAGS} ${GETTEXT_CFLAGS}"
config_script_libs="-L${LIBDIR} -lag_math ${MATH_LIBS} ${GETTEXT_LIBS}"
# Avoid breakage with existing trees compiled before BSDBuild 2.8.
if [ -d "$config_script_out" ]; then
	echo "rm -fR $config_script_out"
	rm -fR $config_script_out
fi
if [ "${SRC}" != "" ]; then
	if [ -d "${SRC}/$config_script_out" ]; then
		echo "rm -fR ${SRC}/$config_script_out"
		rm -fR ${SRC}/$config_script_out
	fi
fi
cat << EOT > $config_script_out
#!/bin/sh
# Generated for ${PACKAGE} by BSDBuild 2.8.
# <http://bsdbuild.hypertriton.com>

prefix="${PREFIX}"
exec_prefix="${EXEC_PREFIX}"
exec_prefix_set="no"
libdir="${LIBDIR}"

usage="\
Usage: $config_script_out [--prefix[=DIR]] [--exec-prefix[=DIR]] [--version] [--cflags] [--libs]"

if test \$# -eq 0; then
	echo "\${usage}" 1>&2
	exit 1
fi

while test \$# -gt 0; do
	case "\$1" in
	-*=*)
		optarg=\`echo "\$1" | LC_ALL="C" sed 's/[-_a-zA-Z0-9]*=//'\`
		;;
	*)
		optarg=
		;;
	esac

	case \$1 in
	--prefix=*)
		prefix=\$optarg
		if test \$exec_prefix_set = no ; then
			exec_prefix=\$optarg
		fi
		;;
	--prefix)
		echo "\$prefix"
		;;
	--exec-prefix=*)
		exec_prefix=\$optarg
		exec_prefix_set=yes
		;;
	--exec-prefix)
		echo "\$exec_prefix"
		;;
	--version)
		echo "${VERSION}"
		;;
	--cflags)
		echo "$config_script_cflags"
		;;
	--libs | --static-libs)
		if test x"\${prefix}" != x"/usr" ; then
			libdirs="-L/usr/lib64"
		else
			libdirs=""
		fi
		echo "\$libdirs $config_script_libs"
		;;
	*)
		echo "\${usage}" 1>&2
		exit 1
		;;
	esac
	shift
done
EOT
config_script_out="agar-rg-config"
config_script_cflags="-I${INCLDIR} ${GETTEXT_CFLAGS}"
config_script_libs="-L${LIBDIR} -lag_rg ${GETTEXT_LIBS}"
# Avoid breakage with existing trees compiled before BSDBuild 2.8.
if [ -d "$config_script_out" ]; then
	echo "rm -fR $config_script_out"
	rm -fR $config_script_out
fi
if [ "${SRC}" != "" ]; then
	if [ -d "${SRC}/$config_script_out" ]; then
		echo "rm -fR ${SRC}/$config_script_out"
		rm -fR ${SRC}/$config_script_out
	fi
fi
cat << EOT > $config_script_out
#!/bin/sh
# Generated for ${PACKAGE} by BSDBuild 2.8.
# <http://bsdbuild.hypertriton.com>

prefix="${PREFIX}"
exec_prefix="${EXEC_PREFIX}"
exec_prefix_set="no"
libdir="${LIBDIR}"

usage="\
Usage: $config_script_out [--prefix[=DIR]] [--exec-prefix[=DIR]] [--version] [--cflags] [--libs]"

if test \$# -eq 0; then
	echo "\${usage}" 1>&2
	exit 1
fi

while test \$# -gt 0; do
	case "\$1" in
	-*=*)
		optarg=\`echo "\$1" | LC_ALL="C" sed 's/[-_a-zA-Z0-9]*=//'\`
		;;
	*)
		optarg=
		;;
	esac

	case \$1 in
	--prefix=*)
		prefix=\$optarg
		if test \$exec_prefix_set = no ; then
			exec_prefix=\$optarg
		fi
		;;
	--prefix)
		echo "\$prefix"
		;;
	--exec-prefix=*)
		exec_prefix=\$optarg
		exec_prefix_set=yes
		;;
	--exec-prefix)
		echo "\$exec_prefix"
		;;
	--version)
		echo "${VERSION}"
		;;
	--cflags)
		echo "$config_script_cflags"
		;;
	--libs | --static-libs)
		if test x"\${prefix}" != x"/usr" ; then
			libdirs="-L/usr/lib64"
		else
			libdirs=""
		fi
		echo "\$libdirs $config_script_libs"
		;;
	*)
		echo "\${usage}" 1>&2
		exit 1
		;;
	esac
	shift
done
EOT
config_script_out="agar-vg-config"
config_script_cflags="-I${INCLDIR} ${GETTEXT_CFLAGS}"
config_script_libs="-L${LIBDIR} -lag_vg ${GETTEXT_LIBS}"
# Avoid breakage with existing trees compiled before BSDBuild 2.8.
if [ -d "$config_script_out" ]; then
	echo "rm -fR $config_script_out"
	rm -fR $config_script_out
fi
if [ "${SRC}" != "" ]; then
	if [ -d "${SRC}/$config_script_out" ]; then
		echo "rm -fR ${SRC}/$config_script_out"
		rm -fR ${SRC}/$config_script_out
	fi
fi
cat << EOT > $config_script_out
#!/bin/sh
# Generated for ${PACKAGE} by BSDBuild 2.8.
# <http://bsdbuild.hypertriton.com>

prefix="${PREFIX}"
exec_prefix="${EXEC_PREFIX}"
exec_prefix_set="no"
libdir="${LIBDIR}"

usage="\
Usage: $config_script_out [--prefix[=DIR]] [--exec-prefix[=DIR]] [--version] [--cflags] [--libs]"

if test \$# -eq 0; then
	echo "\${usage}" 1>&2
	exit 1
fi

while test \$# -gt 0; do
	case "\$1" in
	-*=*)
		optarg=\`echo "\$1" | LC_ALL="C" sed 's/[-_a-zA-Z0-9]*=//'\`
		;;
	*)
		optarg=
		;;
	esac

	case \$1 in
	--prefix=*)
		prefix=\$optarg
		if test \$exec_prefix_set = no ; then
			exec_prefix=\$optarg
		fi
		;;
	--prefix)
		echo "\$prefix"
		;;
	--exec-prefix=*)
		exec_prefix=\$optarg
		exec_prefix_set=yes
		;;
	--exec-prefix)
		echo "\$exec_prefix"
		;;
	--version)
		echo "${VERSION}"
		;;
	--cflags)
		echo "$config_script_cflags"
		;;
	--libs | --static-libs)
		if test x"\${prefix}" != x"/usr" ; then
			libdirs="-L/usr/lib64"
		else
			libdirs=""
		fi
		echo "\$libdirs $config_script_libs"
		;;
	*)
		echo "\${usage}" 1>&2
		exit 1
		;;
	esac
	shift
done
EOT
echo "*"
echo "* Configuration successful."
echo "* Use \"make depend\" if you plan on editing the source code."
echo "* Use \"make\" and \"make install\" to build and install Agar."
echo "*"
