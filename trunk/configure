#!/bin/sh
#
# Do not edit!
# File generated from configure.in by manuconf v1.2.
#
# Copyright (c) 2001, 2002, CubeSoft Communications, Inc. <http://www.csoft.org>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistribution of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Neither the name of CubeSoft Communications, nor the names of
#    its contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
# USE OF THIS SOFTWARE EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

echo > config.log

mc_optarg=
for mc_arg; do
	case "$mc_arg" in
	-*=*)
	    mc_optarg=`echo "$mc_arg" | sed 's/[-_a-zA-Z0-9]*=//'`
	    ;;
	*)
	    mc_optarg=
	    ;;
	esac
	case "$mc_arg" in
	--prefix=*)
	    mc_prefix=$mc_optarg
	    ;;
	--enable-*)
	    mc_option=`echo $mc_arg | sed -e 's/--enable-//' -e 's/=.*//'`
	    mc_option=`echo $mc_option | sed 's/-/_/g'`
	    case "$mc_option" in
	        *=*)
	            eval "enable_${mc_option}='$mc_optarg'"
		    ;;
		*)
	            eval "enable_${mc_option}=yes"
		    ;;
	    esac
	    ;;
	--disable-*)
	    mc_option=`echo $mc_arg | sed -e 's/--disable-//'`;
	    mc_option=`echo $mc_option | sed 's/-/_/g'`
	    eval "enable_${mc_option}=no"
	    ;;
	--with-*)
	    mc_option=`echo $mc_arg | sed -e 's/--with-//' -e 's/=.*//'`
	    mc_option=`echo $mc_option | sed 's/-/_/g'`
	    case "$mc_option" in
	        *=*)
	            eval "with_${mc_option}='$mc_optarg'"
		    ;;
		*)
	            eval "with_${mc_option}=yes"
		    ;;
	    esac
	    ;;
	--without-*)
	    mc_option=`echo $mc_arg | sed -e 's/--without-//'`;
	    mc_option=`echo $mc_option | sed 's/-/_/g'`
	    eval "with_${mc_option}=no"
	    ;;
	--help)
	    help=yes
	    ;;
	--version)
	    version=yes
	    ;;
	*)
	    echo "invalid argument: $mc_arg"
	    echo "try ./configure --help"
	    exit 1
	    ;;
	esac
done
if [ "${mc_prefix}" != "" ]; then
    PREFIX=$mc_prefix
else
    PREFIX=/usr/local
fi
S=""
which="`which pwd`"
if [ -n "$which" -a -x "$which" ]; then
	S=`${which} `
fi
echo >Makefile.config
echo >engine/mcconfig.h
if [ "${help}" = "yes" ]
 then
echo "Usage: ./configure [args]"
echo "    --prefix                       Installation prefix [/usr/local]"
echo "    --with-smpeg                   Play videos through smpeg [default: check]"
echo "    --with-x11                     X11-specific code [default: check]"
echo "    --enable-debug                 Engine debugging [default: no]"
echo "    --enable-xdebug                Synchronous X11 events [default: no]"
echo "    --enable-map-editor            Level edition [default: yes]"
echo "    --enable-serialization         Thread-safe engine [default: yes]"
echo "    --enable-8bpp                  Support 8 bpp display [default: yes]"
echo "    --enable-16bpp                 Support 16 bpp display [default: yes]"
echo "    --enable-24bpp                 Support 24 bpp display [default: yes]"
echo "    --enable-32bpp                 Support 32 bpp display [default: yes]"
echo "    --help                         Show this message"
exit 1
fi
SHAREDIR="$PREFIX/share/cave"
echo SHAREDIR=$SHAREDIR >> Makefile.config
SHAREDIR="\"$PREFIX/share/cave\""
echo "#ifndef SHAREDIR" >> engine/mcconfig.h
echo "#define SHAREDIR" $SHAREDIR >> engine/mcconfig.h
echo "#endif /* SHAREDIR */" >> engine/mcconfig.h
MAPDIR="$PREFIX/share/cave/map"
echo MAPDIR=$MAPDIR >> Makefile.config
TTFDIR="$PREFIX/share/cave/ttf"
echo TTFDIR=$TTFDIR >> Makefile.config
FOBJDIR="$PREFIX/share/cave/fob"
echo FOBJDIR=$FOBJDIR >> Makefile.config
INST_MANDIR="$PREFIX/share/agar/man"
echo INST_MANDIR=$INST_MANDIR >> Makefile.config
echo -n "checking for a usable make(1)..."
echo "checking for a usable make(1)..." >> config.log
if [ "$MAKE" = "" ]; then
	for i in `echo $PATH |sed 's/:/ /g'`; do
		if [ -x "${i}/make" ]; then
			MAKE="${i}/make"
		elif [ -x "${i}/make" ]; then
			MAKE="${i}/make"
		fi
	done
fi

cat << 'EOT' > .maketest
ASSIGN= foo
ASSIGN?= foo
ASSIGN+= bar

all: write-test

write-test:
	@echo > .maketest2

.BEGIN:
	@echo -n

TOP=	.
include ${TOP}/.maketest3
EOT

echo >> .maketest3

echo "$MAKE -f .maketest" >>config.log
$MAKE -f .maketest 2>>config.log
if [ $? != 0 -o ! -e .maketest2 ]; then
    echo "-> failure" >> config.log
    echo "no"
    exit 1
else
    echo "yes"
    echo "-> success" >> config.log
fi
rm -f .maketest .maketest2 .maketest3
echo -n "checking for a usable C compiler..."
echo "checking for a usable C compiler..." >> config.log
if [ "$CC" = "" ]; then
	for i in `echo $PATH |sed 's/:/ /g'`; do
		if [ -x "${i}/cc" ]; then
			CC="${i}/cc"
		elif [ -x "${i}/gcc" ]; then
			CC="${i}/gcc"
		fi
	done
fi

cat << 'EOT' > .cctest.c
int
main(int argc, char *argv[])
{
	#ifdef __GNUC__
	return (0);
#else
	return (1);
#endif
}
EOT

echo "$CC -o .cctest .cctest.c" >>config.log
$CC -o .cctest .cctest.c 2>>config.log
if [ $? != 0 -o ! -e .cctest ]; then
    echo "-> failure" >> config.log
    echo "no"
    exit 1
fi

cc_is_gcc=no
if ./.cctest; then
    cc_is_gcc=yes
    echo "-> success (gcc)" >> config.log
    echo "yes, gcc"
else
    echo "yes"
    echo "-> success" >> config.log
fi

rm -f .cctest .cctest.c
echo -n "checking for a getenv() function..."
echo "checking for a getenv() function..." >> config.log
cat << EOT > conftest.c
#include <stdlib.h>
int
main(int argc, char *argv[])
{
	(void)getenv("PATH");
	return (0);
}

EOT
compile="ok"
echo "cc -o conftest conftest.c" >> config.log
cc -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed: compiler had non-zero exit status" >> config.log
	compile="failed"
fi
if [ ! -e "conftest" ]; then
	echo "-> failed: compiler did not produce an executable" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "-> success" >> config.log
	echo "#ifndef HAVE_GETENV" >> engine/mcconfig.h
echo "#define HAVE_GETENV" $HAVE_GETENV >> engine/mcconfig.h
echo "#endif /* HAVE_GETENV */" >> engine/mcconfig.h

	echo "yes"
else
	echo "no"
fi
echo -n "checking for setenv() and unsetenv() functions..."
echo "checking for setenv() and unsetenv() functions..." >> config.log
cat << EOT > conftest.c
#include <stdlib.h>
int
main(int argc, char *argv[])
{
	(void)setenv("MANUCONF_SETENV_TEST", "foo", 1);
	unsetenv("MANUCONF_SETENV_TEST");

	return (0);
}

EOT
compile="ok"
echo "cc -o conftest conftest.c" >> config.log
cc -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed: compiler had non-zero exit status" >> config.log
	compile="failed"
fi
if [ ! -e "conftest" ]; then
	echo "-> failed: compiler did not produce an executable" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "-> success" >> config.log
	echo "#ifndef HAVE_SETENV" >> engine/mcconfig.h
echo "#define HAVE_SETENV" $HAVE_SETENV >> engine/mcconfig.h
echo "#endif /* HAVE_SETENV */" >> engine/mcconfig.h

	echo "yes"
else
	echo "no"
fi
echo -n "checking for a strsep() function..."
echo "checking for a strsep() function..." >> config.log
cat << EOT > conftest.c
#include <string.h>
int
main(int argc, char *argv[])
{
	(void)strsep(NULL, NULL);
	return (0);
}

EOT
compile="ok"
echo "cc -o conftest conftest.c" >> config.log
cc -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed: compiler had non-zero exit status" >> config.log
	compile="failed"
fi
if [ ! -e "conftest" ]; then
	echo "-> failed: compiler did not produce an executable" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "-> success" >> config.log
	echo "#ifndef HAVE_STRSEP" >> engine/mcconfig.h
echo "#define HAVE_STRSEP" $HAVE_STRSEP >> engine/mcconfig.h
echo "#endif /* HAVE_STRSEP */" >> engine/mcconfig.h

	echo "yes"
else
	echo "no"
fi
echo -n "checking for a strlcat() function..."
echo "checking for a strlcat() function..." >> config.log
cat << EOT > conftest.c
#include <string.h>
int
main(int argc, char *argv[])
{
	(void)strlcat(NULL, NULL, 0);
	return (0);
}

EOT
compile="ok"
echo "cc -o conftest conftest.c" >> config.log
cc -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed: compiler had non-zero exit status" >> config.log
	compile="failed"
fi
if [ ! -e "conftest" ]; then
	echo "-> failed: compiler did not produce an executable" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "-> success" >> config.log
	echo "#ifndef HAVE_STRLCAT" >> engine/mcconfig.h
echo "#define HAVE_STRLCAT" $HAVE_STRLCAT >> engine/mcconfig.h
echo "#endif /* HAVE_STRLCAT */" >> engine/mcconfig.h

	echo "yes"
else
	echo "no"
fi
echo -n "checking for a strlcpy() function..."
echo "checking for a strlcpy() function..." >> config.log
cat << EOT > conftest.c
#include <string.h>
int
main(int argc, char *argv[])
{
	(void)strlcpy(NULL, NULL, 0);
	return (0);
}

EOT
compile="ok"
echo "cc -o conftest conftest.c" >> config.log
cc -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed: compiler had non-zero exit status" >> config.log
	compile="failed"
fi
if [ ! -e "conftest" ]; then
	echo "-> failed: compiler did not produce an executable" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "-> success" >> config.log
	echo "#ifndef HAVE_STRLCPY" >> engine/mcconfig.h
echo "#define HAVE_STRLCPY" $HAVE_STRLCPY >> engine/mcconfig.h
echo "#endif /* HAVE_STRLCPY */" >> engine/mcconfig.h

	echo "yes"
else
	echo "no"
fi
echo -n "checking for an asprintf() function..."
echo "checking for an asprintf() function..." >> config.log
cat << EOT > conftest.c
#include <stdio.h>

int
main(int argc, char *argv[])
{
	char *buf;

	if (asprintf(&buf, "foo %s", "bar") == 0) {
		free(buf);
	    return (0);
	}
	return (1);
}

EOT
compile="ok"
echo "cc -o conftest conftest.c" >> config.log
cc -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed: compiler had non-zero exit status" >> config.log
	compile="failed"
fi
if [ ! -e "conftest" ]; then
	echo "-> failed: compiler did not produce an executable" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "-> success" >> config.log
	echo "#ifndef HAVE_ASPRINTF" >> engine/mcconfig.h
echo "#define HAVE_ASPRINTF" $HAVE_ASPRINTF >> engine/mcconfig.h
echo "#endif /* HAVE_ASPRINTF */" >> engine/mcconfig.h

	echo "yes"
else
	echo "no"
fi
echo -n "checking for a vasprintf() function..."
echo "checking for a vasprintf() function..." >> config.log
cat << EOT > conftest.c
#include <stdio.h>
#include <stdarg.h>

int
testprintf(const char *fmt, ...)
{
	va_list args;
	char *buf;

	va_start(args, fmt);
	if (vasprintf(&buf, "%s", args) == -1) {
		return (-1);
	}
	va_end(args);

	free(buf);
	return (0);
}

int
main(int argc, char *argv[])
{
	return (testprintf("foo %s", "bar"));
}

EOT
compile="ok"
echo "cc -o conftest conftest.c" >> config.log
cc -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed: compiler had non-zero exit status" >> config.log
	compile="failed"
fi
if [ ! -e "conftest" ]; then
	echo "-> failed: compiler did not produce an executable" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "-> success" >> config.log
	echo "#ifndef HAVE_VASPRINTF" >> engine/mcconfig.h
echo "#define HAVE_VASPRINTF" $HAVE_VASPRINTF >> engine/mcconfig.h
echo "#endif /* HAVE_VASPRINTF */" >> engine/mcconfig.h

	echo "yes"
else
	echo "no"
fi
CFLAGS="$CFLAGS -g -I$S"
echo CFLAGS=$CFLAGS >> Makefile.config
if [ "${cc_is_gcc}" = "yes" ]
 then
CFLAGS="$CFLAGS -Wall -Werror -Wmissing-prototypes -Wno-unused"
echo CFLAGS=$CFLAGS >> Makefile.config
fi
echo -n "checking for SDL (http://www.libsdl.org)..."
echo "checking for SDL (http://www.libsdl.org)..." >> config.log
sdl_version=""
which="`which sdl-config`"
if [ -n "$which" -a -x "$which" ]; then
	sdl_version=`${which} --version`
fi
SDL_CFLAGS=""
which="`which sdl-config`"
if [ -n "$which" -a -x "$which" ]; then
	SDL_CFLAGS=`${which} --cflags`
fi
SDL_LIBS=""
which="`which sdl-config`"
if [ -n "$which" -a -x "$which" ]; then
	SDL_LIBS=`${which} --libs`
fi
sdl11_version=""
which="`which sdl11-config`"
if [ -n "$which" -a -x "$which" ]; then
	sdl11_version=`${which} --version`
fi
sdl11_cflags=""
which="`which sdl11-config`"
if [ -n "$which" -a -x "$which" ]; then
	sdl11_cflags=`${which} --cflags`
fi
sdl11_libs=""
which="`which sdl11-config`"
if [ -n "$which" -a -x "$which" ]; then
	sdl11_libs=`${which} --libs`
fi
if [ "${sdl_version}" != "" ]; then
sdl_found=yes
echo SDL_CFLAGS=$SDL_CFLAGS >> Makefile.config
echo SDL_LIBS=$SDL_LIBS >> Makefile.config
else
NONE=1
fi
if [ "${sdl11_version}" != "" ]; then
sdl_found=yes
SDL_CFLAGS=$sdl11_cflags
SDL_LIBS=$sdl11_libs
echo SDL_CFLAGS=$SDL_CFLAGS >> Makefile.config
echo SDL_LIBS=$SDL_LIBS >> Makefile.config
else
NONE=1
fi
if [ "${sdl_found}" = "yes" ]; then
echo "ok"
else
echo "Missing SDL"
exit 1
fi
echo -n "checking for FreeType (http://www.freetype.org)..."
echo "checking for FreeType (http://www.freetype.org)..." >> config.log
FREETYPE_VERSION=""
which="`which freetype-config`"
if [ -n "$which" -a -x "$which" ]; then
	FREETYPE_VERSION=`${which} --version`
fi
FREETYPE_CFLAGS=""
which="`which freetype-config`"
if [ -n "$which" -a -x "$which" ]; then
	FREETYPE_CFLAGS=`${which} --cflags`
fi
FREETYPE_LIBS=""
which="`which freetype-config`"
if [ -n "$which" -a -x "$which" ]; then
	FREETYPE_LIBS=`${which} --libs`
fi
if [ "${FREETYPE_VERSION}" != "" ]; then
freetype_found=yes
echo FREETYPE_CFLAGS=$FREETYPE_CFLAGS >> Makefile.config
echo FREETYPE_LIBS=$FREETYPE_LIBS >> Makefile.config
else
NONE=1
fi
if [ "${freetype_found}" = "yes" ]; then
echo -n "yes..."
else
echo "Cannot find FreeType library"
exit 1
fi
cat << EOT > conftest.c
#include <stdio.h>
#include <freetype2/freetype/freetype.h>
#include <freetype2/freetype/ftoutln.h>

int
main(int argc, char *argv[])
{
	FT_UInt uint;
	FT_Bitmap bitmap;
	FT_Face face;
	FT_Library library;
	FT_Error error;

	error = FT_Init_FreeType(&library);
	if (error) {
		fprintf(stderr, "failed to initialize freetype\n");
		return (1);
	}
	return (0);
}

EOT
compile="ok"
echo "cc -o conftest conftest.c" >> config.log
cc -o conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed: compiler had non-zero exit status" >> config.log
	compile="failed"
fi
if [ ! -e "conftest" ]; then
	echo "-> failed: compiler did not produce an executable" >> config.log
	compile="failed"
fi
rm -f conftest conftest.c
if [ "${compile}" = "ok" ]; then
	echo "-> success" >> config.log
	echo "#ifndef HAVE_FREETYPE" >> engine/mcconfig.h
echo "#define HAVE_FREETYPE" $HAVE_FREETYPE >> engine/mcconfig.h
echo "#endif /* HAVE_FREETYPE */" >> engine/mcconfig.h

	echo "yes"
else
	echo "no"
fi
if [ "${HAVE_FREETYPE}" = "yes" ]; then
echo "works"
else
echo "FreeType2 test failed to compile"
exit 1
fi
if [ "${with_x11}" != "no" ]
 then
echo -n "checking for X11 (http://www.xfree86.org/)..."
echo "checking for X11 (http://www.xfree86.org/)..." >> config.log
if [ -d /usr/X11R6 ]; then
X11BASE=/usr/X11R6
X11_CFLAGS=-I/usr/X11R6/include
X11_LIBS="-L/usr/X11R6/lib -lX11"
else
NONE=1
fi
if [ -d /usr/X386 ]; then
X11BASE=/usr/X386
X11_CFLAGS=-I/usr/X386/include
X11_LIBS="-L/usr/X386/lib -lX11"
else
NONE=1
fi
if [ -d /usr/bin/X11 ]; then
X11BASE=/usr/bin/X11
X11_CFLAGS=-I/usr/bin/X11/include
X11_LIBS="-L/usr/bin/X11/lib -lX11"
else
NONE=1
fi
if [ "${X11BASE}" != "" ]; then
echo -n "ok"
echo ", $X11BASE"
x11_found=yes
echo X11BASE=$X11BASE >> Makefile.config
echo X11_CFLAGS=$X11_CFLAGS >> Makefile.config
echo X11_LIBS=$X11_LIBS >> Makefile.config
else
echo "missing"
exit 1
fi
	if [ "${x11_found}" = "yes" ]
 then
USE_X11=1
echo "#ifndef USE_X11" >> engine/mcconfig.h
echo "#define USE_X11" $USE_X11 >> engine/mcconfig.h
echo "#endif /* USE_X11 */" >> engine/mcconfig.h
	fi
fi
if [ "${enable_xdebug}" = "yes" -a "${x11_found}" = "yes" ]
 then
XDEBUG=1
echo "#ifndef XDEBUG" >> engine/mcconfig.h
echo "#define XDEBUG" $XDEBUG >> engine/mcconfig.h
echo "#endif /* XDEBUG */" >> engine/mcconfig.h
fi
if [ "${enable_debug}" = "yes" ]
 then
DEBUG=1
echo "#ifndef DEBUG" >> engine/mcconfig.h
echo "#define DEBUG" $DEBUG >> engine/mcconfig.h
echo "#endif /* DEBUG */" >> engine/mcconfig.h
LOCKDEBUG=1
echo "#ifndef LOCKDEBUG" >> engine/mcconfig.h
echo "#define LOCKDEBUG" $LOCKDEBUG >> engine/mcconfig.h
echo "#endif /* LOCKDEBUG */" >> engine/mcconfig.h
fi
if [ "${enable_map_editor}" != "no" ]
 then
MAPEDIT=1
echo "#ifndef MAPEDIT" >> engine/mcconfig.h
echo "#define MAPEDIT" $MAPEDIT >> engine/mcconfig.h
echo "#endif /* MAPEDIT */" >> engine/mcconfig.h
fi
if [ "${enable_serialization}" != "no" ]
 then
SERIALIZATION=1
echo "#ifndef SERIALIZATION" >> engine/mcconfig.h
echo "#define SERIALIZATION" $SERIALIZATION >> engine/mcconfig.h
echo "#endif /* SERIALIZATION */" >> engine/mcconfig.h
fi
if [ "${enable_8bpp}" != "no" ]
 then
VIEW_8BPP=1
echo "#ifndef VIEW_8BPP" >> engine/mcconfig.h
echo "#define VIEW_8BPP" $VIEW_8BPP >> engine/mcconfig.h
echo "#endif /* VIEW_8BPP */" >> engine/mcconfig.h
fi
if [ "${enable_16bpp}" != "no" ]
 then
VIEW_16BPP=1
echo "#ifndef VIEW_16BPP" >> engine/mcconfig.h
echo "#define VIEW_16BPP" $VIEW_16BPP >> engine/mcconfig.h
echo "#endif /* VIEW_16BPP */" >> engine/mcconfig.h
fi
if [ "${enable_24bpp}" != "no" ]
 then
VIEW_24BPP=1
echo "#ifndef VIEW_24BPP" >> engine/mcconfig.h
echo "#define VIEW_24BPP" $VIEW_24BPP >> engine/mcconfig.h
echo "#endif /* VIEW_24BPP */" >> engine/mcconfig.h
fi
if [ "${enable_32bpp}" != "no" ]
 then
VIEW_32BPP=1
echo "#ifndef VIEW_32BPP" >> engine/mcconfig.h
echo "#define VIEW_32BPP" $VIEW_32BPP >> engine/mcconfig.h
echo "#endif /* VIEW_32BPP */" >> engine/mcconfig.h
fi
echo PREFIX=$PREFIX >> Makefile.config
echo "#ifndef PREFIX" >> engine/mcconfig.h
echo "#define PREFIX \"$PREFIX\"" >> engine/mcconfig.h
echo "#endif /* PREFIX */" >> engine/mcconfig.h
echo "Don't forget to run \"make depend\"."
