# Public domain
#
# This is a BSDBuild configure script source. The ./configure script is
# generated from this file via mkconfigure(1). For more information, see:
# http://bsdbuild.hypertriton.com/.
#

# Version information
PACKAGE("Agar")
VERSION("1.5.0")
RELEASE("A Mild Breeze upon the Brow of the Dead")

# Register options for configure --help
REGISTER_SECTION("Global Agar options:")
REGISTER("--enable-<library>",		"Build libraries (gui|vg|math|dev|au) [all]")
REGISTER("--enable-debug",		"General debugging [no]")
REGISTER("--enable-legacy",		"Deprecated interfaces [yes]")
REGISTER("--enable-threads",		"Thread safety [check]")
REGISTER("--enable-warnings",		"Suggested compiler warnings [no]")
REGISTER("--with-pthreads[=PREFIX]",	"POSIX Threads support [check]")

REGISTER_SECTION("Options specific to CORE library:")
REGISTER("--enable-debug-core",		"Expensive AG_Object debugging [no]")
REGISTER("--enable-network",		"Network interface [check]")
REGISTER("--with-db4[=PREFIX]",		"AG_Db: Berkeley DB backend [check]")
REGISTER("--with-mysql[=PREFIX]",	"AG_Db: MySQL backend [no]")
REGISTER("--with-iconv[=PREFIX]",	"Character set conversion [check]")

REGISTER_SECTION("Options specific to MATH library:")
REGISTER("--with-<mode>-fp",    	"Precision (single|double|quad) [double]")
REGISTER("--with-altivec",		"AltiVec-optimized routines [check]")
REGISTER("--with-altivec-inline",	"Inline Altivec-optimized routines [no]")
REGISTER("--with-sse",			"SSE-optimized routines [check]")
REGISTER("--with-sse-inline",		"Inline SSE-optimized routines [no]")
REGISTER("--without-sse[234]",		"Disable SSE2/SSE3 [check]")

REGISTER_SECTION("Options specific to AU library:")
REGISTER("--with-sndfile[=PREFIX]",	"Enable sndfile support [check]")
REGISTER("--with-portaudio[=PREFIX]",	"Enable portaudio driver [check]")

REGISTER_SECTION("Options specific to GUI library:")
REGISTER("--enable-debug-gui",		"Expensive GUI debugging [no]")
REGISTER("--with-freetype[=PREFIX]",	"Enable FreeType support [check]")
REGISTER("--with-fontconfig[=PREFIX]",	"Enable Fontconfig support [check]")
REGISTER("--with-gl[=PREFIX]",		"OpenGL rendering support [check]")
REGISTER("--with-jpeg[=PREFIX]",	"Built-in JPEG image support [check]")
REGISTER("--with-png[=PREFIX]",		"Built-in PNG image support [check]")
REGISTER("--with-x[=PREFIX]",		"Build with X windows support [check]")
REGISTER("--with-xinerama[=PREFIX]",	"Build with Xinerama support [check]")
REGISTER("--with-glx[=PREFIX]",		"Enable accelerated X driver [check]")
REGISTER("--with-sdl[=PREFIX]",		"Enable SDL 1.2 driver [check]")
REGISTER("--with-wgl",			"Enable MS Windows driver [check]")
REGISTER("--with-cocoa",		"Enable MacOS X Cocoa driver [check]")
REGISTER("--with-uim[=PREFIX]",		"Enable UIM input method [no]")

DEFAULT_DIR(DATADIR, "${PREFIX}/share/agar")
DEFAULT_DIR(LOCALEDIR, "${DATADIR}/locale")
DEFAULT_DIR(TTFDIR, "${DATADIR}/fonts")
DEFAULT_DIR(INCLDIR, "${PREFIX}/include/agar")

if [ "${DATADIR}" = "NONE" ]; then
	HDEFINE(LOCALEDIR, "NONE")
	MDEFINE(LOCALEDIR, "NONE")
	HDEFINE(TTFDIR, "NONE")
	MDEFINE(TTFDIR, "NONE")
fi

# Tests
REQUIRE(cc)
CHECK(cc_attributes)
CHECK(objc)
CHECK(sys_types)
CHECK(stdlib_h)
CHECK(unistd_h)
CHECK(limits_h)
CHECK(float_h)
CHECK(math)
CHECK(math_c99)
CHECK(getpwuid)
CHECK(getpwnam_r)
CHECK(getenv)
CHECK(getuid)
CHECK(strsep)
CHECK(asprintf)
CHECK(snprintf)
CHECK(vsnprintf)
CHECK(vasprintf)
CHECK(signal)
CHECK(setjmp)
CHECK(strtoll)
CHECK(strtold)
CHECK(byte_order)
CHECK(dlopen)
CHECK(dyld)
CHECK(shl_load)
CHECK(gettimeofday)
CHECK(select)
CHECK(glob)
CHECK(getopt)
CHECK(execvp)
CHECK(clock_gettime)
CHECK(clock_win32)
CHECK(nanosleep)
CHECK(kqueue)
CHECK(timerfd)
CHECK(csidl)
CHECK(xbox)

# C compiler options
C_DEFINE(_AGAR_INTERNAL)
C_DEFINE(_BSD_SOURCE)
C_NO_SECURE_WARNINGS()
#C_EXTRA_WARNINGS()
#C_FATAL_WARNINGS()

if [ "${enable_warnings}" = "yes" ]; then
	C_OPTION(-Wall)
	C_OPTION(-Werror)
	C_OPTION(-Wmissing-prototypes)
	C_OPTION(-Wno-switch)
	MDEFINE(WNO_UNINITIALIZED, "-Wno-uninitialized")
else
	MDEFINE(WNO_UNINITIALIZED, "")
fi

if [ "${enable_debug}" = "yes" ]; then
	HDEFINE(AG_DEBUG, "yes")
	MDEFINE(CFLAGS, "${CFLAGS} -g")
else
	HUNDEF(AG_DEBUG)
fi
if [ "${enable_debug_core}" = "yes" ]; then
	HDEFINE(AG_DEBUG_CORE, "yes")
else
	HUNDEF(AG_DEBUG_CORE)
fi
if [ "${enable_debug_gui}" = "yes" ]; then
	HDEFINE(AG_DEBUG_GUI, "yes")
else
	HUNDEF(AG_DEBUG_GUI)
fi
if [ "${enable_legacy}" != "no" ]; then
	HDEFINE(AG_LEGACY, "yes")
else
	HUNDEF(AG_LEGACY)
fi

#
# Options specific to the Agar-GUI library.
#
if [ "${enable_gui}" != "no" ]; then
	HDEFINE(ENABLE_GUI, "yes")
	MDEFINE(SUBDIR_gui, "gui")

	# Enable SDL support if the SDL library is found.
	if [ "${with_sdl}" != "no" ]; then
		CHECK(sdl, 1.2.0, ${prefix_sdl})
		if [ "${HAVE_SDL}" != "yes" ]; then
			if [ "${with_sdl}" = "yes" ]; then
				echo "*"
				echo "* --with-sdl was requested, but the SDL "
				echo "* library was not found."
				echo "*"
				exit 1
			else
				HUNDEF(HAVE_SDL)
			fi
		fi
	else
		HUNDEF(HAVE_SDL)
	fi

	# Enable OpenGL support if an OpenGL library is found.
	if [ "${with_gl}" != "no" ]; then
		CHECK(opengl, 0, ${prefix_gl})
		if [ "${HAVE_OPENGL}" = "yes" ]; then
			MDEFINE(SDL_CFLAGS, "$SDL_CFLAGS $OPENGL_CFLAGS")
		else
			if [ "${with_gl}" = "yes" ]; then
				echo "*"
				echo "* --with-gl was requested, but no OpenGL"
				echo "* library was found."
				echo "*"
				exit 1
			else
				HUNDEF(HAVE_OPENGL)
			fi
		fi
	else
		HUNDEF(HAVE_OPENGL)
	fi
	
	# Enable X Windows support if Xlib is found.
	if [ "${with_x}" != "no" ]; then
		CHECK(x11, 0, ${prefix_x})
		if [ "${HAVE_X11}" != "yes" ]; then
			if [ "${with_x}" = "yes" ]; then
				echo "*"
				echo "* --with-x was requested, but Xlib "
				echo "* was not found."
				echo "*"
				exit 1
			else
				HUNDEF(HAVE_X11)
			fi
		fi
		if [ "${with_xinerama}" != "no" ]; then
			CHECK(xinerama, 0, ${prefix_xinerama})
			if [ "${HAVE_XINERAMA}" != "yes" ]; then
				if [ "${with_xinerama}" = "yes" ]; then
					echo "*"
					echo "* --with-xinerama was requested, but the "
					echo "* Xinerama extension was not found."
					echo "*"
					exit 1
				else
					HUNDEF(HAVE_XINERAMA)
				fi
			fi
		else
			HUNDEF(HAVE_XINERAMA)
		fi
	else
		HUNDEF(HAVE_X11)
	fi
	
	# Enable MacOS X / Cocoa support if Cocoa is found.
	if [ "${with_cocoa}" != "no" ]; then
		CHECK(cocoa, 0)
		if [ "${HAVE_COCOA}" != "yes" ]; then
			if [ "${with_cocoa}" = "yes" ]; then
				echo "*"
				echo "* --with-cocoa was requested, but the "
				echo "* Cocoa framework was not found."
				echo "*"
				exit 1
			else
				HUNDEF(HAVE_COCOA)
			fi
		fi
	else
		HUNDEF(HAVE_COCOA)
	fi

	#
	# Platform-specific OpenGL APIs
	#
	if [ "${HAVE_OPENGL}" = "yes" ]; then
		# Enable GLX support if the GLX library is found.
		if [ "${with_glx}" != "no" ]; then
			CHECK(glx, 1.4, ${prefix_glx})
			if [ "${HAVE_GLX}" != "yes" ]; then
				if [ "${with_glx}" = "yes" ]; then
					echo "*"
					echo "* --with-glx was requested, but no"
					echo "* compatible GLX library was found."
					echo "*"
					exit 1
				else
					HUNDEF(HAVE_GLX)
				fi
			fi
		else
			HUNDEF(HAVE_GLX)
		fi
		
		# Enable WGL support on Windows.
		if [ "${with_wgl}" != "no" ]; then
			CHECK(wgl, 0)
			if [ "${HAVE_WGL}" != "yes" ]; then
				if [ "${with_wgl}" = "yes" ]; then
					echo "*"
					echo "* --with-wgl was requested, but the"
					echo "* WGL test has failed."
					echo "*"
					exit 1
				else
					HUNDEF(HAVE_WGL)
				fi
			fi
		else
			HUNDEF(HAVE_WGL)
		fi
	else
		HUNDEF(HAVE_WGL)
		HUNDEF(HAVE_GLX)
	fi
	
	# Enable Freetype support if the Freetype library is found. Otherwise
	# fall back to the bitmap font engine.
	if [ "${with_freetype}" != "no" ]; then
		CHECK(freetype, 7.0.1, ${prefix_freetype})
		if [ "${HAVE_FREETYPE}" != "yes" ]; then
			echo "*"
			echo "* The FreeType library was not found, aborting!"
			echo "*"
			echo "* Agar needs FreeType to display vector fonts"
			echo "* (http://www.freetype.org/)."
			echo "*"
			echo "* If you really want to use Agar's built-in"
			echo "* monospace bitmap font engine (not recommended),"
			echo "* please use: ./configure --without-freetype"
			echo "*"
			exit 1
		fi
	else
		HUNDEF(HAVE_FREETYPE)
	fi
	
	# Use fontconfig if available.
	if [ "${with_fontconfig}" != "no" ]; then
		CHECK(fontconfig, 2.6.0, ${prefix_fontconfig})
	else
		HUNDEF(HAVE_FONTCONFIG)
	fi
	
	# Enable JPEG format support if libjpeg is found.
	if [ "${with_jpeg}" != "no" ]; then
		CHECK(jpeg, 0, ${prefix_jpeg})
		if [ "${HAVE_JPEG}" != "yes" ]; then
			if [ "${with_jpeg}" = "yes" ]; then
				echo "*"
				echo "* --with-jpeg was requested, but libjpeg"
				echo "* was not found."
				echo "*"
				exit 1
			else
				HUNDEF(HAVE_JPEG)
			fi
		fi
	else
		HUNDEF(HAVE_JPEG)
	fi
	
	# Enable PNG format support if libpng is found.
	if [ "${with_png}" != "no" ]; then
		CHECK(png, 1.2.49, ${prefix_png})
		if [ "${HAVE_PNG}" != "yes" ]; then
			if [ "${with_png}" = "yes" ]; then
				echo "*"
				echo "* --with-png was requested, but libpng"
				echo "* was not found."
				echo "*"
				exit 1
			else
				HUNDEF(HAVE_PNG)
				HUNDEF(HAVE_LIBPNG14)
			fi
		fi
	else
		HUNDEF(HAVE_PNG)
		HUNDEF(HAVE_LIBPNG14)
	fi

else
	HUNDEF(ENABLE_GUI)
	MDEFINE(SUBDIR_gui, "")

	HUNDEF(HAVE_SDL)
	HUNDEF(HAVE_X11)
	HUNDEF(HAVE_COCOA)
	HUNDEF(HAVE_OPENGL)
	HUNDEF(HAVE_GLX)
	HUNDEF(HAVE_WGL)
	HUNDEF(HAVE_FREETYPE)
	HUNDEF(HAVE_FONTCONFIG)
	HUNDEF(HAVE_JPEG)
	HUNDEF(HAVE_PNG)
	HUNDEF(HAVE_LIBPNG14)
fi

# Enable network interface unless requested otherwise.
if [ "${enable_network}" != "no" ]; then
	CHECK(getaddrinfo)
	CHECK(siocgifconf)
	CHECK(sockopts)
	CHECK(winsock)
	MDEFINE(HAVE_NETWORK, "yes")
	HDEFINE(AG_NETWORK, "yes")
else
	MDEFINE(HAVE_NETWORK, "no")
	HUNDEF(AG_NETWORK)
	HUNDEF(HAVE_GETADDRINFO)
	HUNDEF(HAVE_SETSOCKOPT)
	 HUNDEF(HAVE_SO_OOBINLINE)
	 HUNDEF(HAVE_SO_REUSEPORT)
	 HUNDEF(HAVE_SO_TIMESTAMP)
	 HUNDEF(HAVE_SO_NOSIGPIPE)
	 HUNDEF(HAVE_SO_LINGER)
	 HUNDEF(HAVE_SO_ACCEPTFILTER)
	HUNDEF(HAVE_WINSOCK1)
	HUNDEF(HAVE_WINSOCK2)
	HUNDEF(HAVE_SIOCGIFCONF)
fi
	
# Enable Berkeley DB backend for AG_Db if available.
if [ "${with_db4}" != "no" ]; then
	CHECK(db4, 0, ${prefix_db4})
	if [ "${HAVE_DB4}" != "yes" ]; then
		if [ "${with_db4}" = "yes" ]; then
			echo "*"
			echo "* --with-db4 was requested, but Berkeley DB"
			echo "* was not found."
			echo "*"
			exit 1
		else
			HUNDEF(HAVE_DB4)
		fi
	fi
else
	HUNDEF(HAVE_DB4)
fi

# Enable MySQL backend for AG_Db if requested.
if [ "${with_mysql}" = "yes" ]; then
	CHECK(mysql, 5.5.8, ${prefix_mysql})
	if [ "${HAVE_MYSQL}" != "yes" ]; then
		if [ "${with_mysql}" = "yes" ]; then
			echo "*"
			echo "* --with-mysql was requested, but libmysqlclient"
			echo "* was not found."
			echo "*"
			exit 1
		else
			HUNDEF(HAVE_MYSQL)
		fi
	fi
else
	HUNDEF(HAVE_MYSQL)
fi

# Enable threads support if POSIX threads are available.
if [ "${enable_threads}" != "no" ]; then
	CHECK(pthreads, 0, ${prefix_pthreads})
	if [ "${HAVE_PTHREADS}" = "yes" ];
	then
		HDEFINE(AG_THREADS, "yes")
		if [ "${HAVE_PTHREADS_XOPEN}" = "no" ]; then
		if [ "${HAVE_PTHREAD_MUTEX_RECURSIVE}" = "no" ]; then
		if [ "${HAVE_PTHREAD_MUTEX_RECURSIVE_NP}" = "no" ]; then
			HUNDEF(AG_THREADS)
			if [ "${enable_threads}" = "yes" ]; then
				echo "*"
				echo "* --enable-threads was given, but your"
				echo "* pthreads library seems to lack support"
				echo "* for recursive mutexes."
				echo "*"
				exit 1
			fi
		fi
		fi
		fi
	else
		HUNDEF(AG_THREADS)
		if [ "${enable_threads}" = "yes" ]; then
			echo "*"
			echo "* --enable-threads was given, but no pthreads"
			echo "* library was found on your system."
			echo "*"
			exit 1
		fi
	fi
else
	HUNDEF(AG_THREADS)
	HUNDEF(HAVE_PTHREADS)
	HUNDEF(HAVE_PTHREADS_XOPEN)
	#
	# Lock macros expand to no-ops when compiled !AG_THREADS, which may
	# result in unused variables in some places.
	#
	if [ "${enable_warnings}" = "yes" ]; then
		C_OPTION(-Wno-unused)
	fi
fi

# Enable UIM input method support if requested.
if [ "${with_uim}" = "yes" ]; then
	CHECK(uim, 1.8.0, ${prefix_uim})
	if [ "${HAVE_UIM}" != "yes" ]; then
		if [ "${with_uim}" = "yes" ]; then
			echo "*"
			echo "* --with-uim was requested, but the uim "
			echo "* framework is not installed."
			echo "*"
			exit 1
		else
			HUNDEF(HAVE_UIM)
		fi
	fi
else
	HUNDEF(HAVE_UIM)
fi
	
# Enable NLS if requested explicitely.
if [ "${enable_nls}" = "yes" ]; then
	CHECK(iconv, 0, ${prefix_iconv})
	CHECK(gettext, 0, ${prefix_gettext})
	if [ "${HAVE_GETTEXT}" != "yes" ]; then
		echo "*"
		echo "* --enable-nls was given but gettext was not found."
		echo "*"
		exit 1
	fi
else
	HUNDEF(HAVE_ICONV)
	HUNDEF(HAVE_GETTEXT)
fi

#
# Options specific to the Agar-Math library
#
if [ "${enable_math}" != "no" ]; then
	HDEFINE(ENABLE_MATH, "yes")
	MDEFINE(SUBDIR_math, "math")
else
	HUNDEF(ENABLE_MATH)
	MDEFINE(SUBDIR_math, "")
fi

# Enable AltiVec optimizations if compiler supports AltiVec.
if [ "${with_altivec}" != "no" ]; then
	CHECK(altivec)
	if [ "${HAVE_ALTIVEC}" != "yes" ]; then
		if [ "${with_altivec}" = "yes" ]; then
			echo "*"
			echo "* --with-altivec was requested, but "
			echo "* AltiVec is not supported by compiler"
			echo "*"
			exit 1
		else
			HUNDEF(HAVE_ALTIVEC)
			HUNDEF(HAVE_ALTIVEC_H)
			HUNDEF(INLINE_ALTIVEC)
		fi
	else
		if [ "${with_altivec_inline}" = "yes" ]; then
			HDEFINE(INLINE_ALTIVEC, "yes")
		else
			HUNDEF(INLINE_ALTIVEC)
		fi
	fi
else
	HUNDEF(HAVE_ALTIVEC)
	HUNDEF(HAVE_ALTIVEC_H)
	HUNDEF(INLINE_ALTIVEC)
fi

#
# Enable SSE optimizations if compiler supports intrinsics. Note that the
# library performs a CPU check, so enabling SSE will not break the build
# on non-SSE machines (unless --with-sse-inline is used, in which case
# the resulting build will be SSE-dependent).
#
if [ "${with_sse}" != "no" ]; then
	CHECK(sse)
	if [ "${HAVE_SSE}" != "yes" ]; then
		if [ "${with_sse}" = "yes" ]; then
			echo "*"
			echo "* --with-sse was requested, but SSE "
			echo "* intrinsics not supported by compiler"
			echo "*"
			exit 1
		else
			HUNDEF(HAVE_SSE)
			HUNDEF(INLINE_SSE)
		fi
	else
		if [ "${with_sse_inline}" = "yes" ]; then
			HDEFINE(INLINE_SSE, "yes")
		else
			HUNDEF(INLINE_SSE)
		fi
		if [ "${with_sse2}" = "no" ]; then
			HUNDEF(HAVE_SSE2)
		fi
		if [ "${with_sse3}" = "no" ]; then
			HUNDEF(HAVE_SSE3)
		fi
	fi
else
	HUNDEF(HAVE_SSE)
	HUNDEF(HAVE_SSE2)
	HUNDEF(HAVE_SSE3)
	HUNDEF(INLINE_SSE)
fi

# Specify floating-point precision to use.
if [ "${with_single_fp}" = "yes" ]; then
	if [ "${HAVE_MATH_C99}" != "yes" ]; then
		echo "*"
		echo "* --with-single-fp was requested, but your compiler does"
		echo "* not support the C99 math routines (sinf(), etc)."
		echo "*"
		exit 1
	fi
	HDEFINE(SINGLE_PRECISION, "yes")
else
	HUNDEF(SINGLE_PRECISION)
fi
if [ "${with_double_fp}" != "no" ]; then
	HDEFINE(DOUBLE_PRECISION, "yes")
else
	HUNDEF(DOUBLE_PRECISION)
fi
if [ "${with_quad_fp}" = "yes" ]; then
	if [ "${HAVE_LONG_DOUBLE}" != "yes" ]; then
		echo "*"
		echo "* --with-quad-fp was requested, but your compiler"
		echo "* does not support the C99 long double type."
		echo "*"
		exit 1
	fi
	if [ "${HAVE_MATH_C99}" != "yes" ]; then
		echo "*"
		echo "* --with-quad-fp was requested, but the C99 math"
		echo "* routines (sinl(), etc.) are not available."
		echo "*"
		exit 1
	fi
	HDEFINE(QUAD_PRECISION, "yes")
else
	HUNDEF(QUAD_PRECISION)
fi

#
# Options specific to the Agar-VG library
#
if [ "${enable_vg}" != "no" -a "${enable_gui}" != "no" ]; then
	HDEFINE(ENABLE_VG, "yes")
	MDEFINE(SUBDIR_vg, "vg")
else
	HUNDEF(ENABLE_VG)
	MDEFINE(SUBDIR_vg, "")
fi

#
# Options specific to the Agar-DEV library
#
if [ "${enable_dev}" != "no" -a "${enable_gui}" != "no" ]; then
	HDEFINE(ENABLE_DEV, "yes")
	MDEFINE(SUBDIR_dev, "dev")
else
	HUNDEF(ENABLE_DEV)
	MDEFINE(SUBDIR_dev, "")
fi

#
# Options specific to the Agar-AU library
#
if [ "${enable_au}" != "no" -a "${enable_audio}" != "no" ]; then
	CHECK(sndfile, 1.0.21, ${prefix_sndfile})
	if [ "${HAVE_SNDFILE}" = "yes" ]; then
		HDEFINE(ENABLE_AU, "yes")
		MDEFINE(SUBDIR_au, "au")
		CHECK(portaudio, 19.0, ${prefix_portaudio})
	else
		if [ "${enable_au}" = "yes" -o "${enable_audio}" = "yes" ]; then
			echo "*"
			echo "* --enable-au was requested, but the sndfile library"
			echo "* (required) is not installed."
			echo "*"
			exit 1
		fi
		HUNDEF(ENABLE_AU)
		MDEFINE(SUBDIR_au, "")
		HUNDEF(HAVE_SNDFILE)
		HUNDEF(HAVE_PORTAUDIO)
	fi
else
	HUNDEF(ENABLE_AU)
	MDEFINE(SUBDIR_au, "")
	HUNDEF(HAVE_SNDFILE)
	HUNDEF(HAVE_PORTAUDIO)
fi

#
# Conditionally compiled sources in Agar-Core
#
MDEFINE(SRCS_CORE, "")
if [ "${HAVE_SNPRINTF}" != "yes" ]; then
	MAPPEND(SRCS_CORE, "snprintf.c")
fi
if [ "${HAVE_CLOCK_WIN32}" = "yes" ]; then
	MAPPEND(SRCS_CORE, "time_win32.c")
fi
if [ "${HAVE_CLOCK_GETTIME}" = "yes" ]; then
	if [ "${HAVE_NANOSLEEP}" = "yes" ]; then
		MAPPEND(SRCS_CORE, "time_posix.c")
	fi
	if [ "${HAVE_PTHREADS}" = "yes" ]; then
		MAPPEND(SRCS_CORE, "time_renderer.c")
	fi
fi
if [ "${HAVE_GETTIMEOFDAY}" = "yes" ]; then
	if [ "${HAVE_SELECT}" = "yes" ]; then
		MAPPEND(SRCS_CORE, "time_gettimeofday.c")
	fi
fi
if [ "${HAVE_DB4}" = "yes" ]; then
	MAPPEND(SRCS_CORE, "db_bdb.c")
fi
if [ "${HAVE_MYSQL}" = "yes" ]; then
	MAPPEND(SRCS_CORE, "db_mysql.c")
fi
if [ "${HAVE_NETWORK}" = "yes" ]; then
	MAPPEND(SRCS_CORE, "net.c net_dummy.c")
	if [ "${HAVE_WINSOCK1}" = "yes" ]; then
		MAPPEND(SRCS_CORE, "net_winsock1.c")
	fi
	if [ "${HAVE_WINSOCK2}" = "yes" ]; then
		MAPPEND(SRCS_CORE, "net_winsock2.c")
	fi
	if [ "${HAVE_GETADDRINFO}" = "yes" ]; then
		MAPPEND(SRCS_CORE, "net_bsd.c")
	fi
fi
if [ "${HAVE_GETPWUID}" = "yes" ]; then
	MAPPEND(SRCS_CORE, "user_posix.c")
fi
if [ "${HAVE_XBOX}" = "yes" ]; then
	MAPPEND(SRCS_CORE, "user_xbox.c xbox.c")
fi
if [ "${HAVE_CSIDL}" = "yes" ]; then
	MAPPEND(SRCS_CORE, "user_win32.c")
fi

#
# Conditionally compiled sources in Agar-GUI
#
MDEFINE(SRCS_GUI, "")
if [ "${HAVE_SDL}" = "yes" ]; then
	MAPPEND(SRCS_GUI, "drv_sdl_common.c drv_sdlfb.c")
	if [ "${HAVE_OPENGL}" = "yes" ]; then
		MAPPEND(SRCS_GUI, "drv_sdlgl.c")
	fi
fi
if [ "${HAVE_OPENGL}" = "yes" ]; then
	MAPPEND(SRCS_GUI, "drv_gl_common.c")
	if [ "${HAVE_GLX}" = "yes" ]; then
		MAPPEND(SRCS_GUI, "drv_glx.c")
	fi
	if [ "${HAVE_WGL}" = "yes" ]; then
		MAPPEND(SRCS_GUI, "drv_wgl.c")
	fi
fi
if [ "${HAVE_COCOA}" = "yes" ]; then
	MAPPEND(SRCS_GUI, "drv_cocoa.m")
fi

#
# Conditionally compiled sources in Agar-AU
#
MDEFINE(SRCS_AU, "")
if [ "${AG_THREADS}" = "yes" ]; then
	if [ "${HAVE_SNDFILE}" = "yes" ]; then
		MAPPEND(SRCS_AU, "au_dev_file.c")
	fi
	if [ "${HAVE_PORTAUDIO}" = "yes" ]; then
		MAPPEND(SRCS_AU, "au_dev_pa.c")
	fi
fi

# Set up configure script output
C_INCPREP($BLD/include/agar)
C_INCDIR($BLD/include)
C_INCDIR_CONFIG($BLD/include/agar/config)

# Generate the "foo-config" scripts.
CONFIG_SCRIPT(agar-config,\
	"-I${INCLDIR} ${SDL_CFLAGS} ${FREETYPE_CFLAGS} ${FONTCONFIG_CFLAGS} \
	${OPENGL_CFLAGS} ${X11_CFLAGS} ${GLX_CFLAGS} ${XINERAMA_CFLAGS} \
	${COCOA_CFLAGS} ${MATH_CFLAGS} ${PNG_CFLAGS} ${PTHREADS_CFLAGS} \
	${DB4_CFLAGS} ${MYSQL_CFLAGS} ${GETTEXT_CFLAGS} ${DSO_CFLAGS} \
	${CLOCK_CFLAGS} ${UIM_CFLAGS} ${ICONV_CFLAGS}",\
	"-L${LIBDIR} -lag_gui -lag_core ${SDL_LIBS} ${FREETYPE_LIBS} \
	${FONTCONFIG_LIBS} ${OPENGL_LIBS} ${X11_LIBS} ${XINERAMA_LIBS} \
	${COCOA_LIBS} ${MATH_LIBS} ${JPEG_LIBS} ${PNG_LIBS} ${PTHREADS_LIBS} \
	${DB4_LIBS} ${MYSQL_LIBS} ${GETTEXT_LIBS} ${DSO_LIBS} ${CLOCK_LIBS} \
	${UIM_LIBS} ${ICONV_LIBS}")
CONFIG_SCRIPT(agar-core-config,\
	"-I${INCLDIR} ${MATH_CFLAGS} ${GETTEXT_CFLAGS} ${DSO_CFLAGS} \
	${CLOCK_CFLAGS} ${ICONV_CFLAGS}",\
	"-L${LIBDIR} -lag_core ${MATH_LIBS} ${PTHREADS_LIBS} ${DB4_LIBS} \
	${MYSQL_LIBS} ${GETTEXT_LIBS} ${DSO_LIBS} ${CLOCK_LIBS} ${ICONV_LIBS}")
CONFIG_SCRIPT(agar-dev-config,\
	"-I${INCLDIR}",\
	"-L${LIBDIR} -lag_dev")
CONFIG_SCRIPT(agar-math-config,\
	"-I${INCLDIR} ${MATH_CFLAGS} ${ALTIVEC_CFLAGS} \
	${SSE_CFLAGS} ${SSE2_CFLAGS} ${SSE3_CFLAGS} ${MATH_CFLAGS}", \
	"-L${LIBDIR} -lag_math ${MATH_LIBS}")
CONFIG_SCRIPT(agar-vg-config,\
	"-I${INCLDIR}", "-L${LIBDIR} -lag_vg")
CONFIG_SCRIPT(agar-au-config,\
	"-I${INCLDIR} ${PORTAUDIO_CFLAGS} ${SNDFILE_CFLAGS}",\
	"-L${LIBDIR} -lag_au ${PORTAUDIO_LIBS} ${SNDFILE_LIBS}")
