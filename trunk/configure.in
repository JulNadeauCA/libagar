# $Csoft: configure.in,v 1.88 2005/05/08 02:10:27 vedge Exp $
# Public domain

REGISTER("--with-gl",		"OpenGL rendering support [default: check]")
REGISTER("--with-jpeg",		"JPEG screenshot support [default: no]")
REGISTER("--with-freetype",	"GUI: Enable FreeType support [default: check]")
REGISTER("--with-ode",		"SG: ODE physics interface [default: check]")
REGISTER("--with-cg",		"SG: CG shader support [default: check]")
REGISTER("--with-sse",		"SSE/SSE2/SSE3 optimizations [default: check]")
REGISTER("--with-sse-inline",	"Inline SSE operations [default: no]")
REGISTER("--with-sse2-inline",	"Inline SSE2 operations [default: no]")
REGISTER("--with-sse3-inline",	"Inline SSE3 operations [default: no]")
REGISTER("--with-altivec",	"AltiVec optimizations [default: check]")
REGISTER("--with-altivec-inline", "Inline AltiVec operations [default: no]")
REGISTER("--enable-threads",	"Thread safety [default: no]")
REGISTER("--enable-utf8",	"Unicode text/input support [default: yes]")
REGISTER("--enable-8bpp",	"Support for 8 bpp display [default: yes]")
REGISTER("--enable-16bpp",	"Support for 16 bpp display [default: yes]")
REGISTER("--enable-24bpp",	"Support for 24 bpp display [default: yes]")
REGISTER("--enable-32bpp",	"Support for 32 bpp display [default: yes]")
REGISTER("--enable-warnings",	"Suggested compiler warnings [default: no]")
REGISTER("--enable-network",	"Build network client library [default: check]")
REGISTER("--enable-server",	"Build network server library [default: no]")

# Agar version
HDEFINE(VERSION, "10142007")
HDEFINE(RELEASE, "The Birth Of An Era Obscured By Sulfur And Flames")

# Installation directories
MDEFINE(SHAREDIR, "\${PREFIX}/share/agar")
HDEFINE(SHAREDIR, "$PREFIX/share/agar")
MDEFINE(LOCALEDIR, "\${PREFIX}/share/agar/locale")
HDEFINE(LOCALEDIR, "$PREFIX/share/agar/locale")
MDEFINE(TTFDIR, "\${PREFIX}/share/agar/fonts")
HDEFINE(TTFDIR, "$PREFIX/share/agar/fonts")
MDEFINE(LIBDIR, "\${PREFIX}/lib")
HDEFINE(LIBDIR, "$PREFIX/lib")
MDEFINE(INCLDIR, "\${PREFIX}/include/agar")
HDEFINE(INCLDIR, "$PREFIX/include/agar")
MDEFINE(MANDIR, "\${PREFIX}/share/man")
MDEFINE(PSDIR, "\${PREFIX}/share/agar/doc")

CHECK(cc)
CHECK(sys_types)
CHECK(sys_queue)
CHECK(stdlib_h)
CHECK(unistd_h)
CHECK(limits_h)
CHECK(progname)
CHECK(free_null)
CHECK(math)
CHECK(gethostname)
CHECK(getpwuid)
CHECK(getuid)
CHECK(getenv)
CHECK(setenv)
CHECK(strsep)
CHECK(strlcat)
CHECK(strlcpy)
CHECK(asprintf)
CHECK(vasprintf)
CHECK(snprintf)
CHECK(vsnprintf)
CHECK(setlocale)
CHECK(arc4random)
CHECK(md5)
CHECK(sha1)
CHECK(rmd160)
CHECK(pthreads)
CHECK(x11)
CHECK(signal)
CHECK(setjmp)
CHECK(strtoll)

C_DEFINE(_AGAR_INTERNAL)
C_DEFINE(_BSD_SOURCE)
C_INCDIR($SRC)
C_NO_SECURE_WARNINGS()
#C_EXTRA_WARNINGS()
#C_FATAL_WARNINGS()

if [ "${enable_warnings}" = "yes" ]; then
	C_OPTION(-Wall)
	C_OPTION(-Werror)
	C_OPTION(-Wmissing-prototypes)
#	C_OPTION(-Wno-unused)
	MDEFINE(WNO_UNINITIALIZED, "-Wno-uninitialized")
else
	MDEFINE(WNO_UNINITIALIZED, "")
fi

# SDL is required.
CHECK(sdl, 1.2.0)
if [ "${HAVE_SDL}" != "yes" ]; then
	echo "*"
	echo "* Agar requires the SDL library. Please install it and try again."
	echo "* You can download SDL from: http://www.libsdl.org/."
	echo "*"
	exit 1
fi

# Enable Freetype support if the Freetype library is found.
# If FreeType is unavailable, Agar will fall back to bitmap fonts.
if [ "${with_freetype}" != "no" ]; then
	CHECK(freetype, 7.0.1)
	if [ "${HAVE_FREETYPE}" != "yes" ]; then
		echo "*"
		echo "* Agar needs FreeType in order to display vector-based"
		echo "* fonts. If you would like to use Agar's bitmap font, "
		echo "* rerun configure with the --without-freetype option."
		echo "* (note that the bundled bitmap font can only display"
		echo "* ASCII characters)."
		echo "*"
		exit 1
	fi
else
	HUNDEF(HAVE_FREETYPE)
fi

# Enable OpenGL support if an OpenGL library is found.
if [ "${with_gl}" != "no" ]; then
	CHECK(opengl)
	CHECK(glu)
	if [ "${HAVE_OPENGL}" = "yes" ]; then
		MDEFINE(SDL_CFLAGS, "$SDL_CFLAGS $OPENGL_CFLAGS $GLU_CFLAGS")
	else
		if [ "${with_gl}" = "yes" ]; then
			echo "*"
			echo "* --with-gl was requested, but OpenGL was not"
			echo "* found on this system."
			echo "*"
			exit 1
		else
			HUNDEF(HAVE_OPENGL)
			HUNDEF(HAVE_GLU)
		fi
	fi
else
	HUNDEF(HAVE_OPENGL)
	HUNDEF(HAVE_GLU)
fi

# Enable JPEG support if libjpeg is found.
if [ "${with_jpeg}" != "no" ]; then
	CHECK(jpeg)
	if [ "${HAVE_JPEG}" != "yes" ]; then
		if [ "${with_jpeg}" = "yes" ]; then
			echo "*"
			echo "* --with-jpeg was requested, but libjpeg was not"
			echo "* found on this system."
			echo "*"
			exit 1
		else
			HUNDEF(HAVE_JPEG)
		fi
	fi
else
	HUNDEF(HAVE_JPEG)
fi

# Enable ODE interface in Agar-SG if libode is found.
if [ "${with_ode}" != "no" ]; then
	CHECK(ode)
	if [ "${HAVE_ODE}" != "yes" ]; then
		if [ "${with_ode}" = "yes" ]; then
			echo "*"
			echo "* --with-ode was requested, but ODE was not"
			echo "* found on this system."
			echo "*"
			exit 1
		else
			HUNDEF(HAVE_ODE)
		fi
	fi
else
	HUNDEF(HAVE_ODE)
fi

# Enable CG support in Agar-SG if Cg toolkit is found.
if [ "${with_cg}" != "no" ]; then
	CHECK(cg)
	if [ "${HAVE_CG}" != "yes" ]; then
		if [ "${with_cg}" = "yes" ]; then
			echo "*"
			echo "* --with-cg was requested, but Cg was not"
			echo "* found on this system."
			echo "*"
			exit 1
		else
			HUNDEF(HAVE_CG)
		fi
	fi
else
	HUNDEF(HAVE_CG)
fi

# Enable (optional) SSE optimizations if compiler supports intrinsics.
if [ "${with_sse}" = "yes" ]; then
	CHECK(sse)
	if [ "${HAVE_SSE}" != "yes" ]; then
		if [ "${with_sse}" = "yes" ]; then
			echo "*"
			echo "* --with-sse was requested, but SSE intrinsics"
			echo "* not supported by compiler"
			echo "*"
			exit 1
		else
			HUNDEF(HAVE_SSE)
			HUNDEF(INLINE_SSE)
			HUNDEF(INLINE_SSE2)
			HUNDEF(INLINE_SSE3)
		fi
	else
		if [ "${with_sse_inline}" = "yes" ]; then
			HDEFINE(INLINE_SSE, 1)
		else
			HUNDEF(INLINE_SSE)
		fi
		if [ "${HAVE_SSE2}" = "yes" ]; then
			if [ "${with_sse2_inline}" = "yes" ]; then
				HDEFINE(INLINE_SSE2, 1)
			else
				HUNDEF(INLINE_SSE2)
			fi
		else
			HUNDEF(INLINE_SSE2)
		fi
		if [ "${HAVE_SSE3}" = "yes" ]; then
			if [ "${with_sse3_inline}" = "yes" ]; then
				HDEFINE(INLINE_SSE3, 1)
			else
				HUNDEF(INLINE_SSE3)
			fi
		else
			HUNDEF(INLINE_SSE3)
		fi
	fi
else
	HUNDEF(HAVE_SSE)
	HUNDEF(HAVE_SSE2)
	HUNDEF(HAVE_SSE3)
	HUNDEF(INLINE_SSE)
	HUNDEF(INLINE_SSE2)
	HUNDEF(INLINE_SSE3)
fi

# Enable (optional) AltiVec optimizations if compiler supports intrinsics.
if [ "${with_altivec}" = "yes" ]; then
	CHECK(altivec)
	if [ "${HAVE_ALTIVEC}" != "yes" ]; then
		if [ "${with_altivec}" = "yes" ]; then
			echo "*"
			echo "* --with-altivec was requested, but AltiVec"
			echo "* is not supported by compiler"
			echo "*"
			exit 1
		else
			HUNDEF(HAVE_ALTIVEC)
			HUNDEF(HAVE_ALTIVEC_H)
			HUNDEF(INLINE_ALTIVEC)
		fi
	else
		if [ "${with_altivec_inline}" = "yes" ]; then
			HDEFINE(INLINE_ALTIVEC, 1)
		else
			HUNDEF(INLINE_ALTIVEC)
		fi
	fi
else
	HUNDEF(HAVE_ALTIVEC)
	HUNDEF(HAVE_ALTIVEC_H)
	HUNDEF(INLINE_ALTIVEC)
fi

# Enable network support if system supports getaddrinfo().
if [ "${enable_network}" = "yes" ]; then
	CHECK(getaddrinfo)
	if [ "${HAVE_GETADDRINFO}" = "yes" ]; then
		HDEFINE(NETWORK, 1)
	else
		if [ "${enable_network}" = "yes" ]; then
			echo "*"
			echo "* --enable-network was requested, but this system"
			echo "* does not support getaddrinfo()."
			echo "*"
			exit 1
		else
			HUNDEF(NETWORK)
		fi
	fi
else
	HUNDEF(NETWORK)
fi

# Enable network server code only if requested explicitely.
# TODO: other checks
if [ "${enable_server}" = "yes" ]; then
	if [ "${HAVE_GETADDRINFO}" = "yes" ]; then
		HDEFINE(SERVER, 1)
	else
		if [ "${enable_server}" = "yes" ]; then
			echo "*"
			echo "* --enable-server was requested, but this system"
			echo "* does not support getaddrinfo()."
			echo "*"
			exit 1
		else
			HUNDEF(SERVER)
		fi
	fi
else
	HUNDEF(SERVER)
fi

# Don't enable thread safety unless requested explicitely.
# XXX should we enable if pthreads found? what would users expect?
if [ "${enable_threads}" = "yes" ]; then
	if [ "${HAVE_PTHREADS}" = "yes" ]; then
		HDEFINE(THREADS, 1)
	else
		echo "*"
		echo "* --enable-threads was requested, but a POSIX threads"
		echo "* library was not found."
		echo "*"
		exit 1
	fi
else
	HUNDEF(THREADS)
fi

# Enable UTF8 support by default.
if [ "${enable_utf8}" != "no" ]; then
	HDEFINE(UTF8, 1)
else
	HUNDEF(UTF8)
fi

# Disable astronomical units (constants are too large for some compilers).
# TODO test
HUNDEF(ASTRONOMICAL_UNITS)

# Enable conversion of historical units.
HDEFINE(HISTORICAL_UNITS, 1)

# Enable generic edition features. XXX
HDEFINE(EDITION, 1)

# Support 8/16/24/32bpp video displays by default.
# Disable unused modes to reduce code size and gain some cycles.
if [ "${enable_8bpp}" != "no" ]; then
	HDEFINE(VIEW_8BPP, 1)
else
	HUNDEF(VIEW_8BPP)
fi
if [ "${enable_16bpp}" != "no" ]; then
	HDEFINE(VIEW_16BPP, 1)
else
	HUNDEF(VIEW_16BPP)
fi
if [ "${enable_24bpp}" != "no" ]; then
	HDEFINE(VIEW_24BPP, 1)
else
	HUNDEF(VIEW_24BPP)
fi
if [ "${enable_32bpp}" != "no" ]; then
	HDEFINE(VIEW_32BPP, 1)
else
	HUNDEF(VIEW_32BPP)
fi

