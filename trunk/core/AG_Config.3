.\" Copyright (c) 2007-2014 Hypertriton, Inc. <http://hypertriton.com/>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd June 17, 2007
.Dt AG_CONFIG 3
.Os
.ds vT Agar API Reference
.ds oS Agar 1.0
.Sh NAME
.Nm AG_Config
.Nd agar configuration interface
.Sh SYNOPSIS
.Bd -literal
#include <agar/core.h>
.Ed
.Sh DESCRIPTION
The
.Nm
object records configuration settings global to an Agar application.
This includes user preferences which are to be preserved after the
application has exited.
Settings are stored as
.Xr AG_Variable 3
values.
.Pp
Library or application-specific data may also be stored in the configuration
object.
Variable names should not start with "ag_", the prefix is reserved for
internal Agar settings.
.Pp
Note that our
.Xr AG_Variable 3
system implements pointers (or "bindings"), so it is always possible for
a parameter value to be specified as a pointer to an external piece of data.
.Sh INTERFACE
.nr nS 1
.Ft "AG_Config *"
.Fn AG_ConfigObject "void"
.Pp
.Ft "int"
.Fn AG_ConfigLoad "void"
.Pp
.Ft "int"
.Fn AG_ConfigSave "void"
.Pp
.Ft "int"
.Fn AG_ConfigFile "const char *path_key" "const char *name" "const char *extension" "char *dst_path" "size_t dst_len"
.Pp
.nr nS 0
The
.Fn AG_ConfigObject
function returns a pointer to the global
.Nm
object.
.Pp
The
.Fn AG_ConfigLoad
function loads the configuration data from disk, returning 0 on sucess
or -1 on failure.
It is equivalent to calling
.Xr AG_ObjectLoad 3
on the
.Va agConfig
object.
Note that
.Fn AG_ConfigLoad
must be called after the initialization of all Agar libraries
(i.e., if an application uses Agar-GUI, then the
.Fn AG_ConfigLoad
call must follow the
.Fn AG_InitGraphics
call).
.Pp
The
.Fn AG_ConfigSave
function saves the configuration data to disk, returning 0 on success
or -1 on failure.
It is equivalent to calling
.Xr AG_ObjectSave 3
on the
.Va agConfig
object.
.Pp
The
.Fn AG_ConfigFile
utility routine searches a colon-separated pathname setting (i.e.,
.Sq load-path )
for a file with the given
.Fa name
and
.Fa extension.
If the file is found, its full pathname is copied into a target
fixed-size buffer
.Fa dst_path
(limited to
.Fa dst_len
bytes).
.Fn AG_ConfigFile
returns 0 if the file exists, or -1 if an error occured.
.Sh CONFIGURATION PARAMETERS
The following parameters are registered by Agar-Core:
.Bl -tag -width "BOOL initial-run "
.It Va BOOL initial-run
Application is being ran for the first time (read-only).
.It Va STRING load-path
Directory containing data files for the
.Xr AG_Object 3
virtual filesystem, as well as the
.Nm
data itself.
Default is platform-dependent.
.It Va STRING save-path
Target directory for writing the
.Xr AG_Object 3
virtual filesystem (usually the same as
.Sq load-path ) .
.It Va STRING tmp-path
Directory for temporary files.
Default is platform-dependent (on POSIX platforms, the
.Ev TMPDIR
environment variable is honored).
.El
.Sh EXAMPLES
The following code sets an integer option and a string.
The configuration is then immediately saved to disk:
.Bd -literal -offset indent
AG_SetInt(agConfig, "my-setting", 1);
AG_SetString(agConfig, "my-string", "Foo bar");
AG_ConfigSave();
.Ed
.Pp
The following Agar-GUI code displays a checkbox controlling the value
of "my-setting":
.Bd -literal -offset indent
AG_Checkbox *cb;

cb = AG_CheckboxNew(win, 0, "My setting");
AG_BindVariable(cb, "state", agConfig, "my-setting");
.Ed
.Pp
The following code binds "my-ext-setting" to an external variable, and then
reads the configuration from disk.
If the saved configuration has "my-ext-setting" defined, then the variable will
be set accordingly:
.Bd -literal -offset indent
int myExtSetting = 0;

AG_BindInt(agConfig, "my-ext-setting", &myExtSetting);
AG_ConfigLoad();
.Ed
.Sh SEE ALSO
.Xr AG_Intro 3 ,
.Xr AG_Object 3
.Sh HISTORY
The
.Nm
interface first appeared in Agar 1.0
