.\"	$Csoft: event.3,v 1.29 2005/09/27 00:25:16 vedge Exp $
.\"
.\" Copyright (c) 2002, 2003, 2004, 2005 CubeSoft Communications, Inc.
.\" <http://www.csoft.org>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd September 16, 2002
.Dt AG_EVENT 3
.Os
.ds vT Agar API Reference
.ds oS Agar 1.0
.Sh NAME
.Nm AG_Event
.Nd agar event system
.Sh SYNOPSIS
.Bd -literal
#include <agar/core.h>
.Ed
.Sh DESCRIPTION
Once an
.Xr AG_Object 3
has registered one or more event handlers for a specific type of
event (using the
.Fn AG_SetEvent
or
.Fn AG_AddEvent
function), a call to
.Fn AG_PostEvent
for this type of event will trigger the execution of the event handler
functions, in the same order as they were registered.
It is also possible to delay the execution of the event handler by a given
number of
.Sq ticks
using
.Fn AG_SchedEvent .
.Pp
The prototype for event handler functions looks like:
.Pp
.nr nS 1
.Ft void
.Fn foo "int argc" "union evarg *argv"
.nr nS 0
.Pp
The
.Fa argv
argument is a pointer to an array of
.Fa argc
unions, defined as:
.Bd -literal
typedef union evarg {
	void	*p;
	char	*s;
	char	 c;
	int	 i;
	long int li;
	double	 f;
} *evargs;
.Ed
.Pp
.Va argv[0]
always points to the
.Xr AG_Object 3
which is the receiver of the event.
.Va argv[argc]
always points to the sender of the event (or NULL).
.Pp
The
.Nm
subsystem also implements the
.Sq main loop
used by Agar applications, which performs the following operations:
.Bl -tag -width "SDL event processing "
.It Video updates
Agar attempts to maintain a stable video refresh rate by periodically
readjusting the delays.
This allows animations to run at the same speed under different hardware.
The nominal refresh rate is selected by
.Xr AG_SetRefreshRate 3 ,
usually at initialization time.
If Agar considers that there is enough time left after the refresh cycle, it
invokes 
.Xr SDL_Delay 3
to relinquish the CPU.
.It SDL event processing
SDL events are translated to
.Nm
structures, which are sent to the relevant subsystems, such as the
.Xr window 3
system for GUI events and
.Xr input 3
for generic input events.
.It Timeouts
The
.Xr timeout 3
system performs tasks specific to the timing schemes in use.
Under the default timing scheme, timeouts with a timestamp exceeding the
current time (as given by
.Xr SDL_GetTicks 3 )
are expired.
.El
.Sh EVENT PROCESSING
.nr nS 1
.Ft "AG_Event *"
.Fn AG_SetEvent "void *obj" "const char *event_name" "void (*handler)(AG_Event *event)" "const char *fmt" "..."
.Pp
.Ft "void"
.Fn AG_UnsetEvent "void *obj" "const char *event_name"
.Pp
.Ft "int"
.Fn AG_PostEvent "void *sndr" "void *rcvr" "const char *event_name" "const char *fmt" "..."
.Pp
.Ft "int"
.Fn AG_SchedEvent "void *sndr" "void *rcvr" "Uint32 ticks" "const char *event_name" "const char *fmt" "..."
.Pp
.Ft "int"
.Fn AG_ReschedEvent "void *obj" "const char *event_name" "Uint32 ticks"
.Pp
.Ft "int"
.Fn AG_CancelEvent "void *obj" "const char *event_name"
.Pp
.Ft "void"
.Fn AG_ForwardEvent "void *rcvr" "const char *event_name" "int argc" "union evarg *argv"
.nr nS 0
.Pp
The
.Fn AG_SetEvent
function registers a new event handler to service events of type
.Fa name .
If an event handler is already registered for the given event type, it
is replaced.
.Pp
If
.Fa name
is NULL, the event handler is not assigned a type, but may be referenced
by the pointer returned by
.Fa AG_SetEvent .
The
.Fa handler
argument specifies the event handler function.
.Pp
The
.Fa fmt
format string and subsequent arguments specify a list of arguments to
insert into the argument vector starting at position 1.
When the event handler function is invoked, it will be passed those
arguments as well as any additional arguments inserted into the argument
vector by
.Fn AG_PostEvent
or
.Fn AG_SchedEvent.
.Pp
The format string in
.Fn AG_PostEvent
and
.Fn AG_SchedEvent
accept the following sequences:
.Pp
.Bl -tag -compact -offset indent -width "diouxX "
.It diouxX
Converted to
.Ft int
.It DOU
Converted to
.Ft long int
.It eEfgG
Converted to
.Ft double
.It c
Converted to
.Ft char
.It s
Converted to
.Ft char *
.It p
Converted to
.Ft void *
.El
.Pp
The
.Fn AG_UnsetEvent
function removes the named event handler from the list.
Any future execution of this event handler as scheduled by
.Fn AG_SchedEvent
will be cancelled.
If this event handler is currently being executed (in the case of a multi-threaded
timing scheme), the function waits for its termination.
.Pp
The
.Fn AG_PostEvent
function immediately executes the event handler function associated with the given
event type, if there is any.
.Fa fmt
is a format string and the arguments following it are inserted into the argument
vector passed to the event handler (following the arguments registered by
.Fn AG_SetEvent ) .
.Fn AG_PostEvent
returns 1 if an event handler was invoked, or 0 if there is no registered
event handler for the given event type.
.Pp
The
.Fn AG_SchedEvent
function is similar to
.Fn AG_PostEvent ,
except that the event is scheduled to occur in the given number of ticks
(the meaning of which is specific to the timing scheme).
It is not possible to schedule the execution of the same event handler
multiple times.
.Fn AG_SchedEvent
returns 0 on success or -1 if no matching event handler was found.
.Pp
The
.Fn AG_ReschedEvent
function reschedules a previously scheduled event of the given name to
execute in the given number of ticks, using the same argument vector.
.Fn AG_ReschedEvent
returns 0 on success or -1 if there was no matching event handler.
.Pp
.Fn AG_CancelEvent
cancels any future execution of a previously scheduled event.
The function returns -1 if no matching event was found, 1 if a scheduled
event was cancelled, or 0 if there was nothing to cancel.
.Pp
The
.Fn AG_ForwardEvent
function relays the given event to object
.Fa obj .
This function is usually called from an event handler.
.Sh EVENT FLAGS
.Pp
Acceptable flags for the
.Nm
structure include:
.Bd -literal
#define	AG_EVENT_ASYNC		0x01	/* Event handler runs in own thread */
#define AG_EVENT_PROPAGATE	0x02	/* Automatically forward to children */
#define AG_EVENT_SCHEDULED	0x04	/* Pending execution (read-only flag) */
.Ed
.Pp
.Dv AG_EVENT_ASYNC
arranges for the event handler to execute inside a separate thread.
This flag is only available if Agar was compiled with the
.Dv THREADS
option.
.Pp
If the
.Dv AG_EVENT_PROPAGATE
flag is set, the event is automatically forwarded to every one of the
receiver's descendants prior to the execution of the receiver's event handler.
.Pp
.Dv AG_EVENT_SCHEDULED
is a read-only flag that is set only if an event of this type has been
previously scheduled for execution by
.Fn AG_SchedEvent .
.Sh ARGUMENT MANIPULATION
.Pp
In some cases it is desirable for functions to accept a list of event handler
arguments like
.Fn AG_SetEvent ,
and possibly manipulate its entries directly.
For example, the
.Fn AG_MenuAction
function of the
.Xr menu 3
widget accepts a pointer to an event handler function, followed by an
.Fn AG_SetEvent
style format string and a variable list of arguments.
The following macros provide an interface for manipulating event handler
arguments directly.
.nr nS 1
.Ft void
.Fn AG_EVENT_INSERT_ARG "AG_Event *ev, va_list ap, MEMBER, TYPE"
.Pp
.Ft void
.Fn AG_EVENT_INSERT_VAL "AG_Event *ev, MEMBER, VALUE"
.Pp
.Ft void
.Fn AG_EVENT_PUSH_ARG "va_list ap, char fmt_char, AG_Event *ev"
.nr nS 0
.Pp
The
.Fn AG_EVENT_INSERT_ARG
macro inserts an argument at the end of the argument vector for
.Fa ev .
The value to assign is obtained from
.Xr va_arg 3
using the given
.Fa TYPE
argument.
.Fa MEMBER
is the name of the
.Fa "union evarg"
member (for example "s" for a string).
.Pp
The
.Fn AG_EVENT_INSERT_VAL
macro also inserts an argument at the end of the argument vector, but
.Fa VALUE
is directly assigned to the given
.Fa MEMBER .
.Pp
The
.Fn AG_EVENT_PUSH_ARG
function inserts a new argument onto the argument vector.
The type is obtained from the
.Fa fmt_char
argument which is a character from an
.Fn AG_SetEvent
style format string.
.Sh SEE ALSO
.Xr agar 3 ,
.Xr AG_Object 3 ,
.Xr timeout 3
.Sh HISTORY
The
.Nm
mechanism first appeared in Agar 1.0
