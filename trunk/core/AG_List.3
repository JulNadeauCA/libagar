.\" Copyright (c) 2009 Hypertriton, Inc. <http://hypertriton.com/>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd April 30, 2009
.Dt AG_LIST 3
.Os
.ds vT Agar API Reference
.ds oS Agar 1.3.4
.Sh NAME
.Nm AG_List
.Nd agar variable array structure
.Sh SYNOPSIS
.Bd -literal
#include <agar/core/list.h>
.Ed
.Sh DESCRIPTION
The
.Nm
structure describes an ordered list of
.Xr AG_Variable 3
items.
It is defined as follows:
.Bd -literal
typedef struct ag_list {
	int n;			/* Element count */
	AG_Variable *v;		/* Items */
} AG_List;
.Ed
.Sh INTERFACE
.nr nS 1
.Ft "AG_List *"
.Fn AG_ListNew "void"
.Pp
.Ft "AG_List *"
.Fn AG_ListDup "const AG_List *L"
.Pp
.Ft int
.Fn AG_ListDestroy "AG_List *L"
.Pp
.Ft int
.Fn AG_ListAppend "AG_List *L" "const AG_Variable *V"
.Pp
.Ft int
.Fn AG_ListPrepend "AG_List *L" "const AG_Variable *V"
.Pp
.Ft int
.Fn AG_ListInsert "AG_List *L" "int idx" "const AG_Variable *V"
.Pp
.Ft int
.Fn AG_ListRemove "AG_List *L" "int idx"
.Pp
.Ft int
.Fn AG_ListClear "AG_List *L"
.Pp
.nr nS 0
The
.Fn AG_ListNew
function allocates and initializes a new, empty
.Nm .
.Fn AG_ListNew
returns a pointer to the new list or NULL on failure.
.Fn AG_ListDup
duplicates an existing list
.Fa L .
.Fn AG_ListDestroy
frees all resources allocated by a list.
.Pp
.Fn AG_ListAppend
appends a copy of variable
.Fa V
to the list.
.Fn AG_ListPrepend
inserts at the beginning of the list.
.Fn AG_ListInsert
inserts at a specified position
.Fa idx .
.Fn AG_ListAppend ,
.Fn AG_ListPrepend
and
.Fn AG_ListInsert
return the index of the new list entry or -1 on failure.
.Pp
.Fn AG_ListRemove
removes the element at index
.Fa idx
from the list, returning 1 on success or -1 if the given index is invalid.
.Fn AG_ListClear
removes all elements from the list.
.Sh SEE ALSO
.Xr AG_Intro 3 ,
.Xr AG_List 3 ,
.Xr AG_Tbl 3 ,
.Xr AG_Tree 3 ,
.Xr AG_Variable 3
.Sh HISTORY
The
.Nm
interface first appeared in Agar 1.3.4
