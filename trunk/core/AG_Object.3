.\" Copyright (c) 2001-2007 Hypertriton, Inc. <http://hypertriton.com/>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistribution of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd March 17, 2002
.Dt AG_OBJECT 3
.Os
.ds vT Agar API Reference
.ds oS Agar 1.0
.Sh NAME
.Nm AG_Object
.Nd agar object system
.Sh SYNOPSIS
.Bd -literal
#include <agar/core.h>
.Ed
.Sh DESCRIPTION
The Agar object system is a simply, generic and powerful system for
object-oriented programming in C.
.Pp
Objects can be organized in a virtual filesystem.
A number of features are implemented at the object level, notably
events
.Xr ( AG_Event 3 ) ,
timing
.Xr ( AG_Timeout 3 )
and property tables
.Xr ( AG_Prop 3 ) .
.Pp
Arbitrary datasets (possibly large and complex ones) can be archived in
a portable and efficient manner.
Generic information about an object can be kept resident, while datasets and
moved from and to various forms of storage.
.Sh INITIALIZATION AND LINKAGE
.nr nS 1
.Pp
.Ft "AG_Object *"
.Fn AG_ObjectNew "AG_Object *parent" "const char *name" "const AG_ObjectOps *ops"
.Pp
.Ft "void"
.Fn AG_ObjectInit "AG_Object *obj" "const char *name" "const AG_ObjectOps *ops"
.Pp
.Ft "void"
.Fn AG_ObjectAttach "AG_Object *new_parent" "AG_Object *obj"
.Pp
.Ft "void"
.Fn AG_ObjectAttachPath "const char *parent_path" "AG_Object *child"
.Pp
.Ft "void"
.Fn AG_ObjectDetach "AG_Object *obj"
.Pp
.Ft "void"
.Fn AG_ObjectMove "AG_Object *obj" "AG_Object *new_parent"
.Pp
.Ft "AG_Object *"
.Fn AG_ObjectRoot "const AG_Object *obj"
.Pp
.Ft "AG_Object *"
.Fn AG_ObjectFindParent "const AG_Object *obj" "const char *name" "const char *type"
.Pp
.Ft "int"
.Fn AG_ObjectCopyName "const AG_Object *obj" "char *pathbuf" "size_t pathbuf_len"
.Pp
.Ft "void"
.Fn AG_LockLinkage "void"
.Pp
.Ft "void"
.Fn AG_UnlockLinkage "void"
.Pp
.Ft "void"
.Fn AG_ObjectSetName "AG_Object *obj" "const char *new_name"
.Pp
.Ft "void"
.Fn AG_ObjectSetOps "AG_Object *obj" "const AG_ObjectOps *ops"
.Pp
.nr nS 0
The
.Fn AG_ObjectNew
function allocates and initializes a new object instance of the given class.
The object is attached to
.Fa parent ,
unless the argument is NULL.
If
.Fa name
is NULL, a unique name of the form
.Dq <class-name> #<number>
is automatically generated.
If both
.Fa parent
and
.Fa name
are specified and the parent object already has a child of the given name,
.Fn AG_ObjectNew
fails and returns NULL.
.Pp
The
.Fn AG_ObjectInit
function initializes an existing AG_Object structure.
The
.Fa name
string identifies this object instance.
Object names are truncated if they exceed
.Dv AG_OBJECT_NAME_MAX
bytes in length, and may not contain
.Sq /
characters.
.Pp
The
.Fa ops
argument describes the object class.
It is a pointer to a
.Ft AG_ObjectOps
structure:
.Pp
.Bd -literal
typedef struct ag_object_ops {
	const char *name;                          /* Class name */
	size_t size;                               /* Size of structure */
	AG_Version ver;                            /* Version numbers */

	void (*init)(void *obj, const char *name); /* Initialize */
	void (*reinit)(void *obj);                 /* Free dataset */
	void (*destroy)(void *obj);                /* Release */
	int  (*load)(void *obj, AG_Netbuf *buf);   /* Load dataset */
	int  (*save)(void *obj, AG_Netbuf *buf);   /* Save dataset */
	void *(*edit)(void *obj);                  /* Edit dataset */
} AG_ObjectOps;
.Ed
.Pp
The
.Va name
member is the name of this class, where subclasses are separated by a
colon, such as
.Dq AG_Superclass:AG_Subclass .
It is implied that the root class is
.Dq AG_Object ,
so there is no need to specify it in the string.
.Pp
The
.Va size
member describes is the amount of memory that will be allocated by the object
system to hold the structure.
.Va ver
contains the version numbers that will be used in dataset archives (see
.Xr AG_Version 3
for more details).
.Pp
The
.Fn init
operation initializes an
.Nm
instance after memory has been allocated for it.
A subclass object's
.Fn init
should invoke the
.Fn init
function of its superclass.
For direct subclasses of
.Fn AG_Object ,
this function is
.Fn AG_ObjectInit .
.Pp
The
.Fn reinit
operation releases any element of the dataset that has been dynamically
allocated.
.Fn reinit
is invoked by the object system:
.Pp
.Bl -bullet -compact
.It
Prior to a
.Fn load
operation where the dataset is going to be re-read from storage.
.It
Subsequent to a
.Dv PAGE_OUT
operation, to free the dataset.
.It
Prior to a
.Fn destroy
operation where the object is being completely freed.
.El
.Pp
The
.Fn destroy
operation is invoked from
.Fn AG_ObjectDestroy
to release any resources that are not handled by
.Fn reinit .
Note that
.Fn destroy
must not free the
.Nm
structure itself.
.Pp
The
.Fn load
and
.Fn save
operations are responsible for archiving the dataset (see the
.Em ARCHIVING
section for more information).
.Pp
When defined,
.Fn edit
operation generates user interface elements allowing the user to edit
the object's dataset.
.Pp
Typically.
.Fn edit
will create an
.Xr AG_Window 3
or a container widget such as 
.Xr AG_Box 3 .
When other windows are created from
.Fn edit ,
they must be attached to the main window via
.Xr AG_WindowAttach 3 .
.Pp
The following public
.Nm
flags are defined:
.Pp
.Bd -literal
#define AG_OBJECT_RELOAD_PROPS   0x001 /* Don't clear props before load */
#define AG_OBJECT_NON_PERSISTENT 0x002 /* Dataset is not archivable */
#define AG_OBJECT_INDESTRUCTIBLE 0x004 /* Not destructible (advisory) */
#define AG_OBJECT_RESIDENT       0x008 /* Dataset is in memory (RO) */
#define AG_OBJECT_PRESERVE_DEPS  0x010 /* Keep deps with refcnt of 0 */
#define AG_OBJECT_STATIC         0x020 /* Don't free() after detach */
#define AG_OBJECT_READONLY       0x040 /* Disallow edition (advisory) */
#define AG_OBJECT_REOPEN_ONLOAD  0x200 /* Recreate editor UI on load */
#define AG_OBJECT_REMAIN_DATA    0x400 /* Keep dataset resident */
.Ed
.Pp
The
.Dv AG_OBJECT_RELOAD_PROPS
flag prevents the
.Xr AG_Prop 3
table from being cleared by
.Fn AG_ObjectLoad .
.Pp
.Dv AG_OBJECT_NON_PERSISTENT
prevents the object (and its children) from being archived.
If set,
.Fn AG_ObjectSave
becomes a no-op and
.Fn AG_ObjectLoad
calls will fail.
.Pp
flags
.Dv AG_OBJECT_INDESTRUCTIBLE
and
.Dv AG_OBJECT_READONLY
are purely advisory and their usage is application-specific.
.Pp
The
.Dv AG_OBJECT_REOPEN_ONLOAD
flag arranges for all graphical interface elements (as returned by the
.Sq edit
operation) to be automatically destroyed and recreated after any
.Fn AG_ObjectLoad
call.
This flag is useful for complex objects where the graphical interface
references elements of the dataset.
.Pp
The read-only
.Dv AG_OBJECT_RESIDENT
flag is set by the object system to indicate that the object's dataset is
currently resident in memory.
.Dv AG_OBJECT_RESIDENT
is set by
.Fn AG_ObjectNew ,
.Fn AG_ObjectLoadData
and
.Fn AG_ObjectPageIn
and is cleared by
.Fn AG_ObjectFreeDataset
and
.Fn AG_ObjectPageOut .
.Pp
Objects are organized in a tree structure.
.Fn AG_ObjectAttach
attaches an object to a new parent and
.Fn AG_ObjectDetach
detaches an object from its current parent.
These operations raise
.Sq attached
and
.Sq detached
events.
Prior to detaching the object,
.Fn AG_ObjectDetach
cancels scheduled
.Xr AG_Timeout 3
events where the
.Dv AG_CANCEL_ONDETACH
flag is set.
If
.Fa parent
is NULL,
.Fn AG_ObjectAttach
is a no-op.
.Pp
.Fn AG_ObjectAttachPath
is a variant of
.Fn AG_ObjectAttach
which looks up the parent using
.Fa parent_path .
.Pp
.Fn AG_ObjectMove
moves
.Fa child
from
.Fa oldparent
to
.Fa newparent ,
raising
.Fn detached ,
.Fn attached
and
.Fn moved
events in order.
Unlike
.Fn AG_ObjectDetach ,
.Fn AG_ObjectMove
does not cancel scheduled timeout events.
.Pp
The
.Fn AG_ObjectRoot
function traverses the given object's ancestry and return a pointer to the root
item.
.Fn AG_ObjectFindParent
traverse the ancestry until a parent item matches the non-NULL
.Fa name
and
.Fa type
arguments.
The global object linkage must remain locked throughout the execution of both
.Fn AG_ObjectRoot
and
.Fn AG_ObjectFindParent .
.Pp
The
.Fn AG_ObjectCopyName
function copies the absolute pathname of an object instance to a fixed-size
buffer, returning 0 on success and -1 on failure.
Note that
.Fn AG_ObjectCopyName
must traverse the object's ancestry to generate the pathname, so in thread-safe
applications,
.Fn AG_LockLinkage
should be used (and the pathname will remain safe to use until
.Fn AG_UnlockLinkage
is called).
.Pp
The
.Fn AG_LockLinkage
and
.Fn AG_UnlockLinkage
functions acquire or release the virtual filesystem lock.
They are no-ops if thread support is disabled.
.Pp
.Fn AG_ObjectSetName
changes the name of the given object.
.Fn AG_ObjectSetOps
changes the generic operation vector (pointer to
.Ft AG_ObjectOps
structure) associated with the given object.
.Sh CLASS INFORMATION
.nr nS 1
.Ft "void"
.Fn AG_RegisterType "const AG_ObjectOps *ops" "int icon"
.Pp
.Ft "AG_ObjectType *"
.Fn AG_FindType "const char *name"
.Pp
.Ft "int"
.Fn AG_ObjectIsClass "AG_Object *obj" "const char *class_pattern"
.Pp
.Fn AGOBJECT_FOREACH_CLASS "AG_Object *child_obj" "AG_Object *parent_obj" "TYPE type" "const char *class_pattern"
.Pp
.Ft "SDL_Surface *"
.Fn AG_ObjectIcon "AG_Object *p"
.Pp
.nr nS 0
The
.Fn AG_RegisterType
function is used to register a new object class (described by
.Fa ops )
with the object type table.
This table contains all the information needed by
.Fn AG_ObjectLoad
to load previously saved objects from disk or network and completely
recreate them in memory.
The
.Fa icon
argument is an
.Xr AG_IconMgr 3
icon name.
.Pp
The
.Fn AG_FindType
function queries the object type table for the given class
.Fa name
and returns a pointer to the following structure (or NULL on failure):
.Bd -literal
typedef struct ag_object_type {
	const AG_ObjectOps *ops;
	int icon;
} AG_ObjectType;
.Ed
.Pp
The
.Fn AG_ObjectIsClass
function returns 1 if the given object's class name matches the given
.Fa class_pattern ,
which may contain wildcards such as
.Dq MyClass:*
or
.Dq MyClass:*:MySubclass:* .
.Pp
.Fn AGOBJECT_FOREACH_CLASS
is a convenience macro that iterates
.Fa child_obj
(cast to given
.Fa type )
over every child object of
.Fa parent_obj
with a class matching
.Fa class_pattern .
Example:
.Bd -literal
struct my_class *my_obj;

AGOBJECT_FOREACH_CLASS(my_obj, parent_obj, my_class, "MyClass") {
	printf("Object %s is an instance of MyClass\\n",
	    AGOBJECT(my_obj)->name);
}
.Ed
.Pp
.Fn AG_ObjectIcon
returns a surface for the icon associated with the given class.
.Sh DEPENDENCIES
.nr nS 1
.Ft "int"
.Fn AG_ObjectInUse "const AG_Object *obj"
.Pp
.Ft "AG_ObjectDep *"
.Fn AG_ObjectAddDep "AG_Object *obj" "AG_Object *depobj"
.Pp
.Ft "void"
.Fn AG_ObjectDelDep "AG_Object *obj" "AG_Object *depobj"
.Pp
.Ft "Uint32"
.Fn AG_ObjectEncodeName "const AG_Object *obj" "const AG_Object *depobj"
.Pp
.Ft "int"
.Fn AG_ObjectFindDep "const AG_Object *obj" "Uint32 ind" "AG_Object **objp"
.Pp
.nr nS 0
.Fn AG_ObjectInUse
returns 1 if the given object is being referenced by another object instance
or 0 if it isn't.
.Pp
.Fn AG_ObjectAddDep
either creates a new dependency upon
.Fa depobj
or increments the reference count if one exists.
.Fn AG_ObjectDelDep
decrements the reference count upon
.Fa depobj
and removes the dependency if the count reaches 0 (unless the object has the
.Dv AG_OBJECT_PRESERVE_DEPS
flag set).
.Pp
.Fn AG_ObjectEncodeName
returns a 32-bit integer identifier for the dependency, suitable for writing
into data files.
It may return the special values 0 (NULL reference) and 1 (self-reference),
the meaning of which is object-specific.
.Pp
.Fn AG_ObjectFindDep
tries to resolve the given 32-bit dependency identifier, return 0 on success
and -1 on failure.
.Sh GARBAGE COLLECTION
.nr nS 1
.Ft "void"
.Fn AG_ObjectDestroy "AG_Object *obj"
.Pp
.Ft void
.Fn AG_ObjectFreeDataset "AG_Object *obj"
.Pp
.Ft "void"
.Fn AG_ObjectFreeEvents "AG_Object *obj"
.Pp
.Ft "void"
.Fn AG_ObjectFreeProps "AG_Object *obj"
.Pp
.Ft "void"
.Fn AG_ObjectFreeDeps "AG_Object *obj"
.Pp
.Ft "void"
.Fn AG_ObjectFreeDummyDeps "AG_Object *obj"
.Pp
.Ft "void"
.Fn AG_ObjectFreeChildren "AG_Object *obj"
.Pp
.nr nS 0
The
.Fn AG_ObjectFreeDataset
function frees any resource allocated for the dataset of the object
(using the
.Fn reinit
operation), and clears the
.Dv AG_OBJECT_RESIDENT
flag.
Data structure (e.g., lists) must remain in a consistent state, to prepare
for any subsequent
.Fn load
operation.
.Pp
The
.Fn AG_ObjectDestroy
function frees all resources reserved by the given object (and any of its
children that is not being referenced).
.Fn AG_ObjectDestroy
also cancels any
.Xr AG_Timeout 3
event scheduled for future execution.
To permit static allocation,
.Fn AG_ObjectDestroy
does not invoke
.Xr free 3
on the AG_Object structure.
.Pp
Internally,
.Fn AG_ObjectDestroy
invokes
.Fn AG_ObjectFreeEvents ,
.Fn AG_ObjectFreeProps ,
.Fn AG_ObjectFreeDeps
and
.Fn AG_ObjectFreeChildren ,
but these functions may be called directly in order to destroy and reinitialize
the event handler list, the property table and the child instances,
respectively.
.Pp
In addition to reinitializing the event handler table,
.Fn AG_ObjectFreeEvents
also cancels scheduled events.
.Pp
.Fn AG_ObjectFreeChildren
invokes
.Xr free 3
on an object's children (except those with the
.Dv AG_OBJECT_STATIC
flag set), assuming that none of them are in use.
.Pp
.Fn AG_ObjectFreeDummyDeps
removes entries in the dependency table where the reference count is zero
(which occur in objects that have the
.Dv AG_OBJECT_PRESERVE_DEPS
flag set).
.Pp
.Sh ARCHIVING
.nr nS 1
.Ft "int"
.Fn AG_ObjectLoad "AG_Object *obj"
.Pp
.Ft "int"
.Fn AG_ObjectLoadFromFile "AG_Object *obj" "const char *file"
.Pp
.Ft "int"
.Fn AG_ObjectLoadData "AG_Object *obj"
.Pp
.Ft "int"
.Fn AG_ObjectLoadDataFromFile "AG_Object *obj" "const char *file"
.Pp
.Ft "int"
.Fn AG_ObjectLoadGeneric "AG_Object *obj"
.Pp
.Ft "int"
.Fn AG_ObjectLoadGenericFromFile "AG_Object *obj" "const char *file"
.Pp
.Ft "int"
.Fn AG_ObjectSave "AG_Object *obj"
.Pp
.Ft "int"
.Fn AG_ObjectSaveAll "AG_Object *obj"
.Pp
.Ft "int"
.Fn AG_ObjectPageIn "AG_Object *obj"
.Pp
.Ft "int"
.Fn AG_ObjectPageOut "AG_Object *obj"
.Pp
.nr nS 0
These functions implement archiving (or "serialization") of generic object
information and arbitrary datasets to an efficient, machine-independent
representation.
.Pp
The
.Fn load
and
.Fn save
operations of an object, if defined, are responsible for archiving its dataset
to a portable format.
.Pp
Note: Objects that are not direct subclasses of
.Nm
should explicitely invoke the
.Fn load
and
.Fn save
operations of their parents.
.Pp
The
.Fn AG_ObjectLoad
function (and its variants) are used to load the generic part or the dataset
of either a single object or an object hierarchy, from archived data.
.Pp
.Fn AG_ObjectLoad ,
.Fn AG_ObjectLoadGeneric
and
.Fn AG_ObjectLoadData
look for the archive file in the default search path (using the
.Sq load-path
setting of
.Xr AG_Config 3 ) .
.Pp
.Fn AG_ObjectLoadFromFile ,
.Fn AG_ObjectLoadGenericFromFile
and
.Fn AG_ObjectLoadDataFromFile
will load the data from a specific file.
.Pp
Note that when loading object hierarchies, objects will need to be allocated
and initialized from scratch.
This functionality requires that all classes be registered with
.Fn AG_RegisterType .
.Pp
The
.Fn AG_ObjectSave
function creates an archive of the given AG_Object in the save
directory (the
.Sq save-path
config setting).
The
.Fn AG_ObjectSaveAll
variant also saves child objects.
.Pp
The
.Fn AG_ObjectPageIn
function loads an object's dataset into memory, assuming it is a persistent
object and its dataset can be found on storage.
On success, the
.Dv AG_OBJECT_RESIDENT
flag is set.
.Fn AG_ObjectPageOut
checks whether an object is referenced by another object and if that is
not the case, the dataset is archived to storage and freed from memory.
Both functions return 0 on success or -1 if an error occured.
.Sh EVENTS
The
.Nm
mechanism generates the following events:
.Pp
.Bl -tag -width 2n
.It Fn attached "void"
The object has been attached to another.
This event originates from the parent object.
The linkage lock is held during the execution of the event handler.
.It Fn detached "void"
The object has been detached from its parent.
The linkage lock is held during the execution of the event handler.
This event originates from the parent.
.It Fn child-attached "void"
Same as
.Fn attached ,
except that the event is sent from the child to the parent.
.It Fn child-detached "void"
Same as
.Fn detached ,
except that the event is sent from the child to the parent.
.It Fn moved "AG_Object *new_parent"
The object has been moved from its current parent to
.Fa new_parent .
The linkage lock is held during the execution of the event handler.
This event originates from the previous parent.
.It Fn renamed "void"
The object's name has changed.
.It Fn prop-added "AG_Prop *prop"
A new
.Xr AG_Prop 3
property has been added.
.It Fn prop-modified "AG_Prop *prop"
The value of the given property has been modified.
.It Fn object-post-load-generic "const char *path"
Invoked if
.Fn AG_ObjectLoadGeneric
succeeds.
If the object was loaded from file,
.Fa path
is the pathname of the file.
.It Fn object-post-load-data "const char *path"
Invoked by
.Fn AG_ObjectLoadData ,
on success.
If the object was loaded from file,
.Fa path
is the pathname of the file.
.El
.Sh SEE ALSO
.Xr AG_Intro 3 ,
.Xr AG_Event 3 ,
.Xr AG_Prop 3 ,
.Xr AG_Timeout 3
.Sh HISTORY
The
.Nm
interface appeared in Agar 1.0
