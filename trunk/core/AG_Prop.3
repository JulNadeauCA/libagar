.\" Copyright (c) 2002-2007 Hypertriton, Inc. <http://hypertriton.com/>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd December 29, 2002
.Dt AG_PROP 3
.Os
.ds vT Agar API Reference
.ds oS Agar 1.0
.Sh NAME
.Nm AG_Prop
.Nd generic agar object properties
.Sh SYNOPSIS
.Bd -literal
#include <agar/core.h>
.Ed
.Sh DESCRIPTION
Each
.Xr AG_Object 3
has a set of generic properties, which are persistent by default.
The
.Nm
interface allows the reading and writing of the property values.
All of the Agar widgets which provide bindings
(see
.Xr AG_Widget 3 )
can bind to properties with compatible types.
.Pp
Specialized "read" and "write" functions can be defined on a per-property
basis, or on a per-object basis to allow properties of arbitrary types to
be defined dynamically by the object.
This allows, for example, some properties of an object to be read and written
over a network connection.
.Pp
The Agar core library implements properties for the following primitive
types:
.Pp
.Bd -literal
enum ag_prop_type {
	AG_PROP_UINT,
	AG_PROP_INT,
	AG_PROP_UINT8,
	AG_PROP_SINT8,
	AG_PROP_UINT16,
	AG_PROP_SINT16,
	AG_PROP_UINT32,
	AG_PROP_SINT32,
	AG_PROP_UINT64,		/* Optional */
	AG_PROP_SINT64,		/* Optional */
	AG_PROP_FLOAT,		/* IEEE 754 encoding */
	AG_PROP_DOUBLE,		/* IEEE 754 encoding */
	AG_PROP_LONG_DOUBLE,	/* Optional */
	AG_PROP_STRING,
	AG_PROP_POINTER,	/* Not persistent */
	AG_PROP_BOOL
} type;
.Ed
.Sh READING PROPERTIES
.nr nS 1
.Ft "AG_Prop *"
.Fn AG_Prop "void *obj" "const char *key" "enum ag_prop_type type" "void *dst"
.Pp
.Ft "AG_Prop *"
.Fn AG_CopyProp "const AG_Prop *prop"
.Pp
.Ft void
.Fn AG_LockProps "void *obj"
.Pp
.Ft void
.Fn AG_UnlockProps "void *obj"
.Pp
.Ft int
.Fn AG_Bool "void *obj" "const char *key"
.Pp
.Ft "Uint"
.Fn AG_Uint "void *obj" "const char *key"
.Pp
.Ft int
.Fn AG_Int "void *obj" "const char *key"
.Pp
.Ft Uint8
.Fn AG_Uint8 "void *obj" "const char *key"
.Pp
.Ft Sint8
.Fn AG_Sint8 "void *obj" "const char *key"
.Pp
.Ft Uint16
.Fn AG_Uint16 "void *obj" "const char *key"
.Pp
.Ft Sint16
.Fn AG_Sint16 "void *obj" "const char *key"
.Pp
.Ft Uint32
.Fn AG_Uint32 "void *obj" "const char *key"
.Pp
.Ft Sint32
.Fn AG_Sint32 "void *obj" "const char *key"
.Pp
.Ft Uint64
.Fn AG_Uint64 "void *obj" "const char *key"
.Pp
.Ft Sint64
.Fn AG_Sint64 "void *obj" "const char *key"
.Pp
.Ft float
.Fn AG_Float "void *obj" "const char *key"
.Pp
.Ft double
.Fn AG_Double "void *obj" "const char *key"
.Pp
.Ft "long double"
.Fn AG_LongDouble "void *obj" "const char *key"
.Pp
.Ft "char *"
.Fn AG_String "void *obj" "const char *key"
.Pp
.Ft size_t
.Fn AG_StringCopy "void *obj" "const char *key" "char *dst" "size_t dst_size"
.Pp
.Ft "void *"
.Fn AG_Pointer "void *obj" "const char *key"
.Pp
.nr nS 0
The
.Fn AG_Prop
function searches for a property of type
.Fa type
named
.Fa key
and writes its value to
.Fa dst ,
which should point to a variable of the specific data type associated with the
property.
.Fa AG_Prop
returns a pointer to the related
.Nm
structure, or NULL if no property matches
.Fa key .
.Pp
The
.Fn AG_CopyProp
function returns a copy of
.Fa prop .
.Pp
The
.Fn AG_LockProps
and
.Fn AG_UnlockProps
functions acquire/release the recursive mutex which is associated with an
object's properties.
.Pp
The
.Fn AG_(Type)
functions all look for a property named
.Fa key
and return the associated value, raising a fatal condition if there is
no match.
Note that
.Fn AG_Uint64 ,
.Fn AG_Sint64
and
.Fn AG_LongDouble
are not available on all platforms.
.Pp
.Fn AG_String
returns a copy of the string.
.Fn AG_StringCopy
copies up to
.Fa dst_size
- 1 characters from the value of a string property to
.Fa dst ,
NUL-terminating the result.
.Sh WRITING PROPERTIES
.nr nS 1
.Ft "AG_Prop *"
.Fn AG_SetProp "void *obj" "const char *name" "enum ag_prop_type type" "..."
.Pp
.Ft "AG_Prop *"
.Fn AG_SetBool "void *obj" "const char *key" "int value"
.Pp
.Ft "AG_Prop *"
.Fn AG_SetUint "void *obj" "const char *key" "Uint value"
.Pp
.Ft "AG_Prop *"
.Fn AG_SetInt "void *obj" "const char *key" "int value"
.Pp
.Ft "AG_Prop *"
.Fn AG_SetUint8 "void *obj" "const char *key" "Uint8 value"
.Pp
.Ft "AG_Prop *"
.Fn AG_SetSint8 "void *obj" "const char *key" "Sint8 value"
.Pp
.Ft "AG_Prop *"
.Fn AG_SetUint16 "void *obj" "const char *key" "Uint16 value"
.Pp
.Ft "AG_Prop *"
.Fn AG_SetSint16 "void *obj" "const char *key" "Sint16 value"
.Pp
.Ft "AG_Prop *"
.Fn AG_SetUint32 "void *obj" "const char *key" "Uint32 value"
.Pp
.Ft "AG_Prop *"
.Fn AG_SetSint32 "void *obj" "const char *key" "Sint32 value"
.Pp
.Ft "AG_Prop *"
.Fn AG_SetUint64 "void *obj" "const char *key" "Uint64 value"
.Pp
.Ft "AG_Prop *"
.Fn AG_SetSint64 "void *obj" "const char *key" "Sint64 value"
.Pp
.Ft "AG_Prop *"
.Fn AG_SetFloat "void *obj" "const char *key" "float value"
.Pp
.Ft "AG_Prop *"
.Fn AG_SetDouble "void *obj" "const char *key" "double value"
.Pp
.Ft "AG_Prop *"
.Fn AG_SetLongDouble "void *obj" "const char *key" "long double value"
.Pp
.Ft "AG_Prop *"
.Fn AG_SetString "void *obj" "const char *key" "const char *fmt" "..."
.Pp
.Ft "AG_Prop *"
.Fn AG_SetPointer "void *obj" "const char *key" "void *ptr"
.Pp
.nr nS 0
The
.Fn AG_SetProp
function searches for a property of type
.Fa type
named
.Fa key
and sets its value to data read from the next arguments, which should be
data of the specific data type associated with the property.
If the
.Fa key
does not match an existing property, a new one is created.
.Pp
The
.Fn AG_Set(Type)
functions all look for a property named
.Fa key
and set its value to
.Fa value ,
returning a pointer to the modified property.
If the
.Fa key
does not match any existing property, a new one is created.
Again, please note that
.Fn AG_SetUint64 ,
.Fn AG_SetSint64
and
.Fn AG_SetLongDouble
are not available on all platforms.
.Sh SAVING/LOADING
.nr nS 1
.Ft int
.Fn AG_PropLoad "void *obj" "AG_Netbuf *buf"
.Pp
.Ft int
.Fn AG_PropSave "void *obj" "AG_Netbuf *buf"
.Pp
.nr nS 0
The
.Fn AG_PropLoad
function loads an object's property table in machine-independent format from
.Fa fd ,
and
.Fn AG_PropSave
saves an object's property table in machine-independent format to
.Fa fd .
Properties which are marked non-persistent
(such as all properties of type
.Dv AG_PROP_POINTER )
are ignored by these functions.
.Sh READ/WRITE OPERATIONS
.nr nS 1
.Ft void
.Fn AG_SetUintWrFn "AG_Prop *prop, Uint (*fn)(void *, AG_Prop *, Uint)"
.Pp
.Ft void
.Fn AG_SetIntWrFn "AG_Prop *prop, int (*fn)(void *, AG_Prop *, int)"
.Pp
.Ft void
.Fn AG_SetBoolWrFn "AG_Prop *prop, int (*fn)(void *, AG_Prop *, int)"
.Pp
.Ft void
.Fn AG_SetUint8WrFn "AG_Prop *prop, Uint8 (*fn)(void *, AG_Prop *, Uint8)"
.Pp
.Ft void
.Fn AG_SetSint8WrFn "AG_Prop *prop, Sint8 (*fn)(void *, AG_Prop *, Sint8)"
.Pp
.Ft void
.Fn AG_SetUint16WrFn "AG_Prop *prop, Uint16 (*fn)(void *, AG_Prop *, Uint16)"
.Pp
.Ft void
.Fn AG_SetSint16WrFn "AG_Prop *prop, Sint16 (*fn)(void *, AG_Prop *, Sint16)"
.Pp
.Ft void
.Fn AG_SetUint32WrFn "AG_Prop *prop, Uint32 (*fn)(void *, AG_Prop *, Uint32)"
.Pp
.Ft void
.Fn AG_SetSint32WrFn "AG_Prop *prop, Sint32 (*fn)(void *, AG_Prop *, Sint32)"
.Pp
.Ft void
.Fn AG_SetUint64WrFn "AG_Prop *prop, Uint64 (*fn)(void *, AG_Prop *, Uint64)"
.Pp
.Ft void
.Fn AG_SetSint64WrFn "AG_Prop *prop, Sint64 (*fn)(void *, AG_Prop *, Sint64)"
.Pp
.Ft void
.Fn AG_SetFloatWrFn "AG_Prop *prop, float (*fn)(void *, AG_Prop *, float)"
.Pp
.Ft void
.Fn AG_SetDoubleWrFn "AG_Prop *prop, double (*fn)(void *, AG_Prop *, double)"
.Pp
.Ft void
.Fn AG_SetLongDoubleWrFn "AG_Prop *prop, long double (*fn)(void *, AG_Prop *, long double)"
.Pp
.Ft void
.Fn AG_SetStringWrFn "AG_Prop *prop, char *(*fn)(void *, AG_Prop *, char *)"
.Pp
.Ft void
.Fn AG_SetPointerWrFn "AG_Prop *prop, void *(*fn)(void *, AG_Prop *, void *)"
.Pp
.Ft void
.Fn AG_SetUintRdFn "AG_Prop *prop, Uint (*fn)(void *, AG_Prop *)"
.Pp
.Ft void
.Fn AG_SetIntRdFn "AG_Prop *prop, int (*fn)(void *, AG_Prop *)"
.Pp
.Ft void
.Fn AG_SetBoolRdFn "AG_Prop *prop, int (*fn)(void *, AG_Prop *)"
.Pp
.Ft void
.Fn AG_SetUint8RdFn "AG_Prop *prop, Uint8 (*fn)(void *, AG_Prop *)"
.Pp
.Ft void
.Fn AG_SetSint8RdFn "AG_Prop *prop, Sint8 (*fn)(void *, AG_Prop *)"
.Pp
.Ft void
.Fn AG_SetUint16RdFn "AG_Prop *prop, Uint16 (*fn)(void *, AG_Prop *)"
.Pp
.Ft void
.Fn AG_SetSint16RdFn "AG_Prop *prop, Sint16 (*fn)(void *, AG_Prop *)"
.Pp
.Ft void
.Fn AG_SetUint32RdFn "AG_Prop *prop, Uint32 (*fn)(void *, AG_Prop *)"
.Pp
.Ft void
.Fn AG_SetSint32RdFn "AG_Prop *prop, Sint32 (*fn)(void *, AG_Prop *)"
.Pp
.Ft void
.Fn AG_SetUint64RdFn "AG_Prop *prop, Uint64 (*fn)(void *, AG_Prop *)"
.Pp
.Ft void
.Fn AG_SetSint64RdFn "AG_Prop *prop, Sint64 (*fn)(void *, AG_Prop *)"
.Pp
.Ft void
.Fn AG_SetFloatRdFn "AG_Prop *prop, float (*fn)(void *, AG_Prop *)"
.Pp
.Ft void
.Fn AG_SetDoubleRdFn "AG_Prop *prop, double (*fn)(void *, AG_Prop *)"
.Pp
.Ft void
.Fn AG_SetLongDoubleRdFn "AG_Prop *prop, long double (*fn)(void *, AG_Prop *)"
.Pp
.Ft void
.Fn AG_SetStringRdFn "AG_Prop *prop, char *(*fn)(void *, AG_Prop *)"
.Pp
.Ft void
.Fn AG_SetPointerRdFn "AG_Prop *prop, void *(*fn)(void *, AG_Prop *)"
.Pp
.nr nS 0
All
.Fn AG_Set(Type)WrFn
functions assign a specific write-function to the given property.
The write operation is invoked whenever the
.Fn AG_SetProp
function attempts to modify the given property.
The new value is passed as the third argument to the write-function, and the
value returned by the function is assigned to the property.
To preserve the current value, the write-function can read the current value
directly from the
.Nm
argument and return it.
.Pp
Similarly, the set of
.Fn AG_Set(Type)RdFn
functions define a specific read-function to return the value of a given
property whenever it is requested by
.Fn AG_GetProp .
.Pp
The first argument to the read and write functions is always a pointer to
the object which contains the given property.
.Sh SEE ALSO
.Xr AG_Intro 3 ,
.Xr AG_Object 3
.Sh HISTORY
The
.Nm
interface first appeared in Agar 1.0.
Support for property-specific and object-specific read/write operations first
appeared in Agar 1.1.
Support for 64-bit types and long double was also added in Agar 1.1.
