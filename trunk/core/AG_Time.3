.\" Copyright (c) 2009 Hypertriton, Inc. <http://hypertriton.com/>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd August 29, 2009
.Dt AG_TIME 3
.Os
.ds vT Agar API Reference
.ds oS Agar 1.3
.Sh NAME
.Nm AG_Time
.Nd agar time interface
.Sh SYNOPSIS
.Bd -literal
#include <agar/core.h>
.Ed
.Sh DESCRIPTION
The
.Nm
interface implements useful timing-related routines.
.Sh INTERFACE
.nr nS 1
.Ft "Uint32"
.Fn AG_GetTicks "void"
.Pp
.Ft "void"
.Fn AG_Delay "Uint32 ms"
.Pp
.nr nS 0
The
.Fn AG_GetTicks
function returns the number of milliseconds elapsed since the Agar library
initialization.
The value wraps if the program runs for more than approximately 49 days.
.Pp
.Fn AG_Delay
waits at least
.Fa ms
milliseconds (possibly longer depending on OS scheduling), before returning.
using the name of the object class as a signature.
.Sh INTERNAL INTERFACE
Internally,
.Fn AG_GetTicks
and
.Fn AG_Delay
rely on a set of OS-dependent drivers.
It is possible to implement new drivers using the following interface:
.Pp
.nr nS 1
.Ft void
.Fn AG_SetTimeOps "const AG_TimeOps *ops"
.Pp
.nr nS 0
The
.Fn AG_SetTimeOps
function accepts a pointer to the structure:
.Bd -literal
typedef struct ag_time_ops {
	const char *name;
	void   (*Init)(void);
	void   (*Destroy)(void);
	Uint32 (*GetTicks)(void);
	void   (*Delay)(Uint32);
} AG_TimeOps;
.Ed
.Pp
.Fn Init
performs any necessary initialization.
.Fn Destroy
cleans up any allocated resources.
.Pp
The
.Fn GetTicks
operation is the backend to
.Fn AG_GetTicks
and
.Fn Delay
is the backend to
.Fn AG_Delay .
.Pp
.Fn AG_SetTimeOps
can be safely invoked multiple times to change the effective
.Ft AG_TimeOps .
.Sh SEE ALSO
.Xr AG_Intro 3 ,
.Xr AG_Timeout 3
.Sh HISTORY
The
.Nm
interface first appeared in Agar 1.3.4
