.\"	$Csoft: view.2,v 1.33 2005/06/18 04:25:18 vedge Exp $
.\"
.\" Copyright (c) 2002, 2003, 2004, 2005 CubeSoft Communications, Inc.
.\" <http://www.csoft.org>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd August 23, 2002
.Dt AG_VIEW 3
.Os
.ds vT Agar API Reference
.ds oS Agar 1.0
.Sh NAME
.Nm AG_View
.Nd agar display interface
.Sh SYNOPSIS
.Bd -literal
#include <agar/core.h>
.Ed
.Sh DESCRIPTION
The Agar
.Nm
interface manages low-level access to video displays, which is represented
by the
.Fa AG_Display
structure.
Every display manages a list of
.Xr AG_Window 3
objects for use by the GUI (see the
.Dq WINDOW SYSTEM
section below for more details).
.Pp
The
.Nm
interface also implements a series of macros for basic pixel operations, and
a number of utility routines for surface and texture manipulation.
.Sh INITIALIZATION
.nr nS 1
.Ft "int"
.Fn AG_ViewInit "int w" "int h" "int bpp" "Uint flags"
.Pp
.Ft "void"
.Fn AG_ViewDestroy "void"
.Pp
.Ft "int"
.Fn AG_ViewSetRefreshRate "int fps"
.Pp
.nr nS 0
The
.Fn AG_ViewInit
function initializes the graphic display if there is one available,
returning 0 on success and -1 on failure.
If the
.Va
flag is set,
.Fn AG_ViewInit
will attempt to create an OpenGL rendering context, and the GUI will arrange
for widgets to be rendered using OpenGL, if OpenGL is available and support
for it was enabled at compile time.
.Pp
The
.Fn AG_ViewDestroy
function frees resources allocated by the view structure.
It is invoked automatically by
.Xr AG_Destroy 3 .
.Pp
The
.Fn AG_SetRefreshRate
function sets the maximum refresh rate, given in frames/second.
The stock event loop function
.Xr AG_EventLoop_FixedFPS 3
will attempt to draw exactly this number of frames per second and then idle
as much as possible.
This value is only advisory, alternate or user-defined event loop functions
may ignore it entirely.
.Sh GRAPHIC SURFACES
.nr nS 1
.Ft "SDL_Surface *"
.Fn AG_DupSurface "SDL_Surface *src"
.Pp
.Ft "void"
.Fn AG_ScaleSurface "SDL_Surface *src" "Uint16 width" "Uint16 height" "SDL_Surface **dst"
.Pp
.Ft "Uint32"
.Fn AG_VideoPixel "Uint32 c"
.Pp
.Ft "Uint32"
.Fn AG_SurfacePixel "Uint32 c"
.Pp
.Ft "int"
.Fn AG_SamePixelFmt "SDL_Surface *s1" "SDL_Surface *s2"
.Pp
.Ft "void"
.Fn AG_SetAlphaPixels "SDL_Surface *surface" "Uint8 alpha"
.Pp
.Ft "void"
.Fn AG_UpdateRectQ "int x" "int y" "int w" "int h"
.Pp
.Ft "int"
.Fn AG_DumpSurface "SDL_Surface *su" "char *path_save"
.Pp
.nr nS 0
The
.Fn AG_DupSurface
returns a newly allocated surface containing a copy of
.Fa src .
.Fn AG_ScaleSurface
returns a copy of
.Fa src
scaled to the given size in pixels into
.Fa dst ,
which must be either NULL or a pointer to a valid surface.
If
.Fa dst
is NULL, a new surface is allocated.
.Pp
The
.Fn AG_VideoPixel
function converts the given pixel value
.Fa c
from reference surface format (agSurfaceFmt) to video display
format (agVideoFmt).
.Fn AG_SurfacePixel
does the opposite.
.Pp
.Fn AG_SamePixelFmt
compares the two surfaces
.Fa s1
and
.Fa s2
and return 1 if they both share the same color depth, RGBA masks and colorkey
settings.
.Pp
The
.Fn AG_SetAlphaPixels
function changes the alpha component of all pixels with a non-zero alpha
component.
.Pp
The
.Fn AG_UpdateRectQ
function queues the update of a video region.
With direct video rendering mode, this adds a
.Ft SDL_Rect
to an array that will be passed to
.Xr SDL_UpdateRects 3 .
With the OpenGL rendering mode, the entire display is queued for update.
.Fa rd
to the dirty rectangle array the event loop will pass to
.Xr SDL_UpdateRects 3
when the display is refreshed.
.Fn VIEW_UPDATE
is a no-op if OpenGL mode is in use.
.Pp
The
.Fn AG_DumpSurface
function encodes a JPEG image file from the contents of a specified surface
.Fa su
(or if
.Fa su
is NULL, it uses the contents of the current display).
The image is saved to the application's data directory, and the resulting
path is copied to the
.Fa path_save
argument (if not NULL),
which must be at least
.Dv MAXPATHLEN
bytes in size.
.Fn AG_DumpSurface
returns 0 on success and -1 on failure.
The function always fails if Agar was not compiled with libjpeg support.
.Sh PIXEL OPERATIONS
.nr nS 1
.Ft "void"
.Fn AG_CLIPPED_PIXEL "SDL_Surface *s" "int x" "int y"
.Pp
.Ft "void"
.Fn AG_UNCLIPPED_PIXEL "SDL_Surface *s" "int x" "int y"
.Pp
.Ft "Uint32"
.Fn AG_GET_PIXEL "SDL_Surface *s" "Uint8 *p"
.Pp
.Ft "Uint32"
.Fn AG_GET_PIXEL2 "SDL_Surface *s" "int x" "int y"
.Pp
.Ft "void"
.Fn AG_PUT_PIXEL "SDL_Surface *s" "Uint8 *p" "Uint32 c"
.Pp
.Ft "void"
.Fn AG_PUT_PIXEL2 "SDL_Surface *s" "int x" "int y" "Uint32 c"
.Pp
.Ft "void"
.Fn AG_PUT_PIXEL2_CLIPPED "SDL_Surface *s" "int x" "int y" "Uint32 c"
.Pp
.Ft "void"
.Fn AG_BLEND_RGBA "SDL_Surface *s" "Uint8 *p" "Uint8 r" "Uint8 g" "Uint8 b" "Uint8 a" "enum ag_blend_func func"
.Pp
.Ft "void"
.Fn AG_BLEND_RGBA2 "SDL_Surface *s" "int x" "int y" "Uint8 r" "Uint8 g" "Uint8 b" "Uint8 a" "enum ag_blend_func func"
.Pp
.Ft "void"
.Fn AG_BLEND_RGBA2_CLIPPED "SDL_Surface *s" "int x" "int y" "Uint8 r" "Uint8 g" "Uint8 b" "Uint8 alpha" "enum ag_blend_func func"
.Pp
.Ft "void"
.Fn AG_VIEW_PUT_PIXEL "Uint8 *p" "Uint32 c"
.Pp
.Ft "void"
.Fn AG_VIEW_PUT_PIXEL2 "int x" "int y" "Uint32 c"
.Pp
.Ft "void"
.Fn AG_VIEW_PUT_PIXEL2_CLIPPED "int x" "int y" "Uint32 c"
.Pp
.nr nS 0
The macros
.Fn AG_CLIPPED_PIXEL
and
.Fn AG_UNCLIPPED_PIXEL
evaluate whether the pixel at the given coordinates resides inside or outside
of the clipping rectangle of the given surface.
.Pp
.Fn AG_GET_PIXEL
returns a 32-bit interpretation of the pixel at the given location
.Fa p
in the pixel data of the surface
.Fa s .
The
.Fn AG_GET_PIXEL2
variant finds the location of the pixel in the surface from the coordinates
.Fa x ,
.Fa y .
.Pp
.Fn AG_PUT_PIXEL
and
.Fn AG_PUT_PIXEL2
write the color
.Fa c
to the pixel at the given location, without doing any clipping.
The
.Fn AG_PUT_PIXEL2_CLIPPED
variant ensures that the pixel is inside the clipping rectangle of the surface
before writing to it.
.Pp
The
.Fn AG_BLEND_RGBA ,
.Fn AG_BLEND_RGBA2
and
.Fn AG_BLEND_RGBA2_CLIPPED
macros operate in a manner similar to
.Fn AG_PUT_PIXEL* ,
except that the destination pixel is alpha-blended with the color described
by the given RGB triplet, whose weight is defined by the
.Fa alpha
parameter.
The
.Fa func
argument may be one of:
.Pp
.Bd -literal
enum ag_blend_func {
	AG_ALPHA_OVERLAY,		/* dA = sA+dA */
	AG_ALPHA_SRC,			/* dA = sA */
	AG_ALPHA_DST,			/* dA = dA */
	AG_ALPHA_MEAN,			/* dA = (sA+dA)/2 */
	AG_ALPHA_SOURCE_MINUS_DST,	/* dA = (sA-dA) */
	AG_ALPHA_DST_MINUS_SOURCE	/* dA = (dA-sA) */
};
.Ed
.Pp
The macros
.Fn AG_VIEW_PUT_PIXEL ,
.Fn AG_VIEW_PUT_PIXEL2
and
.Fn AG_VIEW_PUT_PIXEL2_CLIPPED
behave in a manner similar to
.Fn AG_PUT_PIXEL* ,
except that they are optimized for the display surface.
For instance, support for specific display depths may have been disabled
at compile-time.
.Sh OPENGL OPERATIONS
.Pp
The following functions are available only if Agar was compiled with OpenGL
support, and the current application is in OpenGL mode (as indicated by the
.Va opengl
flag of the current display).
.Pp
.nr nS 1
.Ft "void"
.Fn AG_LockGL "void"
.Pp
.Ft "void"
.Fn AG_UnlockGL "void"
.Pp
.Ft "GLuint"
.Fn AG_SurfaceTexture "SDL_Surface *src" "GLfloat *texcoord"
.Pp
.Ft "void"
.Fn AG_UpdateTexture "SDL_Surface *src" "GLuint texture"
.Pp
.Ft "SDL_Surface *"
.Fn AG_CaptureGLView "void"
.Pp
.nr nS 0
The
.Fn AG_LockGL
macro acquires the global lock protecting all OpenGL calls.
.Fn AG_UnlockGL
releases that lock.
If either OpenGL support was not compiled into Agar, or the current application
is not in OpenGL mode, these macros are no-ops.
.Pp
The
.Fn AG_SurfaceTexture
function creates an OpenGL texture from
.Fa src
and returns the OpenGL surface handle.
If
.Fa texcoord
is not NULL, the function returns the texture coordinates (4 float values)
into it.
.Fn AG_UpdateTexture
updates the contents of an existing OpenGL texture by name, from
the contents of a given SDL surface.
.Pp
The
.Fn AG_CaptureGLView
function captures the contents of the current OpenGL display into a
newly-allocated SDL surface and returns it.
.Sh WINDOW SYSTEM
.nr nS 1
.Ft "void"
.Fn AG_ViewAttach "AG_Window *child"
.Pp
.Ft "void"
.Fn AG_ViewDetach "AG_Window *child"
.Pp
.Ft void
.Fn AG_ViewDetachQueued "void"
.Pp
.Ft "AG_Window *"
.Fn AG_FindWindow "char *name"
.Pp
.nr nS 0
The Agar GUI operates on a set of windows which are associated with an
.Nm .
For more details, see
.Xr AG_Window 3 .
.Pp
The
.Fn AG_ViewAttach
function attaches the window pointed to by
.Fa child
to the view.
The
.Fn AG_ViewDetach
function detaches the window pointed to by
.Fa child
from the view by adding it to the detach queue.
The detachment will be performed later by
.Fa AG_ViewDetachQueued .
.Pp
The
.Fn AG_FindWindow
functions looks for a window identified by
.Fa name
and return NULL if there is no such window.
.Sh BUGS
.Pp
Currently only one display is supported, but that will change with future
SDL versions.
.Sh SEE ALSO
.Xr AG_Intro 3 ,
.Xr AG_Window 3 ,
.Xr SDL_SetVideoMode 3 ,
.Xr SDL_CreateRGBSurface 3
.Xr SDL_Surface 3 ,
.Xr glViewport 3 ,
.Xr glOrtho 3 .
.Sh HISTORY
The
.Nm
interface first appeared in Agar 1.0
