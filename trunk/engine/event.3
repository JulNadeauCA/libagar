.\"	$Csoft: event.3,v 1.10 2003/05/18 00:16:57 vedge Exp $
.\"
.\" Copyright (c) 2002, 2003 CubeSoft Communications, Inc.
.\" <http://www.csoft.org>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd September 16, 2002
.Dt EVENT 3
.Os
.ds vT Agar API Reference
.ds oS Agar 1.0
.Sh NAME
.Nm event
.Nd agar event system
.Sh SYNOPSIS
.Bd -literal
#include <engine/event.h>
.Ed
.Sh DESCRIPTION
The
.Xr object 3
structure contains a table of functions registered as event handlers for
specific types of events.
The prototype for event handler functions looks like this:
.Pp
.nr nS 1
.Ft void
.Fn foo "int argc" "union evarg *argv"
.nr nS 0
.Pp
The
.Fa argv
argument is a pointer to an array of
.Fa argc
unions, defined as:
.Bd -literal
typedef union evarg {
	void	*p;
	char	*s;
	char	 c;
	int	 i;
	long int li;
	double	 f;
} *evargs;
.Ed
.Pp
Note that
.Va argv[0]
is always a pointer to the
.Xr object 3
receiving the event.
.Pp
The
.Nm
subsystem also implements the
.Sq main loop
used by Agar applications, which performs the following operations:
.Bl -tag -width "Event processing"
.It Video updates
The display is updated when a counter exceeds a fixed amount of ticks, obtained
from
.Xr SDL_GetTicks 3 .
The time it took for the frame to render is taken in consideration as the
refresh rate is recalculated, so animations do not vary in speed, for instance.
Video updates have precedence in the event loop.
.Pp
If the frame was too complicated to draw in one cycle, the minimum delay is
decremented down to the minimum set by
.Xr view_set_refresh 3 .
This can be avoided by lowering the frame rate to ensure that the frame is
rendered in one cycle, or reducing the amount of time spent in rendering
routines.
If the last frame was drawn in a reasonable amount of time, the event loop
calls
.Xr SDL_Delay 3
to relinquish the CPU (taking into account the approximative
.Xr SDL_Delay 3
granularity).
.It Event processing
SDL events are translated to
.Nm
structures, which are sent to the relevant subsystems.
.El
.Sh EVENT PROCESSING
.nr nS 1
.Ft "struct event *"
.Fn event_new "void *obj" "const char *name" "void (*handler)(int argc, union evarg *argv)" "const char *fmt" "..."
.Pp
.Ft "int"
.Fn event_post "void *obj" "const char *name" "const char *fmt" "..."
.Pp
.Ft "void"
.Fn event_forward "void *obj" "const char *name" "int argc" "union evarg *argv"
.nr nS 0
.Pp
The
.Fn event_new
function registers a new event handler to service events of type
.Fa name .
.Fa obj
will be passed as the first argument to the event handler function.
.Fa handler
points to the event-handling function.
.Fa fmt
is a format string and the arguments following it are inserted at the start of
the
.Fa evarg
array, followed by the arguments to
.Fn event_post .
.Pp
The following sequences are valid in
.Fa fmt :
.Bl -tag -compact -width "diouxX"
.It diouxX
Converted to
.Ft int
.It DOU
Converted to
.Ft long int
.It eEfgG
Converted to
.Ft double
.It c
Converted to
.Ft char
.It s
Converted to
.Ft char *
.It p
Converted to
.Ft void *
.El
.Pp
The
.Fn event_post
function arranges for the event handler associated with
.Fa name ,
if any, to be invoked.
For events of type
.Dv EVENT_ASYNC ,
a new thread is created in order to service the event (assuming that the
.Dv THREADS
compile-time option was enabled).
.Fa fmt
is a format string and the arguments following it are inserted
after the arguments registered by
.Fn event_new
in the
.Fa evarg
array.
.Fn event_post
returns 1 if an event handler was invoked, otherwise 0.
.Pp
The
.Fn event_forward
function forwards the event identified by
.Fa name
to object
.Fa obj .
.Fn event_forward
is usually called from an event handler, but may also be used to send
.Sq fake
events, as an alternative to the
.Fn event_post
interface.
.Sh SEE ALSO
.Xr agar 3 ,
.Xr object 3
.Sh HISTORY
The
.Nm
layer first appeared in Agar 1.0
