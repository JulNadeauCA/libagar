.\"	$Csoft: gfx.3,v 1.3 2005/04/21 06:38:10 vedge Exp $
.\"
.\" Copyright (c) 2004, 2005 CubeSoft Communications, Inc.
.\" <http://www.csoft.org>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd May 10, 2004
.Dt GFX 3
.Os
.ds vT Agar API Reference
.ds oS Agar 1.0
.Sh NAME
.Nm gfx
.Nd agar graphic resource manager
.Sh SYNOPSIS
.Bd -literal
#include <engine/engine.h>
.Ed
.Sh DESCRIPTION
The Agar
.Nm
interface manages the storage of graphical information, such as images and
animations.
The
.Fn gfx_new
function is used to initialize the
.Va gfx
member of the
.Xr object 3
structure.
The
.Nm
structure provides arrays of images, animations and maps.
For example, references to sprites on a two-dimensional
.Xr map 3
consist of a pointer to a given object and an index into the
.Va sprites
array of its associated
.Va gfx
structure.
.Pp
It is possible to use an object's graphics without having to load the
object's entire data into memory.
Graphical information is saved in such a way that it is possible to load
specific elements quickly.
.Sh INITIALIZATION
.nr nS 1
.Ft "struct gfx *"
.Fn gfx_new "void *object"
.Pp
.Ft void
.Fn gfx_init "struct gfx *gfx"
.Pp
.Ft void
.Fn gfx_unused "struct gfx *gfx"
.Pp
.Ft void
.Fn gfx_destroy "struct gfx *gfx"
.nr nS 0
.Pp
The
.Fn gfx_new
function allocates/initializes a
.Nm
structure and associates it to the given object.
It also sets the reference count to 1.
.Pp
The
.Fn gfx_unused
function decrements the reference count and destroys the given
.Nm
using
.Fn gfx_destroy
if it reaches 0.
.Sh STATIC CONTENT
.nr nS 1
.Ft "struct gfx *"
.Fn gfx_wire "void *object" "const char *den_filename"
.Pp
.nr nS 0
.Pp
The
.Fn gfx_wire
function permanently wires graphics from the given
.Xr den 5
archive file into memory.
The archive should be located in one of the 
.Sq den-path
directories.
It is useful for pixmaps used by widgets, for instance.
.Sh IMAGES/ANIMATIONS
.nr nS 1
.Ft void
.Fn gfx_alloc_sprites "struct gfx *gfx" "Uint32 n"
.Pp
.Ft "Uint32"
.Fn gfx_insert_sprite "struct gfx *gfx" "SDL_Surface *surface"
.Pp
.Ft "struct map *"
.Fn gfx_insert_fragments "struct gfx *gfx" "SDL_Surface *surface"
.Pp
.Ft "void"
.Fn sprite_set_surface "struct sprite *sprite" "SDL_Surface *su"
.Pp
.Ft "void"
.Fn sprite_set_snap_mode "struct sprite *sprite" "enum gfx_snap_mode snap_mode"
.Pp
.Ft "void"
.Fn sprite_set_origin "struct sprite *sprite" "int x" "int y"
.Pp
.Ft "struct gfx_anim *"
.Fn gfx_insert_anim "struct gfx *gfx"
.Pp
.Ft "Uint32"
.Fn gfx_insert_anim_frame "struct gfx_anim *anim" "SDL_Surface *surface"
.Pp
.Ft "Uint32"
.Fn gfx_insert_submap "struct gfx *gfx" "struct map *map"
.nr nS 0
.Pp
The
.Fn gfx_alloc_sprites
function allocates
.Fa n
sprite entries and initializes them to NULL.
The
.Fn gfx_insert_sprite
function allocates a new sprite and attributes the given surface to it.
.Fn gfx_insert_fragments
breaks a surface into square fragments of size
.Dv TILESZ .
Those fragments are inserted into the sprites array, and a
.Xr map 3
containing the fragments in order is generated.
.Pp
The
.Fn sprite_set_surface
function changes the surface associated with the given sprite (automatically
freeing the previous surface if there was any).
.Pp
The
.Fn sprite_set_snap_mode
function changes the default snapping mode for the sprite.
Acceptable arguments include:
.Bd -literal
enum gfx_snap_mode {
	GFX_SNAP_NOT,
	GFX_SNAP_TO_GRID,
	GFX_SNAP_TO_CENTER
};
.Ed
.Pp
The
.Fn sprite_set_origin
function selects a different origin point for the given sprite.
.Pp
The
.Fn gfx_insert_anim
function allocates a new animation structure.
.Fn gfx_insert_anim_frame
puts the given surface on the frame list.
.Pp
The
.Fn gfx_insert_submap
function inserts a new map into the given
.Nm
structure's array of maps.
This function is typically used for maps which are generated (for example by
.Fn gfx_insert_fragments ) .
.Sh SEE ALSO
.Xr agar 3 ,
.Xr map 3
.Xr object 3
.Xr SDL_Surface 3
.Sh HISTORY
The
.Nm
structure first appeared in Agar 1.0
