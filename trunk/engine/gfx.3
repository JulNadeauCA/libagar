.\"	$Csoft: gfx.3,v 1.2 2005/01/05 04:44:03 vedge Exp $
.\"
.\" Copyright (c) 2004, 2005 CubeSoft Communications, Inc.
.\" <http://www.csoft.org>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd May 10, 2004
.Dt GFX 3
.Os
.ds vT Agar API Reference
.ds oS Agar 1.0
.Sh NAME
.Nm gfx
.Nd agar graphic resource manager
.Sh SYNOPSIS
.Bd -literal
#include <engine/engine.h>
.Ed
.Sh DESCRIPTION
The Agar
.Nm
interface maintains a set of references to static and animated graphic
structures.
Two types of
.Nm
structures are implemented:
.Pp
.Bl -tag -width "GFX_PRIVATE "
.It GFX_SHARED
The graphical elements of this set are a shared resource.
The
.Nm
subsystem handles memory management through reference counting.
.It GFX_PRIVATE
The graphical elements of this set are private and the
.Nm
subsystem does not manage its entries.
.El
.Sh INITIALIZATION
.nr nS 1
.Ft void
.Fn gfx_init "struct gfx *gfx" "enum gfx_type type" "const char *key"
.Pp
.Ft void
.Fn gfx_destroy "struct gfx *gfx"
.nr nS 0
.Pp
The
.Fn gfx_init
function initializes a
.Nm
structure of the given
.Fa type :
.Bd -literal
enum gfx_type {
	GFX_SHARED,		/* Managed, shared graphics */
	GFX_PRIVATE		/* Object-managed graphics */
} type;
.Ed
The
.Fn gfx_destroy
function frees the resources allocated by the structure.
.Sh SHARED GRAPHICS
.nr nS 1
.Ft "struct gfx *"
.Fn gfx_fetch_shd "const char *key"
.Pp
.Ft "void"
.Fn gfx_unused "struct gfx *gfx"
.Pp
.Ft "void"
.Fn gfx_wire "struct gfx *gfx"
.nr nS 0
.Pp
The
.Fn gfx_fetch_shd
function looks up the table of resident
.Nm
entries for one matching the given
.Fa key .
If a match is found, the function returns a pointer to it and increments its
reference count, otherwise it returns NULL.
.Pp
Once the caller no longer needs to access the graphic elements of the entry,
it should invoke the
.Fn gfx_unused
function, which decrements the reference count of the entry and frees it if
the count reaches 0.
.Pp
The
.Fn gfx_wire
function requests that the given
.Nm
set remains resident in memory (so the
.Fn gfx_unused
function becomes a no-op).
.Sh PRIVATE GRAPHICS
.nr nS 1
.Ft "struct gfx *"
.Fn gfx_alloc_pvt "void *obj" "const char *key"
.Pp
.Ft void
.Fn gfx_alloc_sprites "struct gfx *gfx" "Uint32 n"
.Pp
.Ft "Uint32"
.Fn gfx_insert_sprite "struct gfx *gfx" "SDL_Surface *surface"
.Pp
.Ft "struct map *"
.Fn gfx_insert_fragments "struct gfx *gfx" "SDL_Surface *surface"
.Pp
.Ft "void"
.Fn sprite_set_surface "struct sprite *sprite" "SDL_Surface *su"
.Pp
.Ft "void"
.Fn sprite_set_snap_mode "struct sprite *sprite" "enum gfx_snap_mode snap_mode"
.Pp
.Ft "void"
.Fn sprite_set_origin "struct sprite *sprite" "int x" "int y"
.Pp
.Ft "struct gfx_anim *"
.Fn gfx_insert_anim "struct gfx *gfx"
.Pp
.Ft "Uint32"
.Fn gfx_insert_anim_frame "struct gfx_anim *anim" "SDL_Surface *surface"
.Pp
.Ft "Uint32"
.Fn gfx_insert_submap "struct gfx *gfx" "struct map *map"
.nr nS 0
.Pp
The
.Fn gfx_alloc_pvt
function allocates a private
.Nm
structure for use by the given object.
Typically, the graphical elements for entries of this type are generated by
the object and registered using functions such as
.Fn gfx_insert_* .
.Pp
The
.Fn gfx_alloc_sprites
function allocates
.Fa n
sprite entries and initializes them to NULL.
The
.Fn gfx_insert_sprite
function allocates a new sprite and attributes the given surface to it.
.Fn gfx_insert_fragments
breaks a surface into square fragments of size
.Dv TILESZ ,
and returns generated a
.Xr map 3
describing the fragments, which can be mapped using
.Fn gfx_insert_submap .
.Pp
The
.Fn sprite_set_surface
function changes the surface associated with the given sprite (automatically
destroying any previous surface).
.Pp
The
.Fn sprite_set_snap_mode
function changes the default snapping mode for the sprite.
Acceptable arguments include:
.Bd -literal
enum gfx_snap_mode {
	GFX_SNAP_NOT,
	GFX_SNAP_TO_GRID,
	GFX_SNAP_TO_CENTER
};
.Ed
.Pp
The
.Fn sprite_set_origin
function selects a different origin point for the given sprite.
.Pp
The
.Fn gfx_insert_anim
function allocates a new animation structure.
.Fn gfx_insert_anim_frame
puts the given surface on the frame list.
.Pp
The
.Fn gfx_insert_submap
function inserts a new map into the given
.Nm
structure's array of maps.
This function is typically used for maps which are generated (for instance
by
.Fn gfx_insert_fragments ) .
.Sh SEE ALSO
.Xr agar 3 ,
.Xr object 3
.Xr SDL_Surface 3
.Sh HISTORY
The
.Nm
structure first appeared in Agar 1.0
