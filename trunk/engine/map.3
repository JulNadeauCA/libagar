.\"	$Csoft: map.3,v 1.38 2003/05/18 00:16:57 vedge Exp $
.\"
.\" Copyright (c) 2001, 2002, 2003 CubeSoft Communications, Inc.
.\" <http://www.csoft.org>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.\"	$OpenBSD: mdoc.template,v 1.6 2001/02/03 08:22:44 niklas Exp $
.\"
.Dd JANUARY 30, 2002
.Dt MAP 3
.Os
.ds vT Agar API Reference
.ds oS Agar 1.0
.Sh NAME
.Nm map
.Nd agar tile-based levels
.Sh SYNOPSIS
.Fd #include <engine/map.h>
.Sh DESCRIPTION
Agar levels are described by a two-dimensional array of nodes; each node holds
a stack of generic
.Sq noderef
structures, which are references to specific data (such as sprites or
animations).
.Pp
For example, the rendering of a
.Nm
is achieved by drawing the visible graphical noderefs in a specific order,
while the audio system mixes samples from audio noderefs near the visible area.
.Pp
Three types of references are currently defined:
.Pp
.Bl -tag -width "NODEREF_SPRITE " -compact
.It NODEREF_SPRITE
Pointer to a static image of arbitrary size.
Visible noderefs of this type are drawn only when the
.Va redraw
flag of the parent map is set.
.It NODEREF_ANIM
Pointer to an animation of arbitrary size.
Visible noderefs of this type are redrawn every
.Va n
milliseconds (possibly by another thread on a multiprocessor system).
.It NODEREF_WARP
Pointer to a node residing another map.
Objects coming in contact with this type of noderef are transported to
coordinates
.Va x ,
.Va y ,
.Va z
of map
.Va m .
.El
.Pp
Graphical noderefs provide the map renderer with two individual displacements
in pixels of the image from the tile origin, one for centering and the other
for sprite motion.
.Pp
The centering offset is usually set by the level editor.
The motion offset defines the position of the image relative to the node.
If the tile is scaled to another size, the centering offset is scaled to the
tile size, but the motion offset is not.
.Pp
Graphical noderefs provide the renderer with a list of graphical transforms
that should be applied before the tile is drawn (the resulting tile is cached),
and a layer number defining the order of rendering.
.Pp
.Sh INITIALIZATION
.nr nS 1
.Ft void
.Fn map_init "void *obj" "const char *name"
.Pp
.Ft "struct map *"
.Fn map_new "void *parent" "const char *name"
.Pp
.Ft void
.Fn map_destroy "void *map"
.Pp
.Ft int
.Fn map_load "void *map" "struct netbuf *buf"
.Pp
.Ft int
.Fn map_save "void *map" "struct netbuf *buf"
.Pp
.Ft int
.Fn map_alloc_nodes "struct map *map" "unsigned int w" "unsigned int h"
.Pp
.Ft void
.Fn map_free_nodes "struct map *map"
.Pp
.Ft int
.Fn map_adjust "struct map *map" "int x" "int y"
.Pp
.Ft void
.Fn map_set_zoom "struct map *map" "Uint16 factor"
.nr nS 0
.Pp
.Fn map_init
initializes
.Fa obj
as a
.Nm
identified by the string
.Fa name .
.Fn map_new
allocates, initializes and attaches a new map to
.Fa parent ,
unless the latter is a NULL pointer.
.Pp
The
.Fn map_destroy
function frees resources allocated by a map (such as the node arrays and
the stack of layers).
.Pp
The
.Fn map_load
function reads a map in network format from
.Fa buf ,
after freeing the existing nodes/layers.
.Fn map_load
returns 0 on success or -1 on failure.
.Fn map_save
saves a map in network format to
.Fa buf .
.Pp
The
.Fn map_alloc_nodes
function allocates
.Fa w
x
.Fa h
nodes, assuming that no node is currently allocated.
.Fn map_alloc_nodes
returns 0 on success or -1 on failure.
The maximum allowable geometry is defined by
.Dv MAP_MAX_WIDTH
and
.Dv MAP_MAX_HEIGHT .
The
.Fn map_free_nodes
function releases the nodes allocated by
.Fa map .
.Pp
The
.Fn map_resize
function reallocates the nodes arrays, initializing the new nodes and
freeing the excess ones.
.Fn map_resize
returns 0 on sucess or -1 on failure.
.Pp
The
.Fn map_set_zoom
function sets the zoom factor for a map.
Unless the factor is 100%, bitmap scaling is performed for graphical noderefs.
.Pp
.Sh NODE INITIALIZATION
.nr nS 1
.Ft void
.Fn node_init "struct node *node"
.Pp
.Ft int
.Fn node_load "struct netbuf *buf" "struct object_table *deps" \
              "struct node *node"
.Pp
.Ft void
.Fn node_save "struct netbuf *buf" "struct object_table *deps" \
              "struct node *node"
.Pp
.Ft void
.Fn node_destroy "struct node *node"
.nr nS 0
.Pp
The
.Fn node_init
function initializes a node.
The
.Fn node_destroy
function frees resources allocated by a node (such as the reference stack).
.Pp
The
.Fn node_load
function loads a node from
.Fa buf ,
returning 0 on success or -1 on failure.
.Fn node_save
saves a node to
.Fa buf .
.Sh NODE REFERENCES
.nr nS 1
.Ft void
.Fn noderef_init "struct noderef *nref"
.Pp
.Ft int
.Fn noderef_set_center "struct noderef *nref" "int xcenter" "int ycenter"
.Pp
.Ft int
.Fn noderef_set_motion "struct noderef *nref" "int xmotion" "int ymotion"
.Pp
.Ft void
.Fn noderef_destroy "struct noderef *nref"
.Pp
.Ft int
.Fn noderef_load "struct netbuf *buf" "struct object_table *deps" \
                 "struct node *node" "struct noderef **nref"
.Pp
.Ft void
.Fn noderef_save "struct fobj_buf *savebuf" "struct object_table *deps" \
                 "struct noderef *nref"
.Pp
.nr nS 0
The
.Fn noderef_init
function initializes a node reference structure.
.Pp
The
.Fn noderef_set_center
function sets the centering offsets of
.Fa nref
to
.Fa xcenter
and
.Fa ycenter ,
returning 0 on success or -1 if the offsets exceed
.Dv NODEREF_MAX_CENTER .
.Fn noderef_set_motion
function sets the motion offsets of
.Fa nref
to
.Fa xmotion
and
.Fa ymotion
returning 0 on success or -1 if the offsets exceed
.Dv NODEREF_MAX_MOTION .
.Pp
The
.Fn noderef_destroy
function frees the resources reserved by a noderef (such as the transforms).
.Pp
The
.Fn noderef_load
function loads a node reference from
.Fa buf ,
returning 0 on success or -1 on failure.
.Fn noderef_save
saves a node reference to
.Fa buf ,
encoding object references using
.Fa deps .
.Sh NODE MANIPULATIONS
.nr nS 1
.Ft int
.Fn node_move_ref "struct noderef *src_nref" "struct node *src_node" \
                  "struct map *dmap" "int dx" "int dy"
.Pp
.Ft void
.Fn node_move_ref_direct "struct noderef *src_nref" "struct node *src_node" \
                         "struct node *dst_node"
.Pp
.Ft "struct noderef *"
.Fn node_copy_ref "struct noderef *src_nref" "struct node *dst_node"
.Pp
.Ft void
.Fn node_remove_ref "struct node *node" "struct noderef *nref"
.Pp
.Ft "struct noderef *"
.Fn node_add_sprite "struct node *dst_node" "void *obj" "Uint32 index"
.Pp
.Ft "struct noderef *"
.Fn node_add_anim "struct node *dst_node" "void *obj" "Uint32 index" \
                  "Uint32 flags"
.Pp
.Ft "struct noderef *"
.Fn node_add_warp "struct node *dst_node" "const char *new_map" \
                  "int x" "int y" "Uint8 dir"
.Pp
.nr nS 0
The
.Fn node_move_ref
function moves
.Fa src_nref
from
.Fa src_node
to the node at specific map coordinates and returns 0, or -1 if
the coordinates are outside of
.Fa dmap .
The
.Fn node_move_ref_direct
variant moves a reference across two known nodes.
.Pp
The
.Fn node_copy_ref
function inserts a copy of
.Fa src_nref
on top of
.Fa dst_node,
with the same layer# and transformations.
.Pp
The
.Fn node_remove_ref
function detaches
.Fa nref
from
.Fa node
and frees it.
.Pp
The
.Fn node_add_sprite ,
.Fn node_add_anim
and
.Fn node_add_warp
functions respectively insert sprite references, animation references and
warp points.
The
.Fn new_map
argument of
.Fn node_add_warp
is the absolute pathname of the destination map and
.Fa x ,
.Fa y
and
.Fa dir
describe the initial position and direction.
.Sh SEE ALSO
.Xr agar 3 ,
.Xr mapedit 3 ,
.Xr object 3
.Sh HISTORY
The
.Nm
interface first appeared in Agar 1.0.
