.\"	$Csoft: map.3,v 1.13 2002/12/30 03:18:48 vedge Exp $
.\"
.\" Copyright (c) 2001, 2002, 2003 CubeSoft Communications, Inc.
.\" <http://www.csoft.org>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.\"	$OpenBSD: mdoc.template,v 1.6 2001/02/03 08:22:44 niklas Exp $
.\"
.Dd JANUARY 30, 2002
.Dt MAP 3
.Os
.Sh NAME
.Nm map
.Nd agar map
.Sh SYNOPSIS
.Fd #include <engine/map.h>
.Sh DESCRIPTION
Agar levels are described by arrays of nodes.
Each node contains a stack of references and other data specific to the tile.
The node references also contain centering/motion offsets and a list of
transforms to apply.
.Pp
.Sh INITIALIZATION
.nr nS 1
.Ft "struct map *"
.Fn map_init "struct map *map" "enum map_type type" "char *name" "char *archive"
.Pp
.Ft void
.Fn map_destroy "void *map"
.Pp
.Ft int
.Fn map_load "void *map" "int fd"
.Pp
.Ft int
.Fn map_save "void *map" "int fd"
.Pp
.Ft void
.Fn map_alloc_nodes "struct map *map" "Uint32 w" "Uint32 h"
.Pp
.Ft void
.Fn map_free_nodes "struct map *map"
.Pp
.Ft void
.Fn map_set_zoom "struct map *map" "Uint16 factor"
.Pp
.Ft void
.Fn noderef_init "struct noderef *nref"
.Pp
.Ft void
.Fn noderef_destroy "struct noderef *nref"
.Pp
.Ft void
.Fn noderef_load "int fd" "struct object_table *table" "struct node *node" \
                 "struct noderef **nref"
.Pp
.Ft void
.Fn noderef_save "struct fobj_buf *savebuf" "struct object_table *table" \
                 "struct noderef *nref"
.Pp
.Ft void
.Fn node_init "struct node *node" "int x" "int y"
.Pp
.Ft void
.Fn node_load "int fd" "struct object_table *table" "struct node *node"
.Pp
.Ft void
.Fn node_save "struct fobj_buf *savebuf" "struct object_table *table" \
              "struct node *node"
.Pp
.Ft void
.Fn node_destroy "struct node *node" "int x" "int y"
.nr nS 0
.Pp
The
.Fn map_init
function initializes a map identified by the string
.Fa name .
Data is loaded from
.Fa archive
if it is not NULL.
The
.Fa type
argument accepts:
.Bd -literal
enum map_type {
	MAP_2D,
	MAP_3D
};
.Ed
.Pp
The
.Fn map_destroy
function frees all resources allocated by a map.
.Pp
The
.Fn map_load
function loads a map from file descriptor
.Fa fd .
The
.Fn map_save
function saves a map to file descriptor
.Fa fd .
.Pp
The
.Fn map_alloc_nodes
function allocates
.Fa w
x
.Fa h
nodes.
The
.Fn map_free_nodes
function releases nodes allocated for map
.Fa map .
The
.Fn map_grow
and
.Fn map_shrink
functions reallocates
.Fa w
x
.Fa h
nodes.
The
.Fn map_adjust
function grows the map to make sure the node at
.Fa x ,
.Fa y
is initialized.
.Pp
The
.Fn map_set_zoom
function sets the zoom factor for a map.
Unless the factor is 100%, bitmap scaling is done as the map is drawn.
.Pp
The
.Fn noderef_init ,
.Fn noderef_destroy ,
.Fn noderef_load
and
.Fn noderef_save
functions respectively initialize, free, load and save a single node reference.
.Pp
The
.Fn node_init ,
.Fn node_destroy ,
.Fn node_load
and
.Fn node_save
functions respectively initialize, free, load and save a single map node.
.Sh NODE OPERATIONS
.nr nS 1
.Ft void
.Fn node_draw "struct map *map" "struct node *node" "Uint32 x" "Uint32 y"
.Pp
.Ft void
.Fn node_move_ref "struct noderef *nref" "struct node *node" "Uint32 nx" \
                  "Uint32 ny"
.Pp
.Ft void
.Fn node_copy_ref "struct noderef *nref" "struct node *node"
.Pp
.Ft void
.Fn node_remove_ref "struct noderef *nref" "struct node *node"
.Pp
.Ft "struct noderef *"
.Fn node_add_sprite "struct node *node" "void *obj" "Uint32 index"
.Pp
.Ft "struct noderef *"
.Fn node_add_anim "struct node *node" "void *obj" "Uint32 index" "Uint32 flags"
.Pp
.Ft "struct noderef *"
.Fn node_add_warp "struct node *node" "char *new_map" "Uint32 x" "Uint32 y" \
                  "Uint8 dir"
.nr nS 0
.Pp
The
.Fn node_draw
function draws
.Fa node
at screen coordinates
.Fa x ,
.Fa y .
The
.Fn node_move_ref ,
.Fn node_copy_ref
and
.Fn node_remove_ref
functions respectively move, copy and remove specific references on
.Fa node .
.Pp
The
.Fn node_add_sprite ,
.Fn node_add_anim
and
.Fn node_add_warp
respectively insert sprite references, animation references and map warp
information.
.Sh SEE ALSO
.Xr agar 3
