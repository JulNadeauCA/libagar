.\"	$Csoft: map.3,v 1.27 2003/03/13 06:21:48 vedge Exp $
.\"
.\" Copyright (c) 2001, 2002, 2003 CubeSoft Communications, Inc.
.\" <http://www.csoft.org>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.\"	$OpenBSD: mdoc.template,v 1.6 2001/02/03 08:22:44 niklas Exp $
.\"
.Dd JANUARY 30, 2002
.Dt MAP 3
.Os
.ds vT Agar API Reference
.ds oS Agar 1.0
.Sh NAME
.Nm map
.Nd agar level structure
.Sh SYNOPSIS
.Fd #include <engine/map.h>
.Sh DESCRIPTION
Agar levels are described by arrays of nodes.
Nodes contain stacks of references and a set of flags.
Three types of references are currently defined:
.Pp
.Bl -tag -width "NODEREF_SPRITE " -compact
.It NODEREF_SPRITE
Pointer to a static image of arbitrary size.
.It NODEREF_ANIM
Pointer to an animation of arbitrary size.
.It NODEREF_WARP
Pointer to a node residing another map.
.El
.Pp
Node references of type
.Dv NODEREF_SPRITE
and
.Dv NODEREF_ANIM
contain centering/motion offsets, a list of transforms, and a layer number.
.Pp
.Sh INITIALIZATION
.nr nS 1
.Ft void
.Fn map_init "struct map *map" "char *name" "char *archive"
.Pp
.Ft void
.Fn map_destroy "void *map"
.Pp
.Ft int
.Fn map_load "void *map" "int fd"
.Pp
.Ft int
.Fn map_save "void *map" "int fd"
.Pp
.Ft int
.Fn map_alloc_nodes "struct map *map" "unsigned int w" "unsigned int h"
.Pp
.Ft void
.Fn map_free_nodes "struct map *map"
.Pp
.Ft int
.Fn map_adjust "struct map *map" "int x" "int y"
.Pp
.Ft void
.Fn map_set_zoom "struct map *map" "Uint16 factor"
.nr nS 0
.Pp
The
.Fn map_init
function initializes a map identified by the string
.Fa name .
Data is loaded from
.Fa archive
if it is not NULL.
.Pp
The
.Fn map_destroy
function frees resources allocated by a map (such as the node arrays and
the stack of layers).
.Pp
The
.Fn map_load
function reads a map in machine-independent format from
.Fa fd ,
after freeing the existing nodes/layers.
The
.Fn map_save
function saves a map in machine-independent format to
.Fa fd .
.Pp
The
.Fn map_alloc_nodes
function allocates
.Fa w
x
.Fa h
nodes, assuming that no node is currently allocated, and returns
0 on success or -1 on failure.
The maximum allowable geometry is defined by
.Dv MAP_MAX_WIDTH
and
.Dv MAP_MAX_HEIGHT .
The
.Fn map_free_nodes
function releases the nodes allocated by
.Fa map .
.Pp
The
.Fn map_resize
function reallocates the nodes arrays, initializing the new nodes and
freeing the excess ones.
.Fn map_resize
returns 0 on sucess or -1 on failure.
.Pp
The
.Fn map_set_zoom
function sets the zoom factor for a map.
Unless the factor is 100%, bitmap scaling is performed.
.Pp
.Sh NODE INITIALIZATION
.nr nS 1
.Ft void
.Fn node_init "struct node *node"
.Pp
.Ft void
.Fn node_load "int fd" "struct object_table *deps" "struct node *node"
.Pp
.Ft void
.Fn node_save "struct fobj_buf *savebuf" "struct object_table *deps" \
              "struct node *node"
.Pp
.Ft void
.Fn node_destroy "struct node *node"
.nr nS 0
.Pp
The
.Fn node_init
function initializes a node.
The
.Fn node_destroy
function frees resources allocated by a node (such as the reference stack).
.Pp
The
.Fn node_load
and
.Fn node_save
functions respectively load and save a single node in machine-independent
format.
.Sh NODE REFERENCES
.nr nS 1
.Ft void
.Fn noderef_init "struct noderef *nref"
.Pp
.Ft void
.Fn noderef_destroy "struct noderef *nref"
.Pp
.Ft void
.Fn noderef_load "int fd" "struct object_table *deps" "struct node *node" \
                 "struct noderef **nref"
.Pp
.Ft void
.Fn noderef_save "struct fobj_buf *savebuf" "struct object_table *deps" \
                 "struct noderef *nref"
.Pp
.nr nS 0
The
.Fn noderef_init
function initializes a node reference structure.
The
.Fn noderef_destroy
function frees resources used by a node references (such as the transforms).
.Pp
The
.Fn noderef_load
and
.Fn noderef_save
functions respectively load and save a node reference in machine-independent
format.
Pointers to objects are encoded using the dependency table
.Fa deps .
.Sh NODE MANIPULATIONS
.nr nS 1
.Ft void
.Fn node_move_ref "struct noderef *src_nref" "struct node *src_node" \
                  "struct node *dst_node"
.Pp
.Ft "struct noderef *"
.Fn node_copy_ref "struct noderef *src_nref" "struct node *dst_node"
.Pp
.Ft void
.Fn node_remove_ref "struct node *node" "struct noderef *nref"
.Pp
.Ft "struct noderef *"
.Fn node_add_sprite "struct node *dst_node" "void *obj" "Uint32 index"
.Pp
.Ft "struct noderef *"
.Fn node_add_anim "struct node *dst_node" "void *obj" "Uint32 index" \
                  "Uint32 flags"
.Pp
.Ft "struct noderef *"
.Fn node_add_warp "struct node *dst_node" "char *new_map" \
                  "int x" "int y" "Uint8 dir"
.nr nS 0
.Pp
The
.Fn node_move_ref
function moves
.Fa src_nref
from
.Fa src_node
to
.Fa dst_node .
.Pp
The
.Fn node_copy_ref
function inserts a copy of
.Fa src_nref
on top of
.Fa dst_node .
.Pp
The
.Fn node_remove_ref
function detaches
.Fa nref
from
.Fa node
and frees it.
.Pp
The
.Fn node_add_sprite ,
.Fn node_add_anim
and
.Fn node_add_warp
functions respectively insert sprite references, animation references and
warp points.
.Sh SEE ALSO
.Xr agar 3 ,
.Xr mapedit 3 ,
.Xr object 3
.Sh HISTORY
The
.Nm
interface first appeared in Agar 1.0.
