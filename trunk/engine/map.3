.\"	$Csoft: map.3,v 1.43 2003/07/25 22:03:33 vedge Exp $
.\"
.\" Copyright (c) 2001, 2002, 2003 CubeSoft Communications, Inc.
.\" <http://www.csoft.org>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.\"	$OpenBSD: mdoc.template,v 1.6 2001/02/03 08:22:44 niklas Exp $
.\"
.Dd JANUARY 30, 2002
.Dt MAP 3
.Os
.ds vT Agar API Reference
.ds oS Agar 1.0
.Sh NAME
.Nm map
.Nd agar tile-based levels
.Sh SYNOPSIS
.Fd #include <engine/map.h>
.Sh DESCRIPTION
Agar levels are described by a two-dimensional array of nodes; each node holds
a stack of
.Sq noderef
structures, which are references to data, such as sprites, animations or audio
samples.
.Pp
For example, the rendering of a
.Nm
is achieved by drawing the visible graphical noderefs in a specific order,
while the audio system mixes samples from audio noderefs near the visible area.
.Pp
Three types of references are currently defined:
.Pp
.Bl -tag -width "NODEREF_SPRITE " -compact
.It NODEREF_SPRITE
Pointer to a static image of arbitrary size.
Visible noderefs of this type are drawn only when the
.Va redraw
flag of the parent map is set.
.It NODEREF_ANIM
Pointer to an animation of arbitrary size.
Visible noderefs of this type are redrawn every
.Va n
milliseconds (possibly by another thread on a multiprocessor system).
.It NODEREF_WARP
Pointer to a node residing another map.
Objects coming in contact with this type of noderef are transported to
coordinates
.Va x ,
.Va y ,
.Va z
of map
.Va m .
.El
.Pp
Graphical noderefs provide the map renderer with two individual displacements
in pixels of the image from the tile origin, one for centering and the other
for sprite motion.
.Pp
The centering offset is usually set by the level designer.
The motion offset defines the position of the image relative to the node.
If the tile is scaled to another size, the centering offset is scaled to the
tile size, but the motion offset is not.
.Pp
Graphical noderefs provide the renderer with a list of graphical transforms
that should be applied before the tile is drawn (the resulting tile is cached),
and a layer number defining the order of rendering.
.Pp
.Sh INITIALIZATION
.nr nS 1
.Ft void
.Fn map_init "void *obj" "const char *name"
.Pp
.Ft "struct map *"
.Fn map_new "void *parent" "const char *name"
.Pp
.Ft int
.Fn map_alloc_nodes "struct map *map" "unsigned int w" "unsigned int h"
.Pp
.Ft void
.Fn map_free_nodes "struct map *map"
.Pp
.Ft int
.Fn map_adjust "struct map *map" "int x" "int y"
.Pp
.Ft void
.Fn map_set_zoom "struct map *map" "Uint16 factor"
.nr nS 0
.Pp
.Fn map_init
initializes
.Fa obj
as a
.Nm
identified by the string
.Fa name .
.Fn map_new
allocates, initializes and attaches a new map to
.Fa parent ,
unless the latter is a NULL pointer.
.Pp
The
.Fn map_alloc_nodes
function allocates
.Fa w
x
.Fa h
nodes, assuming that no node is currently allocated.
.Fn map_alloc_nodes
returns 0 on success or -1 on failure.
The maximum allowable geometry is defined by
.Dv MAP_MAX_WIDTH
and
.Dv MAP_MAX_HEIGHT .
The
.Fn map_free_nodes
function releases the nodes allocated by
.Fa map .
.Pp
The
.Fn map_resize
function reallocates the nodes arrays, initializing the new nodes and
freeing the excess ones.
.Fn map_resize
returns 0 on sucess or -1 on failure.
.Pp
The
.Fn map_set_zoom
function sets the zoom factor for a map.
Unless the factor is 100%, bitmap scaling is performed for graphical noderefs.
.Pp
.Sh NODE INITIALIZATION
.nr nS 1
.Ft void
.Fn node_init "struct node *node"
.Pp
.Ft int
.Fn node_load "struct map *map" "struct netbuf *buf" "struct node *node"
.Pp
.Ft void
.Fn node_save "const struct map *map" "struct netbuf *buf" \
              "const struct node *node"
.Pp
.Ft void
.Fn node_destroy "struct map *map" "struct node *node"
.nr nS 0
.Pp
The
.Fn node_init
function initializes a node.
The
.Fn node_destroy
function frees resources allocated by a node (such as the reference stack).
To reinitialize a node, this function must be followed by
.Fn node_init .
.Pp
The
.Fn node_load
function loads a node from
.Fa buf ,
returning 0 on success or -1 on failure.
.Fn node_save
saves a node to
.Fa buf .
.Sh NODE REFERENCES
.nr nS 1
.Ft void
.Fn noderef_init "struct noderef *nref"
.Pp
.Ft void
.Fn noderef_set_center "struct noderef *nref" "int xcenter" "int ycenter"
.Pp
.Ft void
.Fn noderef_set_motion "struct noderef *nref" "int xmotion" "int ymotion"
.Pp
.Ft void
.Fn noderef_destroy "struct map *map" "struct noderef *nref"
.Pp
.Ft int
.Fn noderef_load "struct map *map" "struct netbuf *buf" \
                 "struct node *node" "struct noderef **nref"
.Pp
.Ft void
.Fn noderef_save "const struct map *map" "struct netbuf *buf" \
                 "const struct noderef *nref"
.nr nS 0
.Pp
The
.Fn noderef_init
function initializes a node reference structure.
.Pp
The
.Fn noderef_set_center
function sets the centering offsets of a graphical reference.
.Fn noderef_set_motion
sets the motion offsets of a graphical reference.
These offsets must not exceed
.Dv NODEREF_MAX_CENTER
and
.Dv NODEREF_MAX_MOTION
pixels, respectively.
.Pp
The
.Fn noderef_destroy
function frees the resources reserved by a noderef.
It must be followed by
.Fa noderef_init
to reinitialize the noderef.
.Pp
The
.Fn noderef_load
and
.Fn noderef_save
functions respectively decode and encode a node reference.
.Fn noderef_load
returns 0 on success or -1 on failure.
.Sh NODE MANIPULATIONS
.nr nS 1
.Ft void
.Fn node_move_ref "struct map *src_map" "struct node *src_node" \
                  "struct noderef *src_nref" "struct map *dst_map" \
                  "struct node *dst_node" "int dst_layer"
.Pp
.Ft "struct noderef *"
.Fn node_copy_ref "const struct noderef *src_nref" "struct map *dst_map" \
                  "struct node *dst_node" "int dst_layer"
.Pp
.Ft void
.Fn node_remove_ref "struct map *map" "struct node *node" "struct noderef *nref"
.Pp
.Ft "struct noderef *"
.Fn node_add_sprite "struct map *map" "struct node *node" "const void *obj" \
                    "Uint32 index"
.Pp
.Ft "struct noderef *"
.Fn node_add_anim "struct map *map" "struct node *node" "const void *obj" \
                  "Uint32 index" "Uint32 flags"
.Pp
.Ft "struct noderef *"
.Fn node_add_warp "struct map *map" "struct node *dst_node" \
                  "const char *new_map" "int x" "int y" "Uint8 dir"
.nr nS 0
.Pp
The
.Fn node_move_ref
function moves
.Fa src_nref
from
.Fa src_node
to the node at specific map coordinates and returns 0, or -1 if
the coordinates are outside of
.Fa dst_map .
The reference is associated with
.Fa dlayer ,
unless it is -1.
.Pp
The
.Fn node_copy_ref
function inserts a copy of
.Fa src_nref
on top of
.Fa dst_node,
and associate with
.Fa dst_layer
(unless it is -1).
.Pp
The
.Fn node_remove_ref
function detaches
.Fa nref
from
.Fa node
and frees it.
.Pp
The
.Fn node_add_*
functions create node references:
.Pp
.Bl -tag -width "node_add_sprite() "
.It Fn node_add_sprite
Adds a reference to a
.Xr SDL_Surface 3 ,
where
.Fa obj
is the object containing the graphics.
.It Fn node_add_anim
Adds a reference to an animation, where
.Fa obj
is the object containing the graphics.
.It Fn node_add_warp
Adds a warp point, where
.Fa new_map
is the pathname of the destination map (as returned by
.Fn object_copy_name ) .
The
.Fa x ,
.Fa y
and
.Fa dir
arguments describe the initial position and direction of warped objects.
.El
.Sh TROUBLETONS
The node operation functions should probably use a state variable instead of
arguments for the layer number.
.Sh SEE ALSO
.Xr agar 3 ,
.Xr object 3
.Sh HISTORY
The
.Nm
interface first appeared in Agar 1.0.
