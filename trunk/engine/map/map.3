.\"	$Csoft: map.3,v 1.7 2005/09/20 13:46:31 vedge Exp $
.\"
.\" Copyright (c) 2001, 2002, 2003, 2004, 2005 CubeSoft Communications, Inc.
.\" <http://www.csoft.org>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.\"	$OpenBSD: mdoc.template,v 1.6 2001/02/03 08:22:44 niklas Exp $
.\"
.Dd JANUARY 30, 2002
.Dt MAP 3
.Os
.ds vT Agar API Reference
.ds oS Agar 1.0
.Sh NAME
.Nm map
.Nd agar 2D multi-level maps
.Sh SYNOPSIS
.Fd #include <engine/map/map.h>
.Sh DESCRIPTION
The
.Nm
interface implements a 2D
.Xr space 3
which is partitioned into fixed-size nodes arranged into multiple planes.
The
.Nm
space is suitable for 2D overhead, isometric and platform graphics.
Each nodes contains a stack of elements (such as references to sprites
and tiles).
.Pp
In a game scenario, for instance, the rendering of a scene might be achieved by
blitting the graphical references in the vicinity, while the audio system is
playing samples from nearby audio elements.
.Pp
Four types of references are currently defined:
.Pp
.Bl -tag -width "AG_NITEM_SPRITE " -compact
.It AG_NITEM_SPRITE
Pointer to a static image of arbitrary size.
Visible elements of this type are drawn only when the
.Va redraw
flag of the parent map is set.
.It AG_NITEM_ANIM
Pointer to an animation of arbitrary size.
Visible elements of this type are redrawn every
.Va n
milliseconds (possibly by another thread on a multiprocessor system).
.It AG_NITEM_WARP
Pointer to a node residing another map.
Actors coming in contact with this type of element are transported to
coordinates
.Va x ,
.Va y ,
.Va z
of map
.Va m .
.El
.Pp
Graphical elements define two displacements in pixels of the image from
the tile's origin, the
.Em centering offset
and the
.Em motion offset.
.Pp
The centering offset is typically assigned by a level designer, and the
motion offset is for animation purposes.
If the map is drawn scaled, the centering offset is scaled to the
tile size, but the motion offset is not.
.Pp
Graphical elements provide the renderer with a list of graphical transformations
that should be applied before the tile is drawn (the resulting tile is cached).
A per-element layer attribute also defines the attributed layer.
.Pp
.Sh INHERITANCE HIERARCHY
.Pp
.Xr AG_Object 3 ->
.Xr space 3 ->
.Nm .
.Sh INITIALIZATION
.nr nS 1
.Ft void
.Fn AG_MapInit "void *obj" "const char *name"
.Pp
.Ft "AG_Map *"
.Fn AG_MapNew "void *parent" "const char *name"
.Pp
.Ft int
.Fn AG_MapAllocNodes "AG_Map *map" "u_int w" "u_int h"
.Pp
.Ft void
.Fn AG_MapFreeNodes "AG_Map *map"
.Pp
.Ft int
.Fn map_adjust "AG_Map *map" "int x" "int y"
.Pp
.Ft void
.Fn AG_MapSetZoom "AG_Map *map" "int camera" "u_int factor"
.nr nS 0
.Pp
.Fn AG_MapInit
initializes
.Fa obj
as a
.Nm
identified by the string
.Fa name .
.Fn AG_MapNew
allocates, initializes and attaches a new map to
.Fa parent ,
unless the latter is a NULL pointer.
.Pp
The
.Fn AG_MapAllocNodes
function allocates
.Fa w
x
.Fa h
nodes, assuming that no node is currently allocated.
.Fn AG_MapAllocNodes
returns 0 on success or -1 on failure.
The maximum allowable geometry is defined by
.Dv AG_MAP_MAXWIDTH
and
.Dv AG_MAP_MAXHEIGHT .
The
.Fn AG_MapFreeNodes
function releases the nodes allocated by
.Fa map .
.Pp
The
.Fn AG_MapResize
function reallocates the nodes arrays, initializing the new nodes and
freeing the excess ones.
.Fn AG_MapResize
returns 0 on sucess or -1 on failure.
.Pp
The
.Fn AG_MapSetZoom
function sets the zoom factor for a given map view.
Actors are displayed to this scale.
.Pp
.Sh NODE INITIALIZATION
.nr nS 1
.Ft void
.Fn AG_NodeInit "AG_Node *node"
.Pp
.Ft int
.Fn AG_NodeLoad "AG_Map *map" "AG_Netbuf *buf" "AG_Node *node"
.Pp
.Ft void
.Fn AG_NodeSave "const AG_Map *map, AG_Netbuf *buf" "const AG_Node *node"
.Pp
.Ft void
.Fn AG_NodeDestroy "AG_Map *map" "AG_Node *node"
.nr nS 0
.Pp
The
.Fn AG_NodeInit
function initializes a node.
The
.Fn AG_NodeDestroy
function frees resources allocated by a node (such as the reference stack).
To reinitialize a node, this function must be followed by
.Fn AG_NodeInit .
.Pp
The
.Fn AG_NodeLoad
function loads a node from
.Fa buf ,
returning 0 on success or -1 on failure.
.Fn AG_NodeSave
saves a node to
.Fa buf .
.Sh NODE REFERENCES
.nr nS 1
.Ft void
.Fn AG_NitemInit "AG_Nitem *r"
.Pp
.Ft void
.Fn AG_NitemSetCenter "AG_Nitem *r" "int xcenter" "int ycenter"
.Pp
.Ft void
.Fn AG_NitemSetMotion "AG_Nitem *r" "int xmotion" "int ymotion"
.Pp
.Ft void
.Fn AG_NitemSetSprite "AG_Nitem *r" "AG_Map *m" "void *object" "Uint32 offset"
.Pp
.Ft void
.Fn AG_NitemSetAnim "AG_Nitem *r" "AG_Map *m" "void *object" "Uint32 offset"
.Pp
.Ft void
.Fn AG_NitemSetLayer "AG_Nitem *r" "int layer"
.Pp
.Ft void
.Fn AG_NitemDestroy "AG_Map *map" "AG_Nitem *r"
.Pp
.Ft int
.Fn AG_NitemLoad "AG_Map *map, AG_Netbuf *buf, AG_Node *node" "AG_Nitem **r"
.Pp
.Ft void
.Fn AG_NitemSave "const AG_Map *map, AG_Netbuf *buf" "const AG_Nitem *r"
.nr nS 0
.Pp
The
.Fn AG_NitemInit
function initializes a node element structure.
.Pp
The
.Fn AG_NitemSetCenter
function sets the centering offset of a graphical element.
.Fn AG_NitemSetMotion
sets the motion offset of a graphical element.
.Pp
The functions
.Fn AG_NitemSetSprite
and
.Fn AG_NitemSetAnim
associate a new sprite or animation to the element
.Fa r
(of type
.Dv AG_NITEM_SPRITE
or
.Dv AG_NITEM_ANIM ) .
Unless
.Fa object
is NULL, a dependency of type
.Dv AG_OBJECT_GFX
is generated by the operation.
.Pp
The
.Fn AG_NitemSetLayer
function associates the graphical element
.Fa r
with the given layer.
The layer does not need to exist; the element will not be visible if that
is the case.
.Pp
The
.Fn AG_NitemDestroy
function frees the resources reserved by a node element.
It must be followed by
.Fa AG_NitemInit
to reinitialize the node element structure.
.Pp
The
.Fn AG_NitemLoad
and
.Fn AG_NitemSave
functions are used to decode and encode an element, respectively.
.Fn AG_NitemLoad
returns 0 on success or -1 on failure.
.Sh NODE MANIPULATIONS
.nr nS 1
.Ft void
.Fn AG_NodeMoveItem "AG_Map *src_map, AG_Node *src_node" "AG_Nitem *src_r, AG_Map *dst_map" "AG_Node *dst_node, int dst_layer"
.Pp
.Ft "AG_Nitem *"
.Fn AG_NodeCopyItem "const AG_Nitem *src_r, AG_Map *dst_map" "AG_Node *dst_node, int dst_layer"
.Pp
.Ft void
.Fn AG_NodeDelItem "AG_Map *map, AG_Node *node, AG_Nitem *r"
.Pp
.Ft "AG_Nitem *"
.Fn AG_NodeAddSprite "AG_Map *map, AG_Node *node, const void *obj" "Uint32 index"
.Pp
.Ft "AG_Nitem *"
.Fn AG_NodeAddAnim "AG_Map *map, AG_Node *node, const void *obj" "Uint32 index"
.Pp
.Ft "AG_Nitem *"
.Fn AG_NodeAddWarpPoint "AG_Map *map, AG_Node *dst_node" "const char *new_map, int x, int y, Uint8 dir"
.nr nS 0
.Pp
The
.Fn AG_NodeMoveItem
function moves
.Fa src_r
from
.Fa src_node
to the node at specific map coordinates and returns 0, or -1 if
the coordinates are outside of
.Fa dst_map .
The element is associated with the layer
.Fa dlayer ,
unless it is -1.
.Pp
The
.Fn AG_NodeCopyItem
function inserts a copy of
.Fa src_r
on top of
.Fa dst_node,
and associate with
.Fa dst_layer
(unless it is -1).
.Pp
The
.Fn AG_NodeDelItem
function detaches and destroys the given node element.
.Pp
The
.Fn node_add_*
functions create new node elements.
.Pp
.Bl -tag -width "AG_NodeAddSprite() "
.It Fn AG_NodeAddSprite
Creates a graphical element consisting of a single pointer to a
.Xr SDL_Surface 3 .
Since graphics are managed by Agar objects, the reference is actually a
pointer to an object and an index into this object's
.Va gfx->sprites[]
array.
.It Fn AG_NodeAddAnim
Creates a graphical element consisting of a series of frames.
The animation reference consists of a pointer to an object and an index into
this object's
.Va gfx->anims[]
array.
.It Fn AG_NodeAddWarpPoint
Creates a warp point, where
.Fa new_map
is the pathname of the destination map (as returned by
.Fn AG_ObjectCopyName ) ,
and the
.Fa x ,
.Fa y
and
.Fa dir
arguments describe the initial position and direction of the object in the
destination map.
.El
.Sh TROUBLETONS
The node operation functions should probably use a state variable instead of
arguments for the layer number.
.Pp
.Dv AG_NITEM_WARP
could probably be replaced by a "warp" object.
.Pp
The
.Dv NITEM_REGEN
and
.Dv NITEM_BIO
flags could be replaced by a special type of reference for such attributes.
.Sh SEE ALSO
.Xr agar 3 ,
.Xr AG_Object 3
.Sh HISTORY
The
.Nm
interface first appeared in Agar 1.0.
