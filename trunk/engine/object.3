.\"	$OpenBSD$
.\"
.\" Copyright (c) 2001, 2002 CubeSoft Communications, Inc.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistribution of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistribution in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of CubeSoft Communications, nor the names of its
.\"    contributors may be used to endorse or promote products derived from
.\"    this software without specific prior written permission.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd March 17, 2002
.Dt OBJECT 3
.Os
.Sh NAME
.Nm object
.Nd AGAR object abstraction
.Sh SYNOPSIS
.Bd -literal
#include <engine/object.h>
#include <engine/map.h>
#include <engine/input.h>
.Ed
.Sh DESCRIPTION
The agar
.Nm
layer implements:
.Pp
.Bl -bullet -compact
.It
garbage collection.
.It
graphic/audio storage.
.It
tile mapping (for map edition).
.It
state saving/loading.
.El
.Pp
Each object structure holds optional entry points,
.Pp
.Bd -literal
struct obvec {
	void	(*destroy)(void *ob);		/* called before destroy */
	int	(*load)(void *ob, int fd);	/* load from fd */
	int	(*save)(void *ob, int fd);	/* save to fd */
};
.Ed
.Pp
which are called by
the generic
.Fn object_destroy ,
.Fn object_load
and
.Fn object_save
functions.
.Sh INITIALIZATION
.nr nS 1
.Ft "void"
.Fn object_init "struct object *ob" "char *type" "char *name" "char *media" "int flags" "const void *vecp"
.Pp
.Ft "void"
.Fn object_destroy "void *ob"
.Pp
.Fn object_init
initializes
.Fa ob
as an object of type
.Fa type
(an arbitrary string identifier describing the type of structure)
and loads data from
.Fa media
into the static media pool, if the latter is not NULL.
.Pp
.Fn object_destroy
frees all resources associated with this object.
.Fn object_destroy
must be called once the object is not attached to any other object.
.Pp
If
.Fa flags
contains
.Dv OBJ_ART
or
.Dv OBJ_AUDIO ,
graphics and samples are loaded from media.
.Dv OBJ_KEEPMEDIA
prevents garbage collection from freeing the media when the reference
count drops to zero.
.Dv OBJ_OPTMEDIA
makes media load failures non-fatal.
.Sh SAVING STATES
.nr nS 1
.Ft "int"
.Fn object_load "void *ob"
.Pp
.Ft "int"
.Fn object_loadfrom "void *ob" "char *path"
.Pp
.Ft "int"
.Fn object_save "void *ob"
.Pp
.nr nS 0
.Pp
.Fn object_load
loads the state of
.Fa ob
from the first file found in data directories.
.Fn object_loadfrom
loads the state of
.Fa ob
from the file at
.Fa path .
.Fn object_save
saves the state of
.Fa ob
to the user's data directory.
These routines are called when the world's list of objects is
locked.
.Sh MAP OPERATIONS
.nr nS 1
.Ft "struct mappos *"
.Fn object_addpos "void *ob" "Uint32 offs" "Uint32 flags" "struct input *in" "struct map *map" "Uint32 x" "Uint32 y"
.Pp
.Ft "void"
.Fn object_delpos "void *ob" "Uint32 offs" "Uint32 flags" "struct map *map" "Uint32 x" "Uint32 y"
.Pp
.nr nS 0
.Fn object_addpos
adds a reference to
.Fa ob
at the given map coordinates, and creates a back reference (mappos)
structure, which defines the single position of this object on a map,
as well as speed, direction (mapdir) and an optional input device pointer.
.Pp
.Fn object_delpos
removes a reference to
.Fa ob
at the given map coordinates, and destroys the back reference (mappos)
structure.
.Sh SEE ALSO
.Xr agar 3
.Sh HISTORY
The
.Nm
interface appeared in AGAR 1.0
.\" .Sh BUGS
.\" .Sh CAVEATS
