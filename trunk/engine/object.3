.\"	$Csoft: object.3,v 1.29 2003/03/29 03:01:43 vedge Exp $
.\"
.\" Copyright (c) 2001, 2002, 2003 CubeSoft Communications, Inc.
.\" <http://www.csoft.org>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistribution of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd March 17, 2002
.Dt OBJECT 3
.Os
.ds vT Agar API Reference
.ds oS Agar 1.0
.Sh NAME
.Nm object
.Nd agar object layer
.Sh SYNOPSIS
.Bd -literal
#include <engine/object.h>
.Ed
.Sh DESCRIPTION
The Agar game logic is built upon the
.Nm
structure, which implements:
.Pp
.Bl -bullet -compact
.It
Garbage collection.
.It
Graphical/audio data management.
.It
States saving to network format.
.It
State loading from network format.
.It
Positions on maps.
.It
Object interdependencies.
.It
Generic events and properties.
.El
.Pp
.Sh INITIALIZATION
.nr nS 1
.Ft "struct object *"
.Fn object_new "void *parent" "char *type" "char *name" "char *archive" \
               "int flags" "const void *ops"
.Pp
.Ft "void"
.Fn object_init "struct object *ob" "char *type" "char *name" "char *archive" \
                "int flags" "const void *ops"
.Pp
.Ft "void"
.Fn object_attach "void *parent" "void *child"
.Pp
.Ft "void"
.Fn object_detach "void *parent" "void *child"
.Pp
.Ft "void"
.Fn object_destroy "void *ob"
.Pp
.nr nS 0
The
.Fn object_new
function allocates, initializes and attaches a new, generic object to a parent
(if
.Fa parent
is not NULL).
The
.Fn object_init
function initializes
.Fa ob
as an object of type
.Fa type .
.Fa name
must not exceed
.Fa OBJECT_MAX_NAME
- 1 in length and
.Fa type
must not exceed
.Fa OBJECT_MAX_TYPE
- 1 in length.
.Pp
If the
.Fa archive
argument is not NULL, it identifies a
.Xr fobj 3
archive (with the
.Sq .fob
suffix) to be looked up in the data directories (the
.Sq path.data_path
setting), from which to load graphical/audio data.
.Pp
The
.Fa ops
argument, if not NULL, is a pointer to the following structure:
.Bd -literal
struct object_ops {
	void (*destroy)(void *obj);		      /* Free resources */
	int  (*load)(void *obj, struct netbuf *buf);  /* Load from buf */
	int  (*save)(void *obj, struct netbuf *buf);  /* Save to buf */
};
.Ed
.Pp
The
.Fa flags
argument may contain:
.Bd -literal
#define OBJECT_ART		0x01	/* Load graphics */
#define OBJECT_ART_CACHE	0x02	/* Keep graphics cached */
#define OBJECT_ART_CAN_FAIL	0x04	/* Graphic load can fail */
#define OBJECT_AUDIO		0x08	/* Load audio */
#define OBJECT_AUDIO_CACHE	0x10	/* Keep audio cached */
#define OBJECT_AUDIO_CAN_FAIL	0x20	/* Audio load can fail */
#define OBJECT_CANNOT_MAP	0x40	/* Don't insert in object tables */
#define OBJECT_STATIC		0x80	/* Don't destroy (if attached) */
.Ed
.Pp
The
.Fn object_attach
and
.Fn object_detach
functions respectively link and unlink a
.Fa child
object against a
.Fa parent
object.
.Pp
The
.Fn object_destroy
function is called to free all resources reserved by
.Fa ob
and its children.
To allow static allocation of
.Nm
structures,
.Fn object_destroy
does not call
.Xr free 3 .
.Sh SAVING STATES
.nr nS 1
.Ft "int"
.Fn object_load "void *ob" "char *path"
.Pp
.Ft "int"
.Fn object_save "void *ob" "char *path"
.Pp
.Ft "int"
.Fn object_path "char *name" "const char *suffix" "char *dst" "size_t dst_size"
.Pp
.nr nS 0
The
.Fn object_load
function loads the state of
.Fa ob
from network format.
The data is loaded from a file at the given location if
.Fa path
is not NULL.
Otherwise, the data is loaded from the first file found in data directories
(the
.Sq path.data_path
.Xr config 3
setting).
.Pp
The
.Fn object_save
function saves the state of
.Fa ob
in network format.
The data is saved to a specific file if
.Fa path
is not NULL, otherwise it is saved in the user's data directory (the
.Sq path.user_data_dir
.Xr config 3
setting).
.Pp
Recursively, each child associated with
.Fa ob
is loaded/saved as well.
Note that
.Fn object_load
only reinitializes existing child objects.
If a parent needs to reload its children differently, it should do so it its
own
.Va save
routine.
.Pp
Object derivates set the
.Va load
and
.Va save
operations in order to save custom data.
In addition to this custom data,
.Fn object_load
and
.Fn object_save
also preserve:
.Bl -bullet -compact
.It
Position, if any.
.It
Generic properties (machine-independent types only).
.It
Child
.Nm
structures.
.El
.Pp
Both
.Fn object_load
and
.Fn object_save
return 0 on success or -1 if an error occured.
.Pp
The
.Fn object_path
function searches the data directories for a file matching the
.Fa name
and
.Fa suffix
arguments.
If a file is found, up to
.Fa dst_size
- 1 bytes of its path name are copied to
.Fa dst ,
and the result is NUL-terminated.
.Fn object_path
returns 0 on success or -1 if an error occured.
.Sh MAP OPERATIONS
The illusion of objects (such as characters) moving inside a
.Xr map 3
is achieved by maintaining a copy of the object's current submap (a pointer to a
.Xr map 3
structure associated with the object).
Most moving game characters provide submaps called
.Sq [nswe]-idle
and
.Sq [nswe]-move ,
for instance.
The
.Nm
layer is responsible for keeping the submap copy in sync, and adjusting the
motion offsets of its noderefs in response to movement.
.nr nS 1
.Ft "int"
.Fn object_set_submap "void *ob" "char *map_name"
.Pp
.Ft "void"
.Fn object_load_submap "void *ob" "char *map_name"
.Pp
.Ft "void"
.Fn object_set_position "void *ob" "struct map *map" "int x" "int y" "int layer"
.Pp
.Ft "void"
.Fn object_unset_position "void *ob"
.Pp
.Ft "void"
.Fn object_control "void *ob" "struct input *in" "int center"
.Pp
.nr nS 0
The
.Fn object_set_submap
function searches an object's children list for a map called
.Fa map_name
and selects it.
.Fn object_set_submap
returns 0 on success or -1 on failure.
.Fn object_load_submap
initializes and loads a submap called
.Fa map_name .
.Pp
The
.Fn object_set_position
function sets the object's unique position to the given coordinates of
.Fa map .
.Fn object_unset_position
causes an object to vanish from its current position, if there is any.
.Pp
The
.Fn object_control
function assigns the input device
.Fa in
to the position associated with
.Fa ob ,
centering the view and enabling soft-scrolling if
.Fa center
is non-zero .
.Sh DEPENDENCY TABLES
These functions load/save arrays of structures containing each:
.Bl -bullet -compact -enum
.It
An object name string.
.It
An object type string.
.It
A reference count.
.El
.Pp
This allows load/save routines to keep track of an object's dependencies,
as well as to encode object references using indexes.
.Pp
.nr nS 1
.Ft "void"
.Fn object_table_init "struct object_table *table"
.Pp
.Ft "void"
.Fn object_table_destroy "struct object_table *table"
.Pp
.Ft "void"
.Fn object_table_insert "struct object_table *table" "struct object *obj"
.Pp
.Ft "void"
.Fn object_table_save "struct object_table *table" "struct netbuf *buf"
.Pp
.Ft "int"
.Fn object_table_load "struct object_table *table" "struct netbuf *buf" \
                      "char *objname"
.Pp
.nr nS 0
The
.Fn object_table_init
function initializes
.Fa table
as a new, empty dependency table.
.Fn object_table_destroy
frees the resources allocated by
.Fa table .
.Pp
The
.Fn object_table_insert
function inserts
.Fa obj
in
.Fa table .
.Pp
The
.Fn object_table_save
function writes
.Fa table
to
.Fa buf .
The
.Fn object_table_load
reads dependencies from
.Fa buf
into
.Fa table ,
and returns 0 on success or -1 if an error occured.
.Sh SEE ALSO
.Xr agar 3
.Xr event 3
.Xr prop 3
.Xr physics 3
.Sh HISTORY
The
.Nm
interface appeared in Agar 1.0
.\" .Sh CAVEATS
