.\"	$Csoft: physics.3,v 1.10 2003/03/23 11:35:49 vedge Exp $
.\"
.\" Copyright (c) 2002, 2003 CubeSoft Communications, Inc.
.\" <http://www.csoft.org>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd November 23, 2002
.Dt PHYSICS 3
.Os
.ds vT Agar API Reference
.ds oS Agar 1.0
.Sh NAME
.Nm physics
.Nd agar movement interface
.Sh SYNOPSIS
.Bd -literal
#include <engine/physics.h>
.Ed
.Sh DESCRIPTION
The agar
.Nm
interface manages movement of objects, usually in reaction to input device
events.
The directions are represented by these flags:
.Bd -literal
#define DIR_UP		0x01
#define DIR_DOWN	0x02
#define DIR_LEFT	0x04
#define DIR_RIGHT	0x08
#define DIR_ALL		0xff
.Ed
.Pp
.Sh GENERIC DIRECTIONS
These functions implement generic two-dimensional movement.
.Pp
.nr nS 1
.Ft "void"
.Fn gendir_init "struct gendir *dir"
.Pp
.Ft "void"
.Fn gendir_set "struct gendir *dir" "int direction"
.Pp
.Ft "void"
.Fn gendir_unset "struct gendir *dir" "int direction"
.Pp
.Ft "int"
.Fn gendir_move "struct gendir *dir"
.Pp
.Ft "void"
.Fn gendir_postmove "struct gendir *dir" "int moved"
.nr nS 0
.Pp
The
.Fn gendir_init
function initializes a generic direction.
.Pp
The
.Fn gendir_set
function sets the direction of
.Fa dir
to
.Fa direction .
The
.Fn gendir_unset
requests
.Fa dir
to no longer move in
.Fa direction .
.Pp
The
.Fn gendir_move
function is usually called from a timer callback to update the direction
.Fa dir ,
returning the direction towards which the object should move, or 0 if it
should remain in its current position.
.Pp
If the timer callback has moved object, it should call
.Fn gendir_postmove
with the return value of
.Fn gendir_move
as the
.Fa moved
argument, to effect a
.Fn gendir_unset
operation and increment the necessary counters.
.Sh MAP DIRECTIONS
This interface implements movement of objects between adjacent map nodes.
Game objects are bound to an input device with
.Fn object_control
and the
.Xr input 3
subsystem calls
.Fn mapdir_set
and
.Fn mapdir_unset
in reaction to input device events.
The particular object implementation then calls
.Fn mapdir_move
(usually from a timer callback function) in order to effect movement.
.nr nS 1
.Ft "void"
.Fn mapdir_init "struct mapdir *dir" "struct object *ob" "struct map *map" \
                "int flags" "int speed"
.Pp
.Ft "void"
.Fn mapdir_set "struct mapdir *dir" "int direction"
.Pp
.Ft "void"
.Fn mapdir_unset "struct mapdir *dir" "int direction"
.Pp
.Ft "int"
.Fn mapdir_move "struct mapdir *dir" "int *map_x" "int *map_y"
.Pp
.Ft "void"
.Fn mapdir_postmove "struct mapdir *dir" "int *map_x" "int *map_y" \
                    "int moved"
.nr nS 0
.Pp
The
.Fn mapdir_init
function initializes a map direction for object
.Fa ob
on map
.Fa map .
The
.Fa flags
may contain:
.Pp
.Bd -literal
#define DIR_SCROLLVIEW	0x01	/* Scroll view if we reach boundaries. */
#define DIR_SOFTSCROLL	0x02	/* Animate move from node to node. */
#define DIR_STATIC	0x04	/* Don't change sprites with directions. */
#define DIR_PASSTHROUGH	0x08	/* Pass through map nodes. */
.Ed
.Pp
The
.Fn mapdir_set
function sets the direction of
.Fa dir
to
.Fa direction .
The
.Fn mapdir_unset
requests
.Fa dir
to no longer move in
.Fa direction .
.Pp
The
.Fn mapdir_move
function is usually called from a timer callback to update the direction
.Fa dir ,
returning the direction towards which the object should move, or 0 if it
should remain in its current position.
The
.Fa map_x
and
.Fa map_y
arguments should point to the current coordinates of the object on the map,
and will be updated accordingly.
.Pp
If the timer callback has moved the map reference, it should call
.Fn mapdir_postmove
with the return value of
.Fn mapdir_move
as the
.Fa moved
argument, to effect a
.Fn mapdir_unset
operation, increment the necessary counters or ensure the object keeps
moving.
The
.Fa map_x
and
.Fa map_y
arguments are the same pointers that were passed to
.Fn mapdir_move .
.Sh SEE ALSO
.Xr agar 3 ,
.Xr map 3 ,
.Xr rootmap 3
.Sh HISTORY
The
.Nm
interface first appeared in Agar 1.0
