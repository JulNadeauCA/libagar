.\"	$Csoft: prop.3,v 1.9 2003/06/10 08:07:16 vedge Exp $
.\"
.\" Copyright (c) 2002, 2003 CubeSoft Communications, Inc.
.\" <http://www.csoft.org>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd December 29, 2002
.Dt PROP 3
.Os
.ds vT Agar API Reference
.ds oS Agar 1.0
.Sh NAME
.Nm prop
.Nd agar generic properties
.Sh SYNOPSIS
.Bd -literal
#include <engine/prop.h>
.Ed
.Sh DESCRIPTION
The agar
.Nm
interface operates on a generic property table associated with an
.Xr object 3
structure.
Generic properties can store the following types:
.Pp
.Bd -literal
enum prop_type {
	PROP_UINT,
	PROP_INT,
	PROP_UINT8,
	PROP_SINT8,
	PROP_UINT16,
	PROP_SINT16,
	PROP_UINT32,
	PROP_SINT32,
	PROP_UINT64,		/* Unused */
	PROP_SINT64,		/* Unused */
	PROP_FLOAT,		/* IEEE 754 encoding */
	PROP_DOUBLE,		/* IEEE 754 encoding */
	PROP_LONG_DOUBLE,	/* Unused */
	PROP_STRING,
	PROP_POINTER,		/* Not persistent */
	PROP_BOOL,
	PROP_UNICODE,		/* Unicode text (UTF-16) */
	PROP_ANY
} type;
.Ed
.Sh READING PROPERTIES
.nr nS 1
.Ft "struct prop *"
.Fn prop_get "void *obj" "const char *key" "enum prop_type type" "void *dst"
.Pp
.Ft void
.Fn prop_lock "void *obj"
.Pp
.Ft void
.Fn prop_unlock "void *obj"
.Pp
.Ft int
.Fn prop_get_bool "void *obj" "const char *key"
.Pp
.Ft "unsigned int"
.Fn prop_get_uint "void *obj" "const char *key"
.Pp
.Ft int
.Fn prop_get_int "void *obj" "const char *key"
.Pp
.Ft Uint8
.Fn prop_get_uint8 "void *obj" "const char *key"
.Pp
.Ft Sint8
.Fn prop_get_sint8 "void *obj" "const char *key"
.Pp
.Ft Uint16
.Fn prop_get_uint16 "void *obj" "const char *key"
.Pp
.Ft Sint16
.Fn prop_get_sint16 "void *obj" "const char *key"
.Pp
.Ft Uint32
.Fn prop_get_uint32 "void *obj" "const char *key"
.Pp
.Ft Sint32
.Fn prop_get_sint32 "void *obj" "const char *key"
.Pp
.Ft float
.Fn prop_get_float "void *obj" "const char *key"
.Pp
.Ft double
.Fn prop_get_double "void *obj" "const char *key"
.Pp
.Ft "char *"
.Fn prop_get_string "void *obj" "const char *key"
.Pp
.Ft "Uint16 *"
.Fn prop_get_unicode "void *obj" "const char *key"
.Pp
.Ft size_t
.Fn prop_copy_string "void *obj" "const char *key" "char *dst" "size_t dst_size"
.Pp
.Ft size_t
.Fn prop_copy_unicode "void *obj" "const char *key" "Uint16 *dst" \
                      "size_t dst_size"
.Pp
.Ft "void *"
.Fn prop_get_pointer "void *obj" "const char *key"
.Pp
.nr nS 0
The
.Fn prop_get
function searches for a property of type
.Fa type
named
.Fa key
and writes its value to
.Fa dst ,
which should point to a variable of the specific data type associated with the
property.
.Fa prop_get
returns a pointer to the related
.Nm
structure, or NULL if no property matches
.Fa key .
.Pp
The
.Fn prop_lock
and
.Fn prop_unlock
functions acquire/release the recursive mutex which is associated with an
object's properties.
.Pp
The other data access functions look for a property named
.Fa key
and return the associated value, raising a fatal condition if there is no
match.
.Pp
.Fn prop_get_string
and
.Fn prop_get_unicode
both return a copy of the string.
.Fn prop_copy_string
and
.Fn prop_copy_unicode
copies up to
.Fa dst_size
- 1 characters from the value of a string property to
.Fa dst ,
NUL-terminating the result.
.Sh WRITING PROPERTIES
.nr nS 1
.Ft "struct prop *"
.Fn prop_set "void *obj" "const char *name" "enum prop_type type" "..."
.Pp
.Ft "struct prop *"
.Fn prop_set_bool "void *obj" "const char *key" "int value"
.Pp
.Ft "struct prop *"
.Fn prop_set_uint "void *obj" "const char *key" "unsigned int value"
.Pp
.Ft "struct prop *"
.Fn prop_set_int "void *obj" "const char *key" "int value"
.Pp
.Ft "struct prop *"
.Fn prop_set_uint8 "void *obj" "const char *key" "Uint8 value"
.Pp
.Ft "struct prop *"
.Fn prop_set_sint8 "void *obj" "const char *key" "Sint8 value"
.Pp
.Ft "struct prop *"
.Fn prop_set_uint16 "void *obj" "const char *key" "Uint16 value"
.Pp
.Ft "struct prop *"
.Fn prop_set_sint16 "void *obj" "const char *key" "Sint16 value"
.Pp
.Ft "struct prop *"
.Fn prop_set_uint32 "void *obj" "const char *key" "Uint32 value"
.Pp
.Ft "struct prop *"
.Fn prop_set_sint32 "void *obj" "const char *key" "Sint32 value"
.Pp
.Ft "struct prop *"
.Fn prop_set_sint32 "void *obj" "const char *key" "Sint32 value"
.Pp
.Ft "struct prop *"
.Fn prop_set_float "void *obj" "const char *key" "float value"
.Pp
.Ft "struct prop *"
.Fn prop_set_double "void *obj" "const char *key" "double value"
.Pp
.Ft "struct prop *"
.Fn prop_set_string "void *obj" "const char *key" "const char *fmt" "..."
.Pp
.Ft "struct prop *"
.Fn prop_set_unicode "void *obj" "const char *key" "const char *fmt" "..."
.Pp
.Ft "struct prop *"
.Fn prop_set_pointer "void *obj" "const char *key" "void *ptr"
.Pp
.nr nS 0
The
.Fn prop_set
function searches for a property of type
.Fa type
named
.Fa key
and sets its value to data read from the next arguments, which should be
data of the specific data type associated with the property.
If the
.Fa key
does not match an existing property, a new one is created.
.Pp
The other data write functions look for a property named
.Fa key
and set its value to
.Fa value ,
returning a pointer to the modified property.
If the
.Fa key
does not match an existing property, a new one is created.
.Sh SAVING/LOADING
.nr nS 1
.Ft int
.Fn prop_load "void *obj" "struct netbuf *buf"
.Pp
.Ft int
.Fn prop_save "void *obj" "struct netbuf *buf"
.Pp
.nr nS 0
The
.Fn prop_load
function loads an object's property table in machine-independent format from
.Fa fd ,
and
.Fn prop_save
saves an object's property table in machine-independent format to
.Fa fd .
.Sh SEE ALSO
.Xr agar 3 ,
.Xr object 3
.Sh HISTORY
The
.Nm
interface first appeared in Agar 1.0
