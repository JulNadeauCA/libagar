.\"	$Csoft: view.3,v 1.22 2004/03/12 02:51:18 vedge Exp $
.\"
.\" Copyright (c) 2002, 2003 CubeSoft Communications, Inc.
.\" <http://www.csoft.org>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd August 23, 2002
.Dt VIEW 3
.Os
.ds vT Agar API Reference
.ds oS Agar 1.0
.Sh NAME
.Nm view
.Nd agar graphic engine
.Sh SYNOPSIS
.Bd -literal
#include <engine/view.h>
.Ed
.Sh DESCRIPTION
The Agar
.Nm
layer manages the video display.
.Sh INITIALIZATION
.nr nS 1
.Ft "int"
.Fn view_init "enum gfx_engine engine"
.Pp
.Ft "void"
.Fn view_destroy "void"
.Pp
.Ft "int"
.Fn view_set_refresh "int fps"
.nr nS 0
.Pp
The
.Fn view_init
function initializes the graphic engine, returning 0 on success and -1 on
failure.
If the
.Sq view.opengl
property is set,
.Fn view_init
will attempt to create an OpenGL rendering context.
The
.Fa engine
argument is one of:
.Bd -literal
enum gfx_engine {
	GFX_ENGINE_GUI,         /* Direct/OpenGL, GUI */
	GFX_ENGINE_TILEBASED    /* Direct/OpenGL, tile-based */
};
.Ed
.Pp
The
.Fn view_destroy 
function frees resources allocated by the view structure.
.Pp
The
.Fn view_set_refresh
function sets the nominal refresh rate, given in frames per second.
.Sh GRAPHIC SURFACES
.nr nS 1
.Ft "SDL_Surface *"
.Fn view_surface "Uint32 flags" "int width" "int height"
.Pp
.Ft "SDL_Surface *"
.Fn view_copy_surface "SDL_Surface *src"
.Pp
.Ft "SDL_Surface *"
.Fn view_scale_surface "SDL_Surface *src" "Uint16 width" "Uint16 height"
.Pp
.Ft "void"
.Fn view_set_trans "SDL_Surface *su" "Uint8 alpha"
.Pp
.Ft "GLuint"
.Fn view_surface_texture "SDL_Surface *src" "GLfloat *texcoord"
.Pp
.Ft "void"
.Fn view_update "int x" "int y" "int w" "int h"
.Pp
.Ft "void"
.Fn view_alpha_blend "SDL_Surface *dstsu" "Sint16 x" "Sint16 y" "Uint8 r" \
                     "Uint8 g" "Uint8 b" "Uint8 a"
.Pp
.Ft "void"
.Fn view_capture "SDL_Surface *su"
.Pp
.nr nS 0
These functions operate on
.Xr SDL_Surface 3
structures.
.Fn view_surface
allocates a 32bpp surface using one of the following RGBA masks depending
on host byte order:
.Bd -literal
/* Big endian */
0xff000000
0x00ff0000
0x0000ff00
0x000000ff

/* Little endian */
0x000000ff
0x0000ff00
0x00ff0000
0xff000000
.Ed
.Pp
The
.Fn view_copy_surface
returns a newly allocated surface containing a copy of
.Fa src .
.Pp
The
.Fn view_scale_surface
functions performs pixmap scaling of surface
.Fa src
to
.Fa width
by
.Fa height
pixels.
.Pp
The
.Fn view_set_trans
function sets the alpha value of all pixels with a non-zero alpha component.
.Pp
If OpenGL support is available,
.Fn view_surface_texture
creates an OpenGL texture from
.Fa src
.Pp
The
.Fn view_update
function queues the update of a video region.
With direct video rendering mode, this adds a
.Ft SDL_Rect
to an array that will be passed to
.Xr SDL_UpdateRects 3 .
With the OpenGL rendering mode, the entire display is queued for update.
.Fa rd
to the dirty rectangle array the event loop will pass to
.Xr SDL_UpdateRects 3
when the display is refreshed.
.Fn VIEW_UPDATE
is a no-op if OpenGL is enabled.
.Pp
The
.Fn view_alpha_blend
function performs software alpha blending between the pixel at
.Fa x ,
.Fa y
coordinates of
.Fa dstsu
and a pixel composed by
.Fa r ,
.Fa g ,
.Fa b
with the alpha value
.Fa a .
.Fn view_alpha_blend
expects
.Fa dstsu
to be locked.
.Pp
The
.Fn view_capture
function encode a JPEG image file from the contents of a surface.
.Sh WINDOW SYSTEM
.nr nS 1
.Ft "void"
.Fn view_attach "struct window *child"
.Pp
.Ft "void"
.Fn view_detach "struct window *child"
.Pp
.Ft void
.Fn view_detach_queued "void"
.Pp
.Ft "struct window *"
.Fn view_window_exists "char *name"
.nr nS 0
.Pp
The
.Fn view_attach
function attaches the window pointed to by
.Fa child
to the view.
The
.Fn view_detach
function detaches the window pointed to by
.Fa child
from the view by adding it to the detach queue.
The detachment will be performed later by
.Fa view_detach_queued .
.Pp
The
.Fn view_window_exists
functions looks for a window identified by
.Fa name
and return NULL if there is no such window.
.Sh SEE ALSO
.Xr agar 3 ,
.Xr rootmap 3 ,
.Xr window 3 ,
.Xr SDL_SetVideoMode 3 ,
.Xr SDL_WM_SetCaption 3 ,
.Xr SDL_SetCursor 3 ,
.Xr SDL_CreateRGBSurface 3
.Sh HISTORY
The
.Nm
interface first appeared in Agar 1.0
