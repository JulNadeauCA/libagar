.\"	$Csoft: view.3,v 1.30 2005/05/11 11:54:28 vedge Exp $
.\"
.\" Copyright (c) 2002, 2003, 2004, 2005 CubeSoft Communications, Inc.
.\" <http://www.csoft.org>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd August 23, 2002
.Dt VIEW 3
.Os
.ds vT Agar API Reference
.ds oS Agar 1.0
.Sh NAME
.Nm view
.Nd agar graphic management interface
.Sh SYNOPSIS
.Bd -literal
#include <engine/view.h>
.Ed
.Sh DESCRIPTION
The Agar
.Nm
layer manages the video display.
It also implements a series of macros for basic pixel operations.
.Sh INITIALIZATION
.nr nS 1
.Ft "int"
.Fn view_init "enum gfx_engine engine"
.Pp
.Ft "void"
.Fn view_destroy "void"
.Pp
.Ft "int"
.Fn view_set_refresh "int fps"
.nr nS 0
.Pp
The
.Fn view_init
function initializes the graphic engine, returning 0 on success and -1 on
failure.
If the
.Sq view.opengl
property is set,
.Fn view_init
will attempt to create an OpenGL rendering context.
The
.Fa engine
argument is one of:
.Bd -literal
enum gfx_engine {
	GFX_ENGINE_GUI,         /* Direct/OpenGL, GUI */
	GFX_ENGINE_TILEBASED    /* Direct/OpenGL, tile-based */
};
.Ed
.Pp
The
.Fn view_destroy 
function frees resources allocated by the view structure.
.Pp
The
.Fn view_set_refresh
function sets the nominal refresh rate, given in frames per second.
.Sh GRAPHIC SURFACES
.nr nS 1
.Ft "SDL_Surface *"
.Fn view_copy_surface "SDL_Surface *src"
.Pp
.Ft "void"
.Fn view_scale_surface "SDL_Surface *src" "Uint16 width" "Uint16 height" "SDL_Surface **dst"
.Pp
.Ft "int"
.Fn view_same_pixel_fmt "SDL_Surface *s1" "SDL_Surface *s2"
.Pp
.Ft "void"
.Fn view_pixels_alpha "SDL_Surface *surface" "Uint8 alpha"
.Pp
.Ft "GLuint"
.Fn view_surface_texture "SDL_Surface *src" "GLfloat *texcoord"
.Pp
.Ft "void"
.Fn view_update "int x" "int y" "int w" "int h"
.Pp
.Ft "void"
.Fn view_capture "SDL_Surface *su" "char *path_save"
.Pp
.nr nS 0
These functions operate on
.Xr SDL_Surface 3
structures.
.Pp
The
.Fn view_copy_surface
returns a newly allocated surface containing a copy of
.Fa src .
.Pp
The
.Fn view_scale_surface
functions performs pixmap scaling of surface
.Fa src
to
.Fa width
by
.Fa height
pixels.
If
.Fa dst
is NULL, a new surface is allocated.
.Pp
The
.Fn view_same_pixel_fmt
function returns 1 if the surfaces
.Fa s1
and
.Fa s2
share the same depth, RGBA masks and colorkey.
.Pp
The
.Fn view_pixels_alpha
function changes the alpha value of all pixels except those with an
alpha channel of 0, to
.Fa alpha .
.Pp
If OpenGL support is available,
.Fn view_surface_texture
creates an OpenGL texture from
.Fa src
.Pp
The
.Fn view_update
function queues the update of a video region.
With direct video rendering mode, this adds a
.Ft SDL_Rect
to an array that will be passed to
.Xr SDL_UpdateRects 3 .
With the OpenGL rendering mode, the entire display is queued for update.
.Fa rd
to the dirty rectangle array the event loop will pass to
.Xr SDL_UpdateRects 3
when the display is refreshed.
.Fn VIEW_UPDATE
is a no-op if OpenGL is enabled.
.Pp
The
.Fn view_capture
function encode a JPEG image file from the contents of a surface.
If the argument is not NULL, the name of the file is copied to
.Fa path_save ,
which must be
.Dv MAXPATHLEN
bytes in size.
.Sh PIXEL OPERATIONS
.nr nS 1
.Ft "void"
.Fn CLIPPED_PIXEL "SDL_Surface *s" "int x" "int y"
.Pp
.Ft "void"
.Fn UNCLIPPED_PIXEL "SDL_Surface *s" "int x" "int y"
.Pp
.Ft "Uint32"
.Fn GET_PIXEL "SDL_Surface *s" "Uint8 *p"
.Pp
.Ft "Uint32"
.Fn GET_PIXEL2 "SDL_Surface *s" "int x" "int y"
.Pp
.Ft "void"
.Fn PUT_PIXEL "SDL_Surface *s" "Uint8 *p" "Uint32 c"
.Pp
.Ft "void"
.Fn PUT_PIXEL2 "SDL_Surface *s" "int x" "int y" "Uint32 c"
.Pp
.Ft "void"
.Fn PUT_PIXEL2_CLIPPED "SDL_Surface *s" "int x" "int y" "Uint32 c"
.Pp
.Ft "void"
.Fn BLEND_RGBA "SDL_Surface *s" "Uint8 *p" "Uint8 r" "Uint8 g" "Uint8 b" "Uint8 a"
.Pp
.Ft "void"
.Fn BLEND_RGBA2 "SDL_Surface *s" "int x" "int y" "Uint8 r" "Uint8 g" "Uint8 b" "Uint8 a"
.Pp
.Ft "void"
.Fn BLEND_RGBA2_CLIPPED "SDL_Surface *s" "int x" "int y" "Uint8 r" "Uint8 g" "Uint8 b" "Uint8 alpha"
.Pp
.Ft "void"
.Fn VIEW_PUT_PIXEL "Uint8 *p" "Uint32 c"
.Pp
.Ft "void"
.Fn VIEW_PUT_PIXEL2 "int x" "int y" "Uint32 c"
.Pp
.Ft "void"
.Fn VIEW_PUT_PIXEL2_CLIPPED "int x" "int y" "Uint32 c"
.nr nS 0
.Pp
The macros
.Fn CLIPPED_PIXEL
and
.Fn UNCLIPPED_PIXEL
evaluate whether the pixel at the given coordinates resides inside or outside
of the clipping rectangle of the given surface.
.Pp
.Fn GET_PIXEL
returns a 32-bit interpretation of the pixel at the given location
.Fa p
in the pixel data of the surface
.Fa s .
The
.Fn GET_PIXEL2
variant finds the location of the pixel in the surface from the coordinates
.Fa x ,
.Fa y .
.Pp
.Fn PUT_PIXEL
and
.Fn PUT_PIXEL2
write the color
.Fa c
to the pixel at the given location, without doing any clipping.
The
.Fn PUT_PIXEL2_CLIPPED
variant ensures that the pixel is inside the clipping rectangle of the surface
before writing to it.
.Pp
The
.Fa BLEND_RGBA ,
.Fa BLEND_RGBA2
and
.Fa BLEND_RGBA2_CLIPPED
macros operate in a manner similar to
.Fa PUT_PIXEL* ,
except that the destination pixel is alpha-blended with the color described
by the given RGB triplet, whose weight is defined by the
.Fa alpha
parameter.
.Pp
The macros
.Fn VIEW_PUT_PIXEL ,
.Fn VIEW_PUT_PIXEL2
and
.Fn VIEW_PUT_PIXEL2_CLIPPED
behave in a manner similar to
.Fn PUT_PIXEL* ,
except that they are optimized for the display surface.
For instance, support for specific display depths may have been disabled
at compile-time.
.Sh WINDOW SYSTEM
.nr nS 1
.Ft "void"
.Fn view_attach "struct window *child"
.Pp
.Ft "void"
.Fn view_detach "struct window *child"
.Pp
.Ft void
.Fn view_detach_queued "void"
.Pp
.Ft "struct window *"
.Fn view_window_exists "char *name"
.nr nS 0
.Pp
The
.Fn view_attach
function attaches the window pointed to by
.Fa child
to the view.
The
.Fn view_detach
function detaches the window pointed to by
.Fa child
from the view by adding it to the detach queue.
The detachment will be performed later by
.Fa view_detach_queued .
.Pp
The
.Fn view_window_exists
functions looks for a window identified by
.Fa name
and return NULL if there is no such window.
.Sh SEE ALSO
.Xr agar 3 ,
.Xr rootmap 3 ,
.Xr window 3 ,
.Xr SDL_SetVideoMode 3 ,
.Xr SDL_WM_SetCaption 3 ,
.Xr SDL_SetCursor 3 ,
.Xr SDL_CreateRGBSurface 3
.Sh HISTORY
The
.Nm
interface first appeared in Agar 1.0
