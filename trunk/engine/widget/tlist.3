.\"	$Csoft: tlist.3,v 1.33 2004/03/21 07:00:45 vedge Exp $
.\"
.\" Copyright (c) 2002, 2003 CubeSoft Communications, Inc.
.\" <http://www.csoft.org>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd August 20, 2002
.Dt TLIST 3
.Os
.ds vT Agar API Reference
.ds oS Agar 1.0
.Sh NAME
.Nm tlist
.Nd agar tree/list widget
.Sh SYNOPSIS
.Bd -literal
#include <engine/widget/tlist.h>
.Ed
.Sh DESCRIPTION
The
.Nm
widget implements a dynamic, scrollable list of items.
Single or multiple selections of items are allowed.
.Sh INITIALIZATION
.nr nS 1
.Ft "struct tlist *"
.Fn tlist_new "void *parent" "int flags"
.Pp
.Ft void
.Fn tlist_init "struct tlist *tlist" "int flags"
.Pp
.Ft void
.Fn tlist_set_item_height "struct tlist *tl" "int itemh"
.Pp
.Ft void
.Fn tlist_set_item_icon "struct tlist *tl, struct tlist_item *item" \
                        "SDL_Surface *icon"
.Pp
.Ft void
.Fn tlist_prescale "struct tlist *tl" "const char *text" "int nitems"
.Pp
.Ft void
.Fn tlist_scroll "struct tlist *tl" "int pos"
.Pp
.nr nS 0
The
.Fn tlist_new
function allocates, initializes, and attaches a
.Nm
widget.
.Fn tlist_init
initializes a
.Nm
widget.
The
.Fa flags
may include:
.Pp
.Bd -literal
#define TLIST_MULTI		0x01  /* Ctrl/shift multiple selections */
#define TLIST_MULTI_STICKY	0x02  /* Sticky multiple selections */
#define TLIST_POLL		0x04  /* Generate tlist-poll events */
#define TLIST_DBLCLICK		0x08  /* Generate tlist-dblclick events */
#define TLIST_TREE		0x10  /* Hack to display trees */
#define TLIST_STATIC_ICONS	0x20  /* Access/scale icon surfaces as items
					 are being drawn for the first time */
.Ed
.Pp
The
.Fn tlist_set_item_height
function sets the height of all items to
.Fa itemh
pixels .
.Pp
The
.Fn tlist_set_item_icon
function updates the icon shown with
.Fa item ,
scaled to
.Fa w
by
.Fa h
pixels.
.Pp
.Fn tlist_prescale
requests sufficient height to display
.Fa nitems
items at once, and sufficient width to display an item containing
.Fa text .
.Pp
The
.Fn tlist_scroll
function sets the position of the scrollbar to
.Fa pos .
.Sh MANIPULATING ITEMS
.nr nS 1
.Ft "struct tlist_item *"
.Fn tlist_insert_item "struct tlist *tlist, SDL_Surface *iconsrc" \
                      "const char *text" "const void *p1"
.Pp
.Fn tlist_insert_item_head "struct tlist *tlist, SDL_Surface *iconsrc" \
                           "const char *text" "const void *p1"
.Pp
.Ft "void"
.Fn tlist_remove_item "struct tlist *tlist" "struct tlist_item *item"
.Pp
.Ft "void"
.Fn tlist_clear_items "struct tlist *tlist"
.Pp
.Ft "void"
.Fn tlist_restore_selections "struct tlist *tlist"
.Pp
.Ft "void"
.Fn tlist_select "struct tlist *tlist" "struct tlist_item *item"
.Pp
.Ft "void"
.Fn tlist_unselect "struct tlist *tlist" "struct tlist_item *item"
.Pp
.Ft "void"
.Fn tlist_unselect_all "struct tlist *tlist"
.Pp
.Ft "struct tlist_item *"
.Fn tlist_item_index "struct tlist *tlist" "int index"
.Pp
.Ft "struct tlist_item *"
.Fn tlist_item_selected "struct tlist *tlist"
.Pp
.Ft "int"
.Fn tlist_item_pointer "struct tlist *tlist" "void **p"
.Pp
.Ft "struct tlist_item *"
.Fn tlist_item_text "struct tlist *tlist" "const char *text"
.Pp
.Ft "struct tlist_item *"
.Fn tlist_item_first "struct tlist *tlist"
.Pp
.Ft "struct tlist_item *"
.Fn tlist_item_last "struct tlist *tlist"
.nr nS 0
.Pp
The
.Fn tlist_insert_item
function inserts a new item into
.Fa tlist .
If the
.Fa iconsrc
argument is not NULL, the surface it points to is copied and scaled to icon
size, unless the
.Dv TLIST_STATIC_ICONS
flag is set.
This flag indicates that for each item, the icon should be scaled (and cached)
only if the item is currently visible.
This option is most memory and cpu efficient when frequent inserts are required,
but the icon surface must be accessible as long as the
.Nm
widget is visible.
.Pp
The
.Fa p1
argument is a user-defined pointer.
For selections to function properly in
.Dv TLIST_POLLED
mode, every unique item on the list should have a unique
.Fa p1
value.
.Pp
The
.Fn tlist_insert_item_head
varient inserts the item at the head of the list instead of the tail.
.Pp
The
.Fn tlist_remove_item
function detaches and frees
.Fa item
from its parent
.Nm tlist .
.Pp
The
.Fn tlist_clear_items
function removes all items attached to
.Fa tlist ,
but remembers the selected items.
.Fn tlist_restore_selections
compares each item against the previous selections and restores
the
.Va selected
flag accordingly.
.Pp
The
.Fn tlist_select
and
.Fn tlist_unselect
functions manipulate the selected flag on
.Fa item .
.Pp
The
.Fn tlist_select_all
and
.Fn tlist_unselect_all
functions manipulate the selected flag on all items attached to
.Fa tlist .
.Pp
The
.Fn tlist_item_index
function returns the item at
.Fa index ,
or NULL if there is no such item.
The
.Fn tlist_item_selected
function returns the first selected item, or
.Dv NULL
if there are none.
.Fn tlist_item_pointer
is a variant that copies the user pointer associated with the first
selected item into
.Fa p ,
returning 0 on success or -1 if there is no item selected.
The
.Fn tlist_item_text
function searches
.Fa tlist
for an item containing the
.Fa text
string and returns NULL if there is no such item.
.Pp
The
.Fn tlist_item_first
and
.Fn tlist_item_last
functions return the first and last items on the list.
.Sh EVENTS
The
.Nm
widget reacts to the following events:
.Pp
.Bl -tag -compact -width 25n
.It window-mousemotion
Scroll if a mouse button is pressed.
.It window-mousebuttondown
Select an item.
.It window-keydown
Up/down changes a single selection.
Pageup/pagedown scrolls 4 items.
.El
.Pp
The
.Nm
widget generates the following events:
.Pp
.Bl -tag -compact -width 2n
.It Fn tlist-changed "struct tlist_item *item" "int state"
The
.Fa item
was selected/unselected.
.It Fn tlist-dblclick "struct tlist_item *item"
The
.Dv TLIST_DBLCLICK
flag is set and the user double-clicked on
.Fa item .
.It Fn tlist-poll "void"
The
.Dv TLIST_POLL
flag is set and the widget is about to be drawn or an event is being
processed.
.El
.Sh BINDINGS
The
.Nm
widget provides the following bindings:
.Pp
.Bl -tag -compact -width "void *selected "
.It Va void *selected
The
.Va p1
value of the selected item, or NULL if there is no selection (not for use
with the
.Dv TLIST_MULTI
flag).
.El
.Sh TROUBLETONS
Polled mode handling is inefficient and increases the complexity of the code,
since selections must be saved/restored according to their user pointer.
.Pp
Tree display is a crude hack and should be implemented by another widget.
.Sh SEE ALSO
.Xr agar 3 ,
.Xr widget 3 ,
.Xr window 3
.Sh HISTORY
The
.Nm
widget first appeared in Agar 1.0.
