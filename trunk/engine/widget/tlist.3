.\"	$Csoft: tlist.3,v 1.43 2004/09/18 06:37:43 vedge Exp $
.\"
.\" Copyright (c) 2002, 2003, 2004, 2005 CubeSoft Communications, Inc.
.\" <http://www.csoft.org>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd August 20, 2002
.Dt TLIST 3
.Os
.ds vT Agar API Reference
.ds oS Agar 1.0
.Sh NAME
.Nm tlist
.Nd agar tree/list widget
.Sh SYNOPSIS
.Bd -literal
#include <engine/widget/tlist.h>
.Ed
.Sh DESCRIPTION
The
.Nm
widget implements a dynamic, scrollable list of items.
Individual items are typically associated with user-supplied pointers.
Single or multiple selections of items are possible.
.Sh INHERITANCE HIERARCHY
.Pp
.Xr object 3 ->
.Xr widget 3 ->
.Nm .
.Sh INITIALIZATION
.nr nS 1
.Ft "struct tlist *"
.Fn tlist_new "void *parent" "int flags"
.Pp
.Ft void
.Fn tlist_init "struct tlist *tlist" "int flags"
.Pp
.Ft void
.Fn tlist_set_item_height "struct tlist *tl" "int itemh"
.Pp
.Ft void
.Fn tlist_set_item_icon "struct tlist *tl, struct tlist_item *item" \
                        "SDL_Surface *icon"
.Pp
.Ft void
.Fn tlist_prescale "struct tlist *tl" "const char *text" "int nitems"
.Pp
.Ft void
.Fn tlist_scroll "struct tlist *tl" "int pos"
.Pp
.nr nS 0
The
.Fn tlist_new
function allocates, initializes, and attaches a
.Nm
widget.
.Fn tlist_init
initializes a
.Nm
widget.
The
.Fa flags
may include:
.Pp
.Bd -literal
#define TLIST_MULTI		0x01  /* Ctrl/shift multiple selections */
#define TLIST_MULTI_STICKY	0x02  /* Sticky multiple selections */
#define TLIST_POLL		0x04  /* Generate tlist-poll events */
#define TLIST_TREE		0x10  /* Hack to display trees */
.Ed
.Pp
The
.Fn tlist_set_item_height
function sets the height of all items to
.Fa itemh
pixels .
.Pp
The
.Fn tlist_set_item_icon
function updates the icon shown with
.Fa item ,
scaled to
.Fa w
by
.Fa h
pixels.
.Pp
.Fn tlist_prescale
requests sufficient height to display
.Fa nitems
items at once, and sufficient width to display an item containing
.Fa text .
.Pp
The
.Fn tlist_scroll
function sets the position of the scrollbar to
.Fa pos .
.Sh MANIPULATING ITEMS
.nr nS 1
.Ft "struct tlist_item *"
.Fn tlist_insert_item "struct tlist *tlist, SDL_Surface *iconsrc" \
                      "const char *text" "const void *p1"
.Pp
.Fn tlist_insert_item_head "struct tlist *tlist, SDL_Surface *iconsrc" \
                           "const char *text" "const void *p1"
.Pp
.Ft "void"
.Fn tlist_remove_item "struct tlist *tlist" "struct tlist_item *item"
.Pp
.Ft "void"
.Fn tlist_clear_items "struct tlist *tlist"
.Pp
.Ft "void"
.Fn tlist_restore_selections "struct tlist *tlist"
.Pp
.Ft "void"
.Fn tlist_select "struct tlist *tlist" "struct tlist_item *item"
.Pp
.Ft "void"
.Fn tlist_unselect "struct tlist *tlist" "struct tlist_item *item"
.Pp
.Ft "void"
.Fn tlist_unselect_all "struct tlist *tlist"
.Pp
.Ft "struct tlist_item *"
.Fn tlist_item_index "struct tlist *tlist" "int index"
.Pp
.Ft "struct tlist_item *"
.Fn tlist_item_selected "struct tlist *tlist"
.Pp
.Ft "int"
.Fn tlist_item_pointer "struct tlist *tlist" "void **p"
.Pp
.Ft "struct tlist_item *"
.Fn tlist_item_text "struct tlist *tlist" "const char *text"
.Pp
.Ft "struct tlist_item *"
.Fn tlist_item_first "struct tlist *tlist"
.Pp
.Ft "struct tlist_item *"
.Fn tlist_item_last "struct tlist *tlist"
.nr nS 0
.Pp
The
.Fn tlist_insert_item
function inserts a new item into the list.
.Pp
The
.Fa p1
argument is a user-defined pointer associated with the item.
For selections to function properly in
.Dv TLIST_POLLED
mode, every unique item on the list should have a unique
.Fa p1
value.
.Pp
The
.Fn tlist_insert_item_head
varient inserts the item at the head of the list instead of the tail.
.Pp
The
.Fn tlist_remove_item
function detaches and frees
.Fa item
from its parent
.Nm tlist .
.Pp
The
.Fn tlist_clear_items
function removes all items attached to
.Fa tlist ,
but remembers the selected items.
.Fn tlist_restore_selections
compares each item against the previous selections and restores
the
.Va selected
flag accordingly.
.Pp
The
.Fn tlist_select
and
.Fn tlist_unselect
functions manipulate the selected flag on
.Fa item .
Unless the
.Dv TLIST_MULTI
flag is set,
.Fn tlist_select
clears the selection flag on every other item.
The
.Fn tlist_select_all
and
.Fn tlist_unselect_all
functions manipulate the selected flag on all items attached to
.Fa tlist .
.Pp
The
.Fn tlist_item_index
function returns the item at
.Fa index ,
or NULL if there is no such item.
The
.Fn tlist_item_selected
function returns the first selected item, or
.Dv NULL
if there are none.
.Fn tlist_item_pointer
is a variant that copies the user pointer associated with the first
selected item into
.Fa p ,
returning 0 on success or -1 if there is no item selected.
The
.Fn tlist_item_text
function searches
.Fa tlist
for an item containing the
.Fa text
string and returns NULL if there is no such item.
.Pp
The
.Fn tlist_item_first
and
.Fn tlist_item_last
functions return the first and last items on the list.
.Pp
The caller must ensure that the
.Nm
is locked prior to invoking
.Fn tlist_item_index ,
.Fn tlist_item_selected ,
.Fn tlist_item_pointer ,
.Fn tlist_item_text ,
.Fn tlist_item_first
or
.Fn tlist_item_last .
.Sh EVENTS
The
.Nm
widget reacts to the following events:
.Pp
.Bl -tag -compact -width 25n
.It window-mousemotion
Scroll if a mouse button is pressed.
.It window-mousebuttondown
Select an item.
.It window-keydown
Up/down changes a single selection.
Pageup/pagedown scrolls 4 items.
.El
.Pp
The
.Nm
widget generates the following events:
.Pp
.Bl -tag -compact -width 2n
.It Fn tlist-changed "struct tlist_item *item" "int state"
.Fa item
was selected or unselected.
.It Fn tlist-selected "struct tlist_item *item"
.Fa item
was selected.
.It Fn tlist-dblclick "struct tlist_item *item"
The user just double-clicked
.Fa item .
.It Fn tlist-poll "void"
The
.Dv TLIST_POLL
flag is set and the widget is about to be drawn or an event is being
processed.
.El
.Sh BINDINGS
The
.Nm
widget provides the following bindings:
.Pp
.Bl -tag -compact -width "void *selected "
.It Va void *selected
The
.Va p1
value of the selected item, or NULL if there is no selection (not for use
with the
.Dv TLIST_MULTI
flag).
.El
.Sh TROUBLETONS
A horizontal scrollbar should display when there are labels exceeding the
.Nm
width.
.Pp
Polled mode handling is inefficient since selections must be saved and restored
each polling cycle.
.Pp
.Dv TLIST_TREE
is a cheap and bletcherous hack.
.Pp
The
.Fn tlist_insert_item
function should probably be renamed
.Fn tlist_insert
and take a
.Xr printf 3
format string.
.Pp
It is possible to generate a double click by quickly clicking on two different
items; comparing with the previously clicked item is not an option since it
may have been destroyed.
.Sh EFFICIENCY
Item insertion and removal are O(1) operations.
For n items, lookup and mouse selection handling is O(n), which becomes
significant when viewing the bottom of lists with large n.
.Pp
For polled lists where the item list is rebuilt very frequently, it would
be much more efficient to store the items in an array, at the cost of O(n)
removal.
This would also allow O(1) handling of mouse selections since all items have
the same height.
.Pp
The allocation of items also incur significant overhead with polled lists.
.Sh SEE ALSO
.Xr agar 3 ,
.Xr widget 3 ,
.Xr window 3
.Sh HISTORY
The
.Nm
widget first appeared in Agar 1.0.
