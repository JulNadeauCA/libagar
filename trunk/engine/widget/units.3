.\"	$Csoft: units.3,v 1.3 2004/08/22 11:33:19 vedge Exp $
.\"
.\" Copyright (c) 2004 CubeSoft Communications, Inc.
.\" <http://www.csoft.org>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd May 10, 2004
.Dt UNITS 3
.Os
.ds vT Agar API Reference
.ds oS Agar 1.0
.Sh NAME
.Nm units
.Nd agar unit conversion facility
.Sh SYNOPSIS
.Bd -literal
#include <engine/widget/units.h>
.Ed
.Sh DESCRIPTION
The Agar
.Nm
facility implements linear as well as nonlinear unit conversion.
Each unit is attributed an abbreviation and a long name.
A numerical coefficient is associated with linear units and a function pointer
is associated with nonlinear units.
.Pp
The
.Fn fspinbutton
and
.Fn mfspinbutton
widgets use this interface.
.Pp
Units are arranged in unit groups, and Agar's
.Pa engine/widget/units.c
defines the groups:
.Pp
.Bl -tag -compact -width "substance_amt_units "
.It length_units
Units of length/distance
.It area_units
Units of area
.It volume_units
Units of volume
.It speed_units
Units of speed or velocity
.It mass_units
Units of weight
.It time_units
Units of time
.It current_units
Units of electrical current
.It temperature_units
Units of temperature
.It substance_amt_units
Units of substance amount
.It light_units
Units of light measurement
.It power_units
Units of power
.It emf_units
Units of electromotive force
.It resistance_units
Units of electrical resistance
.It capacitance_units
Units of electrical capacitance
.It inductance_units
Units of electrical inductance
.It frequency_units
Units of frequency
.It pressure_units
Units of pressure and stress
.It met_units
Units of metabolic expenditure
(somewhat humorous)
.El
.Pp
The compile-time option
.Dv ASTRONOMICAL_UNITS
controls the inclusion of astronomical units of length and pressure.
If
.Dv HISTORICAL_UNITS
is defined, historical units of weight and measure are included as well.
.Sh INTERFACE
.nr nS 1
.Ft "const struct unit *"
.Fn unit_find "const char *key"
.Pp
.Ft "const struct unit *"
.Fn unit_best "const struct unit *unit_group" "double n"
.Pp
.Ft "char *"
.Fn unit_format "double n" "const struct unit unit_group[]"
.Pp
.Ft "const char *"
.Fn unit_abbr "const struct unit *unit"
.Pp
.Ft "double"
.Fn unit2base "double n" "const struct unit *unit"
.Pp
.Ft "double"
.Fn base2unit "double n" "const struct unit *unit"
.Pp
.Ft "double"
.Fn unit2unit "double n" "const struct unit *unit_from" \
              "const struct unit *unit_to"
.nr nS 0
.Pp
The
.Fn unit_find
function searches the unit database for a unit matching the given
.Fa key ,
and returns a pointer to the unit on success or NULL if none was found.
.Pp
The
.Fn unit_best
function returns the unit expected to yield the least number of
non-significant figures when formatting the given number
.Fa n .
.Fn unit_format
formats the given number
.Fa n
using the best unit in
.Fa unit_group .
.Pp
.Fn unit_abbr
returns the abbreviation string associated with the given unit.
.Pp
The
.Fn unit2base
function converts from
.Fa n
in specified units to the equivalent number of base units.
.Fn base2unit
converts
.Fa n
base units to the equivalent number of specified units.
.Sh EXAMPLES
The following code fragment prints the equivalent milliseconds for a given
.Va n
number of seconds:
.Bd -literal -offset indent
printf("%f seconds = %f milliseconds", n,
    base2unit(n, unit_find("ms")));
.Ed
.Pp
The following code fragment prints the equivalent of 27 degrees Celsius,
in kilo Kelvins:
.Bd -literal -offset indent
const struct unit *degC = unit_find("degC");
const struct unit *kk = unit_find("kk");

printf("27C = %fkk", unit2unit(27.0, degC, kk));
.Ed
.Pp
This code fragment displays the value of
.Va r
using the resistance unit most suitable to its magnitude.
.Bd -literal -offset indent
printf("Resistance = %s", unit_format(r, resistance_units));
.Ed
.Sh SEE ALSO
.Xr agar 3 ,
.Xr fspinbutton 3 ,
.Xr mfspinbutton 3 ,
.Xr widget 3
.Sh HISTORY
The
.Nm
facility first appeared in Agar 1.0.
