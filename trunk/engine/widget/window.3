.\"	$Csoft: window.3,v 1.35 2004/08/31 03:03:37 vedge Exp $
.\"
.\" Copyright (c) 2002, 2003, 2004 CubeSoft Communications, Inc.
.\" <http://www.csoft.org>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd August 21, 2002
.Dt WINDOW 3
.Os
.ds vT Agar API Reference
.ds oS Agar 1.0
.Sh NAME
.Nm window
.Nd agar window system
.Sh SYNOPSIS
.Bd -literal
#include <engine/widget/widget.h>
#include <engine/widget/window.h>
.Ed
.Sh DESCRIPTION
The
.Nm
object implements a mobile, resizable container for widgets; it is
itself derived from the
.Xr widget 3
structure and attached to a
.Xr view 3 .
Currently there is only one view; multiple views will be supported when
SDL implements multiple displays.
.Pp
The container behavior of a
.Nm
is much like a
.Xr vbox 3
(without the
.Dv VBOX_HOMOGENOUS
flag).
By default, a
.Xr titlebar 3
widget is first attached and borders surround the window.
.Pp
Initially, the window's widgets are queried for a default, minimum size, and
the window is sized accordingly.
After this initial sizing, widget containers may scale widgets to any size.
.Sh INITIALIZATION
.nr nS 1
.Ft "struct window *"
.Fn window_new "const char *name" "..."
.Pp
.Ft "void"
.Fn window_init "struct window *win" "const char *name"
.Pp
.Ft "void"
.Fn window_set_caption "struct window *win" "const char *fmt" "..."
.Pp
.Ft "void"
.Fn window_set_closure "struct window *win" "enum window_close_mode mode"
.Pp
.Ft "void"
.Fn window_set_padding "struct window *win" "int padding"
.Pp
.Ft "void"
.Fn window_set_spacing "struct window *win" "int spacing"
.Pp
.Ft "void"
.Fn window_set_position "struct window *win, enum window_alignment alignment" \
                        "int cascade"
.Pp
.Ft void
.Fn window_attach "struct window *win" "struct window *subwin"
.Pp
.Ft void
.Fn window_detach "struct window *win" "struct window *subwin"
.nr nS 0
.Pp
The
.Fn window_new
function allocates, initializes, and attaches a new window.
.Fn window_init
initializes a
.Nm
structure.
If
.Fa name
is not NULL, it specifies that the window should be unique (position and
geometry are persistent, only one instance is allowed and the default close
behavior is
.Dv WINDOW_HIDE
instead of
.Dv WINDOW_DETACH ) .
.Pp
The
.Fn window_set_caption
function sets the text displayed by the titlebar (if there is one).
The string is truncated if its length exceeds
.Dv LABEL_MAX
- 1 bytes.
.Pp
The
.Fn window_set_closure
function installs a default
.Sq window-close
event handler:
.Bd -literal
enum window_close_mode {
	WINDOW_HIDE,		/* Hide window on close */
	WINDOW_DETACH,		/* Detach window on close */
	WINDOW_IGNORE		/* Ignore titlebar close button */
};
.Ed
.Pp
The
.Fn window_set_padding
function defines the space in pixels separating the widgets from the edges
of the window.
The default padding value is
.Va win->borderw
(the width of the decorative border) + 2 pixels.
.Pp
The
.Fn window_set_spacing
function defines the space separating the widgets from each other.
The default is 2 pixels.
.Pp
Note that
.fn window_set_spacing
only affects the widgets which are directly attached to the window.
For widgets that are attached to container widgets, it is the container
widgets that define spacing, as well as other aspects of widget
organization.
For instance, the
.Xr box 3
container widget provides a
.Fn box_set_spacing
function .
.Pp
The
.Fn window_set_position
function requests an initial window position, which may be one of:
.Bd -literal
enum window_alignment {
	WINDOW_UPPER_LEFT,
	WINDOW_MIDDLE_LEFT,
	WINDOW_LOWER_LEFT,
	WINDOW_UPPER_RIGHT,
	WINDOW_MIDDLE_RIGHT,
	WINDOW_LOWER_RIGHT,
	WINDOW_CENTER,
	WINDOW_LOWER_CENTER,
	WINDOW_UPPER_CENTER
};
.Ed
.Pp
If the
.Fa cascade
argument is 1, the window position is slightly incremented or decremented at
each call (depending on the preferred alignment).
.Pp
Finally, the
.Fn window_attach
and
.Fn window_detach
functions attach and detach windows which are to be destroyed on detach of
their parent.
.Sh VISIBILITY
.nr nS 1
.Ft void
.Fn window_show "struct window *win"
.Pp
.Ft void
.Fn window_hide "struct window *win"
.Pp
.Ft int
.Fn window_toggle_visibility "struct window *win"
.nr nS 0
.Pp
The
.Fn window_show
function marks
.Fa win
as visible.
.Fn window_hide
marks
.Fa win
as invisible.
.Fn window_toggle_visibility
inverts the visibility state of
.Fa win .
.Sh GENERIC EVENT HANDLERS
.nr nS 1
.Ft void
.Fn window_generic_detach "int argc" "union evarg *argv"
.Pp
.Ft void
.Fn window_generic_hide "int argc" "union evarg *argv"
.Pp
.Ft void
.Fn window_generic_show "int argc" "union evarg *argv"
.nr nS 0
.Pp
The
.Fn window_generic_detach
event handler detaches the window given as the first argument, freeing all
associated resources.
.Fn window_generic_hide
hides the window given as the first argument, if it is currently
visible.
.Fn window_generic_show
shows the window given as the first argument.
.Pp
The
.Fn window_set_closure
function is an alternative to assigning these event handlers manually.
.Sh EVENTS
The
.Nm
widget delivers the following events to its child widgets:
.Pp
.Bl -tag -width 2n
.It Fn window-mousemotion "int x" "int y" "int xrel" "int yrel" "int state"
The mouse cursor has moved to widget-relative coordinates
.Fa x
and
.Fa y
(which may be negative).
The
.Fa xrel
and
.Fa yrel
arguments represent the displacement relative to the last position of the
mouse cursor.
.Fa state
holds the present button state, as returned by
.Xr SDL_GetMouseState 3 .
Regardless of the mouse position, this event is posted to widgets that either
hold focus inside the focused window, or have the
.Dv WIDGET_UNFOCUSED_MOTION
flag set.
.It Fn window-mousebuttonup "int button" "int x" "int y"
The mouse button indexed by
.Fa button
was released at widget-relative
.Fa x ,
.Fa y
coordinates.
Regardless of the mouse position, this event is posted to the widget that
holds focus inside the focused window.
.It Fn window-mousebuttondown "int button" "int x" "int y"
The mouse button indexed by
.Fa button
was pressed at widget-relative
.Fa x ,
.Fa y
coordinates, which must be inside the widget area.
.It Fn window-keyup "int keysym" "int keymod"
The key identified by
.Fa keysym
was released, and the widget holds the focus.
.It Fn window-keydown "int keysym" "int keymod" "int unicode"
The key identified by
.Fa keysym
was pressed, and the widget holds the focus.
.It Fn window-close "void"
The window's titlebar close button was pressed.
This event is generated after the window is no longer visible.
.It Fn window-shown "void"
The window is now visible.
.It Fn window-hidden "void"
The window is no longer visible.
.El
.Sh SEE ALSO
.Xr agar 3 ,
.Xr widget 3
.Sh HISTORY
The
.Nm
system first appeared in Agar 1.0.
