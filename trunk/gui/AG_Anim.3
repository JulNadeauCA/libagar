.\" Copyright (c) 2010 Hypertriton, Inc. <http://hypertriton.com/>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd November 27, 2010
.Dt AG_ANIM 3
.Os
.ds vT Agar API Reference
.ds oS Agar 1.4
.Sh NAME
.Nm AG_Anim
.Nd agar animated surface
.Sh SYNOPSIS
.Bd -literal
#include <agar/core.h>
#include <agar/gui.h>
.Ed
.Sh DESCRIPTION
The
.Nm
structure describes an animation in uncompressed packed-pixel or
indexed format.
.Sh INITIALIZATION
.nr nS 1
.Ft "AG_Anim *"
.Fn AG_AnimNew "enum ag_anim_type type" "Uint w" "Uint h" "const AG_PixelFormat *fmt" "Uint flags"
.Pp
.Ft "AG_Anim *"
.Fn AG_AnimEmpty "void"
.Pp
.Ft "AG_Anim *"
.Fn AG_AnimStdRGB "Uint w" "Uint h"
.Pp
.Ft "AG_Anim *"
.Fn AG_AnimStdRGBA "Uint w" "Uint h"
.Pp
.Ft "AG_Anim *"
.Fn AG_AnimIndexed "Uint w" "Uint h" "int bitsPerPixel" "Uint flags"
.Pp
.Ft "AG_Anim *"
.Fn AG_AnimRGB "Uint w" "Uint h" "int bitsPerPixel" "Uint flags" "Uint32 Rmask" "Uint32 Gmask" "Uint32 Bmask"
.Pp
.Ft "AG_Anim *"
.Fn AG_AnimRGBA "Uint w" "Uint h" "int bitsPerPixel" "Uint flags" "Uint32 Rmask" "Uint32 Gmask" "Uint32 Bmask" "Uint32 Amask"
.Pp
.Ft "AG_Anim *"
.Fn AG_AnimFromPNGs "const char *path"
.Pp
.Ft "AG_Anim *"
.Fn AG_AnimFromJPEGs "const char *path"
.Pp
.Ft "AG_Anim *"
.Fn AG_AnimDup "const AG_Anim *src"
.Pp
.Ft "void"
.Fn AG_AnimSetOrigFPS "AG_Anim *anim" "double fps"
.Pp
.Ft "int"
.Fn AG_AnimSetPalette "AG_Anim *anim" "AG_Color *colors" "Uint offs" "Uint count"
.Pp
.Ft "int"
.Fn AG_AnimResize "AG_Anim *anim" "Uint w" "Uint h"
.Pp
.Ft void
.Fn AG_AnimFree "AG_Anim *anim"
.Pp
.nr nS 0
The
.Fn AG_AnimNew
function allocates and initializes a new
.Nm
of the specified dimensions
.Fa w ,
.Fa h
(given in pixels).
.Fa fmt
is a pointer to a
.Ft AG_PixelFormat
structure describing the way pixels are to be encoded in memory (see
.Sx PIXEL FORMATS
section below).
The pixel data is left uninitialized.
Acceptable values for
.Fa type
include:
.Pp
.Bl -tag -compact -width "AG_ANIM_INDEXED "
.It AG_ANIM_PACKED
Packed-pixel format (e.g., RGBA)
.It AG_ANIM_INDEXED
Color-index format (per-animation palette)
.El
.Pp
Acceptable
.Fa flags
include:
.Bl -tag -width "AG_SRCCOLORKEY "
.It AG_SRCCOLORKEY
Enable colorkeying.
In blit operations, this option inhibits the copy of all pixels matching
the source animation's colorkey setting.
.Fn AG_AnimSetColorKey
controls this flag.
.It AG_SRCALPHA
Enable alpha blending.
In blit operations, this option enables blending of pixels in the source
and destination animations based on the alpha component of the source pixel.
.Fn AG_AnimSetAlpha
controls this flag.
.El
.Pp
The
.Fn AG_AnimEmpty
function creates a new zero-sized animation.
.Pp
.Fn AG_AnimStdRGB
and
.Fn AG_AnimStdRGBA
create an animation in the recommended
.Sq standard
format, as determined by Agar on initialization time.
Usually, this is a packed-pixel format with an alpha component.
.Pp
The
.Fn AG_AnimIndexed
function creates a new animation of
.Fa w
by
.Fa h
pixels using indexed pixel format.
This involves the allocation of a palette.
The size of this palette is determined by
.Fa bitsPerPixel.
All entries in the palette are initialized to black, except in the 2-bpp
case, where color 0 is initialized to white and color 1 is initialized to
black.
.Pp
The
.Fn AG_AnimRGB
function creates a new animation of
.Fa w
by
.Fa h
pixels using the specified packed-pixel format.
In memory, pixels are encoded as contiguous blocks of
.Fa bitsPerPixel
bits, and the bitmasks specified in
.Fa [RGB]mask
are used to retrieve the individual red, green and blue components.
The
.Fn AG_AnimRGBA
variant adds an alpha-channel component and implicitely sets the
.Dv AG_SRCALPHA
flag.
.Pp
The
.Fn AG_AnimFromPNGs
and
.Fn AG_AnimFromJPEGs
functions attempt to load the contents of a series of image files (specified
as a path name with a numerical format string) into a newly-allocated animation.
.Fn AG_AnimFromPNGs
and
.Fn AG_AnimFromJPEGs
will return an error unless Agar was compiled with support for libpng
and libjpeg, respectively.
.Pp
The
.Fn AG_AnimDup
function returns a duplicate of the specified animation, or NULL if
insufficient memory is available.
The source animation must be locked (src->lock).
.Pp
The
.Fn AG_AnimSetOrigFPS
sets the original frame rate associated with the animation.
The default is 30.0.
This frame rate can be overriden under playback contexts (see
.Sx PLAYBACK
section below).
.Pp
The
.Fn AG_AnimSetPalette
function copies
.Fa count
color entries from the
.Fa colors
array, to
.Fa count
slots (starting at
.Fa offs )
in the palette of indexed surface
.Fa su .
.Pp
.Fn AG_AnimResize
attempts to resize an animation to the specified dimensions.
If insufficient memory is available, the function fails returning -1.
When size is increased, the new pixels are left in an uninitialized state.
The current clipping rectangle is overwritten by a rectangle covering the
entire surface.
.Pp
The
.Fn AG_AnimFree
function releases all resources allocated by the given animation.
.Sh PER-FRAME OPERATIONS
.nr nS 1
.Ft "int"
.Fn AG_AnimFrameNew "AG_Anim *anim" "const AG_Surface *su"
.Pp
.Ft "AG_Surface *"
.Fn AG_AnimFrameToSurface "AG_Anim *anim" "int frame"
.Pp
.nr nS 0
The
.Fn AG_AnimFrameNew
function append a new frame to the animation, using the source surface
.Fa su .
The dimensions of
.Fa su
must match the dimensions of the animation.
.Pp
.Fn AG_AnimFrameToSurface
converts the contents of an animation frame to a newly-allocated surface.
The function returns NULL if insufficient memory is available or the
.Fa frame
number is invalid.
.Sh PLAYBACK
.nr nS 1
.Ft "void"
.Fn AG_AnimStateInit "AG_Anim *anim" "AG_AnimState *ast"
.Pp
.Ft "void"
.Fn AG_AnimStateDestroy "AG_Anim *anim" "AG_AnimState *ast"
.Pp
.Ft "int"
.Fn AG_AnimPlay "AG_AnimState *ast"
.Pp
.Ft "void"
.Fn AG_AnimStop "AG_AnimState *ast"
.Pp
.Ft "void"
.Fn AG_AnimSetFPS "AG_AnimState *ast" "double fps"
.Pp
.Ft "void"
.Fn AG_AnimSetLoop "AG_AnimState *ast" "int enable"
.Pp
.Ft "void"
.Fn AG_AnimSetPingPong "AG_AnimState *ast" "int enable"
.Pp
.nr nS 0
The playback state of an animation is described by a separate structure
from
.Ft AG_Anim ,
the
.Ft AG_AnimState
structure.
This allows a same animation to be played back, for example, by different
widgets.
The
.Ft AG_AnimState
structure is as follows:
.Bd -literal
typedef struct ag_anim_state {
	AG_Mutex lock;
	AG_Anim *an;		/* Back pointer to anim */
	Uint flags;
#define AG_ANIM_LOOP	 0x01	/* Loop playback */
#define AG_ANIM_PINGPONG 0x02	/* Loop in ping-pong fashion */
#define AG_ANIM_REVERSE	 0x04	/* Playback in reverse */
	int play;		/* Animation is playing */
	int f;			/* Current frame# */
	double fps;		/* Effective frames/second */
	AG_Thread th;		/* Animation thread */
} AG_AnimState;
.Ed
.Pp
The
.Fn AG_AnimInitState
function initializes an
.Ft AG_AnimState
structure.
The structure should be subsequently freed by a call to
.Fn AG_AnimStateDestroy .
.Pp
The
.Fn AG_AnimPlay
function starts playback.
This is done by spawning a new thread which is responsible for incrementing
the
.Va f
member of
.Ft AG_AnimState
at a suitable rate.
Unless looping is requested, the thread exits once the playback is finished.
.Pp
.Fn AG_AnimStop
immediately stops playback.
If the animation is not currently playing, the function is a no-op.
.Pp
The
.Fn AG_AnimSetFPS
function sets the frame rate for an animation playback context.
The default frame rate is inherited from the
.Ft AG_Anim
structure (see
.Fn AG_AnimSetOrigFPS ) .
.Pp
The
.Fn AG_AnimSetLoop
and
.Fn AG_AnimSetPingPong
functions enable or disable looping.
.Sh STRUCTURE DATA
For the
.Ft AG_Anim
structure:
.Bl -tag -width "AG_PixelFormat *format "
.It Ft Uint flags
Current animation flags (read-only; see
.Sx INITIALIZATION
section).
.It Ft AG_PixelFormat *format
The animation's pixel encoding (read-only; see the
.Dq PIXEL FORMATS
section of
.Xr AG_Surface 3
for details).
.It Ft int w, h
Dimensions of the surface in pixels (read-only).
.It Ft AG_AnimFrame *f
Pointer to per-frame data.
.El
.Pp
For the
.Ft AG_AnimFrame
structure:
.Bl -tag -width "void *pixels "
.It Ft void *pixels
Raw packed pixel data for this frame.
.It Ft Uint flags
Optional flags.
.El
.Sh SEE ALSO
.Xr AG_Intro 3 ,
.Xr AG_Rect 3 ,
.Xr AG_Surface 3
.Sh HISTORY
The
.Nm
structure first appeared in Agar 1.4.1.
