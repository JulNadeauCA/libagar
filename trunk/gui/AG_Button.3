.\"	$Csoft: button.3,v 1.27 2005/09/27 14:06:35 vedge Exp $
.\"
.\" Copyright (c) 2002, 2003, 2004, 2005 CubeSoft Communications, Inc.
.\" <http://www.csoft.org>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd August 20, 2002
.Dt AG_BUTTON 3
.Os
.ds vT Agar API Reference
.ds oS Agar 1.0
.Sh NAME
.Nm AG_Button
.Nd agar button widget
.Sh SYNOPSIS
.Bd -literal
#include <agar/gui.h>
.Ed
.Sh DESCRIPTION
The
.Nm
widget implements a simple push-button displaying an image or a text label.
.Nm
can be used to trigger events, or control a boolean value.
.Sh INHERITANCE HIERARCHY
.Xr AG_Object 3 ->
.Xr AG_Widget 3 ->
.Nm .
.Sh INITIALIZATION
.nr nS 1
.Ft "AG_Button *"
.Fn AG_ButtonNew "AG_Widget *parent" "Uint flags" "const char *label"
.Pp
.Ft "AG_Button *"
.Fn AG_ButtonAct "AG_Widget *parent" "Uint flags" "const char *label" "AG_EventFn fn" "const char *fmt" "..."
.Pp
.Ft void
.Fn AG_ButtonInit "AG_Button *button" "Uint flags" "char *caption"
.Pp
.Ft void
.Fn AG_ButtonEnable "AG_Button *button"
.Pp
.Ft void
.Fn AG_ButtonDisable "AG_Button *button"
.Pp
.Ft void
.Fn AG_ButtonSetPadding "AG_Button *button" "int lPad" "int rPad" "int tPad" "int bPad"
.Pp
.Ft void
.Fn AG_ButtonSetFocusable "AG_Button *button" "int focusable"
.Pp
.Ft void
.Fn AG_ButtonSetSticky "AG_Button *button" "int sticky"
.Pp
.Ft void
.Fn AG_ButtonSetJustification "AG_Button *button" "enum ag_button_justify jus"
.Pp
.Ft void
.Fn AG_ButtonSetRepeatMode "AG_Button *button" "int repeat_flag"
.Pp
.Ft void
.Fn AG_ButtonSurface "AG_Button *button" "SDL_Surface *su"
.Pp
.Ft void
.Fn AG_ButtonSurfaceNODUP "AG_Button *button" "SDL_Surface *su"
.Pp
.Ft void
.Fn AG_ButtonText "AG_Button *button" "const char *fmt" "..."
.Pp
.Ft void
.Fn AG_ButtonTextNODUP "AG_Button *button" "char *text"
.Pp
.nr nS 0
The
.Fn AG_ButtonNew
function allocates, initializes, and attaches a
.Nm
widget.
.Pp
The
.Fn AG_ButtonAct
variant creates a button and automatically binds the provided event handler
function to its
.Sq button-pushed
event.
The
.Fa fmt
and following arguments specify an
.Xr AG_Event 3
style argument list.
.Pp
The
.Fn AG_ButtonInit
function initializes a
.Nm
widget displaying the string
.Fa caption
(if not NULL).
Acceptable values for the
.Fa flags
argument include:
.Pp
.Bd -literal
#define AG_BUTTON_DISABLED	0x01	/* Button is insensitive */
#define AG_BUTTON_STICKY	0x02	/* Toggle state */
#define AG_BUTTON_MOUSEOVER	0x04	/* Mouse overlaps */
#define AG_BUTTON_REPEAT	0x08	/* Repeat button-pushed event */
#define AG_BUTTON_FOCUS		0x40	/* Focus button automatically */
.Ed
.Pp
Note that the
.Dv AG_BUTTON_FOCUS
flag is only effective when passed to
.Fn AG_ButtonAct ,
.Fn AG_ButtonInit
will ignore it.
.Pp
The
.Fn AG_ButtonEnable
and
.Fn AG_ButtonDisable
functions trigger the sensitivity of the
.Nm
widget.
.Pp
The
.Fn AG_ButtonSetPadding
function sets the padding around the label in pixels.
If a parameter is -1, its current value is preserved.
.Pp
The
.Fn AG_ButtonSetFocusable
function with an argument of 0 prevents the button from gaining focus.
The default is to allow buttons to gain focus.
.Pp
The
.Fn AG_ButtonSetSticky
function with an argument of 1 arranges for the button to trigger its state
only on reception of
.Fn window-mousebuttondown
events.
By default,
.Fn window-mousebuttonup
events reset the state to 0.
.Pp
The
.Fn AG_ButtonSetJustification
function controls the label justification setting:
.Pp
.Bd -literal
enum ag_button_justify {
	AG_BUTTON_LEFT,
	AG_BUTTON_CENTER,
	AG_BUTTON_RIGHT
};
.Ed
.Pp
The
.Fn AG_ButtonSetRepeatMode
flag enables or disables repeat mode.
Repeat mode causes multiple
.Sq button-pushed
events to be posted periodically for as long as the button is triggered.
Repeat mode is used notably by
.Xr AG_Spinbutton 3 .
.Pp
.Fn AG_ButtonSurface
sets the button label to a copy of the given surface.
The
.Fn AG_ButtonSurfaceNODUP
variant uses the given surface as source without copying.
.Pp
.Fn AG_ButtonText
uses the given text string as the button label.
The
.Fn AG_ButtonTextNODUP
variant uses the original string without copying.
.Pp
.Sh EVENTS
The
.Nm
widget reacts to the following events:
.Pp
.Bl -tag -compact -width 25n
.It window-mousebuttonup
Release the button if the cursor is inside the widget area.
.It window-mousebuttondown
Press the button.
.It window-keyup
Release the button, unless sticky mode is in effect.
.It window-keydown
Press the button.
.It window-mousemotion
Abort a button press if the cursor is moving outside the button area and sticky
mode is not in effect.
.El
.Pp
The
.Nm
widget generates the following events:
.Pp
.Bl -tag -compact -width 2n
.It Fn button-pushed "int new_state"
The button was pressed.
The
.Fa new_state
argument is useful in conjunction with the
.Dv AG_BUTTON_STICKY
flag.
.It Fn button-mouseoverlap "int overlap"
The mouse cursor has entered/exited the button area.
This is typically is used to display tool tips.
.El
.Sh BINDINGS
The
.Nm
widget provides the following bindings.
In all cases, a value of 1 is considered boolean TRUE, and a value of 0
is considered boolean FALSE.
.Pp
.Bl -tag -compact -width "FLAGS32 *state "
.It Va BOOL *state
Value (1/0) of natural integer
.It Va INT *state
Value (1/0) of natural integer
.It Va UINT8 *state
Value (1/0) of 8-bit integer
.It Va UINT16 *state
Value (1/0) of 16-bit integer
.It Va UINT32 *state
Value (1/0) of 32-bit integer
.It Va FLAGS *state
Bits in an int
.It Va FLAGS8 *state
Bits in 8-bit word
.It Va FLAGS16 *state
Bits in 16-bit word
.It Va FLAGS32 *state
Bits in 32-bit word
.El
.Sh EXAMPLES
The following code fragment creates a button and sets a handler function
for the
.Sq button-pushed
event:
.Pp
.Bd -literal -offset indent
void
hello(AG_Event *event)
{
	char *s = AG_STRING(1);
	AG_TextMsg(AG_MSG_INFO, "Hello, %s!", s);
}
 
.Li ...

{
	AG_Button *btn;

	btn = AG_ButtonNew(parent, 0, "Hello");
	AG_SetEvent(btn, "button-pushed", hello, "%s", "world");
}
.Ed
.Pp
The following code fragment uses buttons to control specific bits in
a 32-bit word:
.Bd -literal -offset indent
AG_Button *btn;
Uint32 MyFlags = 0;

btn = AG_ButtonNew(parent, AG_BUTTON_STICKY, "Bit 1");
AG_WidgetBindFlag32(btn, "state", &MyFlags, 0x01);
btn = AG_ButtonNew(parent, AG_BUTTON_STICKY, "Bit 2");
AG_WidgetBindFlag32(btn, "state", &MyFlags, 0x02);
.Ed
.Sh SEE ALSO
.Xr AG_Intro 3 ,
.Xr AG_Event 3 ,
.Xr AG_Toolbar 3 ,
.Xr AG_Widget 3 ,
.Xr AG_Window 3
.Sh HISTORY
The
.Nm
widget first appeared in Agar 1.0.
.Sh BUGS
A more general interface may be preferable to
.Fn AG_ButtonEnable
and
.Fn AG_ButtonDisable .
.Pp
This widget uses the
.Dv AG_WIDGET_UNFOCUSED_MOTION
flag which is very inefficient.
