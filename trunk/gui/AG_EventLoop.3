.\" Copyright (c) 2009-2010 Hypertriton, Inc. <http://hypertriton.com/>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd September 16, 2009
.Dt AG_EVENTLOOP 3
.Os
.ds vT Agar API Reference
.ds oS Agar 1.4
.Sh NAME
.Nm AG_EventLoop
.Nd agar GUI event loop
.Sh SYNOPSIS
.Bd -literal
#include <agar/core.h>
#include <agar/gui.h>
.Ed
.Sh DESCRIPTION
The event loop of an Agar application typically waits for events, invokes
GUI rendering routines and processes timer events.
Applications can either use the stock event loop routine,
.Fn AG_EventLoop ,
or a custom event loop.
.Sh GENERIC EVENT LOOP
.nr nS 1
.Ft "void"
.Fn AG_EventLoop "void"
.Pp
.Ft "void"
.Fn AG_EventLoop_FixedFPS "void"
.Pp
.Ft "void"
.Fn AG_EventLoop_Drv "AG_Driver *drv"
.nr nS 0
.Pp
The
.Fn AG_EventLoop
routine enters a generic Agar event loop, which performs the following
tasks:
.Pp
.Bl -enum -compact
.It
Render GUI elements to the graphics system as necessary.
.It
Process incoming events from the system.
.It
Invoke timed callback functions (see
.Xr AG_Timeout 3 ) .
.It
Let the application idle if possible.
.El
.Pp
.Fn AG_EventLoop
is a general-purpose event loop suitable for most common applications.
The
.Fn AG_EventLoop_FixedFPS
variant tries to guarantee a constant display refresh rate (at the potential
cost of reduced accuracy of time-sensitive events).
.Pp
Both
.Fn AG_EventLoop
and
.Fn AG_EventLoop_FixedFPS
assume that the application is using a single Agar driver, as it is the
case for most applications.
The
.Fn AG_EventLoop_Drv
variant allows applications which may want to use different Agar drivers
concurrently, to specify a driver instance via the
.Fa drv
argument.
.Sh CUSTOM EVENT LOOPS
As of Agar-1.4.0, it is possible to write custom event loops in a
driver-independent fashion, using the functions
.Fn AG_PendingEvents ,
.Fn AG_GetNextEvent
and
.Fn AG_ProcessEvent .
Low-level driver events are represented by the
.Ft AG_DriverEvent
structure.
See
.Xr AG_Driver 3
for more information.
.Sh EXAMPLES
See
.Xr AG_Driver 3 .
Also see
.Pa demos/customeventloop
in the Agar distribution for an example of an application using a custom
event loop.
.Sh SEE ALSO
.Xr AG_Intro 3 ,
.Xr AG_Event 3 ,
.Xr AG_Driver 3
.Sh HISTORY
The
.Nm
routine first appeared in Agar 1.0.
While custom event loops were possible with Agar 1.3, an official API for
low-level event processing only appeared in Agar 1.4.0.
