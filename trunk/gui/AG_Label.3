.\" Copyright (c) 2002-2007 Hypertriton, Inc. <http://hypertriton.com/>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd August 21, 2002
.Dt AG_LABEL 3
.Os
.ds vT Agar API Reference
.ds oS Agar 1.0
.Sh NAME
.Nm AG_Label
.Nd agar label widget
.Sh SYNOPSIS
.Bd -literal
#include <agar/core.h>
#include <agar/gui.h>
.Ed
.Sh DESCRIPTION
The
.Nm
widget displays single-line or multi-line text.
In the case of
.Sq polled
labels, the text can contain directives such that specific data is
dereferenced on rendering.
.Sh INHERITANCE HIERARCHY
.Xr AG_Object 3 ->
.Xr AG_Widget 3 ->
.Nm .
.Sh INITIALIZATION
.nr nS 1
.Ft "AG_Label *"
.Fn AG_LabelNewStatic "AG_Widget *parent" "Uint flags" "const char *fmt" "..."
.Pp
.Ft "AG_Label *"
.Fn AG_LabelNewStaticString "AG_Widget *parent" "Uint flags" "const char *text"
.Pp
.Ft "AG_Label *"
.Fn AG_LabelNewPolled "AG_Widget *parent" "Uint flags" "const char *fmt" "..."
.Pp
.Ft "AG_Label *"
.Fn AG_LabelNewPolledMT "AG_Widget *parent" "Uint flags" "AG_Mutex *mutex" "const char *fmt" "..."
.Pp
.Ft "void"
.Fn AG_LabelSetPadding "AG_Label *label" "int left" "int right" "int top" "int bottom"
.Pp
.Ft "void"
.Fn AG_LabelJustify "AG_Label *label" "enum ag_text_justify justify"
.Pp
.Ft "void"
.Fn AG_LabelSizeHint "AG_Label *label" "Uint nlines" "const char *text"
.Pp
.nr nS 0
The
.Fn AG_LabelNewStatic
function allocates, initializes and attaches a
.Nm
widget initially displaying the given text (which can be changed afterwards -
see
.Dq STATIC LABELS
section below).
The
.Fn AG_LabelNewStaticString
variant accepts a non-formatted string.
.Pp
The
.Fn AG_LabelNewPolled
function creates a new
.Nm
widget displaying a string of text which contains references to live data
(see
.Dq POLLED LABELS
section below).
The
.Fn AG_LabelNewPolledMT
variant accepts a pointer to a mutex that will be automatically acquired
and release as the widget accesses the referenced data.
.Pp
The
.Fn AG_LabelSetPadding
function sets the label padding parameters in pixels.
If a parameter is -1, its current value is preserved.
.Pp
The
.Fn AG_LabelJustify
function sets the text justification:
.Pp
.Bd -literal
enum ag_text_justify {
	AG_TEXT_LEFT,
	AG_TEXT_CENTER,
	AG_TEXT_RIGHT
};
.Ed
.Pp
The
.Fn AG_LabelSizeHint
function arranges for the minimum scaling of the label to accomodate at
least
.Fa nlines
lines of the given text string.
If
.Fa nlines
is 0, the number of lines will be based on the contents of the text string.
The
.Fa nlines
parameter is necessary because it is possible to poll string values that
are possibly multi-line.
.Sh POLLED LABELS
Polled labels are specified to
.Fn AG_LabelNewPolled
and
.Fn AG_LabelNewPolledMT
as a format string containing regular text
with zero or more
.Xr printf 3
like directives, except that the argument following the format string are
pointers to the data instead.
.Pp
Note that a call to
.Fn AG_LabelSizeHint
is always recommended in the case of polled labels, such that the label
is initially scaled to an optimal size, given the data that we expect the
label will have to display.
.Pp
Possible format string directives include:
.Pp
.Bl -tag -compact -width "%llu, %llo, %llx "
.It %d, %i
int
.It %lld, %lli
Sint64
.It %o, %u, %x, %X
Uint
.It %llu, %llo, %llx
Uint64
.It %c
char
.It %s
char *
.It %p
void *
.It %f
double *
.It %[u8]
Uint8 *
.It %[s8]
Sint8 *
.It %[u16]
Uint16 *
.It %[s16]
Sint16 *
.It %[u32]
Uint32 *
.It %[s32]
Sint32 *
.It %[wxh]
SDL_Rect *
.It %[x,y]
SDL_Rect *
.It %[rect]
SDL_Rect *
.It %[flags]
Uint *
.It %[flags8]
Uint8 *
.It %[flags16]
Uint16 *
.It %[flags32]
Uint32 *
.El
.Pp
Note that the
.Sq flags
directive require that bit (or bitmask) descriptions be provided using the
.Fn AG_LabelFlag*
functions (see
.Dq BITMASK DESCRIPTIONS
section below).
.Pp
.Sh STATIC LABELS
.nr nS 1
.Ft void
.Fn AG_LabelText "AG_Label *label" "const char *fmt" "..."
.Pp
.Ft void
.Fn AG_LabelString "AG_Label *label" "const char *s"
.Pp
.Ft void
.Fn AG_LabelSetSurface "AG_Label *label" "SDL_Surface *su"
.Pp
.nr nS 0
The functions
.Fn AG_LabelText
and
.Fn AG_LabelString
change the text displayed by the label.
.Pp
.Fn AG_LabelSetSurface
arranges for a copy of the given surface to be used as the label.
Note it is usually preferable to display graphics using the
.Xr AG_Pixmap 3
widget instead of
.Nm .
If the
.Fa su
argument is NULL, the widget will not display anything.
.Pp
.Sh BITMASK DESCRIPTIONS
.nr nS 1
.Ft "void"
.Fn AG_LabelFlag "AG_Label *label" "Uint index" "const char *descr" "Uint bitmask"
.Pp
.Ft "void"
.Fn AG_LabelFlag8 "AG_Label *label" "Uint index" "const char *descr" "Uint8 bitmask"
.Pp
.Ft "void"
.Fn AG_LabelFlag16 "AG_Label *label" "Uint index" "const char *descr" "Uint16 bitmask"
.Pp
.Ft "void"
.Fn AG_LabelFlag32 "AG_Label *label" "Uint index" "const char *descr" "Uint32 bitmask"
.Pp
.nr nS 0
The
.Fn AG_LabelFlag ,
.Fn AG_LabelFlag8 ,
.Fn AG_LabelFlag16
and
.Fn AG_LabelFlag32
functions register a new bitmask description for the pointer at
.Fa index .
If the pointed value AND'ed with
.Fa bitmask
is true, the
.Fa descr
text will be displayed by the label.
.Sh EVENTS
The
.Nm
widget neither reacts to nor generates any event.
.Sh EXAMPLES
The following code snippet creates a window containing both a static label
and a polled label:
.Pp
.Bd -literal
{
	AG_Window *win;
	int myInt = 1234;
	AG_Label *myLbl;

	win = AG_WindowNew(0);
	AG_LabelNewStatic(win, 0, "Foo");
	myLbl = AG_LabelNewPolled(win, 0, "myInt=%i", &myInt);
	AG_LabelSizeHint(myLbl, 1, "myInt=0000");
}
.Ed
.Pp
Thread-safe code can associate polled labels with mutexes protecting
the data to access:
.Bd -literal
{
	int myInt = 1234;
	AG_Mutex myMutex = AG_MUTEX_INITIALIZER;

	AG_LabelNewPolledMT(win, 0, &myMutex, "myInt=%i", &myInt);
}
.Ed
.Pp
It is frequently useful to display bit values in textual format.
The following example would display
.Sq FOO_FLAG, BAR_FLAG .
.Bd -literal
{
	Uint MyFlags = FOO_FLAG|BAR_FLAG;
	AG_Label *lbl;

	lbl = AG_LabelNewPolled(win, 0, "MyFlags=%[flags]", &MyFlags);
	AG_LabelFlag(lbl, 0, "FOO_FLAG", FOO_FLAG);
	AG_LabelFlag(lbl, 0, "BAR_FLAG", BAR_FLAG);
}
.Ed
.Sh SEE ALSO
.Xr AG_Intro 3 ,
.Xr AG_Pixmap 3 ,
.Xr AG_Widget 3 ,
.Xr AG_Window 3 ,
.Xr printf 3
.Sh HISTORY
The
.Nm
widget first appeared in Agar 1.0.
