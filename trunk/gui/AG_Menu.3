.\"	$Csoft: menu.3,v 1.3 2005/09/27 00:25:22 vedge Exp $
.\"
.\" Copyright (c) 2005 CubeSoft Communications, Inc.
.\" <http://www.csoft.org>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd May 30, 2005
.Dt AG_MENU 3
.Os
.ds vT Agar API Reference
.ds oS Agar 1.0
.Sh NAME
.Nm AG_Menu
.Nd agar menu widget
.Sh SYNOPSIS
.Bd -literal
#include <agar/gui.h>
.Ed
.Sh DESCRIPTION
The
.Nm
widget implements a hierarchical menu system which supports text-based menu
and toolbar displays.
Individual menu items can bind to boolean values and specific bits in integer
values.
.Sh INHERITANCE HIERARCHY
.Xr AG_Object 3 ->
.Xr AG_Widget 3 ->
.Nm .
.Sh INITIALIZATION
.nr nS 1
.Ft "AG_Menu *"
.Fn AG_MenuNew "void *parent" "Uint flags"
.Pp
.Ft void
.Fn AG_MenuInit "AG_Menu *menu" "Uint flags"
.Pp
.Ft void
.Fn AG_MenuExpand "AG_Menu *menu" "AG_MenuItem *item" "int x" "int y"
.Pp
.Ft void
.Fn AG_MenuCollapse "AG_Menu *menu" "AG_MenuItem *item"
.Pp
.nr nS 0
The
.Fn AG_MenuNew
function allocates, initializes, and attaches a
.Nm
widget.
The
.Fn AG_MenuInit
function initializes a
.Nm
widget.
.Pp
The
.Fn AG_MenuExpand
function creates a new (frameless) window at the coordinates
.Fa x ,
.Fa y .
The window contains an
.Ft AGMenuView
widget which shows the child entries of
.Fa item .
If an item is clicked on, the window is automatically destroyed.
The
.Fn AG_MenuCollapse
function manually destroys the popup window.
.Sh TOP-LEVEL ITEMS
.nr nS 1
.Ft "AG_MenuItem *"
.Fn AG_MenuAddItem "AG_Menu *menu" "const char *text"
.Pp
.Ft "void"
.Fn AG_MenuFreeItems "AG_Menu *menu" 
.Pp
.Ft "void"
.Fn AG_MenuFreeSubItems "AG_MenuItem *item" 
.Pp
.nr nS 0
The
.Fn AG_MenuAddItem
inserts a new top-level menu item with a label displaying the string
.Fa text .
Top-level menu items have no associated action or binding.
The
.Fn AG_MenuFreeItems
function destroys all top-level menu items in
.Fa menu .
.Fn AG_MenuFreeSubItems
destroys all subitems associated with
.Fa item .
.Sh ACTION ITEMS
.nr nS 1
.Ft "AG_MenuItem *"
.Fn AG_MenuAction "AG_MenuItem *" "const char *text" "int icon" "void (*fn)(AG_Event *)" "const char *fmt, ..."
.Pp
.Ft "AG_MenuItem *"
.Fn AG_MenuActionKb "AG_MenuItem *" "const char *text" "int icon" "SDLKey keysym" "SDLMod keymod" "void (*fn)(AG_Event *)" "const char *fmt, ..."
.Pp
.Ft "AG_MenuItem *"
.Fn AG_MenuTool "AG_MenuItem *" "AG_Toolbar *toolbar" "const char *text" "int icon" "SDLKey keysym" "SDLMod keymod" "void (*fn)(AG_Event *)" "const char *fmt, ..."
.Pp
.Ft "AG_MenuItem *"
.Fn AG_MenuDynamic "AG_MenuItem *" "int icon" "void (*fn)(AG_Event *)" "const char *fmt, ..."
.Pp
.Ft "void"
.Fn AG_MenuSetIcon "AG_MenuItem *" "SDL_Surface *su"
.Pp
.Ft "void"
.Fn AG_MenuSetLabel "AG_MenuItem *" "const char *label"
.Pp
.nr nS 0
The
.Fn AG_MenuAction
function inserts a new action item identified by the string
.Fa text .
The
.Fa icon
parameter is an index into the global
.Va icons[]
array (or -1 for no icon).
.Pp
When selected, the item will invoke the event handler function
.Fa fn ,
with the additional arguments specified in
.Fa fmt
(unless it is NULL).
.Pp
The
.Fn AG_MenuActionKb
variant also associates the action with the given
.Xr SDLKey 3
and modifier.
.Pp
The
.Fn AG_MenuTool
variant automatically inserts an item into the given toolbar as well.
.Pp
The
.Fn AG_MenuDynamic
function creates a dynamic menu item.
The specified event handler routine will be invoked every time the menu item
is rendered.
A pointer to the
.Ft AGMenu
is passed as the 0th argument, and a pointer to the
.Ft AGMenuItem
is passed as the last argument.
The function is allowed to modify its
.Va state ,
and
.Va onclick
members directly.
The label may be modified using
.Fn AG_MenuSetLabel ,
and the icon using
.Fn AG_MenuSetIcon .
If
.Va state
is 0 or 1, it defines the current state for boolean items (unless it is -1,
it overrides any boolean/flag binding).
The
.Va onclick
member is a pointer to the event handler to invoke when the user selects the
item.
.Sh BOOLEAN AND BITMASK ITEMS
.nr nS 1
.Ft "AG_MenuItem *"
.Fn "AG_MenuIntBool" "AG_MenuItem *" "const char *text" "int icon" "int *value" "int invert"
.Pp
.Ft "AG_MenuItem *"
.Fn "AG_MenuIntBoolMp" "AG_MenuItem *" "const char *text" "int icon" "int *value" "int invert" "AG_Mutex *mutex"
.Pp
.Ft "AG_MenuItem *"
.Fn "AG_MenuInt8Bool" "AG_MenuItem *" "const char *text" "int icon" "Uint8 *value" "int invert"
.Pp
.Ft "AG_MenuItem *"
.Fn "AG_MenuInt8BoolMp" "AG_MenuItem *" "const char *text" "int icon" "Uint8 *value" "int invert" "AG_Mutex *mutex"
.Pp
.Ft "AG_MenuItem *"
.Fn "AG_MenuIntFlags" "AG_MenuItem *" "const char *text" "int icon" "int *value" "int flags" "int invert"
.Pp
.Ft "AG_MenuItem *"
.Fn "AG_MenuIntFlagsMp" "AG_MenuItem *" "const char *text" "int icon" "int *value" "int flags" "int invert" "AG_Mutex *mutex"
.Pp
.Ft "AG_MenuItem *"
.Fn "AG_MenuInt8Flags" "AG_MenuItem *" "const char *text" "int icon" "Uint8 *value" "Uint8 flags" "int invert"
.Pp
.Ft "AG_MenuItem *"
.Fn "AG_MenuInt8FlagsMp" "AG_MenuItem *" "const char *text" "int icon" "Uint8 *value" "Uint8 flags" "int invert" "AG_Mutex *mutex"
.Pp
.Ft "AG_MenuItem *"
.Fn "AG_MenuInt16Flags" "AG_MenuItem *" "const char *text" "int icon" "Uint16 *value" "Uint16 flags" "int invert"
.Pp
.Ft "AG_MenuItem *"
.Fn "AG_MenuInt16FlagsMp" "AG_MenuItem *" "const char *text" "int icon" "Uint16 *value" "Uint16 flags" "int invert" "AG_Mutex *mutex"
.Pp
.Ft "AG_MenuItem *"
.Fn "AG_MenuInt32Flags" "AG_MenuItem *" "const char *text" "int icon" "Uint32 *value" "Uint32 flags" "int invert"
.Pp
.Ft "AG_MenuItem *"
.Fn "AG_MenuIntFlagsMp" "AG_MenuItem *" "const char *text" "int icon" "Uint32 *value" "Uint32 flags" "int invert" "AG_Mutex *mutex"
.Pp
.nr nS 0
The
.Fn AG_Menu*Bool
functions create a new item that binds to the given boolean variable.
If the
.Fa invert
parameter is non-zero, the actual value is inverted.
.Pp
The
.Fn AG_Menu*Flags
functions create a new item controlling one or more bits inside an integer
value.
The
.Fa flags
argument specifies the bitmask.
If
.Fa invert
is non-zero, the bits are inverted.
.Pp
The
.Fn AG_Menu*BoolMp
and
.Fn AG_Menu*FlagsMp
variants accept a
.Ft "AG_Mutex *"
argument specifying a mutex to acquire prior to reading or writing the data.
.Sh OTHER ITEMS
.nr nS 1
.Ft "void"
.Fn AG_MenuSeparator "AG_MenuItem *item"
.Pp
.Ft "void"
.Fn AG_MenuSection "AG_MenuItem *item" "const char *text" "..."
.Pp
.nr nS 0
The
.Fn AG_MenuSeparator
function inserts a horizontal menu separator.
.Pp
.Fn AG_MenuSection
creates a non-selectable item displaying the given text.
.Sh EVENTS
The
.Nm
widget reacts to the following events:
.Pp
.Bl -tag -compact -width "window-mousebutton* "
.It window-mousebutton*
If the cursor is over a menu item, display its sub-items.
.It window-mousemotion
Change the current sub-item display if the cursor is moved to a different
item.
.El
.Pp
The
.Nm
widget does not generate any event.
.Sh BINDINGS
The
.Nm
widget does not provide any binding.
.Sh EXAMPLES
The following code fragment creates a menu with an action item, a boolean
item and two bitmask items.
.Pp
.Bd -literal -offset indent
int someflag = 0;
Uint16 flags = 0;
#define FOO_FLAG 0x01
#define BAR_FLAG 0x02

void
hello(AG_Event *event)
{
	char *s = AG_STRING(1);

	AG_TextMsg(AG_MSG_INFO, "Hello, %s!", s);
}
 
.Li ...

AG_Menu *menu;
AG_MenuItem *item;

menu = AG_MenuNew(win);
item = AG_MenuAddItem(menu, "File");
{
	AG_MenuAction(item, "Say hello", -1, hello, "%s", "world");
	AG_MenuSeparator(item);
	AG_MenuIntBool(item, "Some flag", -1, &someflag, 0);
	AG_MenuUint16_bool(item, "Foo flag", -1, &flags, FOO_FLAG, 0);
	AG_MenuUint16_bool(item, "Bar flag", -1, &flags, BAR_FLAG, 0);
	AG_MenuSeparator(item);
	AG_MenuAction(item, "Quit", CLOSE_ICON, quit_app, NULL);
}
.Ed
.Sh SEE ALSO
.Xr AG_Intro 3 ,
.Xr AG_Event 3 ,
.Xr AG_Button 3 ,
.Xr AG_Toolbar 3 ,
.Xr AG_Tableview 3 ,
.Xr AG_Tlist 3 ,
.Xr AG_Widget 3 ,
.Xr AG_Window 3
.Sh HISTORY
The
.Nm
widget first appeared in Agar 1.0.
