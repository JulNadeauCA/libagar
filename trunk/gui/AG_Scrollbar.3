.\" Copyright (c) 2002-2012 Hypertriton, Inc. <http://hypertriton.com/>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd September 11, 2002
.Dt AG_SCROLLBAR 3
.Os
.ds vT Agar API Reference
.ds oS Agar 1.0
.Sh NAME
.Nm AG_Scrollbar
.Nd agar scroll bar widget
.Sh SYNOPSIS
.Bd -literal
#include <agar/core.h>
#include <agar/gui.h>
.Ed
.Sh DESCRIPTION
.\" IMAGE(http://libagar.org/widgets/AG_Scrollbar.png, "An AG_Scrollbar")
The
.Nm
widget provides a basic panning control.
.Nm
is almost always integrated in a widget's implementation, where the user
should be able to scroll over some partially visible graphics.
The scrollbar's range and value parameters are specified by integer or
floating-point bindings.
.Pp
For example, in
.Xr AG_Textbox 3 ,
the
.Va max
binding would be tied to the total line count, and
.Va value
to the index of the first line to display.
The
.Va visible
binding would be tied to the number of lines that can be displayed on-screen.
Note that the
.Va visible
value, being dependent on the widget's dimensions, is usually calculated in
the widget's
.Fn sizeAlloc
routine.
.Pp
The
.Va minOffs ,
.Va maxOffs
and
.Va minOffs
variables (see
.Dq STRUCTURE DATA )
can be used to add/subtract a constant value to that of the bound variables.
.Pp
NOTE: This widget is meant only as a panning control.
For general edition of numerical values,
.Xr AG_Slider 3
or
.Xr AG_Numerical 3
should be used instead.
.Sh INHERITANCE HIERARCHY
.Xr AG_Object 3 ->
.Xr AG_Widget 3 ->
.Nm .
.Sh INTERFACE
.nr nS 1
.Ft "AG_Scrollbar *"
.Fn AG_ScrollbarNew "AG_Widget *parent" "enum ag_scrollbar_type type" "Uint flags"
.Pp
.\" MANLINK(AG_ScrollbarNewInt)
.\" MANLINK(AG_ScrollbarNewUint)
.\" MANLINK(AG_ScrollbarNewFloat)
.\" MANLINK(AG_ScrollbarNewDouble)
.\" MANLINK(AG_ScrollbarNewUint8)
.\" MANLINK(AG_ScrollbarNewUint16)
.\" MANLINK(AG_ScrollbarNewUint32)
.\" MANLINK(AG_ScrollbarNewUint64)
.\" MANLINK(AG_ScrollbarNewSint8)
.\" MANLINK(AG_ScrollbarNewSint16)
.\" MANLINK(AG_ScrollbarNewSint32)
.\" MANLINK(AG_ScrollbarNewSint64)
.Ft "AG_Scrollbar *"
.Fn AG_ScrollbarNew{Int,Uint,Float,Double} "AG_Widget *parent" "enum ag_scrollbar_type type" "Uint flags" "<Type> *val" "<Type> *min" "<Type> *max" "<Type> *visible"
.Pp
.Ft "AG_Scrollbar *"
.Fn AG_ScrollbarNew{Uint8,Uint16,Uint32,Uint64} "AG_Widget *parent" "enum ag_scrollbar_type type" "Uint flags" "<Type> *val" "<Type> *min" "<Type> *max" "<Type> *visible"
.Pp
.Ft "AG_Scrollbar *"
.Fn AG_ScrollbarNew{Sint8,Sint16,Sint32,Sint64} "AG_Widget *parent" "enum ag_scrollbar_type type" "Uint flags" "<Type> *val" "<Type> *min" "<Type> *max" "<Type> *visible"
.Pp
.Ft void
.Fn AG_ScrollbarSizeHint "AG_Scrollbar *scrollbar" "int length"
.Pp
.Ft void
.Fn AG_ScrollbarSetControlLength "AG_Scrollbar *scrollbar" "int length"
.Pp
.Ft int
.Fn AG_ScrollbarControlLength "AG_Scrollbar *scrollbar"
.Pp
.Ft void
.Fn AG_ScrollbarSetWidth "int width"
.Pp
.Ft int
.Fn AG_ScrollbarWidth "void"
.Pp
.Ft int
.Fn AG_ScrollbarVisible "AG_Scrollbar *scrollbar"
.Pp
.Ft void
.Fn AG_ScrollbarSetIncFn "AG_Scrollbar *scrollbar" "AG_EventFn fn" "const char *fmt" "..."
.Pp
.Ft void
.Fn AG_ScrollbarSetDecFn "AG_Scrollbar *scrollbar" "AG_EventFn fn" "const char *fmt" "..."
.Pp
.Ft void
.Fn AG_ScrollbarSetIntIncrement "AG_Scrollbar *scrollbar" "int increment"
.Pp
.Ft void
.Fn AG_ScrollbarSetRealIncrement "AG_Scrollbar *scrollbar" "double increment"
.Pp
.nr nS 0
The
.Fn AG_ScrollbarNew
function allocates, initializes, and attaches a new
.Nm
widget.
The
.Fa type
argument should be either
.Dv AG_SCROLLBAR_HORIZ
or
.Dv AG_SCROLLBAR_VERT .
Acceptable
.Fa flags
include:
.Bl -tag -width "AG_SCROLLBAR_AUTOHIDE "
.It AG_SCROLLBAR_AUTOSIZE
Automatically determine the size of the scrollbar control based on current
.Va min ,
.Va max
and
.Va visible
values (recommended).
.It AG_SCROLLBAR_AUTOHIDE
Automatically hide or show the scrollbar based on the usefulness of the
current numerical range.
.It AG_SCROLLBAR_HFILL
Expand horizontally in parent (equivalent to invoking
.Xr AG_ExpandHoriz 3 ) .
This flag is only sensible with horizontal scrollbars, and renders the use of
.Fn AG_ScrollbarSizeHint
unnecessary.
.It AG_SCROLLBAR_VFILL
Expand vertically in parent (equivalent to invoking
.Xr AG_ExpandVert 3 ) .
This flag is only sensible with vertical scrollbars, and renders the use of
.Fn AG_ScrollbarSizeHint
unnecessary.
.It AG_SCROLLBAR_EXPAND
Shorthand for
.Dv AG_SCROLLBAR_HFILL|AG_SCROLLBAR_VFILL .
.It AG_SCROLLBAR_TEXT
Display the minimum, current and maximum values in text.
This option is primarily useful for debugging.
.It AG_SCROLLBAR_EXCL
Advise that no external changes to the
.Va value ,
.Va min ,
.Va max
and
.Va visible
bindings are expected.
By default, the binding values are periodically checked and the scrollbar is
redrawn if a change is detected.
Note that this setting only influences redraw -- external changes to the
binding values are always safe.
.El
.Pp
The alternate constructor routines
.Fn AG_ScrollbarNew* 
create a new
.Nm
with
.Va value ,
.Va min ,
.Va max ,
and
.Va visible
bound to the variables of the specified integer or floating-point type.
.Pp
.Fn AG_ScrollbarSizeHint
specifies a default, preferred scrollbar length in pixels.
It is not necessary to invoke this function when using the
.Dv AG_SCROLLBAR_HFILL
or
.Dv AG_SCROLLBAR_VFILL
flag.
.Pp
The
.Fn AG_ScrollbarSetControlLength
function sets the length of the scrolling control (i.e., the center button)
to an explicit length in pixels.
.Fn AG_ScrollbarControlLength
returns the current length in pixels.
Note: It is almost always preferable to use the
.Dv AG_SCROLLBAR_AUTOSIZE
option rather than setting an explicit length.
.Pp
.Fn AG_ScrollbarSetWidth
configures the width (i.e., thickness) of the scrollbar.
.Fn AG_ScrollbarWidth
returns the effective width of a scrollbar in pixels.
.Pp
Note:
.Fn AG_ScrollbarControlLength
and
.Fn AG_ScrollbarWidth
should be considered safe to invoke only in widget
.Fn size_request ,
.Fn size_allocate
or
.Fn draw
context.
.Pp
The
.Fn AG_ScrollbarVisible
function returns 1 if the current range is such that the scrollbar is useful
to display, otherwise it returns 0.
.Pp
The
.Fn AG_ScrollbarSetDecFn
and
.Fn AG_ScrollbarSetIncFn
functions configure a callback routine that will be invoked when the user
presses the decrement (up/left) button and the increment (down/right) buttons.
A single
.Ft int
argument is passed to the callback (1 = pressed, 0 = released).
.Pp
.Fn AG_ScrollbarSetIntIncrement
and
.Fn AG_ScrollbarSetRealIncrement
define by how much the value is to be incremented/decremented as a result of
the user clicking on the scrollbar buttons or using the keyboard to move the
control.
The former is only meaningful with integer bindings, the latter is only
meaningful with floating-point bindings.
.Sh BINDINGS
The
.Nm
widget provides the following bindings:
.Pp
.Bl -tag -compact -width "double *{value,min,max,visible} "
.It Va float *{value,min,max,visible}
Single precision position/range
.It Va double *{value,min,max,visible}
Double precision position/range
.It Va long double *{value,min,max,visible}
Quad precision position/range
.It Va int *{value,min,max,visible}
Integer position/range
.It Va Uint *{value,min,max,visible}
Unsigned position/range
.It Va Uint8 *{value,min,max,visible}
Unsigned 8-bit position/range
.It Va Uint16 *{value,min,max,visible}
Unsigned 16-bit position/range
.It Va Uint32 *{value,min,max,visible}
Unsigned 32-bit position/range
.It Va Uint64 *{value,min,max,visible}
Unsigned 64-bit position/range
.It Va Sint8 *{value,min,max,visible}
Signed 8-bit position/range
.It Va Sint16 *{value,min,max,visible}
Signed 16-bit position/range
.It Va Sint32 *{value,min,max,visible}
Signed 32-bit position/range
.It Va Sint64 *{value,min,max,visible}
Signed 64-bit position/range
.El
.Pp
The scrollbar is positioned to represent
.Va value
inside of the range defined by
.Va min
and
.Va max .
In scrolling applications,
.Va visible
is typically used to conveniently represent the size of the display area
(internally, its value is simply subtracted from the range).
.Pp
Note that the
.Va min ,
.Va max
and
.Va visible
bindings must be of the same type as
.Va value .
The 64-bit types are only available if
.Dv AG_HAVE_64BIT
is set, and
.Ft long double
is only available if
.Dv AG_HAVE_LONG_DOUBLE
is set.
.Sh EVENTS
The
.Nm
widget generates the following events:
.Pp
.Bl -tag -compact -width 2n
.It Fn scrollbar-changed "void"
The scrollbar's value has changed.
.It Fn scrollbar-drag-begin "void"
User is starting to drag the scrollbar.
.It Fn scrollbar-drag-end "void"
User is done dragging the scrollbar.
.El
.Sh STRUCTURE DATA
For the
.Ft AG_Scrollbar
object:
.Pp
.Bl -tag -compact -width "int visible "
.It Ft int value
Default
.Sq value
binding.
.It Ft int min
Default
.Sq min
binding.
.It Ft int max
Default
.Sq max
binding.
.It Ft int visible
Default
.Sq visible
binding.
.It Ft int minOffs
Constant integer value to add to
.Sq min .
.It Ft int maxOffs
Constant integer value to add to
.Sq max .
.It Ft int visOffs
Constant integer value to add to
.Sq visible .
.It Ft int width
Scrollbar width in pixels.
.It Ft int wBar
Width of scrolling control button in pixels (ignored if
.Dv AG_SCROLLBAR_AUTOSIZE
is set).
.It Ft int hArrow
Size of "arrow" icons in pixels.
.El
.Sh SEE ALSO
.Xr AG_Intro 3 ,
.Xr AG_Scrollview 3 ,
.Xr AG_Widget 3 ,
.Xr AG_Window 3
.Sh HISTORY
The
.Nm
widget first appeared in Agar 1.0.
The autosize feature was introduced in Agar 1.4.0.
The constant offsets, EXCL option and 64-bit types
types were introduced in Agar 1.5.0.
