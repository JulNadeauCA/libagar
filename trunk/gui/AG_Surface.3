.\" Copyright (c) 2006-2015 Hypertriton, Inc. <http://hypertriton.com/>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd April 21, 2008
.Dt AG_SURFACE 3
.Os
.ds vT Agar API Reference
.ds oS Agar 1.3
.Sh NAME
.Nm AG_Surface
.Nd agar graphics surface
.Sh SYNOPSIS
.Bd -literal
#include <agar/core.h>
#include <agar/gui.h>
.Ed
.Sh DESCRIPTION
The
.Nm
structure describes a raster-based software graphics surface.
It supports all
.Em packed
pixel formats which encode pixels in 32-bit or less and allow components to be
retrieved by bitmasks.
.Em Indexed
(or
.Sq palletized )
pixel formats up to 8-bit per pixel are also supported.
.Pp
.Nm
supports colorkey and alpha-blending (with an alpha channel or per-surface
alpha setting).
Surfaces may define destination clipping rectangles for operations such
as
.Fn AG_SurfaceBlit .
.Sh INITIALIZATION
.nr nS 1
.Ft "AG_Surface *"
.Fn AG_SurfaceNew "enum ag_surface_type type" "Uint w" "Uint h" "const AG_PixelFormat *fmt" "Uint flags"
.Pp
.Ft "AG_Surface *"
.Fn AG_SurfaceEmpty "void"
.Pp
.Ft "AG_Surface *"
.Fn AG_SurfaceStdRGB "Uint w" "Uint h"
.Pp
.Ft "AG_Surface *"
.Fn AG_SurfaceStdRGBA "Uint w" "Uint h"
.Pp
.Ft "AG_Surface *"
.Fn AG_SurfaceIndexed "Uint w" "Uint h" "int bitsPerPixel" "Uint flags"
.Pp
.Ft "AG_Surface *"
.Fn AG_SurfaceRGB "Uint w" "Uint h" "int bitsPerPixel" "Uint flags" "Uint32 Rmask" "Uint32 Gmask" "Uint32 Bmask"
.Pp
.Ft "AG_Surface *"
.Fn AG_SurfaceRGBA "Uint w" "Uint h" "int bitsPerPixel" "Uint flags" "Uint32 Rmask" "Uint32 Gmask" "Uint32 Bmask" "Uint32 Amask"
.Pp
.Ft "AG_Surface *"
.Fn AG_SurfaceFromPixelsRGB "void *pixels" "Uint w" "Uint h" "int bitsPerPixel" "Uint32 Rmask" "Uint32 Gmask" "Uint32 Bmask"
.Pp
.Ft "AG_Surface *"
.Fn AG_SurfaceFromPixelsRGBA "void *pixels" "Uint w" "Uint h" "int bitsPerPixel" "Uint32 Rmask" "Uint32 Gmask" "Uint32 Bmask" "Uint32 Amask"
.Pp
.Ft "AG_Surface *"
.Fn AG_SurfaceStdGL "Uint w" "Uint h"
.Pp
.Ft "AG_Surface *"
.Fn AG_SurfaceFromFile "const char *path"
.Pp
.Ft "AG_Surface *"
.Fn AG_SurfaceFromPNG "const char *path"
.Pp
.Ft "AG_Surface *"
.Fn AG_SurfaceFromJPEG "const char *path"
.Pp
.Ft "AG_Surface *"
.Fn AG_SurfaceFromBMP "const char *path"
.Pp
.Ft "AG_Surface *"
.Fn AG_ReadSurface "AG_DataSource *ds"
.Pp
.Ft "AG_Surface *"
.Fn AG_ReadSurfaceFromPNG "AG_DataSource *ds"
.Pp
.Ft "AG_Surface *"
.Fn AG_ReadSurfaceFromJPEG "AG_DataSource *ds"
.Pp
.Ft "AG_Surface *"
.Fn AG_ReadSurfaceFromBMP "AG_DataSource *ds"
.Pp
.Ft "int"
.Fn AG_WriteSurface "AG_DataSource *ds" "AG_Surface *surface"
.Pp
.Ft "AG_Surface *"
.Fn AG_SurfaceFromSDL "SDL_Surface *surface"
.Pp
.Ft "int"
.Fn AG_SurfaceSetPalette "AG_Surface *su" "AG_Color *colors" "Uint offs" "Uint count"
.Pp
.Ft "int"
.Fn AG_SurfaceResize "AG_Surface *surface" "Uint w" "Uint h"
.Pp
.Ft void
.Fn AG_SurfaceFree "AG_Surface *surface"
.Pp
.nr nS 0
The
.Fn AG_SurfaceNew
function allocates and initializes a new
.Nm
of the specified dimensions
.Fa w ,
.Fa h
(given in pixels).
.Fa fmt
is a pointer to a
.Ft AG_PixelFormat
structure describing the way pixels are to be encoded in memory (see
.Sx PIXEL FORMATS
section below).
The pixel data is left uninitialized.
Acceptable values for
.Fa type
include:
.Pp
.Bl -tag -compact -width "AG_SURFACE_INDEXED "
.It AG_SURFACE_PACKED
Packed-pixel format (e.g., RGBA)
.It AG_SURFACE_INDEXED
Color-index format (per-surface palette)
.El
.Pp
Acceptable
.Fa flags
include:
.Bl -tag -width "AG_SURFACE_GLTEXTURE "
.It AG_SRCCOLORKEY
Enable colorkeying.
In
.Fn AG_SurfaceBlit ,
this option inhibits the copy of all pixels matching the source surface's
colorkey setting.
.Fn AG_SurfaceSetColorKey
controls this flag.
.It AG_SRCALPHA
Enable alpha blending.
In
.Fn AG_SurfaceBlit ,
this option enables blending of pixels in the source and destination surfaces
based on the alpha component of the source pixel.
.Fn AG_SetAlpha
controls this flag.
.It AG_SURFACE_GLTEXTURE
Surface is suitable to be uploaded directly as an OpenGL texture without
format conversion.
This flag is recognized by
.Xr AG_GL_UploadTexture 3
and
.Xr AG_GL_UpdateTexture 3 .
.El
.Pp
The
.Fn AG_SurfaceEmpty
function creates a new 0x0 pixel surface.
Blitting such an empty surface is a no-op.
.Pp
.Fn AG_SurfaceStdRGB
and
.Fn AG_SurfaceStdRGBA
create a surface in the recommended
.Sq standard
format, as determined by Agar on initialization time.
Usually, this is a packed-pixel format with an alpha component.
.Pp
The
.Fn AG_SurfaceIndexed
function creates a new surface of
.Fa w
by
.Fa h
pixels using indexed pixel format.
This involves the allocation of a palette.
The size of this palette is determined by
.Fa bitsPerPixel.
All entries in the palette are initialized to black, except in the 2-bpp
case, where color 0 is initialized to white and color 1 is initialized to
black.
.Pp
The
.Fn AG_SurfaceRGB
function creates a new surface of
.Fa w
by
.Fa h
pixels using the specified packed-pixel format.
In memory, pixels are encoded as contiguous blocks of
.Fa bitsPerPixel
bits, and the bitmasks specified in
.Fa [RGB]mask
are used to retrieve the individual red, green and blue components.
The
.Fn AG_SurfaceRGBA
variant adds an alpha-channel component and implicitely sets the
.Dv AG_SRCALPHA
flag (see
.Fn AG_SurfaceBlit 3 ) .
.Pp
.Fn AG_SurfaceFromPixelsRGB
and
.Fn AG_SurfaceFromPixelsRGBA
create a new surface from existing pixel data in the specified format.
The
.Fn AG_SurfaceFromPixelsRGBA
function also sets the
.Dv AG_SRCALPHA
flag.
.Pp
The
.Fn AG_SurfaceStdGL
function creates a surface in an optimal format for OpenGL textures
(packed, 32 bits per pixel with native RGB masks).
It also sets the
.Dv AG_SURFACE_GLTEXTURE
flag on the new surface.
The function does not use OpenGL itself and is available regardless
of whether Agar was compiled with OpenGL support.
.Pp
The
.Fn AG_SurfaceFromFile
routine loads the contents of an image file into a newly-allocated surface.
The image format is auto-detected.
The
.Fn AG_SurfaceFrom{BMP,PNG,JPEG} 
variants will load an image only in the specified format.
.Pp
The
.Fn AG_ReadSurface
function reads an uncompressed surface (in native
.Nm
encoding).
The
.Fn AG_ReadSurfaceFrom{BMP,PNG,JPEG}
variants will load an image only in the specified format.
.Pp
The
.Fn AG_WriteSurface
function saves the surface to the specified data source in native
.Nm
encoding.
.Pp
The
.Fn AG_SurfaceFromSDL
function converts a
.Xr SDL_Surface 3
to a newly-allocated
.Nm
structure.
This function is available only if Agar was compiled with SDL support.
.Pp
The
.Fn AG_SurfaceSetPalette
function copies
.Fa count
color entries from the
.Fa colors
array, to
.Fa count
slots (starting at
.Fa offs )
in the palette of indexed surface
.Fa su .
.Pp
.Fn AG_SurfaceResize
attempts to resize a surface to the specified dimensions.
If insufficient memory is available, the function fails returning -1.
When size is increased, the new pixels are left in an uninitialized state.
The surface's current clipping rectangle is overwritten by a rectangle
covering the entire surface.
.Pp
The
.Fn AG_SurfaceFree
function releases all resources allocated by the given surface.
.Sh SURFACE OPERATIONS
.nr nS 1
.Ft void
.Fn AG_FillRect "AG_Surface *s" "const AG_Rect *r" "AG_Color c"
.Pp
.Ft void
.Fn AG_SurfaceBlit "const AG_Surface *src" "const AG_Rect *rSrc" "AG_Surface *dst" "int x" "int y"
.Pp
.Ft void
.Fn AG_SetClipRect "AG_Surface *s" "const AG_Rect *r"
.Pp
.Ft void
.Fn AG_GetClipRect "const AG_Surface *s" "AG_Rect *r"
.Pp
.Ft void
.Fn AG_SurfaceCopy "AG_Surface *dest" "const AG_Surface *src"
.Pp
.Ft "AG_Surface *"
.Fn AG_SurfaceDup "const AG_Surface *src"
.Pp
.Ft "AG_Surface *"
.Fn AG_SurfaceConvert "const AG_Surface *src" "const AG_PixelFormat *newFmt"
.Pp
.Ft "int"
.Fn AG_ScaleSurface "const AG_Surface *src" "Uint16 width" "Uint16 height" "AG_Surface **dst"
.Pp
.Ft "void"
.Fn AG_SetAlphaPixels "AG_Surface *surface" "Uint8 alpha"
.Pp
.Ft "int"
.Fn AG_SurfaceExportFile "const AG_Surface *su" "char *path"
.Pp
.Ft "int"
.Fn AG_SurfaceExportPNG "const AG_Surface *su" "char *path" "Uint flags"
.Pp
.Ft "int"
.Fn AG_SurfaceExportJPEG "const AG_Surface *su" "char *path" "Uint quality" "Uint flags"
.Pp
.Ft "int"
.Fn AG_SurfaceExportBMP "const AG_Surface *su" "char *path"
.Pp
.Ft "SDL_Surface *"
.Fn AG_SurfaceExportSDL "const AG_Surface *su"
.nr nS 0
.Pp
The
.Fn AG_FillRect
routine fills the rectangle
.Fa r
with the specified color.
If the target surface has an alpha channel, the alpha component is copied as-is.
If the rectangle lies outside of the surface's clipping rectangle, it is
clipped accordingly.
.Pp
.Fn AG_SurfaceBlit
copies the contents of a surface (or a region within a surface if
.Fa rSrc
is non-NULL), to a given target position
.Fa x ,
.Fa y
within surface
.Fa dst .
The clipping rectangle of
.Fa dst
(see below) applies.
.Pp
.Fn AG_SetClipRect
sets the clipping rectangle of the surface.
The clipping rectangle will apply to surface operations such as
.Fn AG_SurfaceBlit ,
as well as pixel manipulation macros which perform clipping tests (
.Fn AG_PUT_PIXEL2_CLIPPED ,
.Fn AG_BLEND_RGBA2_CLIPPED ) .
.Fn AG_GetClipRect
returns the current clipping rectangle of a surface.
If the source or destination rectangles lie outside of the surface area,
they are clipped accordingly.
.Pp
The
.Fn AG_SurfaceCopy
function copies the contents of surface
.Fa src
onto another, existing surface
.Fa dst .
The raw pixel data is copied, so alpha and colorkey parameters are ignored.
Clipping is done if the surfaces have different sizes.
.Pp
.Fn AG_SurfaceDup
returns a newly allocated surface containing a copy of
.Fa src .
If there is insufficient memory,
.Fn AG_SurfaceDup
will fail returning NULL.
The source surface must be locked (src->lock).
.Pp
.Fn AG_SurfaceConvert
is similar to
.Fn AG_SurfaceDup ,
except that the surface is converted to the specified pixel format
.Fa newFmt .
.Pp
.Fn AG_ScaleSurface
returns a copy of surface
.Fa src
scaled to the given size in pixels into
.Fa dst ,
which must be either NULL or a pointer to an existing surface.
If
.Fa dst
is NULL, a new surface is allocated.
If there is insufficient memory for the rescaled surface,
.Fn AG_ScaleSurface
will fail returning -1.
.Pp
The
.Fn AG_SetAlphaPixels
function changes the alpha component of all pixels with a non-zero alpha
component.
.Pp
The
.Fn AG_SurfaceExportFile
routine exports a surface to a specified image file.
The image format will be determined by the filename extension in
.Fa path .
.Pp
.Fn AG_SurfaceExportPNG
exports a surface to a PNG image file, preserving any transparency data.
Available
.Fa flags
options include:
.Bl -tag -width "AG_EXPORT_PNG_ADAM7 "
.It AG_EXPORT_PNG_ADAM7
Enable Adam7 interlacing.
.El
.Pp
.Fn AG_SurfaceExportJPEG
exports the surface to a file in JPEG format.
If the surface has an alpha-channel, it is ignored.
.Fa quality
is given in percent (100% = best).
Available
.Fa flags
options include:
.Pp
.Bl -tag -compact -width "AG_EXPORT_JPEG_JDCT_ISLOW "
.It AG_EXPORT_JPEG_JDCT_ISLOW
Slow, but accurate integer DCT method.
.It AG_EXPORT_JPEG_JDCT_IFAST
Fast, but less accurate integer DCT method.
.It AG_EXPORT_JPEG_JDCT_FLOAT
Floating-point DCT method.
.El
.Pp
.Fn AG_SurfaceExportBMP
exports a BMP image file from the contents of a surface.
If the surface has an alpha-channel, it is ignored.
.Pp
.Fn AG_SurfaceExportSDL
exports an Agar surface to a newly allocated
.Xr SDL_Surface 3 .
This function is available only if Agar was compiled with SDL support.
.Sh PIXEL FORMATS
.nr nS 1
.Ft "AG_PixelFormat *"
.Fn AG_PixelFormatRGB "Uint8 bitsPerPixel" "Uint32 Rmask" "Uint32 Gmask" "Uint32 Bmask"
.Pp
.Ft "AG_PixelFormat *"
.Fn AG_PixelFormatRGBA "Uint8 bitsPerPixel" "Uint32 Rmask" "Uint32 Gmask" "Uint32 Bmask" "Uint32 Amask"
.Pp
.Ft "AG_PixelFormat *"
.Fn AG_PixelFormatIndexed "Uint8 bitsPerPixel"
.Pp
.Ft "int"
.Fn AG_PixelFormatCompare "const AG_PixelFormat *pf1" "const AG_PixelFormat *pf2"
.Pp
.Ft "void"
.Fn AG_PixelFormatFree "AG_PixelFormat *format"
.Pp
.nr nS 0
.\" MANLINK(AG_PixelFormat)
The
.Ft AG_PixelFormat
structure describes a general indexed or packed-pixel surface
format.
It is defined as follows:
.Bd -literal
typedef struct ag_pixel_format {
	AG_Palette *palette;                 /* For indexed formats */

	Uint8   BitsPerPixel;                /* Depth (bits/pixel) */
	Uint8   BytesPerPixel;               /* Depth (bytes/pixel) */
	Uint8   Rloss, Gloss, Bloss, Aloss;
	Uint8   Rshift, Gshift, Bshift, Ashift;
	Uint32  Rmask, Gmask, Bmask, Amask;
	Uint32  colorkey;                    /* Color key pixel */
	Uint8   alpha;                       /* Per-surface alpha value */
} AG_PixelFormat;
.Ed
.Pp
The
.Fn AG_PixelFormatRGB
and
.Fn AG_PixelFormatRGBA
functions allocate a new structure describing packed-pixel encoding with RGB
or RGBA components.
The
.Fa [RGBA]mask
arguments specify the bitmasks used to retrieve the individual components from
memory.
.Pp
.Fn AG_PixelFormatIndexed
creates a new pixel-format structure for indexed pixel encoding.
This involves allocating a new palette.
The size of this palette is determined by
.Fa bitsPerPixel ,
and all palette entries are initialized to black.
If 2 bpp is given, the first entry is initialized to white (255,255,255) and
the second entry to black (0,0,0).
.Pp
If no memory is available,
.Fn AG_PixelFormat*
fail returning NULL.
.Pp
.Fn AG_PixelFormatCompare
compares two pixel formats.
The function returns 0 if the two formats are identical, nonzero if the
two formats differ.
When comparing color-index formats, the two palettes are compared as well.
.Pp
.Fn AG_PixelFormatFree
releases all resources allocated by an
.Ft AG_PixelFormat
structure.
.Sh PACKED-PIXEL SURFACE OPERATIONS
The following routines operate on surfaces in packed-pixel format exclusively.
.Pp
.nr nS 1
.Ft "Uint32"
.Fn AG_GET_PIXEL "const AG_Surface *s" "const Uint8 *p"
.Pp
.Ft "Uint32"
.Fn AG_GET_PIXEL2 "const AG_Surface *s" "int x" "int y"
.Pp
.Ft "void"
.Fn AG_PUT_PIXEL "AG_Surface *s" "Uint8 *p" "Uint32 c"
.Pp
.Ft "void"
.Fn AG_PUT_PIXEL2 "AG_Surface *s" "int x" "int y" "Uint32 c"
.Pp
.Ft "void"
.Fn AG_BLEND_RGBA "AG_Surface *s" "Uint8 *p" "Uint8 r" "Uint8 g" "Uint8 b" "Uint8 a" "enum ag_blend_func func"
.Pp
.Ft "void"
.Fn AG_BLEND_RGBA2 "AG_Surface *s" "int x" "int y" "Uint8 r" "Uint8 g" "Uint8 b" "Uint8 a" "enum ag_blend_func func"
.Pp
.Ft "void"
.Fn AG_SurfaceBlendPixel "AG_Surface *s" "Uint8 *p" "AG_Color C" "AG_BlendFn fn"
.Pp
.Ft "void"
.Fn AG_PUT_PIXEL2_CLIPPED "AG_Surface *s" "int x" "int y" "Uint32 c"
.Pp
.Ft "void"
.Fn AG_BLEND_RGBA2_CLIPPED "AG_Surface *s" "int x" "int y" "Uint8 r" "Uint8 g" "Uint8 b" "Uint8 a" "enum ag_blend_func func"
.Pp
.Ft void
.Fn AG_GetPixelRGB "Uint32 pixel" "const AG_PixelFormat *pf" "Uint8 *r" "Uint8 *g" "Uint8 *b"
.Pp
.Ft void
.Fn AG_GetPixelRGBA "Uint32 pixel" "const AG_PixelFormat *pf" "Uint8 *r" "Uint8 *g" "Uint8 *b" "Uint8 *a"
.Pp
.Ft Uint32
.Fn AG_MapPixelRGB "const AG_PixelFormat *pf" "Uint8 r" "Uint8 g" "Uing8 b"
.Pp
.Ft Uint32
.Fn AG_MapPixelRGBA "const AG_PixelFormat *pf" "Uint8 r" "Uint8 g" "Uing8 b" "Uint8 a"
.Pp
.Ft AG_Color
.Fn AG_GetColorRGB "Uint32 pixel" "const AG_PixelFormat *pf"
.Pp
.Ft AG_Color
.Fn AG_GetColorRGBA "Uint32 pixel" "const AG_PixelFormat *pf"
.Pp
.Ft Uint32
.Fn AG_MapColorRGB "const AG_PixelFormat *pf" "AG_Color color"
.Pp
.Ft Uint32
.Fn AG_MapColorRGBA "const AG_PixelFormat *pf" "AG_Color color"
.Pp
.nr nS 0
The
.Fn AG_GET_PIXEL
macro returns a packed 32-bit representation of the pixel at the given
location
.Fa p
in the surface
.Fa s .
.Fn AG_GET_PIXEL2
variant locates the pixel in the surface using x,y coordinates.
.Pp
The
.Fn AG_PUT_PIXEL
and
.Fn AG_PUT_PIXEL2
write the color
.Fa c
to the pixel at the given location.
.Pp
The
.Fn AG_BLEND_RGBA
and
.Fn AG_BLEND_RGBA2
routines perform alpha-blending of the destination pixel against the
specified color, where
.Fa func
specifies the blending formula (see
.Xr AG_BlendFn 3 ) .
The
.Fn AG_SurfaceBlendPixel
function accepts an
.Xr AG_Color 3
argument and performs no clipping tests.
.Pp
The
.Fn AG_PUT_PIXEL2_CLIPPED
and
.Fn AG_BLEND_RGBA2_CLIPPED
variants of these macros first tests the given coordinates against the
clipping rectangle of the surface (see
.Xr AG_SetClipRect 3 ) .
If the pixel lies outside of the rectangle, the operation is a no-op.
.Pp
The
.Fn AG_GetPixelRGB
and
.Fn AG_GetPixelRGBA
functions extract the RGB / RGBA components of a pixel value
.Fa pixel ,
in pixel format
.Fa pf .
The
.Fn AG_MapPixelRGB
and
.Fn AG_MapPixelRGBA
functions perform the inverse operation, returning the pixel value (in pixel
format
.Fa pf )
for the specified RGB / RGBA component values.
.Pp
The
.Fn AG_GetColor*
and
.Fn AG_MapColor*
functions are equivalent to
.Fn AG_GetPixel*
and
.Fn AG_MapPixel*
except that they accept
.Xr AG_Color 3
arguments instead of separate component values.
.Pp
Note that the preceding routines are only for use against surfaces in
packed RGB/RGBA pixel formats.
Passing a color-index format to
.Fn AG_GetPixel* ,
.Fn AG_GetColor* ,
.Fn AG_MapPixel*
or
.Fn AG_MapColor*
is an illegal operation.
.Sh STRUCTURE DATA
For the
.Ft AG_Surface
structure:
.Bl -tag -width "AG_PixelFormat *format "
.It Ft Uint flags
Current surface flags (read-only; see
.Sx INITIALIZATION
section).
.It Ft AG_PixelFormat *format
The surface's pixel encoding (read-only; see
.Sx PIXEL FORMATS
section).
.It Ft int w, h
Dimensions of the surface in pixels (read-only).
.It Ft void *pixels
Pointer to raw pixel data (4-byte aligned)
.It Ft Uint pitch
Size of a scanline in bytes.
.It Ft Uint padding
Scanline padding in bytes.
.El
.Sh SEE ALSO
.Xr AG_Anim 3 ,
.Xr AG_Intro 3 ,
.Xr AG_Rect 3
.Sh HISTORY
The
.Nm
structure first appeared in Agar 1.3.3.
It is modeled after the
.Ft SDL_Surface
of
.Lk http://libsdl.org/ SDL .
