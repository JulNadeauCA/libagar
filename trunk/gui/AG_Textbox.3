.\"	$Csoft: textbox.3,v 1.28 2005/04/25 02:19:52 vedge Exp $
.\"
.\" Copyright (c) 2002, 2003, 2004, 2005 CubeSoft Communications, Inc.
.\" <http://www.csoft.org>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd August 21, 2002
.Dt AG_TEXTBOX 3
.Os
.ds vT Agar API Reference
.ds oS Agar 1.0
.Sh NAME
.Nm AG_Textbox
.Nd agar text box widget
.Sh SYNOPSIS
.Bd -literal
#include <agar/gui.h>
.Ed
.Sh DESCRIPTION
The
.Nm
widget binds to a NUL-terminated string and allows the user to edit its
contents.
The string may contain UTF-8 encoded characters.
.Sh INHERITANCE HIERARCHY
.Xr AG_Object 3 ->
.Xr AG_Widget 3 ->
.Nm .
.Sh INITIALIZATION
.nr nS 1
.Ft "AG_Textbox *"
.Fn AG_TextboxNew "void *parent" "Uint flags" "const char *label"
.Pp
.Ft void
.Fn AG_TextboxInit "AG_Textbox *textbox" "Uint flags" "const char *label"
.Pp
.Ft void
.Fn AG_TextboxSetWriteable "AG_Textbox *textbox" "int writeable"
.Pp
.Ft void
.Fn AG_TextboxSetPassword "AG_Textbox *textbox" "int password"
.Pp
.Ft void
.Fn AG_TextboxPrescale "AG_Textbox *textbox" "const char *text"
.Pp
.nr nS 0
The
.Fn AG_TextboxNew
function allocates, initializes, and attaches a
.Nm
widget.
The
.Fn AG_TextboxInit
function initializes a
.Nm
widget with the label text set to
.Fa label .
.Pp
The
.Fn AG_TextboxSetWriteable
function controls the writeability of the string.
.Pp
.Fn AG_TextboxSetPassword
controls password (no print) input.
.Pp
.Fn AG_TextboxPrescale
requests that the initial geometry of
.Fa textbox
is to be sufficient to display the string
.Fa text
in its entirety.
.Sh TEXT MANIPULATION
.nr nS 1
.Ft void
.Fn AG_TextboxPrintf "AG_Textbox *textbox" "const char *fmt" "..."
.Pp
.Ft "char *"
.Fn AG_TextboxDupString "AG_Textbox *textbox"
.Pp
.Ft "size_t"
.Fn AG_TextboxCopyString "AG_Textbox *textbox" "char *dst" "size_t dst_size"
.Pp
.Ft int
.Fn AG_TextboxInt "AG_Textbox *textbox"
.Pp
.nr nS 0
The
.Fn AG_TextboxPrintf
function uses
.Xr vsnprintf 3
to overwrite the contents of the text buffer.
If the
.Fa fmt
argument is NULL, a NUL string is assigned instead.
.Pp
The
.Fn AG_TextboxDupString
function returns a copy of the text buffer.
.Pp
The
.Fn AG_TextboxCopyString
function copies up to
.Fa dst_size
- 1 bytes from the text buffer
.Fa dst ,
NUL-terminating the result and returning the number of bytes that would
have been copied if
.Fa dst_size
was unlimited.
.Pp
.Fn AG_TextboxInt
tries to convert the string to an integer value.
.Sh BINDINGS
The
.Nm
widget provides the following bindings:
.Pp
.Bl -tag -compact -width "char *string "
.It Va char *string
Fixed-size buffer of UTF-8 text.
.El
.Sh EVENTS
The
.Nm
widget reacts to the following events:
.Pp
.Bl -tag -compact -width 25n
.It window-mousebuttondown
Move focus to the widget.
Position the cursor at a specific position.
.It window-mousemotion
Move the cursor and scroll.
.It window-keydown
Perform the action that the current keymap associates with this key.
.El
.Pp
The
.Nm
widget generates the following events:
.Pp
.Bl -tag -width 2n
.It Fn textbox-return "void"
Return was pressed.
.It Fn textbox-prechg "void"
The string is about to be modified.
.It Fn textbox-postchg "void"
The string was just modified.
.El
.Sh EXAMPLES
The following code fragment binds a
.Nm
to a string contained in a fixed-size buffer:
.Pp
.Bd -literal -offset indent
char name[32];
AG_Textbox *tb;

tb = AG_TextboxNew(parent, 0, "Name: ");
AG_WidgetBind(tb, "string", AG_WIDGET_STRING, name, sizeof(name));
.Ed
.Pp
As is the case with all widgets, a default binding (residing in the widget
structure) is provided.
The following code uses
.Fn AG_TextboxPrintf
to set the value of the default binding, and
.Fn AG_TextboxDupString
to retrieve a pointer to it:
.Pp
.Bd -literal -offset indent
AG_Textbox *tb;
char *value_ptr;

tb = AG_TextboxNew(parent, 0, "Value: ");
AG_TextboxPrintf(tb, "Foo");
value_ptr = AG_TextboxDupString(tb);
.Ed
.Pp
Note that the default binding is limited to
.Dv AG_TEXTBOX_STRING_MAX
bytes in size.
.Sh SEE ALSO
.Xr AG_Intro 3 ,
.Xr AG_Text 3 ,
.Xr AG_Tlist 3 ,
.Xr AG_Widget 3 ,
.Xr AG_Window 3
.Sh HISTORY
The
.Nm
widget first appeared in Agar 1.0.
.Sh BUGS
.Fn AG_TextboxInt
will be obsoleted by integral type bindings.
.Pp
UTF-8 string boundary check is not space efficient.
