.\"	$Csoft: tlist.3,v 1.47 2005/05/24 08:15:11 vedge Exp $
.\"
.\" Copyright (c) 2002, 2003, 2004, 2005 CubeSoft Communications, Inc.
.\" <http://www.csoft.org>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd August 20, 2002
.Dt TLIST 3
.Os
.ds vT Agar API Reference
.ds oS Agar 1.0
.Sh NAME
.Nm AG_Tlist
.Nd agar tree/list widget
.Sh SYNOPSIS
.Bd -literal
#include <agar/gui.h>
.Ed
.Sh DESCRIPTION
The
.Nm
widget implements a dynamic, scrollable list of items.
Individual items are typically associated with user-supplied pointers.
Single or multiple selections of items are possible.
.Sh INHERITANCE HIERARCHY
.Xr AG_Object 3 ->
.Xr AG_Widget 3 ->
.Nm .
.Sh INITIALIZATION
.nr nS 1
.Ft "AG_Tlist *"
.Fn AG_TlistNew "AG_Widget *parent" "int flags"
.Pp
.Ft void
.Fn AG_TlistInit "AG_Tlist *tlist" "int flags"
.Pp
.Ft void
.Fn AG_TlistSetItemHeight "AG_Tlist *tl" "int item_height"
.Pp
.Ft void
.Fn AG_TlistSetIcon "AG_Tlist *tl, AG_TlistItem *item" "SDL_Surface *icon"
.Pp
.Ft void
.Fn AG_TlistPrescale "AG_Tlist *tl" "const char *text" "int nitems"
.Pp
.Ft void
.Fn AG_TlistSetDblClickFn "AG_Tlist *tl" "AG_EventFn fn" "const char *fn_args" "..."
.Pp
.nr nS 0
The
.Fn AG_TlistNew
function allocates, initializes, and attaches a
.Nm
widget.
.Fn AG_TlistInit
initializes a
.Nm
widget.
The
.Fa flags
may include:
.Pp
.Bd -literal
#define AG_TLIST_MULTI		0x01  /* Ctrl/shift multiple selections */
#define AG_TLIST_MULTITOGGLE	0x02  /* Multiple toggle selections */
#define AG_TLIST_POLL		0x04  /* Generate tlist-poll events */
#define AG_TLIST_TREE		0x10  /* Arrange the items in a tree */
.Ed
.Pp
If the
.Dv AG_TLIST_MULTI
flag is set, selecting an item while holding the
.Dv KMOD_CTRL
key will not cause other currently selected item
to be deselected.
If the flag
.Dv AG_TLIST_MULTITOGGLE
is set in addition to
.Dv AG_TLIST_MULTI ,
this behavior is achieved without having to hold
.Dv KMOD_CTRL .
.Pp
The
.Dv AG_TLIST_POLL
flag causes the posting of a
.Sq tlist-poll
event every time the widget is redrawn.
Typically, the
.Sq tlist-poll
event handler clears the list with
.Fn AG_TlistClear ,
inserts the items with
.Fn AG_TlistAdd
and restores the previous selections using
.Fn AG_TlistRestore .
.Pp
The
.Dv AG_TLIST_TREE
option indicates that a tree is to be displayed.
.Pp
The
.Fn AG_TlistSetItemHeight
function sets the height of all items to
.Fa item_height
pixels .
.Pp
The
.Fn AG_TlistSetIcon
function updates the icon shown with
.Fa item ,
scaled to
.Fa w
by
.Fa h
pixels.
.Pp
.Fn AG_TlistPrescale
requests sufficient height to display
.Fa nitems
items at once, and sufficient width to display an item containing
.Fa text .
.Pp
.Fn AG_TlistSetDblClickFn
arranges for the given callback
.Fa fn
to be invoked with the given arguments (as well as the item pointer) when the
user double clicks on an item.
.Sh MANIPULATING ITEMS
.nr nS 1
.Ft "AG_TlistItem *"
.Fn AG_TlistAdd "AG_Tlist *tl" "SDL_Surface *iconsrc" "const char *format" "..."
.Pp
.Ft "AG_TlistItem *"
.Fn AG_TlistAddPtr "AG_Tlist *tlist, SDL_Surface *iconsrc" "const char *text" "const void *p1"
.Pp
.Fn AG_TlistAddPtrHead "AG_Tlist *tlist, SDL_Surface *iconsrc" "const char *text" "const void *p1"
.Pp
.Ft "void"
.Fn AG_TlistDel "AG_Tlist *tlist" "AG_TlistItem *item"
.Pp
.Ft "void"
.Fn AG_TlistClear "AG_Tlist *tlist"
.Pp
.Ft "void"
.Fn AG_TlistRestore "AG_Tlist *tlist"
.Pp
.Ft "void"
.Fn AG_TlistSelect "AG_Tlist *tlist" "AG_TlistItem *item"
.Pp
.Ft "void"
.Fn AG_TlistSelectAll "AG_Tlist *tlist"
.Pp
.Ft "void"
.Fn AG_TlistDeselect "AG_Tlist *tlist" "AG_TlistItem *item"
.Pp
.Ft "void"
.Fn AG_TlistDeselectAll "AG_Tlist *tlist"
.Pp
.Ft "AG_TlistItem *"
.Fn AG_TlistSelectPtr "AG_Tlist *tlist" "void *ptr"
.Pp
.Ft "AG_TlistItem *"
.Fn AG_TlistSelectText "AG_Tlist *tlist" "const char *text"
.Pp
.Ft "AG_TlistItem *"
.Fn AG_TlistFindByIndex "AG_Tlist *tlist" "int index"
.Pp
.Ft "AG_TlistItem *"
.Fn AG_TlistSelectedItem "AG_Tlist *tlist"
.Pp
.Ft "int"
.Fn AG_TlistFindPtr "AG_Tlist *tlist" "void **p"
.Pp
.Ft "AG_TlistItem *"
.Fn AG_TlistFindText "AG_Tlist *tlist" "const char *text"
.Pp
.Ft "AG_TlistItem *"
.Fn AG_TlistFirstItem "AG_Tlist *tlist"
.Pp
.Ft "AG_TlistItem *"
.Fn AG_TlistLastItem "AG_Tlist *tlist"
.Pp
.nr nS 0
The
.Fn AG_TlistAdd
function (and its alternate interface
.Fn AG_TlistAddPtr )
are used to insert a new item in the list.
.Pp
The
.Fa text
argument defines the text label to display.
Unless it is NULL,
.Fa icon
defines the icon to display at the left of the label.
.Pp
The
.Fa p1
argument is a user-defined pointer associated with the item.
.Pp
The
.Fn AG_TlistAddPtrHead
varient inserts the item at the head of the list instead of the tail.
.Pp
The
.Fn AG_TlistDel
function detaches and frees
.Fa item
from its parent
.Nm tlist .
.Pp
The
.Fn AG_TlistClear
function removes all items attached to
.Fa tlist ,
but remembers the selected items.
.Fn AG_TlistRestore
compares each item against the previous selections and restores
the
.Va selected
flag accordingly.
.Pp
The
.Fn AG_TlistSelect
and
.Fn AG_TlistDeselect
functions manipulate the selected flag on
.Fa item .
Unless the
.Dv AG_TLIST_MULTI
flag is set,
.Fn AG_TlistSelect
clears the selection flag on all other items.
The
.Fn AG_TlistSelectAll
and
.Fn AG_TlistDeselectAll
functions sets/unsets the selection on all items attached to
.Fa tlist .
.Pp
The
.Fn AG_TlistSelectPtr
function selects and returns the first item with a user pointer value
matching
.Fa ptr .
Similarly,
.Fn AG_TlistSelectText
selects and returns the first item with a text field equal to
.Fa text .
Both of these functions invoke
.Sq tlist-poll
if the
.Dv AG_TLIST_POLL
option is set.
.Pp
The
.Fn AG_TlistFindByIndex
function returns the item at
.Fa index ,
or NULL if there is no such item.
The
.Fn AG_TlistSelectedItem
function returns the first selected item, or
.Dv NULL
if there are none.
.Fn AG_TlistFindPtr
is a variant that copies the user pointer associated with the first
selected item into
.Fa p ,
returning 0 on success or -1 if there is no item selected.
The
.Fn AG_TlistFindText
function searches
.Fa tlist
for an item containing the
.Fa text
string and returns NULL if there is no such item.
.Pp
The
.Fn AG_TlistFirstItem
and
.Fn AG_TlistLastItem
functions return the first and last items on the list.
.Pp
The caller must ensure that the
.Nm
is locked prior to invoking
.Fn AG_TlistFindByIndex ,
.Fn AG_TlistSelectedItem ,
.Fn AG_TlistFindPtr ,
.Fn AG_TlistFindText ,
.Fn AG_TlistFirstItem
or
.Fn AG_TlistLastItem .
.Sh POPUP MENUS
.nr nS 0
.Ft "AG_MenuItem *"
.Fn AG_TlistSetPopupFn "AG_Tlist *tlist" "AG_EventFn fn" "const char *fn_args" "..."
.Pp
.Ft "AG_MenuItem *"
.Fn AG_TlistSetPopup "AG_Tlist *tlist" "const char *category"
.Pp
.nr nS 1
The
.Fn AG_TlistSetPopupFn
function arranges for the given callback
.Fa fn
to be invoked with the given arguments whenever the user right-clicks on an
item on the list.
A pointer to the selected item is passed as the last argument to this function.
Typically, the function will use
.Xr AG_PopupNew 3
to display a popup menu.
.Pp
The
.Fn AG_TlistSetPopup
function creates a popup menu that will be displayed when the user right-clicks
on any item that matches the given category string.
.Sh EVENTS
The
.Nm
widget reacts to the following events:
.Pp
.Bl -tag -compact -width 25n
.It window-mousemotion
Scroll if a mouse button is pressed.
.It window-mousebuttondown
Left button selects an item.
Right button opens popup menu if any.
.It window-keydown
Up/down changes a single selection.
Pageup/pagedown scrolls 4 items.
.El
.Pp
The
.Nm
widget generates the following events:
.Pp
.Bl -tag -compact -width 2n
.It Fn tlist-changed "AG_TlistItem *item" "int state"
.Fa item
was selected or unselected.
.It Fn tlist-selected "AG_TlistItem *item"
.Fa item
was selected.
.It Fn tlist-dblclick "AG_TlistItem *item"
The user just double-clicked
.Fa item .
Binding to this event is equivalent to using
.Fn AG_TlistSetDblClickFn .
.It Fn tlist-poll "void"
The
.Dv AG_TLIST_POLL
flag is set and the widget is about to be drawn or an event is being
processed.
.El
.Sh BINDINGS
The
.Nm
widget provides the following bindings:
.Pp
.Bl -tag -compact -width "void *selected "
.It Ft "void *selected"
The
.Va p1
(user pointer) value of the selected item, or NULL if there is no selection.
The value of this binding is undefined if the
.Dv AG_TLIST_MULTI
or
.Dv AG_TLIST_MULTITOGGLE
flags are in use.
.El
.Sh TROUBLETONS
A horizontal scrollbar should display when there are labels exceeding the
.Nm
width.
.Pp
Polled mode handling is inefficient since selections must be saved and restored
each polling cycle.
.Pp
.Dv AG_TLIST_TREE
is a cheap and bletcherous hack.
.Pp
The
.Fn AG_TlistAddPtr
function should probably be renamed
.Fn AG_TlistAdd
and take a
.Xr printf 3
format string.
.Pp
It is possible to generate a double click by quickly clicking on two different
items; comparing with the previously clicked item is not an option since it
may have been destroyed.
.Sh EFFICIENCY
Item insertion and removal are O(1) operations.
For n items, lookup and mouse selection handling is O(n), which becomes
significant when viewing the bottom of lists with large n.
For polled lists where the item list is rebuilt very frequently, it would
be much more efficient to store the items in an array, at the cost of O(n)
removal.
This would also allow O(1) handling of mouse selections since all items have
the same height.
The allocation of items also incur significant overhead with polled lists.
.Pp
The
.Xr AG_Table 3
widget is a more efficient alternative to
.Nm
in many situations, but it does not support trees.
.Sh SEE ALSO
.Xr AG_Intro 3 ,
.Xr AG_Widget 3 ,
.Xr AG_Window 3
.Sh HISTORY
The
.Nm
widget first appeared in Agar 1.0.
