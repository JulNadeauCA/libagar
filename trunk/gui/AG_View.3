.\" Copyright (c) 2002-2007 Hypertriton, Inc. <http://hypertriton.com/>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd August 23, 2002
.Dt AG_VIEW 3
.Os
.ds vT Agar API Reference
.ds oS Agar 1.0
.Sh NAME
.Nm AG_View
.Nd agar-gui display interface
.Sh SYNOPSIS
.Bd -literal
#include <agar/core.h>
#include <agar/gui.h>
.Ed
.Sh DESCRIPTION
The Agar
.Nm
interface provides low-level video functions to the Agar GUI.
Every display is described by the
.Nm
structure, and is associated with a set of GUI windows (see the
.Dq WINDOW SYSTEM
section).
.Pp
The
.Nm
interface also implements a series of macros for basic pixel operations, and
a number of utility routines for surface and texture manipulation.
.Sh INITIALIZATION
.nr nS 1
.Ft "int"
.Fn AG_InitVideo "int w" "int h" "int bpp" "Uint flags"
.Pp
.Ft "void"
.Fn AG_DestroyVideo "void"
.Pp
.Ft "int"
.Fn AG_ResizeDisplay "int w" "int h"
.Pp
.Ft "int"
.Fn AG_SetRefreshRate "int fps"
.Pp
.Ft void
.Fn AG_BindGlobalKey "SDLKey key" "SDLMod mod" "void (*fn)(void)"
.Pp
.Ft void
.Fn AG_BindGlobalKeyEv "SDLKey key" "SDLMod mod" "void (*fn)(AG_Event *)"
.Pp
.Ft int
.Fn AG_UnbindGlobalKey "SDLKey key" "SDLMod mod"
.Pp
.Ft void
.Fn AG_ClearGlobalKeys "void"
.Pp
.nr nS 0
The
.Fn AG_InitVideo
function initializes the graphic display if there is one available,
returning 0 on success and -1 on failure.
Acceptable
.Fa flags
include:
.Bl -tag -width "AG_VIDEO_OPENGL_OR_SDL "
.It AG_VIDEO_HWSURFACE
Request hardware framebuffer, whenever possible.
.It AG_VIDEO_ASYNCBLIT
In SDL mode, pass the
.Dv SDL_ASYNCBLIT
to
.Xr SDL_SetVideoMode 3 .
.It AG_VIDEO_ANYFORMAT
In SDL mode, avoid emulating surface of requested depth if not available.
.It AG_VIDEO_HWPALETTE
In color-index mode, request exclusive palette access.
.It AG_VIDEO_DOUBLEBUF
If
.Dv AG_VIDEO_HWSURFACE
is used, enable hardware double-buffering.
.It AG_VIDEO_FULLSCREEN
Start in full screen mode.
.It AG_VIDEO_RESIZABLE
If display is windowed, request a resizable window.
.It AG_VIDEO_NOFRAME
If display is windowed, request a frame-less window.
.It AG_VIDEO_BGPOPUPMENU
When the user clicks on the background, display a generic popup menu,
by default listing the minimize windows.
.It AG_VIDEO_OPENGL
Request OpenGL mode and fail if it is not available.
.It AG_VIDEO_OPENGL_OR_SDL
Request OpenGL mode if it is available, and fallback to SDL.
.El
.Pp
The
.Fn AG_DestroyVideo
function frees all resources allocated to the GUI.
It is invoked automatically by
.Xr AG_Destroy 3 .
.Pp
The
.Fn AG_ResizeDisplay
function attempts to resize the display, assuming that the underlying
graphics system allows such an operation.
.Pp
The
.Fn AG_SetRefreshRate
function sets the maximum refresh rate, given in frames/second.
The stock event loop function
.Xr AG_EventLoop_FixedFPS 3
will attempt to draw exactly this number of frames per second and then idle
as much as possible.
This value is only advisory, alternate or user-defined event loop functions
may ignore it entirely.
.Pp
.Fn AG_BindGlobalKey
arranges for the given function to be invoked whenever the user presses the
given key combination, regardless of widgets.
The
.Fn AG_BindGlobalKeyEv
variant accepts an
.Xr AG_Event 3
style function.
.Fn AG_UnbindGlobalKey
removes the given key mapping, returning 0 on success and -1 if no such
mapping exists.
.Pp
.Fn AG_ClearGlobalKeys
removes all existing key mappings.
.Sh GRAPHIC SURFACES
.Pp
TODO: Move this to
.Xr AG_Surface 3 .
.nr nS 1
.Ft "AG_Surface *"
.Fn AG_DupSurface "AG_Surface *src"
.Pp
.Ft "int"
.Fn AG_ScaleSurface "AG_Surface *src" "Uint16 width" "Uint16 height" "AG_Surface **dst"
.Pp
.Ft "Uint32"
.Fn AG_VideoPixel "Uint32 c"
.Pp
.Ft "Uint32"
.Fn AG_SurfacePixel "Uint32 c"
.Pp
.Ft "int"
.Fn AG_SamePixelFmt "AG_Surface *s1" "AG_Surface *s2"
.Pp
.Ft "void"
.Fn AG_SetAlphaPixels "AG_Surface *surface" "Uint8 alpha"
.Pp
.Ft "void"
.Fn AG_QueueVideoUpdate "int x" "int y" "int w" "int h"
.Pp
.Ft "int"
.Fn AG_DumpSurface "AG_Surface *su" "char *path_save"
.Pp
.nr nS 0
The
.Fn AG_DupSurface
returns a newly allocated surface containing a copy of
.Fa src .
.Fn AG_ScaleSurface
returns a copy of
.Fa src
scaled to the given size in pixels into
.Fa dst ,
which must be either NULL or a pointer to a valid surface.
If
.Fa dst
is NULL, a new surface is allocated.
The function returns 0 on success and -1 if a failure has occured.
.Pp
The
.Fn AG_VideoPixel
function converts the given pixel value
.Fa c
from reference surface format (agSurfaceFmt) to video display
format (agVideoFmt).
.Fn AG_SurfacePixel
does the opposite.
.Pp
.Fn AG_SamePixelFmt
compares the two surfaces
.Fa s1
and
.Fa s2
and return 1 if they both share the same color depth, RGBA masks and colorkey
settings.
.Pp
The
.Fn AG_SetAlphaPixels
function changes the alpha component of all pixels with a non-zero alpha
component.
.Pp
The
.Fn AG_QueueVideoUpdate
function queues the update of a video region.
In SDL mode, this creates an entry
on an
.Ft SDL_Rect
array that will be passed to
.Xr SDL_UpdateRects 3 .
This function is a no-op in OpenGL mode.
.Pp
The
.Fn AG_DumpSurface
function encodes a JPEG image file from the contents of a specified surface
.Fa su
(or if
.Fa su
is NULL, it uses the contents of the current display).
The image is saved to the application's data directory, and the resulting
path is copied to the
.Fa path_save
argument (if not NULL),
which must be at least
.Dv AG_PATHNAME_MAX
bytes in size.
.Fn AG_DumpSurface
returns 0 on success and -1 on failure.
The function always fails if Agar was not compiled with libjpeg support.
.Sh PIXEL OPERATIONS
.nr nS 1
.Ft "void"
.Fn AG_CLIPPED_PIXEL "AG_Surface *s" "int x" "int y"
.Pp
.Ft "void"
.Fn AG_UNCLIPPED_PIXEL "AG_Surface *s" "int x" "int y"
.Pp
.Ft "Uint32"
.Fn AG_GET_PIXEL "AG_Surface *s" "Uint8 *p"
.Pp
.Ft "Uint32"
.Fn AG_GET_PIXEL2 "AG_Surface *s" "int x" "int y"
.Pp
.Ft "void"
.Fn AG_PUT_PIXEL "AG_Surface *s" "Uint8 *p" "Uint32 c"
.Pp
.Ft "void"
.Fn AG_PUT_PIXEL2 "AG_Surface *s" "int x" "int y" "Uint32 c"
.Pp
.Ft "void"
.Fn AG_PUT_PIXEL2_CLIPPED "AG_Surface *s" "int x" "int y" "Uint32 c"
.Pp
.Ft "void"
.Fn AG_BLEND_RGBA "AG_Surface *s" "Uint8 *p" "Uint8 r" "Uint8 g" "Uint8 b" "Uint8 a" "enum ag_blend_func func"
.Pp
.Ft "void"
.Fn AG_BLEND_RGBA2 "AG_Surface *s" "int x" "int y" "Uint8 r" "Uint8 g" "Uint8 b" "Uint8 a" "enum ag_blend_func func"
.Pp
.Ft "void"
.Fn AG_BLEND_RGBA2_CLIPPED "AG_Surface *s" "int x" "int y" "Uint8 r" "Uint8 g" "Uint8 b" "Uint8 alpha" "enum ag_blend_func func"
.Pp
.Ft "void"
.Fn AG_VIEW_PUT_PIXEL "Uint8 *p" "Uint32 c"
.Pp
.Ft "void"
.Fn AG_VIEW_PUT_PIXEL2 "int x" "int y" "Uint32 c"
.Pp
.Ft "void"
.Fn AG_VIEW_PUT_PIXEL2_CLIPPED "int x" "int y" "Uint32 c"
.Pp
.nr nS 0
The macros
.Fn AG_CLIPPED_PIXEL
and
.Fn AG_UNCLIPPED_PIXEL
evaluate whether the pixel at the given coordinates resides inside or outside
of the clipping rectangle of the given surface.
.Pp
.Fn AG_GET_PIXEL
returns a 32-bit interpretation of the pixel at the given location
.Fa p
in the pixel data of the surface
.Fa s .
The
.Fn AG_GET_PIXEL2
variant finds the location of the pixel in the surface from the coordinates
.Fa x ,
.Fa y .
.Pp
.Fn AG_PUT_PIXEL
and
.Fn AG_PUT_PIXEL2
write the color
.Fa c
to the pixel at the given location, without doing any clipping.
The
.Fn AG_PUT_PIXEL2_CLIPPED
variant ensures that the pixel is inside the clipping rectangle of the surface
before writing to it.
.Pp
The
.Fn AG_BLEND_RGBA ,
.Fn AG_BLEND_RGBA2
and
.Fn AG_BLEND_RGBA2_CLIPPED
macros operate in a manner similar to
.Fn AG_PUT_PIXEL* ,
except that the destination pixel is alpha-blended with the color described
by the given RGB triplet, whose weight is defined by the
.Fa alpha
parameter.
The
.Fa func
argument may be one of:
.Pp
.Bd -literal
enum ag_blend_func {
	AG_ALPHA_OVERLAY,		/* dA = sA+dA */
	AG_ALPHA_SRC,			/* dA = sA */
	AG_ALPHA_DST,			/* dA = dA */
	AG_ALPHA_ONE_MINUS_DST,		/* dA = 1-dA */
	AG_ALPHA_ONE_MINUS_SRC		/* dA = 1-sA */
};
.Ed
.Pp
The macros
.Fn AG_VIEW_PUT_PIXEL ,
.Fn AG_VIEW_PUT_PIXEL2
and
.Fn AG_VIEW_PUT_PIXEL2_CLIPPED
behave in a manner similar to
.Fn AG_PUT_PIXEL* ,
except that they are optimized for the display surface.
For instance, support for specific display depths may have been disabled
at compile-time.
.Sh OPENGL OPERATIONS
The following functions are available only if Agar was compiled with OpenGL
support, and the current application is in OpenGL mode (as indicated by the
.Va opengl
flag of the current display).
.Pp
They must be invoked from the main event/rendering context.
.Pp
.nr nS 1
.Pp
.Ft "GLuint"
.Fn AG_SurfaceTexture "AG_Surface *src" "GLfloat *texcoord"
.Pp
.Ft "void"
.Fn AG_UpdateTexture "AG_Surface *src" "GLuint texture"
.Pp
.Ft "AG_Surface *"
.Fn AG_CaptureGLView "void"
.Pp
.nr nS 0
The
.Fn AG_SurfaceTexture
function creates an OpenGL texture from
.Fa src
and returns the OpenGL surface handle.
If
.Fa texcoord
is not NULL, the function returns the texture coordinates (4 float values)
into it.
.Fn AG_UpdateTexture
updates the contents of an existing OpenGL texture by name, from
the contents of a given Agar surface.
.Pp
The
.Fn AG_CaptureGLView
function captures the contents of the current OpenGL display into a
newly-allocated Agar surface and returns it.
.Sh WINDOW SYSTEM
.nr nS 1
.Ft "void"
.Fn AG_ViewAttach "AG_Window *child"
.Pp
.Ft "void"
.Fn AG_ViewDetach "AG_Window *child"
.Pp
.Ft void
.Fn AG_ViewDetachQueued "void"
.Pp
.Ft "AG_Window *"
.Fn AG_FindWindow "char *name"
.Pp
.nr nS 0
The Agar GUI operates on a set of windows which are associated with an
.Nm .
For more details, see
.Xr AG_Window 3 .
.Pp
The
.Fn AG_ViewAttach
function attaches the window pointed to by
.Fa child
to the view.
The
.Fn AG_ViewDetach
function detaches the window pointed to by
.Fa child
from the view by adding it to the detach queue.
The detachment will be performed later by
.Fa AG_ViewDetachQueued .
.Pp
The
.Fn AG_FindWindow
functions looks for a window identified by
.Fa name
and return NULL if there is no such window.
.Sh STRUCTURE DATA
.Bl -tag -width "TAILQ windows "
.It Ft int w, h
Dimensions of the display in pixels.
.It Ft int depth
Color depth of the display in bits per pixel.
.It Ft int rCur
Current refresh rate.
Meaning is dependent on the type of event loop being used.
.It Ft Uint rNom
Nominal refresh rate.
Meaning is dependent on the type of event loop being used.
.It Ft AG_Mutex lock
Lock on GUI window lists.
.It Ft TAILQ windows
List of
.Xr AG_Window 3
objects associated with display.
.El
.Sh SEE ALSO
.Xr AG_Intro 3 ,
.Xr AG_Surface 3 ,
.Xr AG_Window 3 ,
.Xr glViewport 3 ,
.Xr glOrtho 3 ,
.Xr SDL_SetVideoMode 3
.Sh HISTORY
The
.Nm
interface first appeared in Agar 1.0
