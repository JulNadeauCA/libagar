.\" Copyright (c) 2002-2007 Hypertriton, Inc. <http://hypertriton.com/>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd August 20, 2002
.Dt AG_WIDGET 3
.Os
.ds vT Agar API Reference
.ds oS Agar 1.0
.Sh NAME
.Nm AG_Widget
.Nd agar widget framework
.Sh SYNOPSIS
.Bd -literal
#include <agar/core.h>
#include <agar/gui.h>
.Ed
.Sh DESCRIPTION
An Agar graphical user interface is described as a tree of widgets
(i.e., structures derived from
.Nm ) .
.Pp
A widget object is always attached (via
.Xr AG_ObjectAttach 3 )
to a parent
.Em container
widget.
Some container widgets (such as
.Xr AG_Box 3
or
.Xr AG_Window 3 )
are designed as general-purpose container widgets.
Other widgets (such as
.Xr AG_FileDlg 3 )
will internally create, attach and position a specific set of child widgets
to create a complex, easily re-usable dialog (Agar developers are encouraged
to create custom widgets using this technique).
.Pp
The
.Nm
structure is derived from
.Xr AG_Object 3 .
Using Agar's Object system, custom widgets are easily implemented (or derived
from existing widget classes) as part of user applications.
Agar widgets are extensively re-used.
The Object system also provides the
.Xr AG_Event 3
system and the
.Xr AG_Variable 3
interface which is the basis of widget
.Em bindings
(see
.Dq WIDGET BINDINGS
section below).
.Sh INHERITANCE HIERARCHY
.Xr AG_Object 3 ->
.Nm .
.Sh CLASS OPERATIONS
Object operations specific to the
.Nm
class are defined as follows:
.Bd -literal
typedef struct ag_widget_class {
	struct ag_object_class _inherit;
	void (*draw)(AG_Widget *w);
	void (*size_request)(AG_Widget *w, AG_SizeReq *req);
	int  (*size_allocate)(AG_Widget *w, const AG_SizeAlloc *alloc);
} AG_WidgetClass;
.Ed
.Pp
The
.Fn draw
operation renders the widget to the display.
Throughout the documentation, the
.Fn draw
operation is referred to as the
.Sq rendering context ,
and some functions (such as
.Fn AG_WidgetBlitSurface )
are not safe to invoke in any other context.
.Pp
The
.Fn size_request
option queries the widget for an initial, preferred geometry, without any
guarantee that the request will be satisfied.
For example, a
.Xr AG_Label 3
widget might return the expected size in pixels of the rendered label's text.
.Pp
The
.Fn size_allocate
callback notifies the widget that it has been allocated a new size or position
within its parent.
The
.Ft AG_SizeAlloc
parameter specifies the new allocation.
It is also safe to assume that when
.Fa size_allocate
is invoked, the
.Va w ,
.Va h ,
.Va x ,
.Va y
members of the
.Nm
structure are already set to the new allocated position and size.
.Pp
Widgets are not allowed to modify their geometry from
.Fn size_allocate ,
but the function can return -1, effectively marking the widget as "undersize",
and disabling further rendering of the widget until it is resized.
.Sh WIDGET SIZING
.nr nS 1
.Ft "void"
.Fn AG_Expand "AG_Widget *widget"
.Pp
.Ft "void"
.Fn AG_ExpandHoriz "AG_Widget *widget"
.Pp
.Ft "void"
.Fn AG_ExpandVert "AG_Widget *widget"
.Pp
.Ft "void"
.Fn AG_WidgetSizeReq "AG_Widget *widget" "AG_SizeReq *req"
.Pp
.Ft "int"
.Fn AG_WidgetSizeAlloc "AG_Widget *widget" "AG_SizeAlloc *alloc"
.Pp
.Ft void
.Fn AG_WidgetSetPosition "AG_Widget *widget" "int x" "int y"
.Pp
.Ft void
.Fn AG_WidgetSetSize "AG_Widget *widget" "int w" "int h"
.Pp
.Ft void
.Fn AG_WidgetSetGeometry "AG_Widget *widget" "AG_Rect rect"
.Pp
.Ft void
.Fn AG_WidgetUpdate "AG_Widget *widget"
.Pp
.nr nS 0
The
.Fn AG_Expand
function arranges for the widget to expand, filling all available area
in its parent container widget.
.Fn AG_ExpandHoriz
and
.Fn AG_ExpandVert
cause the widget to expand to fill available space horizontally or vertically.
.Pp
The
.Fn AG_WidgetSizeReq
function invokes the
.Fn size_request
operation of the widget and returns its size requisition into
.Fa req .
.Fn AG_WidgetSizeAlloc
allocates the given position and geometry of the widget.
These functions are generally used to implement
.Sq container
widgets.
The
.Ft AG_SizeReq
and
.Ft AG_SizeAlloc
structures are defined as follows:
.Bd -literal
typedef struct ag_size_req {
	int w, h;			/* Requested geometry in pixels */
} AG_SizeReq;

typedef struct ag_size_alloc {
	int w, h;			/* Allocated geometry in pixels */
	int x, y;			/* Allocated position in pixels */
} AG_SizeAlloc;
.Ed
.Pp
.Fn AG_WidgetSetPosition
sets the effective position of the widget relative to its parent container.
.Fn AG_WidgetSetSize
sets the size of the widget in pixels.
.Fn AG_WidgetSetGeometry
sets both position and size of a widget from the specified
.Ft AG_Rect .
These functions are typically only used in the context of the
.Fn size_request
and
.Fn size_allocate
routines of container widgets.
.Pp
.Fn AG_WidgetUpdate
requests an update of the computed coordinates and geometries of all widgets
attached to the widget's current window.
The widget may or may not be attached to a parent window (the actual update
will be performed later, before rendering starts in
.Fn AG_WindowDraw ) .
.Fn AG_WidgetUpdate
should be called following
.Xr AG_ObjectAttach 3
or
.Xr AG_ObjectDetach 3
calls made in event context, or manual modifications of the
.Va x ,
.Va y ,
.Va w ,
.Va h
fields of the
.Nm
structure.
.Sh INPUT STATE
.nr nS 1
.Ft "void"
.Fn AG_WidgetEnable "AG_Widget *widget"
.Pp
.Ft "void"
.Fn AG_WidgetDisable "AG_Widget *widget"
.Pp
.Ft "int"
.Fn AG_WidgetEnabled "AG_Widget *widget"
.Pp
.Ft "int"
.Fn AG_WidgetDisabled "AG_Widget *widget"
.Pp
.nr nS 0
The "enabled" flag of a widget determines whether the user is allowed to modify
whatever data the widget is accessing.
The interpretation of this flag is widget-specific.
.Fn AG_WidgetEnable
sets the flag,
.Fn AG_WidgetDisable
clears it.
These functions will raise the
.Sq widget-enabled
and
.Sq widget-disabled
events accordingly.
.Pp
The functions
.Fn AG_WidgetEnabled
and
.Fn AG_WidgetDisabled
return the current "enabled" state of the widget.
The
.Nm
object must be locked when the call is made.
.Sh FOCUS STATE
The focus state of widgets enables the reception of specific types of
events which are filtered by default.
The focus state also affects the behavior and appearance of some widgets.
A widget holding focus (in a currently focused window) will receive mouse
events
.Sq window-mousemotion ,
.Sq window-mousebuttonup ,
as well as keyboard events
.Sq window-keyup
and
.Sq window-keydown
(note that unfocused widgets can be configured to receive those events
unfiltered as well using the
.Dv AG_WIDGET_UNFOCUSED_*
options).
.Pp
.nr nS 1
.Ft "void"
.Fn AG_WidgetSetFocusable "AG_Widget *widget" "int enable"
.Pp
.Ft "int"
.Fn AG_WidgetFocus "AG_Widget *widget"
.Pp
.Ft "void"
.Fn AG_WidgetUnfocus "AG_Widget *widget"
.Pp
.Ft "int"
.Fn AG_WidgetIsFocused "AG_Widget *widget"
.Pp
.Ft "int"
.Fn AG_WidgetIsFocusedInWindow "AG_Widget *widget"
.Pp
.Ft "AG_Widget *"
.Fn AG_WidgetFindFocused "AG_Window *win"
.Pp
.Ft "void"
.Fn AG_WidgetForwardFocus "AG_Widget *widget" "AG_Widget *widgetToFocus"
.Pp
.nr nS 0
.Fn AG_WidgetSetFocusable
specifies whether the widget should be allowed to receive focus (1 = accept
focus, 0 = reject focus).
The default is to reject focus.
Further
.Fn AG_WidgetFocus
calls on a widget rejecting focus will return 0.
.Pp
The
.Fn AG_WidgetFocus
function gives focus to the given widget (and all of its parent widgets,
up to the parent window if there is one).
Returns 1 on success and 0 if the widget cannot gain focus (i.e.,
.Dv AG_WIDGET_FOCUSABLE
is not set).
.Pp
.Fn AG_WidgetUnfocus
removes the focus state from the given widget and its children (but not
the parent window if any).
.Pp
.Fn AG_WidgetIsFocused
returns 1 if the focus flag is set, and the parent window is focused as well.
.Fn AG_WidgetIsFocusedInWindow
returns 1 if the widget holds focus inside of its parent window.
With both functions, the
.Nm
object must be locked when the call is made.
.Pp
.Fn AG_WidgetFindFocused
recursively searches
.Fa win
for a widget holding focus.
Where multiple widgets may be holding focus, widgets found deepest in the
tree have priority over their parents.
.Fn AG_WidgetFindFocused
returns NULL if no widget is focused.
The
.Xr AG_View 3
VFS must be locked when the call is made.
.Pp
.Fn AG_WidgetForwardFocus
arranges automatic forwarding of the focus to a specified widget.
Whenever
.Fa AG_WidgetFocus
will be invoked on
.Fa widget ,
the focus will be given to
.Fa widgetToFocus
instead.
.Sh COORDINATES
.nr nS 1
.Ft int
.Fn AG_WidgetArea "AG_Widget *widget" "int x" "int y"
.Pp
.Ft int
.Fn AG_WidgetRelativeArea "AG_Widget *widget" "int x" "int y"
.Pp
.nr nS 0
The
.Fn AG_WidgetArea
routine tests whether view coordinates
.Fa x
and
.Fa y
lie inside of the widget's allocated space.
The
.Fn AG_WidgetRelativeArea
variant accepts widget coordinates.
.Sh BLITTING SURFACES
These functions manage blitting of graphical surfaces.
They are designed specifically for use in GUI widgets.
The
.Fn AG_WidgetBlit*
routines must all be invoked from rendering context (i.e., the
.Fa draw
operation of widgets), and may not be used in any other context.
.Pp
.nr nS 1
.Ft void
.Fn AG_WidgetBlit "AG_Widget *widget" "AG_Surface *src" "int x" "int y"
.Pp
.Ft int
.Fn AG_WidgetMapSurface "AG_Widget *widget" "AG_Surface *su"
.Pp
.Ft int
.Fn AG_WidgetMapSurfaceNODUP "AG_Widget *widget" "AG_Surface *su"
.Pp
.Ft void
.Fn AG_WidgetReplaceSurface "AG_Widget *widget" "int surface_id" "AG_Surface *newSurface"
.Pp
.Ft void
.Fn AG_WidgetReplaceSurfaceNODUP "AG_Widget *widget" "int surface_id" "AG_Surface *newSurface"
.Pp
.Ft void
.Fn AG_WidgetUnmapSurface "AG_Widget *widget" "int surface_id"
.Pp
.Ft void
.Fn AG_WidgetUpdateSurface "AG_Widget *widget" "int surface_id"
.Pp
.Ft void
.Fn AG_WidgetBlitFrom "AG_Widget *dstWidget" "AG_Widget *srcWidget" "int surface_id" "AG_Rect *rs" "int x" "int y"
.Pp
.Ft void
.Fn AG_WidgetBlitSurface "AG_Widget *widget" "int surface_id" "int x" "int y"
.Pp
.nr nS 0
The
.Fn AG_WidgetBlit
function performs a software->hardware blit from the surface
.Fa src
to the video display at the given widget coordinates.
.Fn AG_WidgetBlit
must invoked in rendering context.
See
.Xr AG_Surface 3
for more information on the Agar surface structure.
.Pp
Software to hardware blits are slow, so the
.Fn AG_WidgetMapSurface
interface provides a way to take advantage of hardware->hardware blits.
It copies the specified surface (possibly creating a hardware texture if
Agar is using an API such as OpenGL), and returns a name which will be
used to later reference the surface.
.Pp
The
.Fn AG_WidgetMapSurfaceNODUP
variant does not copy the given surface, which is assumed to remain valid
for as long as the widget exists.
.Pp
Under multithreading,
.Fn AG_WidgetMapSurface
may be invoked from any context, but the returned name is only valid as
long as the widget is locked (see
.Xr AG_ObjectLock 3 ) .
.Pp
.Fn AG_WidgetReplaceSurface
replaces the contents of a previously-mapped surface with the contents of
.Fa newSurface .
The
.Fn AG_WidgetReplaceSurfaceNODUP
variant avoids duplicating the surface.
.Pp
.Fn AG_WidgetUnmapSurface
destroys the given surface mapping.
It is equivalent to invoking
.Fn AG_WidgetReplaceSurface
with a NULL surface.
The function is safe to use from any context.
.Pp
It is important to note that in OpenGL mode,
.Fn AG_WidgetReplaceSurface
and
.Fn AG_WidgetUnmapSurface
will not immediately delete any previous texture associated with the previous
surface.
Instead, it will queue the delete operation for future execution from
rendering context, as required by thread safety.
.Pp
The
.Fn AG_WidgetUpdateSurface
function should be invoked whenever a mapped surface is changed.
If hardware surfaces are supported, it will cause an upload of the software
surface to the hardware (otherwise it is a no-op).
.Pp
The
.Fn AG_WidgetBlitFrom
function renders a previously mapped (possibly hardware) surface from the
source widget
.Fa srcWidget
(using source rectangle
.Fa rs )
onto the destination widget
.Fa dstWidget ,
at coordinates
.Fa x ,
.Fa y .
This function must be invoked in rendering context.
.Pp
The
.Fn AG_WidgetBlitSurface
variant invokes
.Fa AG_WidgetBlitFrom
with the same argument for both
.Fa srcWidget
and
.Fa dstWidget
(and
.Fa rs
set to NULL).
.Sh RENDERING AND PRIMITIVES
These routines are provided for use in GUI widgets, exclusively in the context
of the
.Nm
.Fa draw
operation.
.Pp
.nr nS 1
.Ft void
.Fn AG_PushClipRect "AG_Widget *widget" "AG_Rect r"
.Pp
.Ft void
.Fn AG_PopClipRect "void"
.Pp
.Ft void
.Fn AG_WidgetPushCursor "AG_Widget *widget" "int cursor"
.Pp
.Ft void
.Fn AG_WidgetPopCursor "AG_Widget *widget"
.Pp
.Ft void
.Fn AG_WidgetPutPixel32 "AG_Widget *widget" "int x" "int y" "Uint32 pixel"
.Pp
.Ft void
.Fn AG_WidgetPutPixelRGB "AG_Widget *widget" "int x" "int y" "Uint8 red" "Uint8 green" "Uint8 blue"
.Pp
.Ft void
.Fn AG_WidgetBlendPixelRGBA "AG_Widget *widget" "int x" "int y" "Uint8 color[4]" "AG_BlendFn blendFn"
.Pp
.Ft void
.Fn AG_WidgetBlendPixel32 "AG_Widget *widget" "int x" "int y" "Uint32 pixel" "AG_BlendFn blendFn"
.Pp
.nr nS 0
.Pp
The
.Fn AG_PushClipRect
function pushes a rectangle onto the stack of clipping rectangles.
.Fn AG_PopClipRect
pops the last entry from the clipping rectangle stack.
The clipping rectangle is given in coordinates relative to the widget.
.Pp
These routines must be invoked from GUI rendering context.
The method of clipping depends on the underlying graphics API.
For instance, in SDL mode, the temporary rectangle is set by
.Xr SDL_SetClipRect 3
and
.Xr glClipPlane 3
is used in OpenGL mode.
In either case, the actual clipping rectangle passed to the graphics API
is the intersection of all clipping rectangles on the stack.
.Pp
The
.Fn AG_WidgetPushCursor
function changes the active cursor, saving the previous one.
The argument is an index into the global
.Va agCursors
array.
The
.Fn AG_WidgetPopCursor
restores the previously saved cursor.
.Pp
.Fn AG_WidgetPutPixel32
function writes a pixel (given in
.Va agVideoFmt
format) to the specified widget coordinates.
The
.Fn AG_WidgetPutPixelRGB
variant accepts 8-bit component values.
.Pp
The
.Fn AG_WidgetBlendPixelRGBA
and
.Fn AG_WidgetBlendPixel32
routines blend the specified color against the current pixel at widget
coordinates
.Fa x ,
.Fa y .
.Fa color 
specifies the source 8-bit RGBA components.
Pixels are blended according to the given function
.Fn blendFn ,
which may be one of:
.Bd -literal
typedef enum ag_blend_func {
	AG_ALPHA_OVERLAY,	/* dA = sA+dA (emulated in GL mode) */
	AG_ALPHA_SRC,		/* dA = sA */
	AG_ALPHA_DST,		/* dA = dA */
	AG_ALPHA_ONE_MINUS_DST,	/* dA = 1-dA */
	AG_ALPHA_ONE_MINUS_SRC	/* dA = 1-sA */
} AG_BlendFn;
.Ed
.Pp
The display surface must be locked (see
.Xr AG_LockView 3
and
.Xr AG_UnlockView 3 )
before any of the
.Fn AG_WidgetPutPixel*
and
.Fn AG_WidgetBlendPixel*
routines are invoked.
Put-pixel and blend-pixel operations are also subject to the current clipping
rectangle (as set by
.Fn AG_PushClipRect ) .
.Pp
.Fn AG_WidgetPutPixel*
and
.Fn AG_WidgetBlendPixel*
differ from the low-level 
.Fn AG_VIEW_PUT_PIXEL*
operations of
.Xr AG_View 3
in that the coordinates are relative to the widget's coordinate system.
These operations are also emulated if the display is not framebuffer-based.
.Sh GRAPHICS PRIMITIVES
These primitives are designed specifically for use in GUI widgets.
They must be called from the
.Fa draw
functions of widgets exclusively and may not be used in any other context.
.Pp
The coordinates for all of the
.Fn AG_Draw*
functions are given in pixels and are relative to the specified widget.
Unless otherwise noted, the color arguments in
.Ft Uint32
format should follow the
.Va agVideoFmt
pixel format (see
.Xr AG_MapRGB 3 ,
.Xr AG_MapRGBA 3 ) .
.Pp
.nr nS 1
.Ft void
.Fn AG_DrawPixel "AG_Widget *widget" "int x" "int y" "Uint32 pixel"
.Pp
.Ft void
.Fn AG_DrawPixelBlended "AG_Widget *widget" "int x" "int y" "Uint32 pixel" "AG_BlendFn blendFn"
.Pp
.Ft void
.Fn AG_DrawPixelRGB "AG_Widget *widget" "int x" "int y" "Uint8 r" "Uint8 g" "Uint8 b"
.Pp
.Ft void
.Fn AG_DrawBox "AG_Widget *widget" "AG_Rect r" "int z" "Uint32 c"
.Pp
.Ft void
.Fn AG_DrawBoxDisabled "AG_Widget *widget" "AG_Rect r" "int z" "Uint32 c1" "Uint32 c2"
.Pp
.Ft void
.Fn AG_DrawBoxRounded "AG_Widget *widget" "AG_Rect r" "int z" "int radius" "Uint32 c"
.Pp
.Ft void
.Fn AG_DrawBoxRoundedTop "AG_Widget *widget" "AG_Rect r" "int z" "int radius" "Uint32 c"
.Pp
.Ft void
.Fn AG_DrawFrame "AG_Widget *widget" "AG_Rect r" "int z" "Uint32 c"
.Pp
.Ft void
.Fn AG_DrawFrameBlended "AG_Widget *widget" "AG_Rect r" "Uint8 c[4]" "AG_BlendFn blendFn"
.Pp
.Ft void
.Fn AG_DrawCircle "AG_Widget *widget" "int x" "int y" "int radius" "Uint32 c"
.Pp
.Ft void
.Fn AG_DrawCircle2 "AG_Widget *widget" "int x" "int y" "int radius" "Uint32 c"
.Pp
.Ft void
.Fn AG_DrawLine "AG_Widget *widget" "int x1" "int y1" "int x2" "int y2" "Uint32 c"
.Pp
.Ft void
.Fn AG_DrawLine2 "AG_Widget *widget" "int x1" "int y1" "int x2" "int y2" "Uint32 c"
.Pp
.Ft void
.Fn AG_DrawLineBlended "AG_Widget *widget" "int x1" "int y1" "int x2" "int y2" "Uint8 c[4]" "AG_BlendFn blendFn"
.Pp
.Ft void
.Fn AG_DrawLineH "AG_Widget *widget" "int x1" "int x2" "int y" "Uint32 c"
.Pp
.Ft void
.Fn AG_DrawLineV "AG_Widget *widget" "int x" "int y1" "int y2" "Uint32 c"
.Pp
.Ft void
.Fn AG_DrawRectOutline "AG_Widget *widget, AG_Rect r" "Uint32 c"
.Pp
.Ft void
.Fn AG_DrawRectFilled "AG_Widget *widget, AG_Rect r" "Uint32 c"
.Pp
.Ft void
.Fn AG_DrawRectBlended "AG_Widget *widget, AG_Rect r" "Uint8 c[4]" "AG_BlendFn blendFn"
.Pp
.Ft void
.Fn AG_DrawPlus "AG_Widget *widget, AG_Rect r" "Uint8 c[4]" "AG_BlendFn blendFn"
.Pp
.Ft void
.Fn AG_DrawMinus "AG_Widget *widget, AG_Rect r" "Uint8 c[4]" "AG_BlendFn blendFn"
.Pp
.Ft void
.Fn AG_DrawTiling "AG_Widget *widget, AG_Rect r" "int tileSz" "int offset" "Uint32 c1" "Uint32 c2"
.Pp
.Ft void
.Fn AG_DrawArrowUp "AG_Widget *widget" "int x" "int y" "int h" "Uint32 c1" "Uint32 c2"
.Pp
.Ft void
.Fn AG_DrawArrowDown "AG_Widget *widget" "int x" "int y" "int h" "Uint32 c1" "Uint32 c2"
.Pp
.Ft void
.Fn AG_DrawArrowLeft "AG_Widget *widget" "int x" "int y" "int w" "Uint32 c1" "Uint32 c2"
.Pp
.Ft void
.Fn AG_DrawArrowRight "AG_Widget *widget" "int x" "int y" "int w" "Uint32 c1" "Uint32 c2"
.Pp
.nr nS 0
.Fn AG_DrawPixel
draws a single pixel at the specified coordinates.
The
.Fn AG_DrawPixelBlended
variant performs alpha-blending using the specified blending function
(see
.Fn AG_WidgetBlendPixelRGBA ) .
The
.Fn AG_DrawPixelRGB
variant accepts RGB component arguments.
.Pp
.Fn AG_DrawBox
draws a 3D-style box, where 
.Fa z
indicates the
.Sq depth
in pixels.
The
.Fn AG_DrawBoxDisabled
variant uses a stipple pattern of 
.Fa c1
against
.Fa c2 ,
traditionally used to indicate a "disabled" control.
.Pp
.Fn AG_DrawBoxRounded
renders a box with the edges rounded to the given
.Fa radius .
The
.Fn AG_DrawBoxRoundedTop
variant only rounds the top two corners.
.Pp
.Fn AG_DrawFrame
draws a 3D-style frame.
.Fn AG_DrawFrameBlended
draws a frame with alpha-blending, with the color
.Fa c
specified as an array of RGBA components, and the given blending mode
.Fa blendFn
(see
.Fn AG_WidgetBlendPixelRGBA ) .
.Pp
.Fn AG_DrawCircle
draws a circle with the origin at
.Fa x ,
.Fa y
and a radius of
.Fa radius
pixels.
.Pp
.Fn AG_DrawLine
scan-converts a line segment going from point
.Fa x1 ,
.Fa y1
to point
.Fa x2 ,
.Fa y2 .
The variants
.Fn AG_DrawLineH
and
.Fn AG_DrawLineV
render horizontal and vertical line segments, respectively.
.Fn AG_DrawLine2
renders two line segments for a 3D-style effect.
.Pp
.Fn AG_DrawLineBlended
renders an alpha-blended line, where the RGBA components are passed as the
.Fa c
array, and the blending function is specified in
.Fa blendFn
(see
.Fn AG_WidgetBlendPixelRGBA ) .
.Pp
.Fn AG_DrawRectOutline
draws the outline of a rectangle.
.Pp
.Fn AG_DrawRectFilled
fills a rectangle of pixels
.Fa r .
.Fn AG_DrawRectBlended
draws a blended rectangle of the color
.Fa c ,
specified as an array or RGBA components, with the specified blending
mode
.Fa blendFn (see
.Fn AG_WidgetBlendPixelRGBA ) .
.Pp
.Fn AG_DrawPlus
and
.Fn AG_DrawMinus
draw plus ("+") or minus ("-") signs spanning
.Fa r ,
using the specified color and blending function.
.Pp
.Fn AG_DrawTiling
fills
.Fa r
with a two-color tiling pattern.
.Fa tileSz
is the size of the tiles in pixels,
.Fa offset
is an offset in pixels and
.Fa c1 ,
.Fa c2
specify the colors of the tiles.
.Pp
.Fn AG_DrawArrowUp ,
.Fn AG_DrawArrowDown ,
.Fn AG_DrawArrowLeft
and
.Fn AG_DrawArrowRight
draw an arrow at the specified coordinates.
.Fa h
and
.Fa w
specify the height/width of the arrow in pixels.
.Sh BINDINGS
Agar widgets can be configured to directly access data of specific types.
For example,
.Xr AG_Slider 3
provides a binding called
.Sq value ,
which (in the current implementation) supports the standard integer and
floating-point types.
Connecting
.Sq value
to an integer or floating point variable allows the user to directly set the
value of the variable with the need for tedious callback routines.
Similarly,
.Xr AG_Textbox 3
connects to a text buffer.
It is also possible to configure
.Sq function
bindings such that the value is evaluated from a provided function every time
the variable is retrieved.
.Pp
Widget bindings are established using the
.Fn AG_BindFoo ,
.Fn AG_BindFooFn
and
.Fn AG_BindFooMp
functions, see
.Xr AG_Variable 3
for more information.
.Pp
Bindings are specifically documented in the API reference.
Manual pages for standard Agar widgets include a
.Dq BINDINGS
section with a list of bindings supported by each widget, their supported
data types and effects.
.Sh WIDGET QUERIES
.nr nS 1
.Ft "AG_Window *"
.Fn AG_ParentWindow "AG_Widget *widget"
.Pp
.Ft "AG_Widget *"
.Fn AG_WidgetFind "AG_Display *view" "const char *name"
.Pp
.Ft "AG_Widget *"
.Fn AG_WidgetFindPoint "const char *classMask" "int x" "int y"
.Pp
.Ft "AG_Widget *"
.Fn AG_WidgetFindRect "const char *classMask" "int x" "int y" "int w" "int h"
.Pp
.nr nS 0
.Fn AG_ParentWindow
returns a pointer to the parent
.Xr AG_Window 3
for the given widget.
If the widget is unattached, NULL is returned.
The
.Xr AG_View 3
VFS must be locked when the call is made.
.Pp
.Fn AG_WidgetFind
searches for a given widget by name, given an absolute path,
and returns a pointer to the widget or NULL.
.Pp
.Fn AG_WidgetFindPoint
searches for a widget matching the given class mask enclosing the point
specified in display (pixel) coordinates.
The
.Fn AG_WidgetFindRect
variant requires that the widget enclose the specified rectangle.
.Pp
With threads, the return value of
.Fn AG_WidgetFind ,
.Fn AG_WidgetFindPoint
and
.Fn AG_WidgetFindRect
is only valid as long as the
.Xr AG_View 3
VFS is locked.
.Sh GUI RENDERING
.nr nS 1
.Ft "void"
.Fn AG_WidgetDraw "AG_Widget *widget"
.Pp
.Ft "void"
.Fn AG_BeginRendering "void"
.Pp
.Ft "void"
.Fn AG_EndRendering "void"
.Pp
.Ft "void"
.Fn AG_WidgetHide "AG_Widget *widget"
.Pp
.Ft "void"
.Fn AG_WidgetShow "AG_Widget *widget"
.Pp
.nr nS 0
The
.Fn AG_WidgetDraw
routine renders a widget to the display.
It is typically invoked from an event loop routine (such as
.Xr AG_EventLoop 3 ) ,
to recursively draw the hierarchy of visible GUI elements.
.Pp
.Fn AG_WidgetDraw
invocations must be enclosed between calls to
.Fn AG_BeginRendering
and
.Fn AG_EndRendering .
.Pp
.Fn AG_WidgetHide
and
.Fn AG_WidgetShow
set the visibility of a widget.
.Sh THEME SELECTION
.nr nS 1
.Ft "void"
.Fn AG_SetStyle "AG_Widget *widget" "AG_Style *style"
.nr nS 0
.Pp
The
.Fn AG_SetStyle
function changes the style/theme associated with a widget.
See
.Xr AG_Style 3
for more information about styles.
Note that child widgets automatically inherit the style associated with
their parent.
.Sh THREAD SAFETY
Agar-GUI is thread-safe on a fine-grained level, so it is safe to make GUI
calls from different threads (unless documented otherwise in the widget's
manual page).
See
.Xr AG_Threads 3
for more details, including important conventions used throughout the
documentation.
.Sh EVENTS
The
.Nm
layer generates the following events:
.Pp
.Bl -tag -compact -width 2n
.It Fn widget-shown "void"
The widget is now visible.
.It Fn widget-hidden "void"
The widget is no longer visible.
.It Fn widget-enabled "void"
Input state has been enabled with
.Xr AG_WidgetEnable 3 .
.It Fn widget-disabled "void"
Input state has been disabled with
.Xr AG_WidgetDisable 3 .
.It Fn widget-moved "void"
The widget (or one of its parents) has been moved.
.It Fn widget-gainfocus "void"
The widget now holds focus inside its parent container.
.It Fn widget-lostfocus "void"
The widget no longer holds focus.
.It Fn widget-bound "AG_WidgetBinding *binding"
A widget binding has been added or modified.
NOTE: Do not use this event, use the
.Xr AG_Object 3
level
.Sq bound
event instead.
.El
.Sh STRUCTURE DATA
For the
.Ft AG_Widget
object:
.Pp
.Bl -tag -width "AG_Rect2 rView "
.It Ft Uint flags
Option flags (see
.Dq FLAGS
section below).
.It Ft int x, y
Pixel coordinates of the widget relative to its parent.
.It Ft int w, h
Dimensions of the widget in pixels.
.It Ft AG_Rect2 rView
Absolute view coordinates of the widget.
Since both dimensions and upper-left/lower-right coordinates are frequently
used, the
.Ft AG_Rect2
structure contains the fields
.Va x1 ,
.Va y1 ,
.Va x2
and
.Va y2 ,
as well as
.Va w
and
.Va h .
.It Ft AG_Rect2 rSens
The sensitivity rectangle.
This defines that area of the display which should respond to cursor events.
.El
.Sh FLAGS
The
.Va flags
member of the
.Nm
structure accepts the following flags:
.Bl -tag -width "AG_WIDGET_UNFOCUSED_BUTTONDOWN "
.It AG_WIDGET_HFILL
Hint to container widgets that in a vertical packing, this widget can expand
to fill all remaining space.
.It AG_WIDGET_VFILL
Hint to container widgets that in a horizontal packing, this widget can expand
to fill all remaining space.
.It AG_WIDGET_HIDE
Disable rendering of this widget (does not affect widget's children).
.It AG_WIDGET_DISABLED
Meaning is widget-specific but it generally disables user input (read-only,
set with
.Fn AG_WidgetDisable
and
.Fn AG_WidgetEnable  ) .
See
.Dq INPUT STATE
section for more details.
.It AG_WIDGET_FOCUSABLE
The widget is allowed to grab the focus; normally set by
.Fn AG_WidgetSetFocusable .
Note that the widget may still become "focused" if child widgets are attached
to it and one of them happens to grab focus.
.It AG_WIDGET_UNFOCUSED_MOTION
Receive
.Sq window-mousemotion
events unconditionally (focus is required by default).
.It AG_WIDGET_UNFOCUSED_BUTTONUP
Receive all
.Sq window-mousebuttonup
(mouse button release) events unconditionally.
.It AG_WIDGET_UNFOCUSED_BUTTONDOWN
Receive all
.Sq window-mousebuttonup
(mouse button press) events unconditionally.
.It AG_WIDGET_UNFOCUSED_KEYDOWN
Receive
.Sq window-keydown
(key press) events unconditionally (focus is required by default).
.It AG_WIDGET_UNFOCUSED_KEYUP
Receive
.Sq window-keyup
(key release) events unconditionally (focus is required by default).
.It AG_WIDGET_CATCH_TAB
When the user presses the
.Dv TAB
key, generate normal
.Sq window-keydown
and
.Sq window-keyup
events.
Without this flag,
.Dv TAB
is used to change the focus to the next widget.
.It AG_WIDGET_NOSPACING
Advise parent container widgets to avoid applying spacing and padding rules
to this widget.
This flag is used by such widgets as
.Xr AG_Titlebar 3
and
.Xr AG_Menu 3 .
.El
.Sh EXAMPLES
See
.Pa demos/widgets
in the Agar source distribution.
.Sh SEE ALSO
.Xr AG_Style 3 ,
.Xr AG_Surface 3 ,
.Xr AG_View 3 ,
.Xr AG_Window 3
.Sh HISTORY
The
.Nm
interface first appeared in Agar 1.0.
