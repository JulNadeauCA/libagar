.\" Copyright (c) 2002-2010 Hypertriton, Inc. <http://hypertriton.com/>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd August 20, 2002
.Dt AG_WIDGET 3
.Os
.ds vT Agar API Reference
.ds oS Agar 1.4
.Sh NAME
.Nm AG_Widget
.Nd agar widget framework
.Sh SYNOPSIS
.Bd -literal
#include <agar/core.h>
#include <agar/gui.h>
.Ed
.Sh DESCRIPTION
An Agar graphical user interface is described as a tree of widgets
(i.e., structures derived from
.Nm ) .
.Pp
A widget object is always attached (via
.Xr AG_ObjectAttach 3 )
to a parent
.Em container
widget.
Some container widgets (such as
.Xr AG_Box 3
or
.Xr AG_Window 3 )
are designed as general-purpose container widgets.
Other widgets (such as
.Xr AG_FileDlg 3 )
will internally create, attach and position a specific set of child widgets
to create a complex, easily re-usable dialog (Agar developers are encouraged
to create custom widgets using this technique).
.Pp
The
.Nm
structure is derived from
.Xr AG_Object 3 .
Using Agar's Object system, custom widgets are easily implemented (or derived
from existing widget classes) as part of user applications.
Agar widgets are extensively re-used.
The Object system also provides the
.Xr AG_Event 3
system and the
.Xr AG_Variable 3
interface which is the basis of widget
.Em bindings
(see
.Dq BINDINGS
section below).
.Sh INHERITANCE HIERARCHY
.Xr AG_Object 3 ->
.Nm .
.Sh CLASS OPERATIONS
Object operations specific to the
.Nm
class are defined as follows:
.Bd -literal
typedef struct ag_widget_class {
	struct ag_object_class _inherit;
	void (*draw)(AG_Widget *w);
	void (*size_request)(AG_Widget *w, AG_SizeReq *req);
	int  (*size_allocate)(AG_Widget *w, const AG_SizeAlloc *alloc);
} AG_WidgetClass;
.Ed
.Pp
The
.Fn draw
operation renders the widget to the display.
Throughout the documentation, the
.Fn draw
operation is referred to as the
.Sq rendering context ,
and some functions (such as
.Fn AG_WidgetBlitSurface )
are not safe to invoke in any other context.
.Pp
The
.Fn size_request
option queries the widget for an initial, preferred geometry, without any
guarantee that the request will be satisfied.
For example, a
.Xr AG_Label 3
widget might return the expected size in pixels of the rendered label's text.
.Pp
The
.Fn size_allocate
function is called whenever the widget has been allocated a new size
or position within its parent container.
The
.Ft AG_SizeAlloc
parameter specifies the new allocation.
It is also safe to assume that when
.Fa size_allocate
is invoked, the
.Va w ,
.Va h ,
.Va x ,
.Va y
members of the
.Nm
structure are already set to the new allocated position and size.
.Pp
The
.Fn size_allocate
routine of a container widget is responsible for positioning and
dimensioning of child widgets attached to it (by calling
.Fn AG_WidgetSizeAlloc
on them -- see
.Dq WIDGET SIZING
section below).
The function should return 0 on success or -1 to flag the widget as
"undersize", disabling further calls to
.Fn draw .
.Sh WIDGET SIZING
.nr nS 1
.Ft "void"
.Fn AG_Expand "AG_Widget *widget"
.Pp
.Ft "void"
.Fn AG_ExpandHoriz "AG_Widget *widget"
.Pp
.Ft "void"
.Fn AG_ExpandVert "AG_Widget *widget"
.Pp
.Ft "void"
.Fn AG_WidgetSizeReq "AG_Widget *widget" "AG_SizeReq *req"
.Pp
.Ft "int"
.Fn AG_WidgetSizeAlloc "AG_Widget *widget" "AG_SizeAlloc *alloc"
.Pp
.Ft void
.Fn AG_WidgetSetPosition "AG_Widget *widget" "int x" "int y"
.Pp
.Ft void
.Fn AG_WidgetSetSize "AG_Widget *widget" "int w" "int h"
.Pp
.Ft void
.Fn AG_WidgetSetGeometry "AG_Widget *widget" "AG_Rect rect"
.Pp
.Ft void
.Fn AG_WidgetUpdate "AG_Widget *widget"
.Pp
.nr nS 0
The
.Fn AG_Expand
function arranges for the widget to expand, filling all available area
in its parent container widget.
.Fn AG_ExpandHoriz
and
.Fn AG_ExpandVert
cause the widget to expand to fill available space horizontally or vertically.
.Pp
Note that most widget constructors recognize
.Dv AG_FOO_EXPAND ,
.Dv AG_FOO_HFILL
and
.Dv AG_FOO_VFILL
option flags.
Setting these flags is equivalent to calling
.Fn AG_Expand ,
.Fn AG_ExpandHoriz
and
.Fn AG_ExpandVert ,
respectively.
.Pp
The
.Fn AG_WidgetSizeReq
function invokes the
.Fn size_request
operation of the widget and returns its size requisition into
.Fa req .
.Fn AG_WidgetSizeAlloc
allocates the given position and geometry of the widget.
.Pp
.Fn AG_WidgetSizeReq
and
.Fn AG_WidgetSizeAlloc
are meant to be called only from within the
.Fn size_request
and
.Fn size_allocate
functions of a container widget implementation, in order to
size and position the child widgets attached to the container
(if you must set widget geometries explicitely, use either the
.Xr AG_Fixed 3
container, or create your own container widget).
.Pp
The
.Ft AG_SizeReq
and
.Ft AG_SizeAlloc
structures are defined as follows:
.Bd -literal
typedef struct ag_size_req {
	int w, h;			/* Requested geometry in pixels */
} AG_SizeReq;

typedef struct ag_size_alloc {
	int w, h;			/* Allocated geometry in pixels */
	int x, y;			/* Allocated position in pixels */
} AG_SizeAlloc;
.Ed
.Pp
.Fn AG_WidgetSetPosition
sets the effective position of the widget relative to its parent container.
.Fn AG_WidgetSetSize
sets the size of the widget in pixels.
.Fn AG_WidgetSetGeometry
sets both position and size of a widget from the specified
.Ft AG_Rect .
These functions are typically only used in the context of the
.Fn size_request
and
.Fn size_allocate
routines of container widgets.
.Pp
.Fn AG_WidgetUpdate
requests an update of the computed coordinates and geometries of all widgets
attached to the widget's current window.
The widget may or may not be attached to a parent window (the actual update
will be performed later, before rendering starts in
.Fn AG_WindowDraw ) .
.Fn AG_WidgetUpdate
should be called following
.Xr AG_ObjectAttach 3
or
.Xr AG_ObjectDetach 3
calls made in event context, or manual modifications of the
.Va x ,
.Va y ,
.Va w ,
.Va h
fields of the
.Nm
structure.
.Sh INPUT STATE
.nr nS 1
.Ft "void"
.Fn AG_WidgetEnable "AG_Widget *widget"
.Pp
.Ft "void"
.Fn AG_WidgetDisable "AG_Widget *widget"
.Pp
.Ft "int"
.Fn AG_WidgetEnabled "AG_Widget *widget"
.Pp
.Ft "int"
.Fn AG_WidgetDisabled "AG_Widget *widget"
.Pp
.nr nS 0
The "enabled" flag of a widget determines whether the user is allowed to modify
whatever data the widget is accessing.
The interpretation of this flag is widget-specific.
.Fn AG_WidgetEnable
sets the flag,
.Fn AG_WidgetDisable
clears it.
These functions will raise the
.Sq widget-enabled
and
.Sq widget-disabled
events accordingly.
.Pp
The functions
.Fn AG_WidgetEnabled
and
.Fn AG_WidgetDisabled
return the current "enabled" state of the widget.
The
.Nm
object must be locked when the call is made.
.Sh FOCUS STATE
The focus state of widgets enables the reception of specific types of
events which are filtered by default.
The focus state also affects the behavior and appearance of some widgets.
A widget holding focus (in a currently focused window) will receive mouse
events
.Fn mouse-motion ,
.Fn mouse-button-up ,
as well as keyboard events
.Fn key-up
and
.Fn key-down
(note that unfocused widgets can be configured to receive those events
unfiltered as well using the
.Dv AG_WIDGET_UNFOCUSED_*
options).
.Pp
.nr nS 1
.Ft "void"
.Fn AG_WidgetSetFocusable "AG_Widget *widget" "int enable"
.Pp
.Ft "int"
.Fn AG_WidgetFocus "AG_Widget *widget"
.Pp
.Ft "void"
.Fn AG_WidgetUnfocus "AG_Widget *widget"
.Pp
.Ft "int"
.Fn AG_WidgetIsFocused "AG_Widget *widget"
.Pp
.Ft "int"
.Fn AG_WidgetIsFocusedInWindow "AG_Widget *widget"
.Pp
.Ft "void"
.Fn AG_WidgetForwardFocus "AG_Widget *widget" "AG_Widget *widgetToFocus"
.Pp
.nr nS 0
.Fn AG_WidgetSetFocusable
specifies whether the widget should be allowed to receive focus (1 = accept
focus, 0 = reject focus).
The default is to reject focus.
Further
.Fn AG_WidgetFocus
calls on a widget rejecting focus will return 0.
.Pp
The
.Fn AG_WidgetFocus
function gives focus to the given widget (and all of its parent widgets,
up to the parent window if there is one).
.Fn AG_WidgetFocus
returns 1 on success and 0 if the widget cannot gain focus (i.e.,
.Dv AG_WIDGET_FOCUSABLE
is not set).
If the widget is already focused, the function is a no-op and returns 1.
.Pp
.Fn AG_WidgetUnfocus
removes the focus state from the given widget and its children (but not
the parent window if any).
.Pp
.Fn AG_WidgetIsFocused
returns 1 if the widget is currently holding focus (i.e., the widget
has the focus flag set, and its parent window, if any, is focused as
well).
.Fn AG_WidgetIsFocusedInWindow
returns 1 if the widget has the focus flag set (without evaluating the
focus state of any parent windows).
With both functions, the
.Xr AG_View 3
VFS as well as the
.Nm
object must be locked when the call is made.
.Pp
.Pp
.Fn AG_WidgetForwardFocus
arranges automatic forwarding of the focus to a specified widget.
Whenever
.Fa AG_WidgetFocus
will be invoked on
.Fa widget ,
the focus will be given to
.Fa widgetToFocus
instead.
.Sh COORDINATES
.nr nS 1
.Ft int
.Fn AG_WidgetArea "AG_Widget *widget" "int x" "int y"
.Pp
.Ft int
.Fn AG_WidgetRelativeArea "AG_Widget *widget" "int x" "int y"
.Pp
.nr nS 0
The
.Fn AG_WidgetArea
routine tests whether view coordinates
.Fa x
and
.Fa y
lie inside of the widget's allocated space.
The
.Fn AG_WidgetRelativeArea
variant accepts widget coordinates.
.Sh BLITTING SURFACES
These functions manage blitting of graphical surfaces.
They are designed specifically for use in GUI widgets.
The
.Fn AG_WidgetBlit*
routines must all be invoked from rendering context (i.e., the
.Fa draw
operation of widgets), and may not be used in any other context.
.Pp
.nr nS 1
.Ft void
.Fn AG_WidgetBlit "AG_Widget *widget" "AG_Surface *src" "int x" "int y"
.Pp
.Ft int
.Fn AG_WidgetMapSurface "AG_Widget *widget" "AG_Surface *su"
.Pp
.Ft int
.Fn AG_WidgetMapSurfaceNODUP "AG_Widget *widget" "AG_Surface *su"
.Pp
.Ft void
.Fn AG_WidgetReplaceSurface "AG_Widget *widget" "int surface_id" "AG_Surface *newSurface"
.Pp
.Ft void
.Fn AG_WidgetReplaceSurfaceNODUP "AG_Widget *widget" "int surface_id" "AG_Surface *newSurface"
.Pp
.Ft void
.Fn AG_WidgetUnmapSurface "AG_Widget *widget" "int surface_id"
.Pp
.Ft void
.Fn AG_WidgetUpdateSurface "AG_Widget *widget" "int surface_id"
.Pp
.Ft void
.Fn AG_WidgetBlitFrom "AG_Widget *dstWidget" "AG_Widget *srcWidget" "int surface_id" "AG_Rect *rs" "int x" "int y"
.Pp
.Ft void
.Fn AG_WidgetBlitSurface "AG_Widget *widget" "int surface_id" "int x" "int y"
.Pp
.nr nS 0
The
.Fn AG_WidgetBlit
function performs a software->hardware blit from the surface
.Fa src
to the video display at the given widget coordinates.
.Fn AG_WidgetBlit
must invoked in rendering context.
See
.Xr AG_Surface 3
for more information on the Agar surface structure.
.Pp
Software to hardware blits are slow, so the widget system provides an
interface to efficiently take advantage of graphics hardware where it
is available.
.Fn AG_WidgetMapSurface
registers the specified
.Xr AG_Surface 3
with the widget, returning an integer handle to that surface.
The surface can be subsequently rendered by calling
.Fn AG_WidgetBlitSurface
or
.Fn AG_WidgetBlitFrom
using this handle.
The exact manner in which the surface is rendered depends on the Agar
driver in use.
For OpenGL-based drivers, a matching hardware texture will typically be
generated for the surface on the first call to
.Fn AG_WidgetBlitSurface ,
and cached.
.Pp
By default, mapped surfaces are automatically freed once the widget
is destroyed.
The
.Fn AG_WidgetMapSurfaceNODUP
variant sets the "NODUP" flag on the given surface, so the widget system
will never attempt to free the surface.
.Pp
Note that
.Fn AG_WidgetMapSurface
will never duplicate the surface.
The function merely registers the provided surface pointer with the widget
structure.
The surface pointer must remain valid for the lifetime of the widget (if in
doubt, use
.Xr AG_SurfaceDup 3 ) .
.Pp
Under multithreading,
.Fn AG_WidgetMapSurface
may be invoked from any context, but the returned name is only valid as
long as the widget is locked (see
.Xr AG_ObjectLock 3 ) .
.Pp
.Fn AG_WidgetReplaceSurface
replaces the contents of a previously-mapped surface with the contents of
.Fa newSurface .
The
.Fn AG_WidgetReplaceSurfaceNODUP
variant avoids duplicating the surface.
.Pp
.Fn AG_WidgetUnmapSurface
destroys the given surface mapping.
It is equivalent to invoking
.Fn AG_WidgetReplaceSurface
with a NULL surface.
The function is safe to use from any context.
.Pp
It is important to note that in OpenGL mode,
.Fn AG_WidgetReplaceSurface
and
.Fn AG_WidgetUnmapSurface
will not immediately delete any previous texture associated with the previous
surface.
Instead, it will queue the delete operation for future execution from
rendering context, as required by thread safety.
.Pp
The
.Fn AG_WidgetUpdateSurface
function should be invoked whenever a mapped surface is changed.
If hardware surfaces are supported, it will cause an upload of the software
surface to the hardware (otherwise it is a no-op).
.Pp
The
.Fn AG_WidgetBlitFrom
function renders a previously mapped (possibly hardware) surface from the
source widget
.Fa srcWidget
(using source rectangle
.Fa rs )
onto the destination widget
.Fa dstWidget ,
at coordinates
.Fa x ,
.Fa y .
This function must be invoked in rendering context.
.Pp
The
.Fn AG_WidgetBlitSurface
variant invokes
.Fa AG_WidgetBlitFrom
with the same argument for both
.Fa srcWidget
and
.Fa dstWidget
(and
.Fa rs
set to NULL).
.Sh RENDERING AND PRIMITIVES
These routines are provided for use in GUI widgets, exclusively in the context
of the widget
.Fa draw
operation.
.Pp
A number of simple primitive drawing routines are also available via the
.Xr AG_WidgetPrimitives 3
interface.
.Pp
.nr nS 1
.Ft void
.Fn AG_PushClipRect "AG_Widget *widget" "AG_Rect r"
.Pp
.Ft void
.Fn AG_PopClipRect "AG_Widget *widget"
.nr nS 0
.Pp
The
.Fn AG_PushClipRect
function pushes a rectangle onto the stack of clipping rectangles.
.Fn AG_PopClipRect
pops the last entry from the clipping rectangle stack.
The clipping rectangle is given in coordinates relative to the widget.
.Pp
These routines must be invoked from GUI rendering context.
The method of clipping depends on the underlying graphics API.
For instance, SDL drivers use
.Xr SDL_SetClipRect 3
and OpenGL drivers use
.Xr glClipPlane 3 .
In either case, the actual clipping rectangle passed to the graphics API
is the intersection of all clipping rectangles on the stack.
.Sh BINDINGS
Agar widgets can be configured to directly access data of specific types.
For example,
.Xr AG_Slider 3
provides a binding called
.Sq value ,
which (in the current implementation) supports the standard integer and
floating-point types.
Connecting
.Sq value
to an integer or floating point variable allows the user to directly set the
value of the variable with the need for tedious callback routines.
Similarly,
.Xr AG_Textbox 3
connects to a text buffer.
It is also possible to configure
.Sq function
bindings such that the value is evaluated from a provided function every time
the variable is retrieved.
.Pp
Widget bindings are established using the
.Fn AG_BindFoo ,
.Fn AG_BindFooFn
and
.Fn AG_BindFooMp
functions, see
.Xr AG_Variable 3
for more information.
.Pp
Bindings are specifically documented in the API reference.
Manual pages for standard Agar widgets include a
.Dq BINDINGS
section with a list of bindings supported by each widget, their supported
data types and effects.
.Pp
Since the value of bindings associated with a widget often dictates the
way the widget is rendered (e.g.,
.Xr AG_Button 3
is drawn as a pressed button if its
.Sq state
binding is 1), Agar provides a built-in facility to monitor binding values
and request a video update whenever the value changes:
.Sh WIDGET REDRAW CONTROL
.nr nS 1
.Ft "void"
.Fn AG_Redraw "AG_Widget *widget"
.Pp
.Ft "void"
.Fn AG_RedrawOnChange "AG_Widget *widget" "int refresh_ms" "const char *binding_name"
.Pp
.Ft "void"
.Fn AG_RedrawOnTick "AG_Widget *widget" "int refresh_ms"
.Pp
.nr nS 0
.Pp
The
.Fn AG_Redraw
function signals that the widget must be redrawn to the video display.
It is equivalent to setting the
.Va dirty
variable of the widget's parent window to 1.
If called from rendering context (i.e., from the
.Fn draw
operation of a widget),
.Fn AG_Redraw
is a no-op.
.Pp
The
.Fn AG_RedrawOnChange
function arranges for the widget to be automatically redrawn whenever the
value associated with the existing binding
.Fa binding_name
changes.
The value of the binding will be checked at the specified interval
.Fa refresh_ms
in milliseconds.
If a
.Fa refresh_ms
argument of -1 is passed, the effect of any previous
.Fn AG_RedrawOnChange
call with the specified binding is disabled.
.Pp
The
.Fn AG_RedrawOnTick
function arranges for the widget to be unconditionally redrawn at the
specified interval in milliseconds.
If a
.Fa refresh_ms
argument of -1 is passed, the effect of any previous
.Fn AG_RedrawOnTick
call is disabled.
.Sh WIDGET QUERIES
.nr nS 1
.Ft "AG_Window *"
.Fn AG_ParentWindow "AG_Widget *widget"
.Pp
.Ft "AG_Widget *"
.Fn AG_WidgetFind "AG_Display *view" "const char *name"
.Pp
.Ft "AG_Widget *"
.Fn AG_WidgetFindFocused "AG_Window *win"
.Pp
.Ft "AG_Widget *"
.Fn AG_WidgetFindPoint "const char *classMask" "int x" "int y"
.Pp
.Ft "AG_Widget *"
.Fn AG_WidgetFindRect "const char *classMask" "int x" "int y" "int w" "int h"
.Pp
.nr nS 0
.Fn AG_ParentWindow
returns a pointer to the parent
.Xr AG_Window 3
for the given widget.
If the widget is unattached, NULL is returned.
The
.Xr AG_View 3
VFS must be locked when the call is made.
.Pp
The
.Fn AG_WidgetFind
function searches for a given widget by name, given an absolute path,
and returns a pointer to the widget, or NULL.
.Fn AG_WidgetFind
works differently from the generic
.Xr AG_ObjectFind 3
function, in that widgets not effectively attached to the
.Xr AG_View 3
may be included in the search (for example, widgets attached to
.Xr AG_Notebook 3
tabs).
.Pp
.Fn AG_WidgetFindFocused
recursively searches
.Fa win
for a widget holding focus.
Where multiple widgets may be holding focus, widgets found deepest in the
tree have priority over their parents.
.Fn AG_WidgetFindFocused
returns NULL if no widget is focused.
.Pp
.Fn AG_WidgetFindPoint
searches for a widget matching the given class mask enclosing the point
specified in display (pixel) coordinates.
The
.Fn AG_WidgetFindRect
variant requires that the widget enclose the specified rectangle.
.Pp
Under multithreading, the return value of
.Fn AG_WidgetFind* ,
should be considered valid only as long as the
.Xr AG_View 3
VFS remains locked.
.Sh WIDGET RENDERING
.nr nS 1
.Ft "void"
.Fn AG_WidgetDraw "AG_Widget *widget"
.Pp
.Ft "void"
.Fn AG_BeginRendering "AG_Driver *drv"
.Pp
.Ft "void"
.Fn AG_EndRendering "AG_Driver *drv"
.Pp
.Ft "void"
.Fn AG_WidgetHide "AG_Widget *widget"
.Pp
.Ft "void"
.Fn AG_WidgetShow "AG_Widget *widget"
.Pp
.Ft "int"
.Fn AG_WidgetVisible "AG_Widget *widget"
.Pp
.Ft "AG_Surface *"
.Fn AG_WidgetSurface "AG_Widget *widget"
.Pp
.Ft "void"
.Fn AG_SetStyle "AG_Widget *widget" "AG_Style *style"
.Pp
.nr nS 0
The
.Fn AG_WidgetDraw
routine renders a widget to the display.
It is typically invoked from an event loop routine (such as
.Xr AG_EventLoop 3 ) ,
to recursively draw the hierarchy of visible GUI elements.
.Pp
In the event loop,
.Fn AG_WidgetDraw
invocations must be enclosed between calls to
.Fn AG_BeginRendering
and
.Fn AG_EndRendering .
.Pp
.Fn AG_WidgetHide
and
.Fn AG_WidgetShow
set the visibility of a widget.
.Fn AG_WidgetVisible
returns 1 if the widget is visible, 0 if hidden.
.Pp
The
.Fn AG_WidgetSurface
routine renders the widget to a newly-allocated
.Xr AG_Surface 3 .
This surface should be freed after use.
.Pp
.Fn AG_SetStyle
changes the style (theme) associated with a widget.
See
.Xr AG_Style 3
for more information about widget themes.
Note that child widgets automatically inherit the theme associated with
their parent object.
.Sh WIDGET ACTIONS
Input events such as key presses or mouse button events can be "tied" to
simple actions, such as executing a specified routine or controlling a flag
variable.
Widget actions are preferred over event handlers where the conditions are fixed
(e.g., a specific mouse button was clicked, or a specific key was pressed).
Keyboard and mouse bindings may be edited by the user.
Actions are identified by a name string, and are mapped to events by a table
kept in the
.Nm
structure.
The
.Xr AG_MenuWidgetActions 3
function of
.Xr AG_Menu 3
creates a generic menu item containing a widget's available actions.
.Pp
.nr nS 1
.Ft "AG_Action *"
.Fn AG_ActionFn "AG_Widget *widget" "const char *action" "void (*fn)(AG_Event *)" "const char *fnArgs" "..."
.Pp
.Ft "AG_Action *"
.Fn AG_ActionSetInt "AG_Widget *widget" "const char *action" "int *variable" "int value"
.Pp
.Ft "AG_Action *"
.Fn AG_ActionSetFlag "AG_Widget *widget" "const char *action" "Uint *variable" "Uint bitmask" "int value"
.Pp
.Ft "AG_Action *"
.Fn AG_ActionToggleInt "AG_Widget *widget" "const char *action" "int *variable"
.Pp
.Ft "AG_Action *"
.Fn AG_ActionToggleFlag "AG_Widget *widget" "const char *action" "Uint *variable" "Uint bitmask"
.Pp
.Ft void
.Fn AG_ActionOnButtonDown "AG_Widget *widget" "int button" "const char *action"
.Pp
.Ft void
.Fn AG_ActionOnButtonUp "AG_Widget *widget" "int button" "const char *action"
.Pp
.Ft void
.Fn AG_ActionOnKeyDown "AG_Widget *widget" "AG_KeySym sym" "AG_KeyMod mod" "const char *action"
.Pp
.Ft void
.Fn AG_ActionOnKeyUp "AG_Widget *widget" "AG_KeySym sym" "AG_KeyMod mod" "const char *action"
.Pp
.Ft void
.Fn AG_ActionOnKey "AG_Widget *widget" "AG_KeySym sym" "AG_KeyMod mod" "const char *action"
.Pp
.Ft int
.Fn AG_ExecMouseAction "AG_Widget *widget" "AG_ActionEventType type" "int button" "int x" "int y"
.Pp
.Ft int
.Fn AG_ExecKeyAction "AG_Widget *widget" "AG_ActionEventType type" "AG_KeySym sym" "AG_KeyMod mod"
.Pp
.Ft int
.Fn AG_ExecAction "AG_Widget *widget" "AG_Action *a"
.Pp
.nr nS 0
.Fn AG_ActionFn
registers a new widget action which is to invoke a callback function
.Fa fn ,
with arguments
.Fa fnArgs .
See
.Xr AG_Event 3
for a description of the
.Fa fnArgs
format.
.Pp
.Fn AG_ActionSetInt
registers a new action which is to set an integer
.Fa variable
to a specified
.Fa value .
Instead of an integer variable,
.Fn AG_ActionSetFlag
sets the bits specified by
.Fa bitmask
to the specified
.Fa value
(of 1 or 0).
The
.Fn AG_ActionToggleInt
and
.Fn AG_ActionToggleFlag
variants do not take an explicit
.Fa value
argument, and toggle the current value instead.
.Pp
Actions are tied to events (identified by
.Fa event
string) with
.Fn AG_ActionOn* .
.Pp
.Fn AG_ActionOnButtonDown
and
.Fn AG_ActionOnButtonUp
tie an action to a button press and a button release event, respectively.
The
.Fa button
argument specifies the button index (see
.Xr AG_MouseButton 3 ) .
.Fn AG_ActionOnKeyDown
and
.Fn AG_ActionOnKeyUp
tie an action to a key press and key release event, respectively.
The
.Fa sym
argument specifies the key (see
.Xr AG_KeySym 3 ) ,
and
.Fa mod
specifies the modifier keys which must be in effect.
To match any key or any modifier state,
.Dv AG_KEY_ANY
or
.Dv AG_KEYMOD_ANY
can be used.
.Pp
With
.Fn AG_ActionOnKeyDown
and
.Fn AG_ActionOnKeyUp ,
the action is triggered once immediately on key press or key release.
The
.Fn AG_ActionOnKey
variant ties an action to a key press, but with "key repeat" behavior.
The action is triggered immediately once after an initial key press.
If the key combination is held longer than the "key delay" (by default 250ms),
the event is repeated with the "key repeat" interval (by default 30ms).
.Pp
.Fn AG_ExecMouseAction
executes any action associated with mouse button events.
Accepted
.Fa type
values are
.Dv AG_ACTION_ON_BUTTONDOWN
and
.Dv AG_ACTION_ON_BUTTONUP .
.Fa button
is the pressed button index (see
.Xr AG_MouseButton 3 ) .
.Fa x
and
.Fa y
is the position of the cursor in the widget's coordinate system.
.Pp
.Fn AG_ExecKeyAction
executes any action associated with keyboard events.
Accepted
.Fa type
values are
.Dv AG_ACTION_ON_KEYDOWN
and
.Dv AG_ACTION_ON_KEYUP .
.Fa sym
and
.Fa mod
specify the key index and modifier state (see
.Xr AG_KeySym 3
and
.Xr AG_KeyMod 3 ) .
.Pp
.Fn AG_ExecAction
executes the specified action.
.Fn AG_ExecAction
is rarely used directly, but it is invoked internally by the
.Fn AG_ExecFooAction
functions.
.Sh EVENTS
The GUI system may send
.Nm
objects the following events:
.Pp
.Bl -tag -compact -width 2n
.It Fn widget-shown "void"
The widget is now visible.
NOTE: User-defined handlers for this event should use
.Xr AG_AddEvent 3
instead of
.Xr AG_SetEvent 3 .
.It Fn widget-hidden "void"
The widget is no longer visible.
NOTE: User-defined handlers for this event should use
.Xr AG_AddEvent 3
instead of
.Xr AG_SetEvent 3 .
.It Fn widget-enabled "void"
Input state has been enabled with
.Xr AG_WidgetEnable 3 .
.It Fn widget-disabled "void"
Input state has been disabled with
.Xr AG_WidgetDisable 3 .
.It Fn widget-moved "void"
The widget (or one of its parents) has been moved.
.It Fn widget-gainfocus "void"
The widget now holds focus inside its parent container.
.It Fn widget-lostfocus "void"
The widget no longer holds focus.
.It Fn widget-bound "AG_Variable *V"
A variable binding has been configured.
NOTE: This event is deprecated; please use the
.Sq bound
event instead (see
.Xr AG_Object 3 ) .
.El
.Pp
The following events are usually generated by input devices:
.Pp
.Bl -tag -compact -width 2n
.It Fn mouse-motion "int x" "int y" "int xRel" "int yRel" "int buttons"
The widget is receiving mouse motion events, and the cursor has been moved.
.Fa x
and
.Fa y
are the coordinates of the cursor in the widget's local coordinate system
(these coordinates may be negative or exceed the widget's dimensions if the
cursor is not in the widget's area).
.Fa xRel
and
.Fa yRel
represent the displacement relative to the last position of the mouse cursor.
The
.Fa buttons
argument is a bitmask representing the state of mouse buttons (see
.Xr AG_MouseButton 3 ) .
.It Fn mouse-button-up "int button" "int x" "int y"
The widget is receiving mouse button release events, and
.Fa button
has been released.
.Fa x
and
.Fa y
are the cursor coordinates in the widget's local coordinate system.
.It Fn mouse-button-down "int button" "int x" "int y"
The widget is receiving mouse button events, and
.Fa button
has been pressed.
.Fa x
and
.Fa y
are the cursor coordinates in the widget's local coordinate system.
.It Fn key-down "int key" "int mod" "Ulong unicode"
The widget is receiving keyboard events and
.Fa key
has been pressed.
The
.Fa mod
argument is a bitmask representing the state of the current key modifiers and
.Fa unicode
is the corresponding Unicode character in UCS-4 format (or 0 if there are none).
See
.Xr AG_KeySym 3
for details.
.It Fn key-up "int key" "int mod" "Ulong unicode"
The widget is receiving keyboard events and
.Fa key
has been released.
The
.Fa mod
argument is a bitmask representing the state of the current key modifiers and
.Fa unicode
is the corresponding Unicode character in UCS-4 format (or 0 if there are none).
See
.Xr AG_KeySym 3
for details.
.El
.Sh STRUCTURE DATA
For the
.Ft AG_Widget
object:
.Pp
.Bl -tag -width "AG_Rect2 rView "
.It Ft Uint flags
Option flags (see
.Dq FLAGS
section below).
.It Ft int x, y
Pixel coordinates of the widget relative to its parent.
.It Ft int w, h
Dimensions of the widget in pixels.
.It Ft AG_Rect2 rView
Absolute view coordinates of the widget.
Since both dimensions and upper-left/lower-right coordinates are frequently
used, the
.Ft AG_Rect2
structure contains the fields
.Va x1 ,
.Va y1 ,
.Va x2
and
.Va y2 ,
as well as
.Va w
and
.Va h .
.It Ft AG_Rect2 rSens
The sensitivity rectangle.
This defines that area of the display which should respond to cursor events.
.El
.Sh FLAGS
The
.Va flags
member of the
.Nm
structure accepts the following flags:
.Bl -tag -width "AG_WIDGET_UNFOCUSED_BUTTONDOWN "
.It AG_WIDGET_HFILL
Hint to container widgets that in a vertical packing, this widget can expand
to fill all remaining space.
.It AG_WIDGET_VFILL
Hint to container widgets that in a horizontal packing, this widget can expand
to fill all remaining space.
.It AG_WIDGET_HIDE
Disable rendering of this widget (does not affect widget's children).
.It AG_WIDGET_DISABLED
Meaning is widget-specific but it generally disables user input (read-only,
set with
.Fn AG_WidgetDisable
and
.Fn AG_WidgetEnable  ) .
See
.Dq INPUT STATE
section for more details.
.It AG_WIDGET_FOCUSABLE
The widget is allowed to grab the focus; normally set by
.Fn AG_WidgetSetFocusable .
Note that the widget may still become "focused" if child widgets are attached
to it and one of them happens to grab focus.
.It AG_WIDGET_UNFOCUSED_MOTION
Receive
.Sq mouse-motion
events unconditionally (focus is required by default).
.It AG_WIDGET_UNFOCUSED_BUTTONUP
Receive all
.Fn mouse-button-up
(mouse button release) events unconditionally.
.It AG_WIDGET_UNFOCUSED_BUTTONDOWN
Receive all
.Fn mouse-button-up
(mouse button press) events unconditionally.
.It AG_WIDGET_UNFOCUSED_KEYDOWN
Receive
.Fn key-down
(key press) events unconditionally (focus is required by default).
.It AG_WIDGET_UNFOCUSED_KEYUP
Receive
.Fn key-up
(key release) events unconditionally (focus is required by default).
.It AG_WIDGET_CATCH_TAB
When the user presses the
.Dv TAB
key, generate normal
.Fn key-down
and
.Fn key-up
events.
Without this flag,
.Dv TAB
is used to change the focus to the next widget.
.It AG_WIDGET_NOSPACING
Advise parent container widgets to avoid applying spacing and padding rules
to this widget.
This flag is used by such widgets as
.Xr AG_Titlebar 3
and
.Xr AG_Menu 3 .
.El
.Sh SEE ALSO
.Xr AG_Cursor 3 ,
.Xr AG_KeySym 3 ,
.Xr AG_KeyMod 3 ,
.Xr AG_GlobalKeys 3 ,
.Xr AG_Style 3 ,
.Xr AG_Surface 3 ,
.Xr AG_Variable 3 ,
.Xr AG_View 3 ,
.Xr AG_WidgetPrimitives 3 ,
.Xr AG_Window 3
.Sh HISTORY
The
.Nm
interface first appeared in Agar 1.0.
Widget-level variable bindings have been replaced by generic
.Xr AG_Variable 3
pointers in Agar 1.3.4.
The widget "actions" interface first appeared in Agar 1.4.
