.\" Copyright (c) 2009 Hypertriton, Inc. <http://hypertriton.com/>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd September 13, 2009
.Dt AG_WIDGETPRIMITIVES 3
.Os
.ds vT Agar API Reference
.ds oS Agar 1.4
.Sh NAME
.Nm AG_WidgetPrimitives
.Nd agar widget rendering primitives
.Sh SYNOPSIS
.Bd -literal
#include <agar/core.h>
#include <agar/gui.h>
.Ed
.Sh DESCRIPTION
Agar provides a few primitive rendering routines designed specifically for
the rendering of GUI elements, as opposed to general-purpose graphics (look
into other libraries, such as the included
.Xr VG 3
and
.Xr RG 3
for this).
.Pp
It is illegal to invoke the following routines outside of
.Xr AG_Widget 3
rendering context (e.g., the widget
.Fn draw
operation).
The coordinates for all
.Fn AG_Draw*
functions are given in pixels, in the widget's local coordinate system.
The
.Ft AG_Color
and
.Ft AG_BlendFn
types are commonly used to specify colors and blending modes, see
.Xr AG_Color 3
and
.Xr AG_BlendFn 3
for details.
.Sh PRIMITIVES
.nr nS 1
.Ft void
.Fn AG_PutPixel "AG_Widget *widget" "int x" "int y" "AG_Color c"
.Pp
.Ft void
.Fn AG_PutPixelRGB "AG_Widget *widget" "int x" "int y" "Uint8 r" "Uint8 g" "Uint8 b"
.Pp
.Ft void
.Fn AG_PutPixel32 "AG_Widget *widget" "int x" "int y" "Uint32 c"
.Pp
.Ft void
.Fn AG_BlendPixel "AG_Widget *widget" "int x" "int y" "AG_Color c" "AG_BlendFn blendFn"
.Pp
.Ft void
.Fn AG_BlendPixelRGBA "AG_Widget *widget" "int x" "int y" "Uint8 c[4]" "AG_BlendFn blendFn"
.Pp
.Ft void
.Fn AG_BlendPixel32 "AG_Widget *widget" "int x" "int y" "Uint32 c" "AG_BlendFn blendFn"
.Pp
.Ft void
.Fn AG_DrawCircle "AG_Widget *widget" "int x" "int y" "int radius" "AG_Color c"
.Pp
.Ft void
.Fn AG_DrawCircle2 "AG_Widget *widget" "int x" "int y" "int radius" "AG_Color c"
.Pp
.Ft void
.Fn AG_DrawLine "AG_Widget *widget" "int x1" "int y1" "int x2" "int y2" "AG_Color c"
.Pp
.Ft void
.Fn AG_DrawLine2 "AG_Widget *widget" "int x1" "int y1" "int x2" "int y2" "AG_Color c"
.Pp
.Ft void
.Fn AG_DrawLineBlended "AG_Widget *widget" "int x1" "int y1" "int x2" "int y2" "Uint8 c[4]" "AG_BlendFn blendFn"
.Pp
.Ft void
.Fn AG_DrawLineH "AG_Widget *widget" "int x1" "int x2" "int y" "AG_Color c"
.Pp
.Ft void
.Fn AG_DrawLineV "AG_Widget *widget" "int x" "int y1" "int y2" "AG_Color c"
.Pp
.Ft void
.Fn AG_DrawRect "AG_Widget *widget" "AG_Rect r" "AG_Color c"
.Pp
.Ft void
.Fn AG_DrawRectOutline "AG_Widget *widget" "AG_Rect r" "AG_Color c"
.Pp
.Ft void
.Fn AG_DrawRectFilled "AG_Widget *widget" "AG_Rect r" "AG_Color c"
.Pp
.Ft void
.Fn AG_DrawRectBlended "AG_Widget *widget" "AG_Rect r" "AG_Color c" "AG_BlendFn blendFn"
.Pp
.nr nS 0
.Fn AG_PutPixel
writes a single pixel at the specified coordinates.
The
.Fn AG_PutPixelRGB
variant accepts individual red, green and blue color arguments.
.Pp
The
.Fn AG_PutPixel32
variant accepts a 32-bit pixel value such that no conversion is necessary
when writing the pixel to the framebuffer.
Conversion may be achieved using
.Xr AG_MapPixelRGB
with the
.Va videoFmt
member of the widget's associated
.Xr AG_Driver 3
structure.
.Pp
The
.Fn AG_BlendPixel
function writes a pixel at the specified coordinates, using alpha blending
with the specified blending function.
The
.Fn AG_BlendPixelRGBA
variant accepts an array of red, green, blue and alpha arguments.
.Pp
The
.Fn AG_BlendPixel32
variant accepts a 32-bit packed-pixel value such that minimal conversion is
necessary when writing to the framebuffer.
Conversion may be achieved using
.Xr AG_MapPixelRGB
with the global
.Va agSurfaceFmt .
.Pp
Note that active clipping rectangles (see
.Xr AG_Widget 3 )
apply to
.Fn AG_PutPixel*
and
.Fn AG_BlendPixel* .
These operations are also safe to use when underlying graphics driver is not
framebuffer-based.
.Pp
.Fn AG_DrawFrame
draws a 3D-style frame.
.Fn AG_DrawFrameBlended
draws a frame with alpha-blending, with the color
.Fa c
specified as an array of RGBA components, and the given blending mode.
.Pp
.Fn AG_DrawCircle
draws a circle with the origin at
.Fa x ,
.Fa y
and a radius of
.Fa radius
pixels.
.Pp
.Fn AG_DrawLine
scan-converts a line segment going from point
.Fa x1 ,
.Fa y1
to point
.Fa x2 ,
.Fa y2 .
The variants
.Fn AG_DrawLineH
and
.Fn AG_DrawLineV
render horizontal and vertical line segments, respectively.
.Fn AG_DrawLine2
renders two line segments for a 3D-style effect.
.Pp
.Fn AG_DrawLineBlended
renders an alpha-blended line, where the RGBA components are passed as the
.Fa c
array, and the blending function is specified in
.Fa blendFn .
.Pp
The
.Fn AG_DrawRect
function fills a destination rectangle with the specified color.
If the color is non-opaque, blending is performed.
.Pp
.Fn AG_DrawRectOutline
draws the outline of a rectangle.
.Pp
.Fn AG_DrawRectFilled
fills an opaque rectangle with the specified color, ignoring any alpha
component.
.Pp
.Fn AG_DrawRectBlended
draws a blended rectangle of the color
.Fa c ,
specified as an array or RGBA components.
.Fn AG_DrawRectBlended
differs from
.Fn AG_DrawRect
in that it accepts an explicit blending mode
.Fa blendFn
(see
.Xr AG_BlendFn 3
for details).
.Sh SIMPLE GRAPHICAL ELEMENTS
.nr nS 1
.Ft void
.Fn AG_DrawBox "AG_Widget *widget" "AG_Rect r" "int z" "AG_Color c"
.Pp
.Ft void
.Fn AG_DrawBoxDisabled "AG_Widget *widget" "AG_Rect r" "int z" "AG_Color c1" "AG_Color c2"
.Pp
.Ft void
.Fn AG_DrawBoxRounded "AG_Widget *widget" "AG_Rect r" "int z" "int radius" "AG_Color c"
.Pp
.Ft void
.Fn AG_DrawBoxRoundedTop "AG_Widget *widget" "AG_Rect r" "int z" "int radius" "AG_Color c"
.Pp
.Ft void
.Fn AG_DrawTiling "AG_Widget *widget" "AG_Rect r" "int tileSz" "int offset" "AG_Color c1" "AG_Color c2"
.Pp
.Ft void
.Fn AG_DrawFrame "AG_Widget *widget" "AG_Rect r" "int z" "AG_Color c"
.Pp
.Ft void
.Fn AG_DrawFrameBlended "AG_Widget *widget" "AG_Rect r" "Uint8 c[4]" "AG_BlendFn blendFn"
.Pp
.nr nS 0
The
.Fn AG_DrawBox
routine draws a simple 3D-style "box".
.Fa z
specifies the apparent 3D
.Sq depth ,
in pixels.
.Pp
The
.Fn AG_DrawBoxDisabled
variant uses a stipple pattern of
.Fa c1
against
.Fa c2 .
.Fn AG_DrawBoxDisabled
is traditionally used to indicate a GUI element that is not responsive
to user input.
.Pp
.Fn AG_DrawBoxRounded
renders a box with the edges rounded to the given
.Fa radius .
The
.Fn AG_DrawBoxRoundedTop
variant only rounds the top two corners.
.Pp
.Fn AG_DrawTiling
fills the rectangle
.Fa r
with a two-color tiling pattern.
.Fa tileSz
is the size of the tiles in pixels,
.Fa offset
is an offset in pixels and
.Fa c1 ,
.Fa c2
specify the colors of the tiles.
.Sh SYMBOLS
.nr nS 1
.Ft void
.Fn AG_DrawPlus "AG_Widget *widget" "AG_Rect r" "Uint8 c[4]" "AG_BlendFn blendFn"
.Pp
.Ft void
.Fn AG_DrawMinus "AG_Widget *widget" "AG_Rect r" "Uint8 c[4]" "AG_BlendFn blendFn"
.Pp
.Ft void
.Fn AG_DrawArrowUp "AG_Widget *widget" "int x" "int y" "int h" "AG_Color c1" "AG_Color c2"
.Pp
.Ft void
.Fn AG_DrawArrowDown "AG_Widget *widget" "int x" "int y" "int h" "AG_Color c1" "AG_Color c2"
.Pp
.Ft void
.Fn AG_DrawArrowLeft "AG_Widget *widget" "int x" "int y" "int w" "AG_Color c1" "AG_Color c2"
.Pp
.Ft void
.Fn AG_DrawArrowRight "AG_Widget *widget" "int x" "int y" "int w" "AG_Color c1" "AG_Color c2"
.Pp
.nr nS 0
The
.Fn AG_DrawPlus
and
.Fn AG_DrawMinus
routines render plus ("+") or minus ("-") signs spanning rectangle
.Fa r
using the specified color and blending function.
.Pp
.Fn AG_DrawArrowUp ,
.Fn AG_DrawArrowDown ,
.Fn AG_DrawArrowLeft
and
.Fn AG_DrawArrowRight
draw an arrow at the specified coordinates.
.Fa h
and
.Fa w
specify the size of the arrow in pixels.
.Sh SEE ALSO
.Xr AG_BlendFn 3 ,
.Xr AG_Color 3 ,
.Xr AG_Intro 3 ,
.Xr AG_Widget 3 ,
.Xr RG 3 ,
.Xr VG 3
.Pp
.Lk http://freesg.org/ The FreeSG library
.Sh HISTORY
Simple widget primitives first appeared in Agar 1.0.
The basic rendering system was redesigned in Agar 1.4.
