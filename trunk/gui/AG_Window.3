.\" Copyright (c) 2002-2009 Hypertriton, Inc. <http://hypertriton.com/>
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd August 21, 2002
.Dt AG_WINDOW 3
.Os
.ds vT Agar API Reference
.ds oS Agar 1.0
.Sh NAME
.Nm AG_Window
.Nd agar window system
.Sh SYNOPSIS
.Bd -literal
#include <agar/core.h>
#include <agar/gui.h>
.Ed
.Sh DESCRIPTION
The
.Nm
object is the basic container for Agar widgets; it is
itself derived from the
.Xr AG_Widget 3
structure, and is attached to a parent
.Xr AG_Driver 3
which provides an interface to the low-level graphics system in use.
Where the low-level graphics system actually involves a window manager
(e.g., when using X Windows), each
.Nm
object is attached to a dedicated
.Ft AG_Driver
instance.
Where there are no underlying window managers involved (e.g., when writing
to a plain framebuffer), Agar provides an internal "window manager" for the
framebuffer, and multiple
.Nm
objects can attach to a single
.Ft AG_Driver
instance representing the framebuffer.
.Pp
Similarly to
.Xr AG_Box 3 ,
.Nm
acts like a general-purpose widget container.
When Agar provides an internal window manager, a
.Xr AG_Titlebar 3
widget is attached by default to the window when it is created.
.Pp
It not usually necessary to provide explicit dimensions in pixels when
creating new Agar windows.
Widgets are queried for preferred dimensions when the window is first
displayed.
In cases where the "best" widget dimensions cannot be guessed properly at
initialization time, it is customary for Agar widgets to provide one or more
"size hint" routine.
.Pp
Commonly used containers include
.Xr AG_Box 3 ,
.Xr AG_VBox 3
and
.Xr AG_HBox 3
for automatic horizontal and vertical packing,
.Xr AG_Fixed 3
for explicit pixel-precision packing,
.Xr AG_Pane 3
for dual partitions and
.Xr AG_Notebook 3
for notebook-style display.
.Sh INHERITANCE HIERARCHY
.Xr AG_Object 3 ->
.Xr AG_Widget 3 ->
.Nm .
.Sh INTERFACE
.nr nS 1
.Ft "AG_Window *"
.Fn AG_WindowNew "Uint flags"
.Pp
.Ft "AG_Window *"
.Fn AG_WindowNewNamed "Uint flags" "const char *format" "..."
.Pp
.Ft "AG_Window *"
.Fn AG_WindowNewNamedS "Uint flags" "const char *name"
.Pp
.Ft "void"
.Fn AG_WindowSetCaption "AG_Window *win" "const char *format" "..."
.Pp
.Ft "void"
.Fn AG_WindowSetCaptionS "AG_Window *win" "const char *text"
.Pp
.Ft "void"
.Fn AG_WindowSetIcon "AG_Window *win" "AG_Surface *surface"
.Pp
.Ft "void"
.Fn AG_WindowSetIconNODUP "AG_Window *win" "AG_Surface *surface"
.Pp
.Ft "void"
.Fn AG_WindowSetCloseAction "AG_Window *win" "eum ag_window_close_action action"
.Pp
.Ft "void"
.Fn AG_WindowSetPadding "AG_Window *win" "int paddingLeft" "int paddingRight" "int paddingTop" "int paddingBottom"
.Pp
.Ft "void"
.Fn AG_WindowSetSpacing "AG_Window *win" "int spacing"
.Pp
.Ft "void"
.Fn AG_WindowSetSideBorders "AG_Window *win" "int pixels"
.Pp
.Ft "void"
.Fn AG_WindowSetBottomBorder "AG_Window *win" "int pixels"
.Pp
.Ft "void"
.Fn AG_WindowSetPosition "AG_Window *win, enum ag_window_alignment alignment" "int cascade"
.Pp
.Ft "void"
.Fn AG_WindowSetGeometry "AG_Window *win" "int x" "int y" "int w" "int h"
.Pp
.Ft "void"
.Fn AG_WindowSetGeometryRect "AG_Window *win" "AG_Rect rect" "int bounded"
.Pp
.Ft "void"
.Fn AG_WindowSetGeometryAligned "AG_Window *win" "enum ag_window_alignment alignment" "int w" "int h"
.Pp
.Ft "void"
.Fn AG_WindowSetGeometryAlignedPct "AG_Window *win" "enum ag_window_alignment alignment" "int wPct" "int hPct"
.Pp
.Ft "void"
.Fn AG_WindowSetGeometryBounded "AG_Window *win" "int x" "int y" "int w" "int h"
.Pp
.Ft "void"
.Fn AG_WindowSetGeometryMax "AG_Window *win"
.Pp
.Ft "void"
.Fn AG_WindowSetMinSize "AG_Window *win" "int w" "int h"
.Pp
.Ft "void"
.Fn AG_WindowSetMinSizePct "AG_Window *win" "int pct"
.Pp
.Ft "void"
.Fn AG_WindowMaximize "AG_Window *win"
.Pp
.Ft "void"
.Fn AG_WindowUnmaximize "AG_Window *win"
.Pp
.Ft "void"
.Fn AG_WindowMinimize "AG_Window *win"
.Pp
.Ft "void"
.Fn AG_WindowUnminimize "AG_Window *win"
.Pp
.Ft void
.Fn AG_WindowAttach "AG_Window *win" "AG_Window *subwin"
.Pp
.Ft void
.Fn AG_WindowDetach "AG_Window *win" "AG_Window *subwin"
.Pp
.Ft void
.Fn AG_WindowUpdate "AG_Window *win"
.Pp
.Ft void
.Fn AG_WindowDraw "AG_Window *win"
.Pp
.nr nS 0
The
.Fn AG_WindowNew
allocates, initializes and attach a new window.
.Pp
The
.Fn AG_WindowNewNamed
variant creates a new named window.
If a window of the same name exists,
.Fn AG_WindowNewNamed
only moves the focus to that window, and returns NULL.
The name may contain any printable character, except
.Sq / .
.Pp
See
.Dq FLAGS
for available
.Fa flags
options.
.Pp
The
.Fn AG_WindowSetCaption
function sets the text displayed by the titlebar (if there is one).
If the string exceeds
.Dv AG_LABEL_MAX
bytes in length, it is truncated.
.Pp
The
.Fn AG_WindowSetIcon
function configures an alternate icon for the window.
This icon will be used by Agar's internal window manager whenever the window
is minimized.
The given surface will be duplicated and rescaled if necessary.
The
.Fn AG_WindowSetIconNODUP
variant does not duplicate the provided surface, which must remain valid until
the window is destroyed.
.Pp
The
.Fn AG_WindowSetCloseAction
function specifies the action that should be performed when the user deletes
the window through the window manager.
.Pp
.Bl -tag -width "AG_WINDOW_DETACH "
.It AG_WINDOW_HIDE
Window is only hidden.
This is the default action for windows created with
.Fn AG_WindowNewNamed .
.It AG_WINDOW_DETACH
Window is detached from the view and all resources allocated by it (and
its attached widgets) are released.
This is the default action for windows created with
.Fn AG_WindowNew .
.El
.Pp
To set an arbitrary callback routine, simply configure an
.Sq window-close
event handler (see
.Dq EVENTS ) .
.Pp
The
.Fn AG_WindowSetPadding
function defines the space in pixels separating the widgets from the edges
of the window.
.Pp
The
.Fn AG_WindowSetSpacing
function defines the space separating the widgets from each other.
The default is 2 pixels.
.Pp
Note that
.fn AG_WindowSetSpacing
only affects the widgets which are directly attached to the window.
For widgets that are attached to container widgets, it is the container
widgets that define spacing, as well as other aspects of widget
organization.
For instance, the
.Xr AG_Box 3
container widget provides a
.Fn AG_BoxSetSpacing
function .
.Pp
.Fn AG_WindowSetSideBorders
sets the thickness of the left and right window borders in pixels.
.Fn AG_WindowSetBottomBorder
sets the thickness of the bottom border.
The exact interpretation of this setting is theme-specific.
The default for side borders is 0 (no side borders).
If the
.Fa win
argument is NULL, the defaults are set.
.Pp
The
.Fn AG_WindowSetPosition
function moves a window to a standard position, per the specified
alignment.
Possible values for the
.Fa alignment
argument are:
.Bd -literal
 AG_WINDOW_TL  AG_WINDOW_TC  AG_WINDOW_TR
 AG_WINDOW_ML  AG_WINDOW_MC  AG_WINDOW_MR
 AG_WINDOW_BL  AG_WINDOW_BC  AG_WINDOW_BR
.Ed
.Pp
The special value
.Dv AG_WINDOW_ALIGNMENT_NONE
leaves the choice of the initial window position up to the underlying
window manager (possibly Agar itself, or an external window manager).
.Pp
If the
.Fa cascade
argument is 1, the window position is slightly incremented or decremented at
each call (depending on the preferred alignment).
.Pp
The
.Fn AG_WindowSetGeometry
function moves/resizes a window to the specific position and geometry, given
in pixels.
If a value of -1 is passed for
.Fa w
or
.Fa h ,
the window's default (or current) geometry is preserved.
.Pp
The
.Fn AG_WindowSetGeometryRect
variant of
.Fn AG_WindowSetGeometry
accepts a
.Xr AG_Rect 3
argument.
The
.Fa bounded
argument specifies whether the window should be limited to the available
view area.
.Pp
The
.Fn AG_WindowSetGeometryAligned
variant assigns the window a specific size in pixels and positions it
according to the specified window alignment (see description of
.Fn AG_WindowSetPosition
for the possible values).
The parameters of
.Fn AG_WindowSetGeometryAlignedPct
are given in percentage of current view area instead of pixels.
Calling these functions with an argument of
.Dv AG_WINDOW_ALIGNMENT_NONE
is a no-op.
.Pp
The
.Fn AG_WindowSetGeometryBounded
variant limits the window to the view area (by default, windows can lie
outside of the visible area).
.Pp
The
.Fn AG_WindowSetGeometryMax
variant sets the geometry to the size of the display (without setting the
.Dv AG_WINDOW_MAXIMIZED
flag).
.Pp
The
.Fn AG_WindowSetMinSize
routine sets the minimum window size in pixels.
.Fn AG_WindowSetMinSizePct
sets the minimum window size in percentage of the requested (computed)
size.
.Pp
.Fn AG_WindowMaximize
and
.Fn AG_WindowMinimize
maximizes and minimizes the window, respectively.
.Fn AG_WindowUnmaximize
and
.Fn AG_WindowUnminimize
does the opposite.
.Pp
The
.Fn AG_WindowAttach
function arranges for
.Fa pwin
to be the logical parent window of
.Fa win ,
such that
.Fa win
is automatically destroyed when
.Fa pwin
is detached (through
.Xr AG_ObjectDetach 3 ) .
If
.Fa win
has been previously attached to another window, it is reparented accordingly.
.Pp
The
.Fn AG_WindowDetach
function removes
.Fa win
from its logical parent window
.Fa pwin .
.Pp
The
.Fn AG_WindowUpdate
function updates the coordinates and geometries of all widgets attached to
.Fa win .
.Fn AG_WindowUpdate
should be called following
.Xr AG_ObjectAttach 3
or
.Xr AG_ObjectDetach 3
calls made in event context, or manual modifications of the
.Va x ,
.Va y ,
.Va w ,
.Va h
fields of the
.Nm
structure.
When this function is used in the context of a widget implementation,
.Xr AG_WidgetUpdate 3
is preferred.
.Pp
.Fn AG_WindowDraw
renders the window to the display.
Calls to
.Fn AG_WindowDraw
must be made in GUI rendering context (i.e., enclosed between calls to
.Xr AG_BeginRendering 3
and
.Xr AG_EndRendering 3 ) .
Typically, this happens in an event loop routine (such as the stock
.Xr AG_EventLoop 3 ) .
.Sh VISIBILITY
.nr nS 1
.Ft void
.Fn AG_WindowShow "AG_Window *win"
.Pp
.Ft void
.Fn AG_WindowHide "AG_Window *win"
.Pp
.Ft int
.Fn AG_WindowIsVisible "AG_Window *win"
.Pp
.nr nS 0
Newly created windows are invisible by default.
The
.Fn AG_WindowShow
function makes the specified window visible.
.Fn AG_WindowHide
makes a window invisible.
.Pp
Note that
.Fn AG_WindowHide
only hides a window, without destroying its contents.
To properly detach and free a window,
.Xr AG_ObjectDetach 3
should be used.
.Pp
.Fn AG_WindowIsVisible
returns the current visibility status of a window.
A value of 0 means the window is invisible, 1 means it is visible.
.Sh FOCUS STATE
The focus state controls the default filtering of events as well as the
behavior and cosmetic appearance of some widgets.
See the
.Dq FOCUS STATE
section of
.Xr AG_Widget 3
for details.
.Pp
.nr nS 1
.Ft void
.Fn AG_WindowFocus "AG_Window *win"
.Pp
.Ft int
.Fn AG_WindowFocusNamed "const char *name"
.Pp
.Ft int
.Fn AG_WindowFocusAtPos "AG_DriverSw *drv" "int x" "int y"
.Pp
.Ft "AG_Window *"
.Fn AG_WindowFindFocused "void"
.Pp
.Ft "int"
.Fn AG_WindowIsFocused "AG_Window *win"
.Pp
.Ft "void"
.Fn AG_WindowCycleFocus "AG_Window *win" "int reverse"
.Pp
.nr nS 0
The
.Fn AG_WindowFocus
function sets the focus on the given window.
If the currently focused window has the
.Dv AG_WINDOW_KEEPABOVE
flag set, this function becomes a no-op.
The focus change may not be immediate depending on the underlying graphics
system.
A
.Sq window-gainfocus
event is posted to the window object after the focus change has occured.
If an argument of NULL is passed to
.Fn AG_WindowFocus ,
any planned change in focus is cancelled.
.Pp
.Fn AG_WindowFocusNamed
calls
.Fn AG_WindowFocus
on the window of the given name and returns 0 on success or -1 if the window
was not found.
.Pp
.Fn AG_WindowFocusAtPos
looks for a window at the specified coordinates in pixels, in the video
display associated with the given single-display driver
.Fa drv
(see
.Xr AG_DriverSw 3 ) .
If a window is found,
.Fn AG_WindowFocus
is called on it and 1 is returned.
Otherwise, 0 is returned.
.Pp
.Fn AG_WindowFindFocused
returns a pointer to the window currently holding input focus,
or NULL if there are none.
.Fn AG_WindowIsFocused
returns 1 if the window is currently holding focus, otherwise 0.
.Pp
.Fn AG_WindowCycleFocus
places the focus over the widget following (or preceeding if
.Fa reverse
is 1) the widget currently holding focus inside of
.Fa win .
By default, Agar maps the "TAB" key to this function.
.Sh STRUCTURE DATA
For the
.Ft AG_Window
object:
.Pp
.Bl -tag -width "AG_Window *parent "
.It Ft Uint flags
Option flags (see
.Dq FLAGS
section below).
.It Ft int visible
Visibility flag (1 = visible, 0 = hidden).
Read-only (see
.Fn AG_WindowShow
and
.Fn AG_WindowHide ) .
.It Ft int dirty
Redraw flag.
If set to 1, the window will be redrawn as soon as possible.
.It Ft AG_Titlebar *tbar
Pointer to the associated
.Xr AG_Titlebar 3
widget, or NULL if the window has no titlebar.
Read-only.
.It Ft int wReq, hReq
Ideal window geometry in pixels, as last computed from the
.Fn size_request
operation of its attached widgets.
Read-only (see
.Xr AG_WidgetSizeReq 3 ) .
.It Ft int wMin, hMin
Suggested minimum window geometyry in pixels.
Read-only (use
.Fn AG_WindowSetMinSize ) .
.It Ft AG_Window *parent
Pointer to "logical" parent window, or NULL if there isn't any.
Read-only (see
.Fn AG_WindowAttach
and
.Fn AG_WindowDetach ) .
.It Ft TAILQ subwins
List of "logical" child windows.
Read-only (see
.Fn AG_WindowAttach
and
.Fn AG_WindowDetach ) .
.It Ft AG_Icon *icon
Pointer to the floating
.Xr AG_Icon 3
object if we are using Agar's internal window manager, NULL otherwise.
Read-only.
.El
.Sh FLAGS
For the
.Ft AG_Window
object:
.Pp
.Bl -tag -width "AG_WINDOW_NOUPDATERECT "
.It AG_WINDOW_MAXIMIZED
Window is currently maximized (read-only).
.It AG_WINDOW_MINIMIZED
Window is currently minimized (read-only).
.It AG_WINDOW_KEEPABOVE
Stay on top of other windows.
.It AG_WINDOW_KEEPBELOW
Stay below other windows.
.It AG_WINDOW_DENYFOCUS
Don't automatically grab focus in response to a
.Sq mouse-button-down
event in the window area.
.It AG_WINDOW_MODAL
Place window in foreground and prevent all other windows from catching events.
Multiple modal windows are organized in a stack and the effective modal window
is the one that was shown
(with
.Fn AG_WindowShow )
the last.
Implies
.Dv AG_WINDOW_NOMAXIMIZE
and
.Dv AG_WINDOW_NOMINIMIZE .
.It AG_WINDOW_NOBACKGROUND
Don't fill the window background prior to rendering its contents.
.It AG_WINDOW_NOUPDATERECT
Disable automatic updating of the video region corresponding to the
window area (applicable to framebuffer-based graphics drivers only)
.It AG_WINDOW_NOTITLE
Don't automatically create an
.Xr AG_Titlebar 3
widget.
.It AG_WINDOW_NOBORDERS
Don't draw decorative window borders.
.It AG_WINDOW_PLAIN
Alias for
.Dv AG_WINDOW_NOTITLE
and
.Dv AG_WINDOW_NOBORDERS .
.It AG_WINDOW_NOHRESIZE
Disable horizontal window resize control.
.It AG_WINDOW_NOVRESIZE
Disable vertical window resize control.
.It AG_WINDOW_NORESIZE
Alias for
.Dv AG_WINDOW_NOHRESIZE
and
.Dv AG_WINDOW_NOVRESIZE .
.It AG_WINDOW_NOCLOSE
Disable window close button in titelbar.
.It AG_WINDOW_NOMINIMIZE
Disable minimize button in titlebar.
.It AG_WINDOW_NOMAXIMIZE
Disable maximize button in titlebar.
.It AG_WINDOW_NOBUTTONS
Alias for
.Dv AG_WINDOW_NOCLOSE ,
.Dv AG_WINDOW_NOMINIMIZE
and
.Dv AG_WINDOW_NOMAXIMIZE .
.It AG_WINDOW_HMAXIMIZE
Keep window scaled to the display width.
.It AG_WINDOW_VMAXIMIZE
Keep window scaled to the display height.
.It AG_WINDOW_NOMOVE
User is not allowed to move the window.
.It AG_WINDOW_NOCLIPPING
Disable the clipping rectangle over the window area (enabled by default).
.It AG_WINDOW_MODKEYEVENTS
Deliver discrete events to widget when modifier keys (CTRL, ALT, SHIFT)
are pressed.
.It AG_WINDOW_POPUP
Window is "popup" style.
This is a cosmetic hint to some window managers and may or may not have
any effect depending on the underlying driver.
Used notably by
.Xr AG_Menu 3
and
.Xr AG_Combo 3 .
.It AG_WINDOW_DIALOG
Window is "dialog" style.
This is a cosmetic hint to some window managers and may or may not have
any effect depending on the underlying driver.
Used notably by
.Xr AG_TextMsg 3 .
.El
.Sh EVENTS
The GUI system may send
.Nm
objects the following events:
.Bl -tag -width 2n
.It Fn window-close "void"
The window's titlebar close button was pressed.
Generated after the window is no longer visible.
This event is configurable via the
.Fn AG_WindowSetCloseAction
utility function.
.It Fn window-shown "void"
The window is now visible.
.It Fn window-hidden "void"
The window is no longer visible.
.It Fn window-modal-close "void"
The
.Dv AG_WINDOW_MODAL
flag is set and the user has clicked outside of the window area.
.It Fn window-user-resize "int w" "int h"
The window has been resized by the user.
Calls to
.Fn AG_WindowSetGeometry
will not raise this event.
.It Fn window-user-move "int x" "int y"
The window has been displaced by the user.
Calls to
.Fn AG_WindowSetGeometry
will not raise this event.
.It Fn window-enter "void"
The cursor has entered the window area.
.It Fn window-leave "void"
The cursor has left the window area.
.El
.Sh SEE ALSO
.Xr AG_Intro 3 ,
.Xr AG_Icon 3 ,
.Xr AG_Cursor 3 ,
.Xr AG_View 3 ,
.Xr AG_Widget 3
.Sh HISTORY
The
.Nm
system first appeared in Agar 1.0.
