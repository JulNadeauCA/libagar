.\"
.\" Copyright (c) 2006-2008 Hypertriton, Inc. <http://hypertriton.com/>
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd July 22, 2006
.Dt M_MATRIX 3
.Os
.ds vT Agar-Math API Reference
.ds oS Agar 1.3.3
.Sh NAME
.Nm M_Matrix
.Nd Agar-Math matrix-related functions
.Sh SYNOPSIS
.Bd -literal
#include <agar/math.h>
.Ed
.Sh DESCRIPTION
The
.Nm
interface provides basic linear algebra routines specific to matrices.
Similarly to
.Xr M_Vector 3 ,
a consistent interface to different
.Em backends
is provided, allowing different numerical solvers and memory representations.
Selection between multiple backends is possible at run-time, or the Agar-Math
library can be compiled to provide inline expansions of these operations under
a specific backend.
.Sh M-BY-N MATRICES
The following routines operate on dynamically-allocated m-by-n matrices.
Individual entries are not directly accessible since the
.Em sparse
backend does not actually store them in an array.
.Pp
.Bl -tag -width "sparse " -compact
.It fpu
Native scalar floating point methods.
.It sparse
Methods optimized for large, sparse matrices.
Based on the excellent Sparse 1.4 package by Kenneth Kundert at UC Berkeley
(http://sparse.sourceforge.net/).
.El
.Pp
.nr nS 1
.nr nS 0
.Sh 4-BY-4 MATRICES
.Pp
The following routines are optimized for 4x4 matrices, as frequently
encountered in computer graphics.
Contrary to m-by-n matrices, the entries are not dynamically allocated and
are directly accessible via the
.Va m
member of the
.Ft M_Matrix44
structure (row-major format).
Available backends include:
.Pp
.Bl -tag -width "fpu " -compact
.It fpu
Native scalar floating point methods.
.It sse
Accelerate operations using Streaming SIMD Extensions (SSE).
.El
.Pp
.nr nS 1
.Ft "M_Matrix44"
.Fn M_MatIdentity44 "void"
.Pp
.Ft "void"
.Fn M_MatIdentity44v "M_Matrix44 *A"
.Pp
.Ft "M_Matrix44"
.Fn M_MatZero44 "void"
.Pp
.Ft "void"
.Fn M_MatZero44v "M_Matrix44 *A"
.Pp
.nr nS 0
The functions
.Fn M_MatIdentity44
and
.Fn M_MatIdentity44v
return the identity matrix.
.Fn M_MatZero44
and
.Fn M_MatZero44v
return the zero matrix.
.Sh SEE ALSO
.Xr AG_Intro 3 ,
.Xr M_Vector 3
.Sh HISTORY
The
.Nm
interface first appeared in Agar 1.3.3.
