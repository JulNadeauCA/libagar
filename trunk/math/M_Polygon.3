.\"
.\" Copyright (c) 2009-2010 Hypertriton, Inc. <http://hypertriton.com/>
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd July 17, 2009
.Dt M_POLYGON 3
.Os
.ds vT Agar-Math API Reference
.ds oS Agar 1.3.4
.Sh NAME
.Nm M_Polygon
.Nd Agar-Math polygon structure
.Sh SYNOPSIS
.Bd -literal
#include <agar/math.h>
.Ed
.Sh DESCRIPTION
The
.Ft M_Polygon2
structure describes a simple polygon (no self-intersections, no holes),
in R^2, in terms of its
.Va n
sides:
.Bd -literal
typedef struct m_polygon2 {
	M_Line2 *s;	/* Line segments */
	Uint n;		/* Segment count */
	Uint vn;	/* Vertex count */
} M_Polygon2;
.Ed
.Pp
Similarly,
.Ft M_Polygon3
describes a polygon in R^3:
.Bd -literal
typedef struct m_polygon3 {
	M_Line3 *s;	/* Line segments */
	Uint n;		/* Segment count */
	Uint vn;	/* Vertex count */
} M_Polygon3;
.Ed
.Sh INITIALIZATION
.nr nS 1
.Ft void
.Fn M_PolygonInit2 "M_Polygon2 *P"
.Pp
.Ft void
.Fn M_PolygonInit3 "M_Polygon3 *P"
.Pp
.Ft M_Polygon2
.Fn M_POLYGON2_INITIALIZER "void"
.Pp
.Ft M_Polygon3
.Fn M_POLYGON3_INITIALIZER "void"
.Pp
.Ft void
.Fn M_PolygonFree2 "M_Polygon2 *P"
.Pp
.Ft void
.Fn M_PolygonFree3 "M_Polygon3 *P"
.Pp
.Ft M_Polygon2
.Fn M_PolygonFromLines2 "Uint n" M_Line2 *L"
.Pp
.Ft M_Polygon3
.Fn M_PolygonFromLines3 "Uint n" M_Line3 *L"
.Pp
.Ft int
.Fn M_PolygonAddLine2 "M_Polygon2 *P" "M_Line2 L"
.Pp
.Ft int
.Fn M_PolygonAddLine3 "M_Polygon3 *P" "M_Line3 L"
.Pp
.Ft int
.Fn M_PolygonAddVertex2 "M_Polygon2 *P" "M_Vector2 v"
.Pp
.Ft int
.Fn M_PolygonAddVertex3 "M_Polygon3 *P" "M_Vector3 v"
.Pp
.Ft int
.Fn M_PolygonDelLine2 "M_Polygon2 *P" "int sIdx"
.Pp
.Ft int
.Fn M_PolygonDelLine3 "M_Polygon3 *P" "int sIdx"
.Pp
.Ft M_Polygon2
.Fn M_PolygonRead2 "AG_DataSource *ds"
.Pp
.Ft M_Polygon3
.Fn M_PolygonRead3 "AG_DataSource *ds"
.Pp
.Ft void
.Fn M_PolygonWrite2 "AG_DataSource *ds" "M_Polygon2 *P"
.Pp
.Ft void
.Fn M_PolygonWrite3 "AG_DataSource *ds" "M_Polygon3 *P"
.Pp
.nr nS 0
.Fn M_PolygonInit2
and
.Fn M_PolygonInit3
initialize a
.Ft M_Polygon2
or
.Ft M_Polygon3
structure.
The macros
.Fn M_POLYGON[23]_INITIALIZER
expand to static initializers for the
.Ft M_Polygon[23]
structures.
.Pp
.Fn M_PolygonFree[23]
release the dynamically-allocated resources (i.e., the line segments) of
a polygon.
.Pp
The functions
.Fn M_PolygonFromLines[23]
return a polygon from an array of lines
.Fa L ,
where
.Fa n
is the number of elements in the array.
.Pp
The
.Fn M_PolygonAddLine[23]
functions append a new line segment to a polygon.
Returns index of new line segment on success, -1 on failure.
.Pp
.Fn M_PolygonAddVertex[23]
append a new vertex to a polygon (creating the corresponding line segments
as appropriate).
Returns index of new vertex on success, -1 on failure.
.Pp
.Fn M_PolygonDelLine[23]
removes a line segment from a polygon by index.
.Pp
The
.Fn M_PolygonRead[23]
and
.Fn M_PolygonWrite[23]
functions read or write a polygon structure from/to an
.Xr AG_DataSource 3 .
.Sh COMPUTATIONS
.nr nS 1
.Ft int
.Fn M_PointInPolygon2 "M_Polygon2 *P" "M_Vector2 p"
.Pp
.Ft int
.Fn M_PolygonIsConvex2 "M_Polygon2 *P"
.Pp
.Ft int
.Fn M_PolygonIsPlanar3 "M_Polygon3 *P"
.Pp
.nr nS 0
The
.Fn M_PointInPolygon2
routine tests whether point
.Fa p
lies inside the polygon
.Fa P
and returns 1 if it does, otherwise 0.
.Pp
.Fn M_PolygonIsConvex2
evaluates to 1 if the polygon
.Fa P
is a convex polygon.
.Pp
.Fn M_PolygonIsPlanar3
evaluates to 1 if the three points of
.Fa P
are coplanar in R^3.
.Sh SEE ALSO
.Xr AG_Intro 3 ,
.Xr AG_DataSource 3 ,
.Xr M_Geometry 3 ,
.Xr M_Circle 3 ,
.Xr M_Sphere 3 ,
.Xr M_Plane 3 ,
.Xr M_Triangle 3 ,
.Xr M_Rectangle 3 ,
.Xr M_Polygon 3 ,
.Xr M_Vector 3
.Sh HISTORY
The
.Nm
structure first appeared in Agar 1.3.4.
