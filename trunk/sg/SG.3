.\"
.\" Copyright (c) 2006-2007 Hypertriton, Inc. <http://hypertriton.com/>
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd June 23, 2006
.Dt SG 3
.Os
.ds vT Agar-SG API Reference
.ds oS Agar-SG 1.0
.Sh NAME
.Nm SG
.Nd agar scene graph
.Sh SYNOPSIS
.Bd -literal
#include <agar/sg.h>
.Ed
.Sh DESCRIPTION
The Agar-SG library implements interfaces useful in the description and
visualization of three-dimensional "scenes" constructed from generic
geometrical entities.
.Pp
The
.Nm
object is a general-purpose scene-graph, or a collection of nodes organized
in a tree structure.
The same structure is used to described "group" nodes and "leaf" nodes.
.Pp
Scene-graphs are usually rendered using the
.Xr SG_View 3
widget.
.Sh INHERITANCE HIERARCHY
.Xr AG_Object 3 ->
.Nm .
.Sh INITIALIZATION
.nr nS 1
.Ft "SG *"
.Fn SG_New "void *parent" "const char *name"
.Pp
.nr nS 0
The
.Fn SG_New
function allocates, initializes, and attaches a
.Nm
object.
.Sh NODE MANIPULATION
.nr nS 1
.Ft "void"
.Fn SG_RegisterClass "SG_NodeOps *ops"
.Pp
.Ft "void"
.Fn SG_NodeInit "void *node" "const char *name" "const SG_NodeOps *ops" "Uint flags"
.Pp
.Ft "void *"
.Fn SG_NodeAdd "void *pnode" "const char *name" "const SG_NodeOps *ops" "Uint flags"
.Pp
.Ft "void"
.Fn SG_NodeAttach "void *pnode" "void *node"
.Pp
.Ft "void"
.Fn SG_NodeDetach "void *pnode" "void *node"
.Pp
.Ft "SG_Node *"
.Fn SG_SearchNodes "SG_Node *pnode" "const char *name"
.Pp
.Ft "void *"
.Fn SG_FindNode "SG *sg" "const char *name"
.Pp
.nr nS 0
The
.Fn SG_RegisterClass
function registers a new node class, described by the given
.Ft SG_NodeOps
structure.
.Pp
The
.Fn SG_NodeInit
function initializes the given
.Ft SG_Node
structure.
It is usually invoked from node constructor functions.
The
.Fa name
argument is a string identifier for the node.
.Fa ops
points to the
.Ft SG_NodeOps
structure which contains class information.
The
.Fa flags
argument should be 0.
The
.Fn SG_NodeAdd
variant also allocates, initializes and attaches the node to a parent node.
.Pp
The
.Fn SG_NodeAttach
and
.Fn SG_NodeDetach
functions attach/detach a node to/from a given parent.
.Pp
The
.Fn SG_SearchNodes
function searches the descendants of the given node recursively for a node
of the given name.
It returns NULL if no such node was found.
.Fn SG_FindNode
is a variant that searches the entire graph.
.Sh GEOMETRIC NODES
The Agar-SG distribution includes a set of common node classes.
Most scene-graphs will reference mainly geometric objects which are derived
from the
.Dv SG_OBJECT
and
.Dv SG_SOLID
classes, such that polygonal and polyhedral information can be queried at
any time.
Typically, subclasses of those two classes will be used to describe ideal
objects and generate suitable approximations as needed by the application.
.Pp
Nodes describing geometric entities are related to each other by a homogenous
transformation matrix.
.Sh BUILTIN NODE CLASSES
.Bl -tag -compact -width "SG_CYLINDER "
.It SG_SOLID
Boundary-representation of complex polyhedron.
.It SG_SURFACE
Polygonal surface approximation.
.It SG_POINT
Simple particle.
.It SG_VECTOR
Vector (from parent node).
.It SG_RAY
Half-line (from parent node).
.It SG_PLANE
Three-dimensional plane.
.It SG_SPHERE
Ideal sphere.
.It SG_CYLINDER
Ideal circular cylinder.
.It SG_CONE
Ideal cone.
.It SG_AABB
Axis-aligned bounding box.
.It SG_OBB
Oriented bounding box.
.It SG_LIGHT
Light source.
.It SG_SOUND
Audio reference (for sound occlusion calculations).
.El
.Sh NODE TRANSFORMATIONS
These functions multiply a node's transformation matrix
.Va T
with a translation, scaling or rotation matrix.
They are only aliases for
.Ft SG_Matrix*
functions, except that they accept a pointer to a node instead of a matrix.
.Pp
.nr nS 1
.Ft "void"
.Fn SG_Translatev "SG_Node *node" "SG_Vector v"
.Pp
.Ft "void"
.Fn SG_Translate3 "SG_Node *node" "SG_Real x" "SG_Real y" "SG_Real z"
.Pp
.Ft "void"
.Fn SG_TranslateX "SG_Node *node" "SG_Real x"
.Pp
.Ft "void"
.Fn SG_TranslateY "SG_Node *node" "SG_Real y"
.Pp
.Ft "void"
.Fn SG_TranslateZ "SG_Node *node" "SG_Real z"
.Pp
.Ft "void"
.Fn SG_Scalev "SG_Node *node" "SG_Vector v"
.Pp
.Ft "void"
.Fn SG_Rotatev "SG_Node *node" "SG_Real theta" "SG_Vector axis"
.Pp
.Ft "void"
.Fn SG_Rotatevd "SG_Node *node" "SG_Real degrees" "SG_Vector axis"
.Pp
.Ft "void"
.Fn SG_RotateXv "SG_Node *node" "SG_Real theta"
.Pp
.Ft "void"
.Fn SG_RotateXvd "SG_Node *node" "SG_Real degrees"
.Pp
.Ft "void"
.Fn SG_RotateYv "SG_Node *node" "SG_Real theta"
.Pp
.Ft "void"
.Fn SG_RotateYvd "SG_Node *node" "SG_Real degrees"
.Pp
.Ft "void"
.Fn SG_RotateZv "SG_Node *node" "SG_Real theta"
.Pp
.Ft "void"
.Fn SG_RotateZvd "SG_Node *node" "SG_Real degrees"
.Pp
.Ft "void"
.Fn SG_RotateEul "SG_Node *node" "SG_Real pitch" "SG_Real roll" "SG_Real yaw"
.Pp 
.Ft "void"
.Fn SG_RotateEuld "SG_Node *node" "SG_Real pitch" "SG_Real roll" "SG_Real yaw"
.Pp
.Ft "void"
.Fn SG_GetNodeTransform "void *node" "SG_Matrix *T"
.Pp
.nr nS 1
The
.Fn SG_Translate*
functions multiply
.Va T
by a translation matrix.
.Fn SG_Scalev
multiplies
.Va T
by a scaling matrix.
.Fn SG_Rotate*
multiply
.Va T
by a rotation matrix.
Angles are given in radians, except for
.Fn SG_Rotate*d
variants which accept angular arguments in degrees.
.Pp
.Fn SG_Rotatev
generates a rotation of
.Fa theta
radians around
.Fa axis .
The
.Fn SG_Rotate*
variants with the "d" suffix accept angles in degrees instead of radians.
.Pp
The
.Fn SG_GetNodeTransform
function returns a matrix which is the product of the transformation
matrices of the given node and all of its parents.
.Sh SEE ALSO
.Xr SG_Camera 3 ,
.Xr SG_Light 3 ,
.Xr SG_Matrix 3 ,
.Xr SG_Plane 3 ,
.Xr SG_PlaneObj 3 ,
.Xr SG_Point 3 ,
.Xr SG_Quat 3 ,
.Xr SG_Solid 3 ,
.Xr SG_Sphere 3 ,
.Xr SG_Spherical 3 ,
.Xr SG_Vector 3 ,
.Xr SG_View 3
.Sh HISTORY
The
.Nm
object first appeared in Agar-SG 1.0.
