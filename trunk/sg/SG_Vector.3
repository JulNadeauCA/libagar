.\"
.\" Copyright (c) 2006-2007 Hypertriton, Inc. <http://hypertriton.com/>
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
.\" IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
.\" INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\" (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
.\" SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
.\" STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
.\" IN ANY WAY OUT OF THE USE OF THIS SOFTWARE EVEN IF ADVISED OF THE
.\" POSSIBILITY OF SUCH DAMAGE.
.\"
.Dd August 25, 2006
.Dt SG_VECTOR 3
.Os
.ds vT Agar-SG API Reference
.ds oS Agar-SG 1.0
.Sh NAME
.Nm SG_Vector
.Nd agar-sg vector operations
.Sh SYNOPSIS
.Bd -literal
#include <agar/sg.h>
.Ed
.Sh DESCRIPTION
The
.Nm
interface provides optimized basic algebra routines for vectors in R2, R3
and R4.
Some
.Xr SG_Matrix 3
routines accept vector arguments and vice-versa.
The vector structures are defined as:
.Bd -literal
typedef struct sg_vector2 {
	SG_Real x, y;
} SG_Vector2;

typedef struct sg_vector3 {
	SG_Real x, y, z;
} SG_Vector3, SG_Vector;

typedef struct sg_vector4 {
	SG_Real x, y, z, w;
} SG_Vector4;
.Ed
.Pp
To simplify application code,
.Nm
and
.Xr SG_Matrix 3
structures are typically passed using structure copies, although variants
accepting pointer arguments are provided for most functions.
Variants with the "p" suffix generally accept one or more pointer arguments
and return a vector or scalar.
Variants with the "v" suffix accept pointer arguments and return the result
in one of the arguments.
.Sh INITIALIZATION
.nr nS 1
.Ft "SG_Vector2"
.Fn SG_VECTOR2 "SG_Real x" "SG_Real y"
.Pp
.Ft "SG_Vector"
.Fn SG_VECTOR "SG_Real x" "SG_Real y" "SG_Real z"
.Pp
.Ft "SG_Vector4"
.Fn SG_VECTOR4 "SG_Real x" "SG_Real y"
.Pp
.Ft "SG_Vector2"
.Fn SG_MIRROR2 "SG_Vector2 v"
.Pp
.Ft "SG_Vector"
.Fn SG_MIRROR "SG_Vector v"
.Pp
.Ft "SG_Vector4"
.Fn SG_MIRROR4 "SG_Vector4 v"
.nr nS 0
.Pp
The
.Fn SG_FooNew
function allocates, initializes, and attaches a
.Nm
object.
.Fn SG_FooInit
initializes a
.Nm
structure.
.Sh FOO
.Pp
FOO DESCRIPTION
.Pp
.nr nS 1
.Ft "void"
.Fn SG_FooBar "SG_Foo *"
.nr nS 0
.Pp
The
.Fn SG_FooBar
function does FOO.
.Sh SEE ALSO
.Xr SG 3
.Sh HISTORY
The
.Nm
node first appeared in Agar-SG 1.0.
