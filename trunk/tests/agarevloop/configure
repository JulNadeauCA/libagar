#!/bin/sh
#
# Do not edit!
# This file was generated from configure.in by BSDBuild 3.0.
#
# To regenerate this file, get the latest BSDBuild release from
# http://hypertriton.com/bsdbuild/, and use the command:
#
#     $ cat configure.in | mkconfigure > configure
#
# Copyright (c) 2001-2012 Hypertriton, Inc. <http://hypertriton.com/>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
# USE OF THIS SOFTWARE EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
PACKAGE="Untitled"
VERSION=""
RELEASE=""

optarg=
for arg
do
	case "$arg" in
	-*=*)
	    optarg=`echo "$arg" | sed 's/[-_a-zA-Z0-9]*=//'`
	    ;;
	*)
	    optarg=
	    ;;
	esac

	case "$arg" in
	--build=*)
	    build_arg=$optarg
	    ;;
	--host=*)
	    host_arg=$optarg
	    ;;
	--target=*)
	    target=$optarg
	    ;;
	--emul-os=*)
	    PROJ_TARGET=$optarg
	    ;;
	--byte-order=*)
	    byte_order=$optarg
	    ;;
	--prefix=*)
	    prefix=$optarg
	    ;;
	--exec-prefix=*)
	    exec_prefix=$optarg
	    ;;
	--sysconfdir=*)
	    sysconfdir=$optarg
	    ;;
	--bindir=*)
	    bindir=$optarg
	    ;;
	--libdir=*)
	    libdir=$optarg
	    ;;
	--moduledir=*)
	    moduledir=$optarg
	    ;;
	--libexecdir=*)
	    libexecdir=$optarg
	    ;;
	--datadir=*)
	    datadir=$optarg
	    ;;
	--statedir=* | --localstatedir=*)
	    statedir=$optarg
	    ;;
	--localedir=*)
	    localedir=$optarg
	    ;;
	--mandir=*)
	    mandir=$optarg
	    ;;
	--infodir=* | --datarootdir=* | --docdir=* | --htmldir=* | --dvidir=* | --pdfdir=* | --psdir=* | --sharedstatedir=* | --sbindir=*)
	    ;;
	--enable-*)
	    option=`echo $arg | sed -e 's/--enable-//' -e 's/=.*//'`
	    option=`echo $option | sed 's/-/_/g'`
	    case "$arg" in
	        *=*)
	            eval "enable_${option}='$optarg'"
	            eval "prefix_${option}='$optarg'"
		    ;;
		*)
	            eval "enable_${option}=yes"
		    ;;
	    esac
	    ;;
	--disable-*)
	    option=`echo $arg | sed -e 's/--disable-//'`;
	    option=`echo $option | sed 's/-/_/g'`
	    eval "enable_${option}=no"
	    ;;
	--with-*)
	    option=`echo $arg | sed -e 's/--with-//' -e 's/=.*//'`
	    option=`echo $option | sed 's/-/_/g'`
	    case "$arg" in
	        *=*)
	            eval "with_${option}='$optarg'"
	            eval "prefix_${option}='$optarg'"
		    ;;
		*)
	            eval "with_${option}=yes"
		    ;;
	    esac
	    ;;
	--without-*)
	    option=`echo $arg | sed -e 's/--without-//'`;
	    option=`echo $option | sed 's/-/_/g'`
	    eval "with_${option}=no"
	    ;;
	--help)
	    show_help=yes
	    ;;
	--version)
	    show_version=yes
	    ;;
	--srcdir=*)
	    srcdir=$optarg
	    ;;
	--testdir=*)
	    testdir=$optarg
	    ;;
	--cache=*)
	    cache=$optarg
	    ;;
	--includes=*)
	    includes=$optarg
	    ;;
	--cache-file=*)
	    ;;
	--config-cache | -C)
	    ;;
	*)
	    echo "invalid argument: $arg"
	    echo "try ./configure --help"
	    exit 1
	    ;;
	esac
done
if [ -e "/bin/echo" ]; then
    /bin/echo -n ""
    if [ $? = 0 ]; then
    	ECHO_N="/bin/echo -n"
    else
    	ECHO_N="echo -n"
    fi
else
    ECHO_N="echo -n"
fi
PERL=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}" ]; then
		if [ -e "${path}/perl" ]; then
			PERL="${path}/perl"
			break
		fi
	fi
done
PKGCONFIG=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}" ]; then
		if [ -e "${path}/pkg-config" ]; then
			PKGCONFIG="${path}/pkg-config"
			break
		fi
	fi
done
if [ "${prefix}" != "" ]; then
    PREFIX="$prefix"
else
    PREFIX="/usr/local"
fi
if [ "${exec_prefix}" != "" ]; then
    EXEC_PREFIX="$exec_prefix"
else
    EXEC_PREFIX="${PREFIX}"
fi
if [ "${srcdir}" != "" ]; then
	if [ "${PERL}" = "" ]; then
		echo "*"
		echo "* Separate build (--srcdir) requires perl, but there is"
		echo "* no perl interpreter to be found in your PATH."
		echo "*"
		exit 1
	fi
	SRC=${srcdir}
else
	SRC=`pwd`
fi
BLD=`pwd`
SRCDIR="${SRC}"
BLDDIR="${BLD}"

if [ "${testdir}" != "" ]; then
	echo "Configure tests will be executed in ${testdir}"
	if [ ! -e "${testdir}" ]; then
		echo "Creating ${testdir}"
		mkdir ${testdir}
	fi
else
	testdir="."
fi
if [ "${includes}" = "" ]; then
	includes="yes"
fi
case "${includes}" in
yes|no)
	;;
link)
	if [ "${with_proj_generation}" ]; then
		echo "Cannot use --includes=link with --with-proj-generation!"
		exit 1
	fi
	;;
*)
	echo "Usage: --includes [yes|no|link]"
	exit 1
	;;
esac
if [ "${srcdir}" = "" ]; then
	cat << EOT > configure.dep.pl
#!/usr/bin/perl
# Public domain.
# Scan Makefiles for "include .depend" and generate empty ".depend" files,
# such that make can be run prior to an initial "make depend".
#

my %V = ();

sub MakefileIncludesDepend (\$\$)
{
	my \$path = shift;
	my \$cwd = shift;

	if (!open(MF, \$path)) {
		return (0);
	}
	my @lines = ();
	foreach \$_ (<MF>) {
		chop;

		if (/^(.+)\\\\\$/) {			# Expansion
			\$line .= \$1;
		} else {				# New line
			if (\$line) {
				push @lines, \$line . \$_;
				\$line = '';
			} else {
				push @lines, \$_;
			}
		}
	}
	foreach \$_ (@lines) {
		if (/^\\s*#/) { next; }
		if (/^\\t/) { next; }
		s/\\\$\\{(\\w+)\\}/\$V{\$1}/g;
		if (/^\\s*(\\w+)\\s*=\\s*"(.+)"\$/ ||
		    /^\\s*(\\w+)\\s*=\\s*(.+)\$/) {
			\$V{\$1} = \$2;
		} elsif (/^\\s*(\\w+)\\s*\\+=\\s*"(.+)"\$/ ||
		         /^\\s*(\\w+)\\s*\\+=\\s*(.+)\$/) {
			if (exists(\$V{\$1}) && \$V{\$1} ne '') {
				\$V{\$1} .= ' '.\$2;
			} else {
				\$V{\$1} = \$2;
			}
		}
		if (/^\\s*include\\s+(.+)\$/) {
			if (\$1 eq '.depend' ||
			    MakefileIncludesDepend(\$cwd.'/'.\$1, \$cwd)) {
				return (1);
			}
		}
	}
	close(MF);
	return (0);
}

sub Scan (\$)
{
	my \$dir = shift;

	unless (opendir(CWD, \$dir)) {
		print STDERR "\$dir: opendir: \$!; ignoring\\n";
		return;
	}
	%V = ();
	if (-e \$dir.'/Makefile' &&
	    MakefileIncludesDepend("\$dir/Makefile", \$dir)) {
		if (open(OUT, ">\$dir/.depend")) {
			close(OUT);
		} else {
			print STDERR "\$dir/.depend: \$!; ignoring\\n";
		}
	}
	foreach my \$ent (readdir(CWD)) {
		my \$file = \$dir.'/'.\$ent;

		if (\$ent =~ /^\\./) {
			next;
		}
		if (-d \$file) {
			Scan(\$file);
			next;
		}
	}
	closedir(CWD);
}
if (@ARGV < 1) {
	print STDERR "Usage: gen-dotdepend.pl [directory]\\n";
	exit(1);
}
Scan(\$ARGV[0]);
EOT
	if [ "${PERL}" != "" ]; then
		${PERL} configure.dep.pl .
		rm -f configure.dep.pl
	else
		echo "*"
		echo "* Warning: No perl was found. Perl is required for automatic"
		echo "* generation of .depend files. You may need to create empty"
		echo "* .depend files where it is required."
		echo "*"
	fi
fi
if [ "${show_help}" = "yes" ]; then
echo "This configure script was generated by BSDBuild 3.0."
echo "<http://bsdbuild.hypertriton.com/>"
echo ""
echo "Usage: ./configure [options]"
echo ""
echo "Standard build options:"
echo "    --bindir=DIR              Executables for common users [PREFIX/bin]"
echo "    --build=STRING            Host environment for build [auto-detect]"
echo "    --byte-order=STRING       Byte order for build (LE|BE) [auto-detect]"
echo "    --cache=DIR               Cache ./configure results in directory [none]"
echo "    --datadir=DIR|NONE        Data files for program use [PREFIX/share]"
echo "    --enable-nls              Multi-language support [no]"
echo "    --exec-prefix=DIR         Machine-dependent installation base [PREFIX]"
echo "    --host=STRING             Cross-compile for target environment [BUILD]"
echo "    --includes=STRING         Preprocess C headers (yes|no|link) [yes]"
echo "    --libdir=DIR              System libraries [PREFIX/lib]"
echo "    --libexecdir=DIR          Executables for program use [PREFIX/libexec]"
echo "    --localedir=DIR           Multi-language support locales [DATADIR/locale]"
echo "    --mandir=DIR              Manual page documentation [PREFIX/man]"
echo "    --moduledir=DIR|NONE      Dynamically loaded modules [PREFIX/lib]"
echo "    --prefix=DIR              Installation base [/usr/local]"
echo "    --srcdir=DIR              Source directory for concurrent build [.]"
echo "    --statedir=DIR|NONE       Modifiable single-machine data [PREFIX/var]"
echo "    --sysconfdir=DIR|NONE     System configuration files [PREFIX/etc]"
echo "    --testdir=DIR             Execute all tests in this directory [.]"
echo "    --with-catman             Install cat files for manual pages [auto-detect]"
echo "    --with-ctags              Generate ctags(1) tag files [no]"
echo "    --with-docs               Generate printable documentation [no]"
echo "    --with-gettext            Use gettext for multi-language [auto-detect]"
echo "    --with-libtool            Specify path to libtool [bundled]"
echo "    --with-manlinks           Add manual entries for every function [no]"
echo "    --with-manpages           Generate Unix manual pages [yes]"
echo ""
echo "Test program options:"
echo "    --enable-warnings           Suggested compiler warnings [no]"
exit 1
fi;
if [ "${show_version}" = "yes" ]; then
echo "BSDBuild 3.0"
exit 0
fi;
if [ "${srcdir}" != "" ]; then
	build_guessed=`sh ${srcdir}/../../mk/config.guess`
else
	build_guessed=`sh ../../mk/config.guess`
fi
if [ $? != 0 ]; then
	echo "../../mk/config.guess failed"
	exit 1
fi
if [ "${build_arg}" != "" ]; then
	build="${build_arg}"
else
	build="${build_guessed}"
fi
if [ "${host_arg}" != "" ]; then
	host="${host_arg}"
else
	host="${build}"
fi
if [ "${host}" != "${build_guessed}" ]; then
	CROSS_COMPILING="yes"
else
	CROSS_COMPILING="no"
fi
echo "BSDBuild 3.0 (http://bsdbuild.hypertriton.com)"

echo "#!/bin/sh" > config.status
echo "# Generated by configure script (BSDBuild 3.0)." >> config.status
echo "Generated by configure script (BSDBuild 3.0)." > config.log

if [ -e "Makefile.config" ]; then
	echo "* Overwriting existing Makefile.config"
fi
echo "# Generated by configure script (BSDBuild 3.0)." > Makefile.config
echo "" >> Makefile.config
echo "BUILD=${build}" >> Makefile.config
echo "HOST=${host}" >> Makefile.config
echo "CROSS_COMPILING=${CROSS_COMPILING}" >> Makefile.config
echo "SRCDIR=${SRC}" >> Makefile.config
echo "BLDDIR=${BLD}" >> Makefile.config

echo -n "./configure" >> config.log
echo -n "./configure" >> config.status
for arg
do
	echo -n " $arg" >> config.log
	echo -n " $arg" >> config.status
done
echo "" >> config.log
echo "" >> config.status

if [ -e "$BLD/config" ]; then
	echo "* Overwriting $BLD/config directory"
	rm -fR "$BLD/config"
fi
mkdir -p "$BLD/config"
if [ $? != 0 ]; then
	echo "Could not create $BLD/config directory."
	exit 1
fi
HAVE_MANDOC="no"
NROFF=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/nroff" ]; then
		NROFF="${path}/nroff"
	fi
done
if [ "${NROFF}" != "" ]; then
	echo | ${NROFF} -Tmandoc >/dev/null
	if [ "$?" = "0" ]; then
		HAVE_MANDOC="yes"
	fi
fi
if [ "${HAVE_MANDOC}" = "no" ]; then
	if [ "${with_manpages}" = "yes" ]; then
		echo "*"
		echo "* --with-manpages was requested, but either the nroff(1)"
		echo "* utility or the mdoc(7) macro package was not found."
		echo "*"
		exit 1
	fi
	echo "HAVE_MANDOC=no" >> Makefile.config
	echo "NOMAN=yes" >> Makefile.config
	echo "NOMANLINKS=yes" >> Makefile.config
else
	echo "HAVE_MANDOC=yes" >> Makefile.config
	if [ "${with_catman}" = "no" ]; then
		echo "NOCATMAN=yes" >> Makefile.config
	else
		if [ "${with_catman}" = "yes" ]; then
			echo "NOCATMAN=no" >> Makefile.config
		else
			case "${host}" in
			*-*-freebsd*)
				echo "NOCATMAN=yes" >> Makefile.config
				;;
			*)
				echo "NOCATMAN=no" >> Makefile.config
				;;
			esac
		fi
	fi
	if [ "${with_manpages}" = "no" ]; then
		echo "NOMAN=yes" >> Makefile.config
		echo "NOMANLINKS=yes" >> Makefile.config
	else
		if [ "${with_manlinks}" != "yes" ]; then
			echo "NOMANLINKS=yes" >> Makefile.config
		fi
	fi
fi
if [ "${with_docs}" = "no" ]; then
	echo "NODOC=yes" >> Makefile.config
fi
if [ "${enable_nls}" = "yes" ]; then
ENABLE_NLS="yes"
echo "#ifndef ENABLE_NLS" > $BLD/config/enable_nls.h
echo "#define ENABLE_NLS \"$ENABLE_NLS\"" >> $BLD/config/enable_nls.h
echo "#endif" >> $BLD/config/enable_nls.h
echo "hdefs[\"ENABLE_NLS\"] = \"$ENABLE_NLS\"" >>configure.lua
msgfmt=""
for path in `echo $PATH | sed 's/:/ /g'`; do
	if [ -x "${path}/msgfmt" ]; then
		msgfmt=${path}/msgfmt
	fi
done
if [ "${msgfmt}" != "" ]; then
	HAVE_GETTEXT="yes"
else
	HAVE_GETTEXT="no"
fi
echo "#ifndef ENABLE_NLS" > $BLD/config/enable_nls.h
echo "#define ENABLE_NLS \"$ENABLE_NLS\"" >> $BLD/config/enable_nls.h
echo "#endif" >> $BLD/config/enable_nls.h
echo "hdefs[\"ENABLE_NLS\"] = \"$ENABLE_NLS\"" >>configure.lua
else
ENABLE_NLS="no"
HAVE_GETTEXT="no"
echo "#undef ENABLE_NLS" >$BLD/config/enable_nls.h
echo "hdefs[\"ENABLE_NLS\"] = nil" >>configure.lua
fi;
CTAGS=""
if [ "${with_ctags}" = "yes" ]; then
	for path in `echo $PATH | sed 's/:/ /g'`; do
		if [ -x "${path}/ectags" ]; then
			CTAGS="${path}/ectags"
		fi
	done
	if [ "${CTAGS}" = "" ]; then
		for path in `echo $PATH | sed 's/:/ /g'`; do
			if [ -x "${path}/ctags" ]; then
				CTAGS="${path}/ctags"
			fi
		done
	fi
fi
echo "CTAGS=${CTAGS}" >> Makefile.config
if [ "${prefix_libtool}" != "" -a "${prefix_libtool}" != "bundled" ]; then
	LIBTOOL_BUNDLED="no"
	LIBTOOL="${prefix_libtool}"
else
	LIBTOOL_BUNDLED="yes"
	LIBTOOL=\${TOP}/mk/libtool/libtool
fi
echo "LIBTOOL_BUNDLED=${LIBTOOL_BUNDLED}" >> Makefile.config
echo "LIBTOOL=${LIBTOOL}" >> Makefile.config
echo "PREFIX?=${PREFIX}" >> Makefile.config
echo "#ifndef PREFIX" > $BLD/config/prefix.h
echo "#define PREFIX \"$PREFIX\"" >> $BLD/config/prefix.h
echo "#endif" >> $BLD/config/prefix.h
echo "hdefs[\"PREFIX\"] = \"$PREFIX\"" >>configure.lua
if [ "${bindir}" != "" ]; then
	BINDIR="${bindir}"
	BINDIR_SPECIFIED="yes"
else
	BINDIR="${PREFIX}/bin"
fi
echo "#ifndef BINDIR" > $BLD/config/bindir.h
echo "#define BINDIR \"$BINDIR\"" >> $BLD/config/bindir.h
echo "#endif" >> $BLD/config/bindir.h
echo "hdefs[\"BINDIR\"] = \"$BINDIR\"" >>configure.lua
if [ "${libdir}" != "" ]; then
	LIBDIR="${libdir}"
	LIBDIR_SPECIFIED="yes"
else
	LIBDIR="${PREFIX}/lib"
fi
echo "#ifndef LIBDIR" > $BLD/config/libdir.h
echo "#define LIBDIR \"$LIBDIR\"" >> $BLD/config/libdir.h
echo "#endif" >> $BLD/config/libdir.h
echo "hdefs[\"LIBDIR\"] = \"$LIBDIR\"" >>configure.lua
if [ "${moduledir}" != "" ]; then
	MODULEDIR="${moduledir}"
	MODULEDIR_SPECIFIED="yes"
else
	MODULEDIR="${PREFIX}/lib"
fi
echo "#ifndef MODULEDIR" > $BLD/config/moduledir.h
echo "#define MODULEDIR \"$MODULEDIR\"" >> $BLD/config/moduledir.h
echo "#endif" >> $BLD/config/moduledir.h
echo "hdefs[\"MODULEDIR\"] = \"$MODULEDIR\"" >>configure.lua
if [ "${libexecdir}" != "" ]; then
	LIBEXECDIR="${libexecdir}"
	LIBEXECDIR_SPECIFIED="yes"
else
	LIBEXECDIR="${PREFIX}/libexec"
fi
echo "#ifndef LIBEXECDIR" > $BLD/config/libexecdir.h
echo "#define LIBEXECDIR \"$LIBEXECDIR\"" >> $BLD/config/libexecdir.h
echo "#endif" >> $BLD/config/libexecdir.h
echo "hdefs[\"LIBEXECDIR\"] = \"$LIBEXECDIR\"" >>configure.lua
if [ "${datadir}" != "" ]; then
	DATADIR="${datadir}"
	DATADIR_SPECIFIED="yes"
else
	DATADIR="${PREFIX}/share"
fi
echo "#ifndef DATADIR" > $BLD/config/datadir.h
echo "#define DATADIR \"$DATADIR\"" >> $BLD/config/datadir.h
echo "#endif" >> $BLD/config/datadir.h
echo "hdefs[\"DATADIR\"] = \"$DATADIR\"" >>configure.lua
if [ "${statedir}" != "" ]; then
	STATEDIR="${statedir}"
	STATEDIR_SPECIFIED="yes"
else
	STATEDIR="${PREFIX}/var"
fi
echo "#ifndef STATEDIR" > $BLD/config/statedir.h
echo "#define STATEDIR \"$STATEDIR\"" >> $BLD/config/statedir.h
echo "#endif" >> $BLD/config/statedir.h
echo "hdefs[\"STATEDIR\"] = \"$STATEDIR\"" >>configure.lua
if [ "${sysconfdir}" != "" ]; then
	SYSCONFDIR="${sysconfdir}"
	SYSCONFDIR_SPECIFIED="yes"
else
	SYSCONFDIR="${PREFIX}/etc"
fi
echo "#ifndef SYSCONFDIR" > $BLD/config/sysconfdir.h
echo "#define SYSCONFDIR \"$SYSCONFDIR\"" >> $BLD/config/sysconfdir.h
echo "#endif" >> $BLD/config/sysconfdir.h
echo "hdefs[\"SYSCONFDIR\"] = \"$SYSCONFDIR\"" >>configure.lua
if [ "${localedir}" != "" ]; then
	LOCALEDIR="${localedir}"
	LOCALEDIR_SPECIFIED="yes"
else
	LOCALEDIR="${DATADIR}/locale"
fi
echo "#ifndef LOCALEDIR" > $BLD/config/localedir.h
echo "#define LOCALEDIR \"$LOCALEDIR\"" >> $BLD/config/localedir.h
echo "#endif" >> $BLD/config/localedir.h
echo "hdefs[\"LOCALEDIR\"] = \"$LOCALEDIR\"" >>configure.lua
if [ "${mandir}" != "" ]; then
	MANDIR="${mandir}"
	MANDIR_SPECIFIED="yes"
else
	MANDIR="${PREFIX}/man"
fi
echo "#ifndef MANDIR" > $BLD/config/mandir.h
echo "#define MANDIR \"$MANDIR\"" >> $BLD/config/mandir.h
echo "#endif" >> $BLD/config/mandir.h
echo "hdefs[\"MANDIR\"] = \"$MANDIR\"" >>configure.lua
if [ "${DATADIR_SPECIFIED}" != "yes" ]; then
DATADIR="${PREFIX}/share/agartest"
echo "#ifndef DATADIR" > $BLD/config/datadir.h
echo "#define DATADIR \"$DATADIR\"" >> $BLD/config/datadir.h
echo "#endif" >> $BLD/config/datadir.h
echo "hdefs[\"DATADIR\"] = \"$DATADIR\"" >>configure.lua
fi;
if [ "${LOCALEDIR_SPECIFIED}" != "yes" ]; then
LOCALEDIR="${DATADIR}/locale"
echo "#ifndef LOCALEDIR" > $BLD/config/localedir.h
echo "#define LOCALEDIR \"$LOCALEDIR\"" >> $BLD/config/localedir.h
echo "#endif" >> $BLD/config/localedir.h
echo "hdefs[\"LOCALEDIR\"] = \"$LOCALEDIR\"" >>configure.lua
fi;
$ECHO_N "checking for a C compiler..."
$ECHO_N "checking for a C compiler..." >> config.log
if [ "$CROSS_COMPILING" = "yes" ]; then
	CROSSPFX="${host}-"
else
	CROSSPFX=""
fi
if [ "$CC" = "" ]; then
	for i in `echo $PATH |sed 's/:/ /g'`; do
		if [ -x "${i}/${CROSSPFX}cc" ]; then
			if [ -f "${i}/${CROSSPFX}cc" ]; then
				CC="${i}/${CROSSPFX}cc"
				break
			fi
		elif [ -x "${i}/${CROSSPFX}gcc" ]; then
			if [ -f "${i}/${CROSSPFX}gcc" ]; then
				CC="${i}/${CROSSPFX}gcc"
				break
			fi
		fi
	done
	if [ "$CC" = "" ]; then
		echo "*"
		echo "* Cannot find ${CROSSPFX}cc or ${CROSSPFX}gcc in default PATH."
		echo "* You may need to set the CC environment variable."
		echo "*"
		echo "Cannot find ${CROSSPFX}cc or ${CROSSPFX}gcc in PATH." >> config.log
		HAVE_CC="no"
		echo "no"
	else
		HAVE_CC="yes"
		echo "yes, ${CC}"
		echo "yes, ${CC}" >> config.log
	fi
else
	HAVE_CC="yes"
	echo "using ${CC}"
fi

if [ "${HAVE_CC}" = "yes" ]; then
	$ECHO_N "checking whether the C compiler works..."
	$ECHO_N "checking whether the C compiler works..." >> config.log
	cat << 'EOT' > conftest.c
int main(int argc, char *argv[]) { return (0); }
EOT
	$CC -o conftest conftest.c 2>>config.log
	if [ $? != 0 ]; then
	    echo "no"
	    echo "no (test failed to compile)" >> config.log
		HAVE_CC="no"
	else
		HAVE_CC="yes"
	fi

	if [ "${HAVE_CC}" = "yes" ]; then
		if [ "${EXECSUFFIX}" = "" ]; then
			EXECSUFFIX=""
			for OUTFILE in conftest.exe conftest conftest.*; do
				if [ -f $OUTFILE ]; then
					case $OUTFILE in
					*.c | *.cc | *.m | *.o | *.obj | *.bb | *.bbg | *.d | *.pdb | *.tds | *.xcoff | *.dSYM | *.xSYM )
						;;
					*.* )
						EXECSUFFIX=`expr "$OUTFILE" : '[^.]*\(\..*\)'`
						break ;;
					* )
						break ;;
					esac;
			    fi
			done
			if [ "$EXECSUFFIX" != "" ]; then
				echo "yes (it outputs $EXECSUFFIX files)"
				echo "yes (it outputs $EXECSUFFIX files)" >> config.log
			else
				echo "yes"
				echo "yes" >> config.log
			fi
echo "#ifndef EXECSUFFIX" > $BLD/config/execsuffix.h
echo "#define EXECSUFFIX \"$EXECSUFFIX\"" >> $BLD/config/execsuffix.h
echo "#endif" >> $BLD/config/execsuffix.h
echo "hdefs[\"EXECSUFFIX\"] = \"$EXECSUFFIX\"" >>configure.lua
		else
			echo "yes"
			echo "yes" >> config.log
		fi
	fi
	rm -f conftest.c conftest$EXECSUFFIX
	TEST_CFLAGS=""
fi
if [ "${HAVE_CC}" = "yes" ]; then
$ECHO_N "cc: checking for compiler warning options..."
$ECHO_N "cc: checking for compiler warning options..." >> config.log
MK_COMPILE_STATUS="OK"
cat << EOT > conftest.c
int main(int argc, char *argv[]) { return (0); }

EOT
echo "$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o $testdir/conftest conftest.c " >>config.log
$CC $CFLAGS $TEST_CFLAGS -Wall -Werror -o $testdir/conftest conftest.c  2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	MK_COMPILE_STATUS="FAIL($?)"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_CC_WARNINGS="yes"
echo "#ifndef HAVE_CC_WARNINGS" > $BLD/config/have_cc_warnings.h
echo "#define HAVE_CC_WARNINGS \"$HAVE_CC_WARNINGS\"" >> $BLD/config/have_cc_warnings.h
echo "#endif" >> $BLD/config/have_cc_warnings.h
echo "hdefs[\"HAVE_CC_WARNINGS\"] = \"$HAVE_CC_WARNINGS\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_CC_WARNINGS="no"
echo "#undef HAVE_CC_WARNINGS" >$BLD/config/have_cc_warnings.h
echo "hdefs[\"HAVE_CC_WARNINGS\"] = nil" >>configure.lua
fi;
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_CC_WARNINGS}" = "yes" ]; then
TEST_CFLAGS="-Wall -Werror"
fi;
$ECHO_N "cc: checking for long double..."
$ECHO_N "cc: checking for long double..." >> config.log
MK_COMPILE_STATUS="OK"
cat << EOT > conftest.c
int
main(int argc, char *argv[])
{
	long double ld = 0.1;

	return (ld == 1.0);
}

EOT
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c" >>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	MK_COMPILE_STATUS="FAIL($?)"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_LONG_DOUBLE="yes"
echo "#ifndef HAVE_LONG_DOUBLE" > $BLD/config/have_long_double.h
echo "#define HAVE_LONG_DOUBLE \"$HAVE_LONG_DOUBLE\"" >> $BLD/config/have_long_double.h
echo "#endif" >> $BLD/config/have_long_double.h
echo "hdefs[\"HAVE_LONG_DOUBLE\"] = \"$HAVE_LONG_DOUBLE\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_LONG_DOUBLE="no"
echo "#undef HAVE_LONG_DOUBLE" >$BLD/config/have_long_double.h
echo "hdefs[\"HAVE_LONG_DOUBLE\"] = nil" >>configure.lua
fi;
rm -f conftest.c $testdir/conftest$EXECSUFFIX
$ECHO_N "cc: checking for long long..."
$ECHO_N "cc: checking for long long..." >> config.log
MK_COMPILE_STATUS="OK"
cat << EOT > conftest.c
int
main(int argc, char *argv[])
{
	long long ll = -1;
	unsigned long long ull = 1;

	return (ll != -1 || ull != 1);
}

EOT
echo "$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c" >>config.log
$CC $CFLAGS $TEST_CFLAGS -o $testdir/conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	MK_COMPILE_STATUS="FAIL($?)"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_LONG_LONG="yes"
echo "#ifndef HAVE_LONG_LONG" > $BLD/config/have_long_long.h
echo "#define HAVE_LONG_LONG \"$HAVE_LONG_LONG\"" >> $BLD/config/have_long_long.h
echo "#endif" >> $BLD/config/have_long_long.h
echo "hdefs[\"HAVE_LONG_LONG\"] = \"$HAVE_LONG_LONG\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_LONG_LONG="no"
echo "#undef HAVE_LONG_LONG" >$BLD/config/have_long_long.h
echo "hdefs[\"HAVE_LONG_LONG\"] = nil" >>configure.lua
fi;
rm -f conftest.c $testdir/conftest$EXECSUFFIX
$ECHO_N "cc: checking for cygwin environment..."
$ECHO_N "cc: checking for cygwin environment..." >> config.log
MK_COMPILE_STATUS="OK"
cat << EOT > conftest.c
#include <sys/types.h>
#include <sys/stat.h>
#include <windows.h>

int
main(int argc, char *argv[]) {
	struct stat sb;
	DWORD rv;
	rv = GetFileAttributes("foo");
	stat("foo", &sb);
	return (0);
}

EOT
echo "$CC $CFLAGS $TEST_CFLAGS -mcygwin -o $testdir/conftest conftest.c" >>config.log
$CC $CFLAGS $TEST_CFLAGS -mcygwin -o $testdir/conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	MK_COMPILE_STATUS="FAIL($?)"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_CYGWIN="yes"
echo "#ifndef HAVE_CYGWIN" > $BLD/config/have_cygwin.h
echo "#define HAVE_CYGWIN \"$HAVE_CYGWIN\"" >> $BLD/config/have_cygwin.h
echo "#endif" >> $BLD/config/have_cygwin.h
echo "hdefs[\"HAVE_CYGWIN\"] = \"$HAVE_CYGWIN\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_CYGWIN="no"
echo "#undef HAVE_CYGWIN" >$BLD/config/have_cygwin.h
echo "hdefs[\"HAVE_CYGWIN\"] = nil" >>configure.lua
fi;
rm -f conftest.c $testdir/conftest
$ECHO_N "cc: checking for -mwindows option..."
$ECHO_N "cc: checking for -mwindows option..." >> config.log
MK_COMPILE_STATUS="OK"
cat << EOT > conftest.c
#include <windows.h>
int
main(int argc, char *argv[]) {
	return GetFileAttributes("foo") ? 0 : 1;
}

EOT
echo "$CC $CFLAGS $TEST_CFLAGS -mwindows -o $testdir/conftest conftest.c" >>config.log
$CC $CFLAGS $TEST_CFLAGS -mwindows -o $testdir/conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	MK_COMPILE_STATUS="FAIL($?)"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_CC_MWINDOWS="yes"
echo "#ifndef HAVE_CC_MWINDOWS" > $BLD/config/have_cc_mwindows.h
echo "#define HAVE_CC_MWINDOWS \"$HAVE_CC_MWINDOWS\"" >> $BLD/config/have_cc_mwindows.h
echo "#endif" >> $BLD/config/have_cc_mwindows.h
echo "hdefs[\"HAVE_CC_MWINDOWS\"] = \"$HAVE_CC_MWINDOWS\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_CC_MWINDOWS="no"
echo "#undef HAVE_CC_MWINDOWS" >$BLD/config/have_cc_mwindows.h
echo "hdefs[\"HAVE_CC_MWINDOWS\"] = nil" >>configure.lua
fi;
rm -f conftest.c $testdir/conftest
if [ "${HAVE_CC_MWINDOWS}" = "yes" ]; then
PROG_GUI_FLAGS="-mwindows"
else
PROG_GUI_FLAGS=""
fi;
$ECHO_N "cc: checking for -mconsole option..."
$ECHO_N "cc: checking for -mconsole option..." >> config.log
MK_COMPILE_STATUS="OK"
cat << EOT > conftest.c
#include <windows.h>
int
main(int argc, char *argv[]) {
	return GetFileAttributes("foo") ? 0 : 1;
}

EOT
echo "$CC $CFLAGS $TEST_CFLAGS -mconsole -o $testdir/conftest conftest.c" >>config.log
$CC $CFLAGS $TEST_CFLAGS -mconsole -o $testdir/conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	MK_COMPILE_STATUS="FAIL($?)"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_CC_MCONSOLE="yes"
echo "#ifndef HAVE_CC_MCONSOLE" > $BLD/config/have_cc_mconsole.h
echo "#define HAVE_CC_MCONSOLE \"$HAVE_CC_MCONSOLE\"" >> $BLD/config/have_cc_mconsole.h
echo "#endif" >> $BLD/config/have_cc_mconsole.h
echo "hdefs[\"HAVE_CC_MCONSOLE\"] = \"$HAVE_CC_MCONSOLE\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_CC_MCONSOLE="no"
echo "#undef HAVE_CC_MCONSOLE" >$BLD/config/have_cc_mconsole.h
echo "hdefs[\"HAVE_CC_MCONSOLE\"] = nil" >>configure.lua
fi;
rm -f conftest.c $testdir/conftest
if [ "${HAVE_CC_MCONSOLE}" = "yes" ]; then
PROG_CLI_FLAGS="-mconsole"
else
PROG_CLI_FLAGS=""
fi;
case "${host}" in
*-*-cygwin* | *-*-mingw32*)
$ECHO_N "cc: checking for linker -no-undefined option..."
$ECHO_N "cc: checking for linker -no-undefined option..." >> config.log
MK_COMPILE_STATUS="OK"
cat << EOT > conftest.c
int main(int argc, char *argv[]) { return (0); }

EOT
echo "$CC $CFLAGS $TEST_CFLAGS -Wl,--no-undefined -o $testdir/conftest conftest.c" >>config.log
$CC $CFLAGS $TEST_CFLAGS -Wl,--no-undefined -o $testdir/conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	MK_COMPILE_STATUS="FAIL($?)"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_LD_NO_UNDEFINED="yes"
echo "#ifndef HAVE_LD_NO_UNDEFINED" > $BLD/config/have_ld_no_undefined.h
echo "#define HAVE_LD_NO_UNDEFINED \"$HAVE_LD_NO_UNDEFINED\"" >> $BLD/config/have_ld_no_undefined.h
echo "#endif" >> $BLD/config/have_ld_no_undefined.h
echo "hdefs[\"HAVE_LD_NO_UNDEFINED\"] = \"$HAVE_LD_NO_UNDEFINED\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_LD_NO_UNDEFINED="no"
echo "#undef HAVE_LD_NO_UNDEFINED" >$BLD/config/have_ld_no_undefined.h
echo "hdefs[\"HAVE_LD_NO_UNDEFINED\"] = nil" >>configure.lua
fi;
rm -f conftest.c $testdir/conftest
if [ "${HAVE_LD_NO_UNDEFINED}" = "yes" ]; then
LIBTOOLOPTS_SHARED="${LIBTOOLOPTS_SHARED} -no-undefined -Wl,--no-undefined"
fi;
$ECHO_N "cc: checking for linker -static-libgcc option..."
$ECHO_N "cc: checking for linker -static-libgcc option..." >> config.log
MK_COMPILE_STATUS="OK"
cat << EOT > conftest.c
int main(int argc, char *argv[]) { return (0); }

EOT
echo "$CC $CFLAGS $TEST_CFLAGS -static-libgcc -o $testdir/conftest conftest.c" >>config.log
$CC $CFLAGS $TEST_CFLAGS -static-libgcc -o $testdir/conftest conftest.c 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	MK_COMPILE_STATUS="FAIL($?)"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_LD_STATIC_LIBGCC="yes"
echo "#ifndef HAVE_LD_STATIC_LIBGCC" > $BLD/config/have_ld_static_libgcc.h
echo "#define HAVE_LD_STATIC_LIBGCC \"$HAVE_LD_STATIC_LIBGCC\"" >> $BLD/config/have_ld_static_libgcc.h
echo "#endif" >> $BLD/config/have_ld_static_libgcc.h
echo "hdefs[\"HAVE_LD_STATIC_LIBGCC\"] = \"$HAVE_LD_STATIC_LIBGCC\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_LD_STATIC_LIBGCC="no"
echo "#undef HAVE_LD_STATIC_LIBGCC" >$BLD/config/have_ld_static_libgcc.h
echo "hdefs[\"HAVE_LD_STATIC_LIBGCC\"] = nil" >>configure.lua
fi;
rm -f conftest.c $testdir/conftest
if [ "${HAVE_LD_STATIC_LIBGCC}" = "yes" ]; then
LIBTOOLOPTS_SHARED="${LIBTOOLOPTS_SHARED} -XCClinker -static-libgcc"
fi;
;;
esac
fi;
if [ "${HAVE_CC}" != "yes" ]; then
echo "* "
echo "* " >> config.log
echo "* This software requires cc installed on your system."
echo "* This software requires cc installed on your system." >> config.log
echo "* "
echo "* " >> config.log
echo "configure failed!"
exit 1
fi;
$ECHO_N "checking for Agar (http://libagar.org/)..."
$ECHO_N "checking for Agar (http://libagar.org/)..." >> config.log
MK_EXEC_FOUND="No"

if [ "" != "" ]; then
	if [ -e "/bin/agar-config" ]; then
		AGAR_VERSION=`/bin/agar-config --version`
		MK_EXEC_FOUND="Yes"
	fi
else
	AGAR_VERSION=""
	for path in `echo $PATH | sed 's/:/ /g'`; do
		if [ -e "${path}/agar-config" ]; then
			AGAR_VERSION=`${path}/agar-config --version`
			MK_EXEC_FOUND="Yes"
			break
		fi
	done
fi
if [ "${AGAR_VERSION}" != "" ]; then
if [ "" != "" ]; then
echo "yes ($AGAR_VERSION in )"
echo "yes ($AGAR_VERSION in )" >> config.log
else
echo "yes ($AGAR_VERSION)"
echo "yes ($AGAR_VERSION)" >> config.log
fi;
MK_VERSION_MAJOR=`echo "$AGAR_VERSION" |sed 's/\([0-9]*\).\([0-9]*\).\([0-9]*\).*/\1/'`;
MK_VERSION_MINOR=`echo "$AGAR_VERSION" |sed 's/\([0-9]*\).\([0-9]*\).\([0-9]*\).*/\2/'`;
MK_VERSION_MICRO=`echo "$AGAR_VERSION" |sed 's/\([0-9]*\).\([0-9]*\).\([0-9]*\).*/\3/'`;
MK_VERSION_OK="no"
if [ $MK_VERSION_MAJOR -gt 1 ]; then
	MK_VERSION_OK="yes";
elif [ $MK_VERSION_MAJOR -eq 1 ]; then
	if [ "$MK_VERSION_MINOR" = "" ]; then
		MK_VERSION_OK="yes"
	else
		if [ $MK_VERSION_MINOR -gt 5 ]; then
			MK_VERSION_OK="yes";
		elif [ $MK_VERSION_MINOR -eq 5 ]; then
			if [ "$MK_VERSION_MICRO" = "" ]; then
				MK_VERSION_OK="yes"
			else
				if [ $MK_VERSION_MICRO -ge 0 ]; then
					MK_VERSION_OK="yes"
				fi
			fi
		fi
	fi
fi
if [ "${MK_VERSION_OK}" = "no" ]; then
echo "*"
echo "*" >> config.log
echo "* Minimum required version is 1.5.0 (found $AGAR_VERSION); skipping."
echo "* Minimum required version is 1.5.0 (found $AGAR_VERSION); skipping." >> config.log
echo "*"
echo "*" >> config.log
fi;
else
if [ "" != "" ]; then
echo "no (not in )"
echo "no (not in )" >> config.log
else
echo "no"
echo "no" >> config.log
fi;
MK_VERSION_OK="no"
fi;
if [ "${MK_VERSION_OK}" = "yes" ]; then
$ECHO_N "checking whether Agar works..."
$ECHO_N "checking whether Agar works..." >> config.log
MK_EXEC_FOUND="No"

if [ "" != "" ]; then
	if [ -e "/bin/agar-config" ]; then
		AGAR_CFLAGS=`/bin/agar-config --cflags`
		MK_EXEC_FOUND="Yes"
	fi
else
	AGAR_CFLAGS=""
	for path in `echo $PATH | sed 's/:/ /g'`; do
		if [ -e "${path}/agar-config" ]; then
			AGAR_CFLAGS=`${path}/agar-config --cflags`
			MK_EXEC_FOUND="Yes"
			break
		fi
	done
fi
MK_EXEC_FOUND="No"

if [ "" != "" ]; then
	if [ -e "/bin/agar-config" ]; then
		AGAR_LIBS=`/bin/agar-config --libs`
		MK_EXEC_FOUND="Yes"
	fi
else
	AGAR_LIBS=""
	for path in `echo $PATH | sed 's/:/ /g'`; do
		if [ -e "${path}/agar-config" ]; then
			AGAR_LIBS=`${path}/agar-config --libs`
			MK_EXEC_FOUND="Yes"
			break
		fi
	done
fi
MK_COMPILE_STATUS="OK"
cat << EOT > conftest.c
#include <agar/core.h>
#include <agar/gui.h>

int
main(int argc, char *argv[])
{
	AG_InitCore("conf-test", 0);
	AG_InitGraphics(NULL);
	AG_EventLoop();
	AG_Quit();
	return (0);
}

EOT
echo "$CC $CFLAGS $TEST_CFLAGS ${AGAR_CFLAGS} -o $testdir/conftest conftest.c ${AGAR_LIBS}" >>config.log
$CC $CFLAGS $TEST_CFLAGS ${AGAR_CFLAGS} -o $testdir/conftest conftest.c ${AGAR_LIBS} 2>>config.log
if [ $? != 0 ]; then
	echo "-> failed ($?)" >> config.log
	MK_COMPILE_STATUS="FAIL($?)"
fi
if [ "${MK_COMPILE_STATUS}" = "OK" ]; then
echo "yes"
echo "yes" >> config.log
HAVE_AGAR="yes"
echo "#ifndef HAVE_AGAR" > $BLD/config/have_agar.h
echo "#define HAVE_AGAR \"$HAVE_AGAR\"" >> $BLD/config/have_agar.h
echo "#endif" >> $BLD/config/have_agar.h
echo "hdefs[\"HAVE_AGAR\"] = \"$HAVE_AGAR\"" >>configure.lua
else
echo "no"
echo "no" >> config.log
HAVE_AGAR="no"
echo "#undef HAVE_AGAR" >$BLD/config/have_agar.h
echo "hdefs[\"HAVE_AGAR\"] = nil" >>configure.lua
fi;
rm -f conftest.c $testdir/conftest$EXECSUFFIX
if [ "${HAVE_AGAR}" = "yes" ]; then
echo "#ifndef AGAR_CFLAGS" > $BLD/config/agar_cflags.h
echo "#define AGAR_CFLAGS \"$AGAR_CFLAGS\"" >> $BLD/config/agar_cflags.h
echo "#endif" >> $BLD/config/agar_cflags.h
echo "hdefs[\"AGAR_CFLAGS\"] = \"$AGAR_CFLAGS\"" >>configure.lua
echo "#ifndef AGAR_LIBS" > $BLD/config/agar_libs.h
echo "#define AGAR_LIBS \"$AGAR_LIBS\"" >> $BLD/config/agar_libs.h
echo "#endif" >> $BLD/config/agar_libs.h
echo "hdefs[\"AGAR_LIBS\"] = \"$AGAR_LIBS\"" >>configure.lua
else
echo "#undef AGAR_CFLAGS" >$BLD/config/agar_cflags.h
echo "hdefs[\"AGAR_CFLAGS\"] = nil" >>configure.lua
AGAR_CFLAGS=""
echo "#undef AGAR_LIBS" >$BLD/config/agar_libs.h
echo "hdefs[\"AGAR_LIBS\"] = nil" >>configure.lua
AGAR_LIBS=""
fi;
else
echo "#undef AGAR_CFLAGS" >$BLD/config/agar_cflags.h
echo "hdefs[\"AGAR_CFLAGS\"] = nil" >>configure.lua
echo "#undef AGAR_LIBS" >$BLD/config/agar_libs.h
echo "hdefs[\"AGAR_LIBS\"] = nil" >>configure.lua
fi;
if [ "${HAVE_AGAR}" != "yes" ]; then
echo "* "
echo "* " >> config.log
echo "* This software requires agar installed on your system."
echo "* This software requires agar installed on your system." >> config.log
echo "* "
echo "* " >> config.log
echo "configure failed!"
exit 1
fi;
if [ "${MK_VERSION_OK}" != "yes" ]; then
echo "* "
echo "* " >> config.log
echo "* This software requires agar version >= 1.5.0,"
echo "* This software requires agar version >= 1.5.0," >> config.log
echo "* please upgrade and try again."
echo "* please upgrade and try again." >> config.log
echo "* "
echo "* " >> config.log
echo "configure failed!"
exit 1
fi;
CFLAGS="$CFLAGS -I$SRC"
CXXFLAGS="$CXXFLAGS -I$SRC"
CFLAGS="$CFLAGS -D_USE_AGAR_STD"
CXXFLAGS="$CXXFLAGS -D_USE_AGAR_STD"
CFLAGS="$CFLAGS -D_USE_AGAR_QUEUE"
CXXFLAGS="$CXXFLAGS -D_USE_AGAR_QUEUE"
CFLAGS="$CFLAGS -D_USE_AGAR_TYPES"
CXXFLAGS="$CXXFLAGS -D_USE_AGAR_TYPES"
if [ "${enable_warnings}" = "yes" ]
 then
CFLAGS="$CFLAGS -Wall"
CXXFLAGS="$CXXFLAGS -Wall"
CFLAGS="$CFLAGS -Werror"
CXXFLAGS="$CXXFLAGS -Werror"
CFLAGS="$CFLAGS -Wmissing-prototypes"
CXXFLAGS="$CXXFLAGS -Wmissing-prototypes"
fi
CFLAGS="$CFLAGS -I$BLD"
CXXFLAGS="$CXXFLAGS -I$BLD"
echo "CC=$CC" >>Makefile.config
echo "mdefs[\"CC\"] = \"$CC\"" >>configure.lua
echo "LOCALEDIR=$LOCALEDIR" >>Makefile.config
echo "mdefs[\"LOCALEDIR\"] = \"$LOCALEDIR\"" >>configure.lua
echo "LIBEXECDIR=$LIBEXECDIR" >>Makefile.config
echo "mdefs[\"LIBEXECDIR\"] = \"$LIBEXECDIR\"" >>configure.lua
echo "LIBDIR=$LIBDIR" >>Makefile.config
echo "mdefs[\"LIBDIR\"] = \"$LIBDIR\"" >>configure.lua
echo "EXECSUFFIX=$EXECSUFFIX" >>Makefile.config
echo "mdefs[\"EXECSUFFIX\"] = \"$EXECSUFFIX\"" >>configure.lua
echo "CXXFLAGS=$CXXFLAGS" >>Makefile.config
echo "mdefs[\"CXXFLAGS\"] = \"$CXXFLAGS\"" >>configure.lua
echo "AGAR_CFLAGS=$AGAR_CFLAGS" >>Makefile.config
echo "mdefs[\"AGAR_CFLAGS\"] = \"$AGAR_CFLAGS\"" >>configure.lua
echo "HAVE_GETTEXT=$HAVE_GETTEXT" >>Makefile.config
echo "mdefs[\"HAVE_GETTEXT\"] = \"$HAVE_GETTEXT\"" >>configure.lua
echo "HAVE_LD_STATIC_LIBGCC=$HAVE_LD_STATIC_LIBGCC" >>Makefile.config
echo "mdefs[\"HAVE_LD_STATIC_LIBGCC\"] = \"$HAVE_LD_STATIC_LIBGCC\"" >>configure.lua
echo "HAVE_CC_MWINDOWS=$HAVE_CC_MWINDOWS" >>Makefile.config
echo "mdefs[\"HAVE_CC_MWINDOWS\"] = \"$HAVE_CC_MWINDOWS\"" >>configure.lua
echo "DATADIR=$DATADIR" >>Makefile.config
echo "mdefs[\"DATADIR\"] = \"$DATADIR\"" >>configure.lua
echo "PROG_CLI_FLAGS=$PROG_CLI_FLAGS" >>Makefile.config
echo "mdefs[\"PROG_CLI_FLAGS\"] = \"$PROG_CLI_FLAGS\"" >>configure.lua
echo "BINDIR=$BINDIR" >>Makefile.config
echo "mdefs[\"BINDIR\"] = \"$BINDIR\"" >>configure.lua
echo "HAVE_CC_WARNINGS=$HAVE_CC_WARNINGS" >>Makefile.config
echo "mdefs[\"HAVE_CC_WARNINGS\"] = \"$HAVE_CC_WARNINGS\"" >>configure.lua
echo "HAVE_CC_MCONSOLE=$HAVE_CC_MCONSOLE" >>Makefile.config
echo "mdefs[\"HAVE_CC_MCONSOLE\"] = \"$HAVE_CC_MCONSOLE\"" >>configure.lua
echo "ENABLE_NLS=$ENABLE_NLS" >>Makefile.config
echo "mdefs[\"ENABLE_NLS\"] = \"$ENABLE_NLS\"" >>configure.lua
echo "HAVE_AGAR=$HAVE_AGAR" >>Makefile.config
echo "mdefs[\"HAVE_AGAR\"] = \"$HAVE_AGAR\"" >>configure.lua
echo "CFLAGS=$CFLAGS" >>Makefile.config
echo "mdefs[\"CFLAGS\"] = \"$CFLAGS\"" >>configure.lua
echo "HAVE_LD_NO_UNDEFINED=$HAVE_LD_NO_UNDEFINED" >>Makefile.config
echo "mdefs[\"HAVE_LD_NO_UNDEFINED\"] = \"$HAVE_LD_NO_UNDEFINED\"" >>configure.lua
echo "MANDIR=$MANDIR" >>Makefile.config
echo "mdefs[\"MANDIR\"] = \"$MANDIR\"" >>configure.lua
echo "LIBTOOLOPTS_SHARED=$LIBTOOLOPTS_SHARED" >>Makefile.config
echo "mdefs[\"LIBTOOLOPTS_SHARED\"] = \"$LIBTOOLOPTS_SHARED\"" >>configure.lua
echo "MODULEDIR=$MODULEDIR" >>Makefile.config
echo "mdefs[\"MODULEDIR\"] = \"$MODULEDIR\"" >>configure.lua
echo "PROG_GUI_FLAGS=$PROG_GUI_FLAGS" >>Makefile.config
echo "mdefs[\"PROG_GUI_FLAGS\"] = \"$PROG_GUI_FLAGS\"" >>configure.lua
echo "HAVE_CYGWIN=$HAVE_CYGWIN" >>Makefile.config
echo "mdefs[\"HAVE_CYGWIN\"] = \"$HAVE_CYGWIN\"" >>configure.lua
echo "STATEDIR=$STATEDIR" >>Makefile.config
echo "mdefs[\"STATEDIR\"] = \"$STATEDIR\"" >>configure.lua
echo "SYSCONFDIR=$SYSCONFDIR" >>Makefile.config
echo "mdefs[\"SYSCONFDIR\"] = \"$SYSCONFDIR\"" >>configure.lua
echo "AGAR_LIBS=$AGAR_LIBS" >>Makefile.config
echo "mdefs[\"AGAR_LIBS\"] = \"$AGAR_LIBS\"" >>configure.lua
if [ "${srcdir}" != "" ]; then
	$ECHO_N "* Source is in ${srcdir}. Generating Makefiles..."
	${PERL} ${SRC}/mk/mkconcurrent.pl ${SRC}
	if [ $? != 0 ]; then
		exit 1;
	fi
	echo "done"
fi
echo "*"
echo "* Configuration successful. Use \"make depend all\" to compile,"
echo "* and \"make install\" to install this software under $PREFIX."
echo "*"
